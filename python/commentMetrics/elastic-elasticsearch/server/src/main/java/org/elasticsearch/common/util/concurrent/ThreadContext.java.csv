# id;timestamp;commentText;codeText;commentWords;codeWords
ThreadContext -> public void markAsSystemContext();1524684173;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1528762805;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1531179852;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1539615817;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1540583181;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1543415307;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1547743595;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1547817605;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public void markAsSystemContext();1548337164;Marks this thread context as an internal system context. This signals that actions in this context are issued_by the system itself rather than by a user action.;public void markAsSystemContext() {_        threadLocal.set(threadLocal.get().setSystemContext())__    };marks,this,thread,context,as,an,internal,system,context,this,signals,that,actions,in,this,context,are,issued,by,the,system,itself,rather,than,by,a,user,action;public,void,mark,as,system,context,thread,local,set,thread,local,get,set,system,context
ThreadContext -> public ThreadContext(Settings settings);1524684173;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1528762805;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1531179852;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1539615817;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1540583181;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1543415307;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1547743595;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1547817605;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public ThreadContext(Settings settings);1548337164;Creates a new ThreadContext instance_@param settings the settings to read the default request headers from;public ThreadContext(Settings settings) {_        Settings headers = DEFAULT_HEADERS_SETTING.get(settings)__        if (headers == null) {_            this.defaultHeader = Collections.emptyMap()__        } else {_            Map<String, String> defaultHeader = new HashMap<>()__            for (String key : headers.names()) {_                defaultHeader.put(key, headers.get(key))__            }_            this.defaultHeader = Collections.unmodifiableMap(defaultHeader)__        }_        threadLocal = new ContextThreadLocal()__        this.maxWarningHeaderCount = SETTING_HTTP_MAX_WARNING_HEADER_COUNT.get(settings)__        this.maxWarningHeaderSize = SETTING_HTTP_MAX_WARNING_HEADER_SIZE.get(settings).getBytes()__    };creates,a,new,thread,context,instance,param,settings,the,settings,to,read,the,default,request,headers,from;public,thread,context,settings,settings,settings,headers,get,settings,if,headers,null,this,default,header,collections,empty,map,else,map,string,string,default,header,new,hash,map,for,string,key,headers,names,default,header,put,key,headers,get,key,this,default,header,collections,unmodifiable,map,default,header,thread,local,new,context,thread,local,this,max,warning,header,count,get,settings,this,max,warning,header,size,get,settings,get,bytes
ThreadContext -> public void addResponseHeader(final String key, final String value);1524684173;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1528762805;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1531179852;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1539615817;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1540583181;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1543415307;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1547743595;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1547817605;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void addResponseHeader(final String key, final String value);1548337164;Add the {@code value} for the specified {@code key} Any duplicate {@code value} is ignored.__@param key         the header name_@param value       the header value;public void addResponseHeader(final String key, final String value) {_        addResponseHeader(key, value, v -> v)__    };add,the,code,value,for,the,specified,code,key,any,duplicate,code,value,is,ignored,param,key,the,header,name,param,value,the,header,value;public,void,add,response,header,final,string,key,final,string,value,add,response,header,key,value,v,v
ThreadContext -> public void putHeader(Map<String, String> header);1524684173;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1528762805;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1531179852;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1539615817;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1540583181;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1543415307;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1547743595;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1547817605;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public void putHeader(Map<String, String> header);1548337164;Puts all of the given headers into this context;public void putHeader(Map<String, String> header) {_        threadLocal.set(threadLocal.get().putHeaders(header))__    };puts,all,of,the,given,headers,into,this,context;public,void,put,header,map,string,string,header,thread,local,set,thread,local,get,put,headers,header
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1524684173;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1528762805;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1531179852;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1539615817;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1540583181;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1543415307;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1547743595;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1547817605;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, List<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(entry.getValue()))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,list,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,list,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, List<String>> getResponseHeaders();1548337164;Get a copy of all <em>response</em> headers.__@return Never {@code null}.;public Map<String, List<String>> getResponseHeaders() {_        Map<String, Set<String>> responseHeaders = threadLocal.get().responseHeaders__        HashMap<String, List<String>> map = new HashMap<>(responseHeaders.size())___        for (Map.Entry<String, Set<String>> entry : responseHeaders.entrySet()) {_            map.put(entry.getKey(), Collections.unmodifiableList(new ArrayList<>(entry.getValue())))__        }__        return Collections.unmodifiableMap(map)__    };get,a,copy,of,all,em,response,em,headers,return,never,code,null;public,map,string,list,string,get,response,headers,map,string,set,string,response,headers,thread,local,get,response,headers,hash,map,string,list,string,map,new,hash,map,response,headers,size,for,map,entry,string,set,string,entry,response,headers,entry,set,map,put,entry,get,key,collections,unmodifiable,list,new,array,list,entry,get,value,return,collections,unmodifiable,map,map
ThreadContext -> public void putTransient(String key, Object value);1524684173;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1528762805;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1531179852;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1539615817;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1540583181;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1543415307;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1547743595;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1547817605;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public void putTransient(String key, Object value);1548337164;Puts a transient header object into this context;public void putTransient(String key, Object value) {_        threadLocal.set(threadLocal.get().putTransient(key, value))__    };puts,a,transient,header,object,into,this,context;public,void,put,transient,string,key,object,value,thread,local,set,thread,local,get,put,transient,key,value
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1524684173;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1528762805;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1531179852;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1539615817;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1540583181;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1543415307;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1547743595;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1547817605;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public StoredContext newStoredContext(boolean preserveResponseHeaders);1548337164;Just like {@link #stashContext()} but no default context is set._@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved.;public StoredContext newStoredContext(boolean preserveResponseHeaders) {_        final ThreadContextStruct context = threadLocal.get()__        return ()  -> {_            if (preserveResponseHeaders && threadLocal.get() != context) {_                threadLocal.set(context.putResponseHeaders(threadLocal.get().responseHeaders))__            } else {_                threadLocal.set(context)__            }_        }__    };just,like,link,stash,context,but,no,default,context,is,set,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved;public,stored,context,new,stored,context,boolean,preserve,response,headers,final,thread,context,struct,context,thread,local,get,return,if,preserve,response,headers,thread,local,get,context,thread,local,set,context,put,response,headers,thread,local,get,response,headers,else,thread,local,set,context
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1524684173;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1528762805;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1531179852;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1539615817;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1540583181;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1543415307;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1547743595;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1547817605;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> public void copyHeaders(Iterable<Map.Entry<String, String>> headers);1548337164;Copies all header key, value pairs into the current context;public void copyHeaders(Iterable<Map.Entry<String, String>> headers) {_        threadLocal.set(threadLocal.get().copyHeaders(headers))__    };copies,all,header,key,value,pairs,into,the,current,context;public,void,copy,headers,iterable,map,entry,string,string,headers,thread,local,set,thread,local,get,copy,headers,headers
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1524684173;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1528762805;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1531179852;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1539615817;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1540583181;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1543415307;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1547743595;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1547817605;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> ThreadContextStruct -> private ThreadContextStruct();1548337164;This represents the default context and it should only ever be called by {@link #DEFAULT_CONTEXT}.;private ThreadContextStruct() {_            this(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), false)__        };this,represents,the,default,context,and,it,should,only,ever,be,called,by,link;private,thread,context,struct,this,collections,empty,map,collections,empty,map,collections,empty,map,false
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1524684173;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1528762805;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1531179852;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1539615817;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1540583181;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1543415307;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1547743595;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1547817605;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders);1548337164;Returns a supplier that gathers a {@link #newStoredContext(boolean)} and restores it once the_returned supplier is invoked. The context returned from the supplier is a stored version of the_suppliers callers context that should be restored once the originally gathered context is not needed anymore._For instance this method should be used like this:__<pre>_Supplier&lt_ThreadContext.StoredContext&gt_ restorable = context.newRestorableContext(true)__new Thread() {_public void run() {_try (ThreadContext.StoredContext ctx = restorable.get()) {_// execute with the parents context and restore the threads context afterwards____}.start()__</pre>__@param preserveResponseHeaders if set to <code>true</code> the response headers of the restore thread will be preserved._@return a restorable context supplier;public Supplier<StoredContext> newRestorableContext(boolean preserveResponseHeaders) {_        return wrapRestorable(newStoredContext(preserveResponseHeaders))__    };returns,a,supplier,that,gathers,a,link,new,stored,context,boolean,and,restores,it,once,the,returned,supplier,is,invoked,the,context,returned,from,the,supplier,is,a,stored,version,of,the,suppliers,callers,context,that,should,be,restored,once,the,originally,gathered,context,is,not,needed,anymore,for,instance,this,method,should,be,used,like,this,pre,supplier,lt,thread,context,stored,context,gt,restorable,context,new,restorable,context,true,new,thread,public,void,run,try,thread,context,stored,context,ctx,restorable,get,execute,with,the,parents,context,and,restore,the,threads,context,afterwards,start,pre,param,preserve,response,headers,if,set,to,code,true,code,the,response,headers,of,the,restore,thread,will,be,preserved,return,a,restorable,context,supplier;public,supplier,stored,context,new,restorable,context,boolean,preserve,response,headers,return,wrap,restorable,new,stored,context,preserve,response,headers
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1524684173;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1528762805;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1531179852;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1539615817;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1540583181;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1543415307;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1547743595;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1547817605;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Supplier<StoredContext> wrapRestorable(StoredContext storedContext);1548337164;Same as {@link #newRestorableContext(boolean)} but wraps an existing context to restore._@param storedContext the context to restore;public Supplier<StoredContext> wrapRestorable(StoredContext storedContext) {_        return () -> {_            StoredContext context = newStoredContext(false)__            storedContext.restore()__            return context__        }__    };same,as,link,new,restorable,context,boolean,but,wraps,an,existing,context,to,restore,param,stored,context,the,context,to,restore;public,supplier,stored,context,wrap,restorable,stored,context,stored,context,return,stored,context,context,new,stored,context,false,stored,context,restore,return,context
ThreadContext -> public Map<String, String> getHeaders();1524684173;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1528762805;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1531179852;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1539615817;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1540583181;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1543415307;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1547743595;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1547817605;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public Map<String, String> getHeaders();1548337164;Returns all of the request contexts headers;public Map<String, String> getHeaders() {_        HashMap<String, String> map = new HashMap<>(defaultHeader)__        map.putAll(threadLocal.get().requestHeaders)__        return Collections.unmodifiableMap(map)__    };returns,all,of,the,request,contexts,headers;public,map,string,string,get,headers,hash,map,string,string,map,new,hash,map,default,header,map,put,all,thread,local,get,request,headers,return,collections,unmodifiable,map,map
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1524684173;Removes the current context and resets a new context that contains a merge of the current headers and the given headers. The removed context can be_restored when closing the returned {@link StoredContext}. The merge strategy is that headers that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1528762805;Removes the current context and resets a new context that contains a merge of the current headers and the given headers. The removed context can be_restored when closing the returned {@link StoredContext}. The merge strategy is that headers that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1531179852;Removes the current context and resets a new context that contains a merge of the current headers and the given headers. The removed context can be_restored when closing the returned {@link StoredContext}. The merge strategy is that headers that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1539615817;Removes the current context and resets a new context that contains a merge of the current headers and the given headers. The removed context can be_restored when closing the returned {@link StoredContext}. The merge strategy is that headers that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1540583181;Removes the current context and resets a new context that contains a merge of the current headers and the given headers._The removed context can be restored when closing the returned {@link StoredContext}. The merge strategy is that headers_that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1543415307;Removes the current context and resets a new context that contains a merge of the current headers and the given headers._The removed context can be restored when closing the returned {@link StoredContext}. The merge strategy is that headers_that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1547743595;Removes the current context and resets a new context that contains a merge of the current headers and the given headers._The removed context can be restored when closing the returned {@link StoredContext}. The merge strategy is that headers_that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1547817605;Removes the current context and resets a new context that contains a merge of the current headers and the given headers._The removed context can be restored when closing the returned {@link StoredContext}. The merge strategy is that headers_that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public StoredContext stashAndMergeHeaders(Map<String, String> headers);1548337164;Removes the current context and resets a new context that contains a merge of the current headers and the given headers._The removed context can be restored when closing the returned {@link StoredContext}. The merge strategy is that headers_that are already existing are preserved unless they are defaults.;public StoredContext stashAndMergeHeaders(Map<String, String> headers) {_        final ThreadContextStruct context = threadLocal.get()__        Map<String, String> newHeader = new HashMap<>(headers)__        newHeader.putAll(context.requestHeaders)__        threadLocal.set(DEFAULT_CONTEXT.putHeaders(newHeader))__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,new,context,that,contains,a,merge,of,the,current,headers,and,the,given,headers,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context,the,merge,strategy,is,that,headers,that,are,already,existing,are,preserved,unless,they,are,defaults;public,stored,context,stash,and,merge,headers,map,string,string,headers,final,thread,context,struct,context,thread,local,get,map,string,string,new,header,new,hash,map,headers,new,header,put,all,context,request,headers,thread,local,set,put,headers,new,header,return,thread,local,set,context
ThreadContext -> public boolean isSystemContext();1524684173;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1528762805;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1531179852;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1539615817;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1540583181;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1543415307;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1547743595;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1547817605;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public boolean isSystemContext();1548337164;Returns <code>true</code> iff this context is a system context;public boolean isSystemContext() {_        return threadLocal.get().isSystemContext__    };returns,code,true,code,iff,this,context,is,a,system,context;public,boolean,is,system,context,return,thread,local,get,is,system,context
ThreadContext -> public String getHeader(String key);1524684173;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1528762805;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1531179852;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1539615817;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1540583181;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1543415307;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1547743595;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1547817605;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> public String getHeader(String key);1548337164;Returns the header for the given key or <code>null</code> if not present;public String getHeader(String key) {_        String value = threadLocal.get().requestHeaders.get(key)__        if (value == null)  {_            return defaultHeader.get(key)__        }_        return value__    };returns,the,header,for,the,given,key,or,code,null,code,if,not,present;public,string,get,header,string,key,string,value,thread,local,get,request,headers,get,key,if,value,null,return,default,header,get,key,return,value
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1524684173;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1528762805;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1531179852;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1539615817;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1540583181;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1543415307;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1547743595;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1547817605;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> @SuppressWarnings("unchecked")      public <T> T getTransient(String key);1548337164;Returns a transient header object or <code>null</code> if there is no header for the given key;@SuppressWarnings("unchecked") _    public <T> T getTransient(String key) {_        return (T) threadLocal.get().transientHeaders.get(key)__    };returns,a,transient,header,object,or,code,null,code,if,there,is,no,header,for,the,given,key;suppress,warnings,unchecked,public,t,t,get,transient,string,key,return,t,thread,local,get,transient,headers,get,key
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1524684173;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1528762805;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1531179852;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1539615817;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1540583181;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1543415307;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1547743595;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1547817605;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public void readHeaders(StreamInput in) throws IOException;1548337164;Reads the headers from the stream into the current context;public void readHeaders(StreamInput in) throws IOException {_        threadLocal.set(new ThreadContext.ThreadContextStruct(in))__    };reads,the,headers,from,the,stream,into,the,current,context;public,void,read,headers,stream,input,in,throws,ioexception,thread,local,set,new,thread,context,thread,context,struct,in
ThreadContext -> public StoredContext stashWithOrigin(String origin);1543415307;Removes the current context and resets a default context marked with as_originating from the supplied string. The removed context can be_restored by closing the returned {@link StoredContext}. Callers should_be careful to save the current context before calling this method and_restore it any listeners, likely with_{@link ContextPreservingActionListener}. Use {@link OriginSettingClient}_which can be used to do this automatically._<p>_Without security the origin is ignored, but security uses it to authorize_actions that are made up of many sub-actions. These actions call_{@link #stashWithOrigin} before performing on behalf of a user that_should be allowed even if the user doesn't have permission to perform_those actions on their own._<p>_For example, a user might not have permission to GET from the tasks index_but the tasks API will perform a get on their behalf using this method_if it can't find the task in memory.;public StoredContext stashWithOrigin(String origin) {_        final ThreadContext.StoredContext storedContext = stashContext()__        putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };removes,the,current,context,and,resets,a,default,context,marked,with,as,originating,from,the,supplied,string,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context,callers,should,be,careful,to,save,the,current,context,before,calling,this,method,and,restore,it,any,listeners,likely,with,link,context,preserving,action,listener,use,link,origin,setting,client,which,can,be,used,to,do,this,automatically,p,without,security,the,origin,is,ignored,but,security,uses,it,to,authorize,actions,that,are,made,up,of,many,sub,actions,these,actions,call,link,stash,with,origin,before,performing,on,behalf,of,a,user,that,should,be,allowed,even,if,the,user,doesn,t,have,permission,to,perform,those,actions,on,their,own,p,for,example,a,user,might,not,have,permission,to,get,from,the,tasks,index,but,the,tasks,api,will,perform,a,get,on,their,behalf,using,this,method,if,it,can,t,find,the,task,in,memory;public,stored,context,stash,with,origin,string,origin,final,thread,context,stored,context,stored,context,stash,context,put,transient,origin,return,stored,context
ThreadContext -> public StoredContext stashWithOrigin(String origin);1547743595;Removes the current context and resets a default context marked with as_originating from the supplied string. The removed context can be_restored by closing the returned {@link StoredContext}. Callers should_be careful to save the current context before calling this method and_restore it any listeners, likely with_{@link ContextPreservingActionListener}. Use {@link OriginSettingClient}_which can be used to do this automatically._<p>_Without security the origin is ignored, but security uses it to authorize_actions that are made up of many sub-actions. These actions call_{@link #stashWithOrigin} before performing on behalf of a user that_should be allowed even if the user doesn't have permission to perform_those actions on their own._<p>_For example, a user might not have permission to GET from the tasks index_but the tasks API will perform a get on their behalf using this method_if it can't find the task in memory.;public StoredContext stashWithOrigin(String origin) {_        final ThreadContext.StoredContext storedContext = stashContext()__        putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };removes,the,current,context,and,resets,a,default,context,marked,with,as,originating,from,the,supplied,string,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context,callers,should,be,careful,to,save,the,current,context,before,calling,this,method,and,restore,it,any,listeners,likely,with,link,context,preserving,action,listener,use,link,origin,setting,client,which,can,be,used,to,do,this,automatically,p,without,security,the,origin,is,ignored,but,security,uses,it,to,authorize,actions,that,are,made,up,of,many,sub,actions,these,actions,call,link,stash,with,origin,before,performing,on,behalf,of,a,user,that,should,be,allowed,even,if,the,user,doesn,t,have,permission,to,perform,those,actions,on,their,own,p,for,example,a,user,might,not,have,permission,to,get,from,the,tasks,index,but,the,tasks,api,will,perform,a,get,on,their,behalf,using,this,method,if,it,can,t,find,the,task,in,memory;public,stored,context,stash,with,origin,string,origin,final,thread,context,stored,context,stored,context,stash,context,put,transient,origin,return,stored,context
ThreadContext -> public StoredContext stashWithOrigin(String origin);1547817605;Removes the current context and resets a default context marked with as_originating from the supplied string. The removed context can be_restored by closing the returned {@link StoredContext}. Callers should_be careful to save the current context before calling this method and_restore it any listeners, likely with_{@link ContextPreservingActionListener}. Use {@link OriginSettingClient}_which can be used to do this automatically._<p>_Without security the origin is ignored, but security uses it to authorize_actions that are made up of many sub-actions. These actions call_{@link #stashWithOrigin} before performing on behalf of a user that_should be allowed even if the user doesn't have permission to perform_those actions on their own._<p>_For example, a user might not have permission to GET from the tasks index_but the tasks API will perform a get on their behalf using this method_if it can't find the task in memory.;public StoredContext stashWithOrigin(String origin) {_        final ThreadContext.StoredContext storedContext = stashContext()__        putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };removes,the,current,context,and,resets,a,default,context,marked,with,as,originating,from,the,supplied,string,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context,callers,should,be,careful,to,save,the,current,context,before,calling,this,method,and,restore,it,any,listeners,likely,with,link,context,preserving,action,listener,use,link,origin,setting,client,which,can,be,used,to,do,this,automatically,p,without,security,the,origin,is,ignored,but,security,uses,it,to,authorize,actions,that,are,made,up,of,many,sub,actions,these,actions,call,link,stash,with,origin,before,performing,on,behalf,of,a,user,that,should,be,allowed,even,if,the,user,doesn,t,have,permission,to,perform,those,actions,on,their,own,p,for,example,a,user,might,not,have,permission,to,get,from,the,tasks,index,but,the,tasks,api,will,perform,a,get,on,their,behalf,using,this,method,if,it,can,t,find,the,task,in,memory;public,stored,context,stash,with,origin,string,origin,final,thread,context,stored,context,stored,context,stash,context,put,transient,origin,return,stored,context
ThreadContext -> public StoredContext stashWithOrigin(String origin);1548337164;Removes the current context and resets a default context marked with as_originating from the supplied string. The removed context can be_restored by closing the returned {@link StoredContext}. Callers should_be careful to save the current context before calling this method and_restore it any listeners, likely with_{@link ContextPreservingActionListener}. Use {@link OriginSettingClient}_which can be used to do this automatically._<p>_Without security the origin is ignored, but security uses it to authorize_actions that are made up of many sub-actions. These actions call_{@link #stashWithOrigin} before performing on behalf of a user that_should be allowed even if the user doesn't have permission to perform_those actions on their own._<p>_For example, a user might not have permission to GET from the tasks index_but the tasks API will perform a get on their behalf using this method_if it can't find the task in memory.;public StoredContext stashWithOrigin(String origin) {_        final ThreadContext.StoredContext storedContext = stashContext()__        putTransient(ACTION_ORIGIN_TRANSIENT_NAME, origin)__        return storedContext__    };removes,the,current,context,and,resets,a,default,context,marked,with,as,originating,from,the,supplied,string,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context,callers,should,be,careful,to,save,the,current,context,before,calling,this,method,and,restore,it,any,listeners,likely,with,link,context,preserving,action,listener,use,link,origin,setting,client,which,can,be,used,to,do,this,automatically,p,without,security,the,origin,is,ignored,but,security,uses,it,to,authorize,actions,that,are,made,up,of,many,sub,actions,these,actions,call,link,stash,with,origin,before,performing,on,behalf,of,a,user,that,should,be,allowed,even,if,the,user,doesn,t,have,permission,to,perform,those,actions,on,their,own,p,for,example,a,user,might,not,have,permission,to,get,from,the,tasks,index,but,the,tasks,api,will,perform,a,get,on,their,behalf,using,this,method,if,it,can,t,find,the,task,in,memory;public,stored,context,stash,with,origin,string,origin,final,thread,context,stored,context,stored,context,stash,context,put,transient,origin,return,stored,context
ThreadContext -> public void putHeader(String key, String value);1524684173;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1528762805;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1531179852;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1539615817;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1540583181;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1543415307;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1547743595;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1547817605;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public void putHeader(String key, String value);1548337164;Puts a header into the context;public void putHeader(String key, String value) {_        threadLocal.set(threadLocal.get().putRequest(key, value))__    };puts,a,header,into,the,context;public,void,put,header,string,key,string,value,thread,local,set,thread,local,get,put,request,key,value
ThreadContext -> public Runnable unwrap(Runnable command);1524684173;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1528762805;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1531179852;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1539615817;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1540583181;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1543415307;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return ((ContextPreservingAbstractRunnable) command).unwrap()__        }_        if (command instanceof ContextPreservingRunnable) {_            return ((ContextPreservingRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,context,preserving,abstract,runnable,command,unwrap,if,command,instanceof,context,preserving,runnable,return,context,preserving,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1547743595;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof WrappedRunnable) {_            return ((WrappedRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,wrapped,runnable,return,wrapped,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1547817605;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof WrappedRunnable) {_            return ((WrappedRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,wrapped,runnable,return,wrapped,runnable,command,unwrap,return,command
ThreadContext -> public Runnable unwrap(Runnable command);1548337164;Unwraps a command that was previously wrapped by {@link #preserveContext(Runnable)}.;public Runnable unwrap(Runnable command) {_        if (command instanceof WrappedRunnable) {_            return ((WrappedRunnable) command).unwrap()__        }_        return command__    };unwraps,a,command,that,was,previously,wrapped,by,link,preserve,context,runnable;public,runnable,unwrap,runnable,command,if,command,instanceof,wrapped,runnable,return,wrapped,runnable,command,unwrap,return,command
ThreadContext -> public StoredContext stashContext();1524684173;Removes the current context and resets a default context. The removed context can be_restored when closing the returned {@link StoredContext};public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1528762805;Removes the current context and resets a default context. The removed context can be_restored when closing the returned {@link StoredContext};public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1531179852;Removes the current context and resets a default context. The removed context can be_restored when closing the returned {@link StoredContext};public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1539615817;Removes the current context and resets a default context. The removed context can be_restored when closing the returned {@link StoredContext};public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1540583181;Removes the current context and resets a default context. The removed context can be_restored when closing the returned {@link StoredContext};public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,when,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1543415307;Removes the current context and resets a default context. The removed context can be_restored by closing the returned {@link StoredContext}.;public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1547743595;Removes the current context and resets a default context. The removed context can be_restored by closing the returned {@link StoredContext}.;public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1547817605;Removes the current context and resets a default context. The removed context can be_restored by closing the returned {@link StoredContext}.;public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public StoredContext stashContext();1548337164;Removes the current context and resets a default context. The removed context can be_restored by closing the returned {@link StoredContext}.;public StoredContext stashContext() {_        final ThreadContextStruct context = threadLocal.get()__        threadLocal.set(null)__        return () -> threadLocal.set(context)__    };removes,the,current,context,and,resets,a,default,context,the,removed,context,can,be,restored,by,closing,the,returned,link,stored,context;public,stored,context,stash,context,final,thread,context,struct,context,thread,local,get,thread,local,set,null,return,thread,local,set,context
ThreadContext -> public Runnable preserveContext(Runnable command);1524684173;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1528762805;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1531179852;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1539615817;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1540583181;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1543415307;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1547743595;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1547817605;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> public Runnable preserveContext(Runnable command);1548337164;Saves the current thread context and wraps command in a Runnable that restores that context before running command. If_<code>command</code> has already been passed through this method then it is returned unaltered rather than wrapped twice.;public Runnable preserveContext(Runnable command) {_        if (command instanceof ContextPreservingAbstractRunnable) {_            return command__        }_        if (command instanceof ContextPreservingRunnable) {_            return command__        }_        if (command instanceof AbstractRunnable) {_            return new ContextPreservingAbstractRunnable((AbstractRunnable) command)__        }_        return new ContextPreservingRunnable(command)__    };saves,the,current,thread,context,and,wraps,command,in,a,runnable,that,restores,that,context,before,running,command,if,code,command,code,has,already,been,passed,through,this,method,then,it,is,returned,unaltered,rather,than,wrapped,twice;public,runnable,preserve,context,runnable,command,if,command,instanceof,context,preserving,abstract,runnable,return,command,if,command,instanceof,context,preserving,runnable,return,command,if,command,instanceof,abstract,runnable,return,new,context,preserving,abstract,runnable,abstract,runnable,command,return,new,context,preserving,runnable,command
ThreadContext -> boolean isClosed();1524684173;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1528762805;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1531179852;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1539615817;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1540583181;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1543415307;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1547743595;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1547817605;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> boolean isClosed();1548337164;Returns <code>true</code> if the context is closed, otherwise <code>true</code>;boolean isClosed() {_        return threadLocal.closed.get()__    };returns,code,true,code,if,the,context,is,closed,otherwise,code,true,code;boolean,is,closed,return,thread,local,closed,get
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1524684173;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1528762805;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1531179852;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1539615817;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1540583181;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1543415307;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1547743595;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        threadLocal.set(threadLocal.get().putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize))__    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,thread,local,set,thread,local,get,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1547817605;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        _        final ThreadContextStruct current = threadLocal.get()__        final ThreadContextStruct maybeNext =_                current.putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize)__        if (current != maybeNext) {_            threadLocal.set(maybeNext)__        }_    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,final,thread,context,struct,current,thread,local,get,final,thread,context,struct,maybe,next,current,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size,if,current,maybe,next,thread,local,set,maybe,next
ThreadContext -> public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue);1548337164;Add the {@code value} for the specified {@code key} with the specified {@code uniqueValue} used for de-duplication. Any duplicate_{@code value} after applying {@code uniqueValue} is ignored.__@param key         the header name_@param value       the header value_@param uniqueValue the function that produces de-duplication values;public void addResponseHeader(final String key, final String value, final Function<String, String> uniqueValue) {_        _        final ThreadContextStruct current = threadLocal.get()__        final ThreadContextStruct maybeNext =_                current.putResponse(key, value, uniqueValue, maxWarningHeaderCount, maxWarningHeaderSize)__        if (current != maybeNext) {_            threadLocal.set(maybeNext)__        }_    };add,the,code,value,for,the,specified,code,key,with,the,specified,code,unique,value,used,for,de,duplication,any,duplicate,code,value,after,applying,code,unique,value,is,ignored,param,key,the,header,name,param,value,the,header,value,param,unique,value,the,function,that,produces,de,duplication,values;public,void,add,response,header,final,string,key,final,string,value,final,function,string,string,unique,value,final,thread,context,struct,current,thread,local,get,final,thread,context,struct,maybe,next,current,put,response,key,value,unique,value,max,warning,header,count,max,warning,header,size,if,current,maybe,next,thread,local,set,maybe,next
ThreadContext -> boolean isDefaultContext();1524684173;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1528762805;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1531179852;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1539615817;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1540583181;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1543415307;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1547743595;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1547817605;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
ThreadContext -> boolean isDefaultContext();1548337164;Returns true if the current context is the default context.;boolean isDefaultContext() {_        return threadLocal.get() == DEFAULT_CONTEXT__    };returns,true,if,the,current,context,is,the,default,context;boolean,is,default,context,return,thread,local,get
