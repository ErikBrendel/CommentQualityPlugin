# id;timestamp;commentText;codeText;commentWords;codeWords
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1524684173;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1529487105;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1529658035;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1529916082;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1538509426;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1540583181;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1541419698;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception;1544081506;Override this operation if access to the task parameter is needed;protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {_        masterOperation(request, state, listener)__    };override,this,operation,if,access,to,the,task,parameter,is,needed;protected,void,master,operation,task,task,request,request,cluster,state,state,action,listener,response,listener,throws,exception,master,operation,request,state,listener
TransportMasterNodeAction -> @Deprecated     protected abstract Response newResponse()_;1540583181;@deprecated new implementors should override {@link #read(StreamInput)} and use the_{@link Writeable.Reader} interface._@return a new response instance. Typically this is used for serialization using the_{@link Streamable#readFrom(StreamInput)} method.;@Deprecated_    protected abstract Response newResponse()_;deprecated,new,implementors,should,override,link,read,stream,input,and,use,the,link,writeable,reader,interface,return,a,new,response,instance,typically,this,is,used,for,serialization,using,the,link,streamable,read,from,stream,input,method;deprecated,protected,abstract,response,new,response
TransportMasterNodeAction -> @Deprecated     protected abstract Response newResponse()_;1541419698;@deprecated new implementors should override {@link #read(StreamInput)} and use the_{@link Writeable.Reader} interface._@return a new response instance. Typically this is used for serialization using the_{@link Streamable#readFrom(StreamInput)} method.;@Deprecated_    protected abstract Response newResponse()_;deprecated,new,implementors,should,override,link,read,stream,input,and,use,the,link,writeable,reader,interface,return,a,new,response,instance,typically,this,is,used,for,serialization,using,the,link,streamable,read,from,stream,input,method;deprecated,protected,abstract,response,new,response
TransportMasterNodeAction -> @Deprecated     protected abstract Response newResponse()_;1544081506;@deprecated new implementors should override {@link #read(StreamInput)} and use the_{@link Writeable.Reader} interface._@return a new response instance. Typically this is used for serialization using the_{@link Streamable#readFrom(StreamInput)} method.;@Deprecated_    protected abstract Response newResponse()_;deprecated,new,implementors,should,override,link,read,stream,input,and,use,the,link,writeable,reader,interface,return,a,new,response,instance,typically,this,is,used,for,serialization,using,the,link,streamable,read,from,stream,input,method;deprecated,protected,abstract,response,new,response
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1524684173;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1529487105;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1529658035;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1529916082;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1538509426;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1540583181;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1541419698;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
TransportMasterNodeAction -> protected String getMasterActionName(DiscoveryNode node);1544081506;Allows to conditionally return a different master node action name in the case an action gets renamed._This mainly for backwards compatibility should be used rarely;protected String getMasterActionName(DiscoveryNode node) {_        return actionName__    };allows,to,conditionally,return,a,different,master,node,action,name,in,the,case,an,action,gets,renamed,this,mainly,for,backwards,compatibility,should,be,used,rarely;protected,string,get,master,action,name,discovery,node,node,return,action,name
