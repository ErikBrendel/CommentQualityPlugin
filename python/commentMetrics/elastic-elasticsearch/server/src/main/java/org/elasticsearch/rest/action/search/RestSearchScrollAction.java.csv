commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "search_scroll_action". }
false;public;2;21;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String scrollId = request.param("scroll_id").     SearchScrollRequest searchScrollRequest = new SearchScrollRequest().     searchScrollRequest.scrollId(scrollId).     String scroll = request.param("scroll").     if (scroll != null) {         searchScrollRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll"))).     }     request.withContentOrSourceParamParserOrNull(xContentParser -> {         if (xContentParser != null) {             // NOTE: if rest request with xcontent body has request parameters, values parsed from request body have the precedence             try {                 searchScrollRequest.fromXContent(xContentParser).             } catch (IOException e) {                 throw new IllegalArgumentException("Failed to parse request body", e).             }         }     }).     return channel -> client.searchScroll(searchScrollRequest, new RestStatusToXContentListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
