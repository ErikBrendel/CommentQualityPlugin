# id;timestamp;commentText;codeText;commentWords;codeWords
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1524684173;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1525076988;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1525162917;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1528706846;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1533921794;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1535965276;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1545157415;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1548593396;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> AsyncAfterWriteAction -> private void maybeFinish();1550588016;calls the response listener if all pending operations have returned otherwise it just decrements the pending opts counter.;private void maybeFinish() {_            final int numPending = pendingOps.decrementAndGet()__            if (numPending == 0) {_                if (syncFailure.get() != null) {_                    respond.onFailure(syncFailure.get())__                } else {_                    respond.onSuccess(refreshed.get())__                }_            }_            assert numPending >= 0 && numPending <= 2: "numPending must either 2, 1 or 0 but was " + numPending __        };calls,the,response,listener,if,all,pending,operations,have,returned,otherwise,it,just,decrements,the,pending,opts,counter;private,void,maybe,finish,final,int,num,pending,pending,ops,decrement,and,get,if,num,pending,0,if,sync,failure,get,null,respond,on,failure,sync,failure,get,else,respond,on,success,refreshed,get,assert,num,pending,0,num,pending,2,num,pending,must,either,2,1,or,0,but,was,num,pending
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1524684173;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1525076988;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1525162917;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1528706846;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1533921794;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1535965276;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1545157415;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1548593396;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> @Override     protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(             ReplicaRequest request, IndexShard replica) throws Exception_;1550588016;Called once per replica with a reference to the replica {@linkplain IndexShard} to modify.__@return the result of the operation on replica, including current translog location and operation response and failure_async refresh is performed on the <code>replica</code> shard according to the <code>ReplicaRequest</code> refresh policy;@Override_    protected abstract WriteReplicaResult<ReplicaRequest> shardOperationOnReplica(_            ReplicaRequest request, IndexShard replica) throws Exception_;called,once,per,replica,with,a,reference,to,the,replica,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,replica,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,replica,code,shard,according,to,the,code,replica,request,code,refresh,policy;override,protected,abstract,write,replica,result,replica,request,shard,operation,on,replica,replica,request,request,index,shard,replica,throws,exception
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1524684173;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1525076988;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1525162917;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1528706846;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1533921794;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1535965276;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1545157415;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1548593396;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> RespondingWriteResult -> void onFailure(Exception ex)_;1550588016;Called on failure if a post action failed.;void onFailure(Exception ex)_;called,on,failure,if,a,post,action,failed;void,on,failure,exception,ex
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1524684173;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1525076988;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1525162917;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1528706846;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1533921794;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1535965276;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1545157415;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1548593396;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> @Override     protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(             Request request, IndexShard primary) throws Exception_;1550588016;Called on the primary with a reference to the primary {@linkplain IndexShard} to modify.__@return the result of the operation on primary, including current translog location and operation response and failure_async refresh is performed on the <code>primary</code> shard according to the <code>Request</code> refresh policy;@Override_    protected abstract WritePrimaryResult<ReplicaRequest, Response> shardOperationOnPrimary(_            Request request, IndexShard primary) throws Exception_;called,on,the,primary,with,a,reference,to,the,primary,linkplain,index,shard,to,modify,return,the,result,of,the,operation,on,primary,including,current,translog,location,and,operation,response,and,failure,async,refresh,is,performed,on,the,code,primary,code,shard,according,to,the,code,request,code,refresh,policy;override,protected,abstract,write,primary,result,replica,request,response,shard,operation,on,primary,request,request,index,shard,primary,throws,exception
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1524684173;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.hasFailure()) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            if (!TransportActions.isShardNotAvailableException(failure)) {_                throw failure__            } else {_                location = currentLocation__            }_        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,has,failure,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,if,transport,actions,is,shard,not,available,exception,failure,throw,failure,else,location,current,location,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1525076988;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.hasFailure()) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            if (!TransportActions.isShardNotAvailableException(failure)) {_                throw failure__            } else {_                location = currentLocation__            }_        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,has,failure,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,if,transport,actions,is,shard,not,available,exception,failure,throw,failure,else,location,current,location,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1525162917;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            if (!TransportActions.isShardNotAvailableException(failure)) {_                throw failure__            } else {_                location = currentLocation__            }_        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,if,transport,actions,is,shard,not,available,exception,failure,throw,failure,else,location,current,location,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1528706846;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1533921794;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1535965276;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1545157415;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1548593396;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,                                                          final Location currentLocation) throws Exception;1550588016;Syncs operation result to the translog or throws a shard not available failure;protected static Location syncOperationResultOrThrow(final Engine.Result operationResult,_                                                         final Location currentLocation) throws Exception {_        final Location location__        if (operationResult.getFailure() != null) {_            _            Exception failure = operationResult.getFailure()__            assert failure instanceof MapperParsingException : "expected mapper parsing failures. got " + failure__            throw failure__        } else {_            location = locationToSync(currentLocation, operationResult.getTranslogLocation())__        }_        return location__    };syncs,operation,result,to,the,translog,or,throws,a,shard,not,available,failure;protected,static,location,sync,operation,result,or,throw,final,engine,result,operation,result,final,location,current,location,throws,exception,final,location,location,if,operation,result,get,failure,null,exception,failure,operation,result,get,failure,assert,failure,instanceof,mapper,parsing,exception,expected,mapper,parsing,failures,got,failure,throw,failure,else,location,location,to,sync,current,location,operation,result,get,translog,location,return,location
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1524684173;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1525076988;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1525162917;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1528706846;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1533921794;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1535965276;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1545157415;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1548593396;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WritePrimaryResult -> protected void respondIfPossible(Exception ex);1550588016;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1524684173;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1525076988;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1525162917;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1528706846;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1533921794;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1535965276;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1545157415;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1548593396;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> WriteReplicaResult -> protected void respondIfPossible(Exception ex);1550588016;Respond if the refresh has occurred and the listener is ready. Always called while synchronized on {@code this}.;protected void respondIfPossible(Exception ex) {_            assert Thread.holdsLock(this)__            if (finishedAsyncActions && listener != null) {_                if (ex == null) {_                    super.respond(listener)__                } else {_                    listener.onFailure(ex)__                }_            }_        };respond,if,the,refresh,has,occurred,and,the,listener,is,ready,always,called,while,synchronized,on,code,this;protected,void,respond,if,possible,exception,ex,assert,thread,holds,lock,this,if,finished,async,actions,listener,null,if,ex,null,super,respond,listener,else,listener,on,failure,ex
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1524684173;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1525076988;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1525162917;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1528706846;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1533921794;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1535965276;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1545157415;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1548593396;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
TransportWriteAction -> RespondingWriteResult -> void onSuccess(boolean forcedRefresh)_;1550588016;Called on successful processing of all post write actions_@param forcedRefresh <code>true</code> iff this write has caused a refresh;void onSuccess(boolean forcedRefresh)_;called,on,successful,processing,of,all,post,write,actions,param,forced,refresh,code,true,code,iff,this,write,has,caused,a,refresh;void,on,success,boolean,forced,refresh
