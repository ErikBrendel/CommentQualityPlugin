commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;public void add(long count, long memoryInBytes) {     this.count += count.     this.memoryInBytes += memoryInBytes. }
false;public;1;3;;public void addTermsMemoryInBytes(long termsMemoryInBytes) {     this.termsMemoryInBytes += termsMemoryInBytes. }
false;public;1;3;;public void addStoredFieldsMemoryInBytes(long storedFieldsMemoryInBytes) {     this.storedFieldsMemoryInBytes += storedFieldsMemoryInBytes. }
false;public;1;3;;public void addTermVectorsMemoryInBytes(long termVectorsMemoryInBytes) {     this.termVectorsMemoryInBytes += termVectorsMemoryInBytes. }
false;public;1;3;;public void addNormsMemoryInBytes(long normsMemoryInBytes) {     this.normsMemoryInBytes += normsMemoryInBytes. }
false;public;1;3;;public void addPointsMemoryInBytes(long pointsMemoryInBytes) {     this.pointsMemoryInBytes += pointsMemoryInBytes. }
false;public;1;3;;public void addDocValuesMemoryInBytes(long docValuesMemoryInBytes) {     this.docValuesMemoryInBytes += docValuesMemoryInBytes. }
false;public;1;3;;public void addIndexWriterMemoryInBytes(long indexWriterMemoryInBytes) {     this.indexWriterMemoryInBytes += indexWriterMemoryInBytes. }
false;public;1;3;;public void addVersionMapMemoryInBytes(long versionMapMemoryInBytes) {     this.versionMapMemoryInBytes += versionMapMemoryInBytes. }
false;;1;3;;void updateMaxUnsafeAutoIdTimestamp(long maxUnsafeAutoIdTimestamp) {     this.maxUnsafeAutoIdTimestamp = Math.max(maxUnsafeAutoIdTimestamp, this.maxUnsafeAutoIdTimestamp). }
false;public;1;3;;public void addBitsetMemoryInBytes(long bitsetMemoryInBytes) {     this.bitsetMemoryInBytes += bitsetMemoryInBytes. }
false;public;1;15;;public void addFileSizes(ImmutableOpenMap<String, Long> fileSizes) {     ImmutableOpenMap.Builder<String, Long> map = ImmutableOpenMap.builder(this.fileSizes).     for (Iterator<ObjectObjectCursor<String, Long>> it = fileSizes.iterator(). it.hasNext(). ) {         ObjectObjectCursor<String, Long> entry = it.next().         if (map.containsKey(entry.key)) {             Long oldValue = map.get(entry.key).             map.put(entry.key, oldValue + entry.value).         } else {             map.put(entry.key, entry.value).         }     }     this.fileSizes = map.build(). }
false;public;1;17;;public void add(SegmentsStats mergeStats) {     if (mergeStats == null) {         return.     }     updateMaxUnsafeAutoIdTimestamp(mergeStats.maxUnsafeAutoIdTimestamp).     add(mergeStats.count, mergeStats.memoryInBytes).     addTermsMemoryInBytes(mergeStats.termsMemoryInBytes).     addStoredFieldsMemoryInBytes(mergeStats.storedFieldsMemoryInBytes).     addTermVectorsMemoryInBytes(mergeStats.termVectorsMemoryInBytes).     addNormsMemoryInBytes(mergeStats.normsMemoryInBytes).     addPointsMemoryInBytes(mergeStats.pointsMemoryInBytes).     addDocValuesMemoryInBytes(mergeStats.docValuesMemoryInBytes).     addIndexWriterMemoryInBytes(mergeStats.indexWriterMemoryInBytes).     addVersionMapMemoryInBytes(mergeStats.versionMapMemoryInBytes).     addBitsetMemoryInBytes(mergeStats.bitsetMemoryInBytes).     addFileSizes(mergeStats.fileSizes). }
true;public;0;3;/**  * The number of segments.  */ ;/**  * The number of segments.  */ public long getCount() {     return this.count. }
true;public;0;3;/**  * Estimation of the memory usage used by a segment.  */ ;/**  * Estimation of the memory usage used by a segment.  */ public long getMemoryInBytes() {     return this.memoryInBytes. }
false;public;0;3;;public ByteSizeValue getMemory() {     return new ByteSizeValue(memoryInBytes). }
true;public;0;3;/**  * Estimation of the terms dictionary memory usage by a segment.  */ ;/**  * Estimation of the terms dictionary memory usage by a segment.  */ public long getTermsMemoryInBytes() {     return this.termsMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getTermsMemory() {     return new ByteSizeValue(termsMemoryInBytes). }
true;public;0;3;/**  * Estimation of the stored fields memory usage by a segment.  */ ;/**  * Estimation of the stored fields memory usage by a segment.  */ public long getStoredFieldsMemoryInBytes() {     return this.storedFieldsMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getStoredFieldsMemory() {     return new ByteSizeValue(storedFieldsMemoryInBytes). }
true;public;0;3;/**  * Estimation of the term vectors memory usage by a segment.  */ ;/**  * Estimation of the term vectors memory usage by a segment.  */ public long getTermVectorsMemoryInBytes() {     return this.termVectorsMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getTermVectorsMemory() {     return new ByteSizeValue(termVectorsMemoryInBytes). }
true;public;0;3;/**  * Estimation of the norms memory usage by a segment.  */ ;/**  * Estimation of the norms memory usage by a segment.  */ public long getNormsMemoryInBytes() {     return this.normsMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getNormsMemory() {     return new ByteSizeValue(normsMemoryInBytes). }
true;public;0;3;/**  * Estimation of the points memory usage by a segment.  */ ;/**  * Estimation of the points memory usage by a segment.  */ public long getPointsMemoryInBytes() {     return this.pointsMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getPointsMemory() {     return new ByteSizeValue(pointsMemoryInBytes). }
true;public;0;3;/**  * Estimation of the doc values memory usage by a segment.  */ ;/**  * Estimation of the doc values memory usage by a segment.  */ public long getDocValuesMemoryInBytes() {     return this.docValuesMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getDocValuesMemory() {     return new ByteSizeValue(docValuesMemoryInBytes). }
true;public;0;3;/**  * Estimation of the memory usage by index writer  */ ;/**  * Estimation of the memory usage by index writer  */ public long getIndexWriterMemoryInBytes() {     return this.indexWriterMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getIndexWriterMemory() {     return new ByteSizeValue(indexWriterMemoryInBytes). }
true;public;0;3;/**  * Estimation of the memory usage by version map  */ ;/**  * Estimation of the memory usage by version map  */ public long getVersionMapMemoryInBytes() {     return this.versionMapMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getVersionMapMemory() {     return new ByteSizeValue(versionMapMemoryInBytes). }
true;public;0;3;/**  * Estimation of how much the cached bit sets are taking. (which nested and p/c rely on)  */ ;/**  * Estimation of how much the cached bit sets are taking. (which nested and p/c rely on)  */ public long getBitsetMemoryInBytes() {     return bitsetMemoryInBytes. }
false;public;0;3;;public ByteSizeValue getBitsetMemory() {     return new ByteSizeValue(bitsetMemoryInBytes). }
false;public;0;3;;public ImmutableOpenMap<String, Long> getFileSizes() {     return fileSizes. }
true;public;0;3;/**  * Returns the max timestamp that is used to de-optimize documents with auto-generated IDs in the engine.  * This is used to ensure we don't add duplicate documents when we assume an append only case based on auto-generated IDs  */ ;/**  * Returns the max timestamp that is used to de-optimize documents with auto-generated IDs in the engine.  * This is used to ensure we don't add duplicate documents when we assume an append only case based on auto-generated IDs  */ public long getMaxUnsafeAutoIdTimestamp() {     return maxUnsafeAutoIdTimestamp. }
false;public;2;27;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.SEGMENTS).     builder.field(Fields.COUNT, count).     builder.humanReadableField(Fields.MEMORY_IN_BYTES, Fields.MEMORY, getMemory()).     builder.humanReadableField(Fields.TERMS_MEMORY_IN_BYTES, Fields.TERMS_MEMORY, getTermsMemory()).     builder.humanReadableField(Fields.STORED_FIELDS_MEMORY_IN_BYTES, Fields.STORED_FIELDS_MEMORY, getStoredFieldsMemory()).     builder.humanReadableField(Fields.TERM_VECTORS_MEMORY_IN_BYTES, Fields.TERM_VECTORS_MEMORY, getTermVectorsMemory()).     builder.humanReadableField(Fields.NORMS_MEMORY_IN_BYTES, Fields.NORMS_MEMORY, getNormsMemory()).     builder.humanReadableField(Fields.POINTS_MEMORY_IN_BYTES, Fields.POINTS_MEMORY, getPointsMemory()).     builder.humanReadableField(Fields.DOC_VALUES_MEMORY_IN_BYTES, Fields.DOC_VALUES_MEMORY, getDocValuesMemory()).     builder.humanReadableField(Fields.INDEX_WRITER_MEMORY_IN_BYTES, Fields.INDEX_WRITER_MEMORY, getIndexWriterMemory()).     builder.humanReadableField(Fields.VERSION_MAP_MEMORY_IN_BYTES, Fields.VERSION_MAP_MEMORY, getVersionMapMemory()).     builder.humanReadableField(Fields.FIXED_BIT_SET_MEMORY_IN_BYTES, Fields.FIXED_BIT_SET, getBitsetMemory()).     builder.field(Fields.MAX_UNSAFE_AUTO_ID_TIMESTAMP, maxUnsafeAutoIdTimestamp).     builder.startObject(Fields.FILE_SIZES).     for (Iterator<ObjectObjectCursor<String, Long>> it = fileSizes.iterator(). it.hasNext(). ) {         ObjectObjectCursor<String, Long> entry = it.next().         builder.startObject(entry.key).         builder.humanReadableField(Fields.SIZE_IN_BYTES, Fields.SIZE, new ByteSizeValue(entry.value)).         builder.field(Fields.DESCRIPTION, fileDescriptions.getOrDefault(entry.key, "Others")).         builder.endObject().     }     builder.endObject().     builder.endObject().     return builder. }
false;public;1;24;;@Override public void readFrom(StreamInput in) throws IOException {     count = in.readVLong().     memoryInBytes = in.readLong().     termsMemoryInBytes = in.readLong().     storedFieldsMemoryInBytes = in.readLong().     termVectorsMemoryInBytes = in.readLong().     normsMemoryInBytes = in.readLong().     pointsMemoryInBytes = in.readLong().     docValuesMemoryInBytes = in.readLong().     indexWriterMemoryInBytes = in.readLong().     versionMapMemoryInBytes = in.readLong().     bitsetMemoryInBytes = in.readLong().     maxUnsafeAutoIdTimestamp = in.readLong().     int size = in.readVInt().     ImmutableOpenMap.Builder<String, Long> map = ImmutableOpenMap.builder(size).     for (int i = 0. i < size. i++) {         String key = in.readString().         Long value = in.readLong().         map.put(key, value).     }     fileSizes = map.build(). }
false;public;1;21;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(count).     out.writeLong(memoryInBytes).     out.writeLong(termsMemoryInBytes).     out.writeLong(storedFieldsMemoryInBytes).     out.writeLong(termVectorsMemoryInBytes).     out.writeLong(normsMemoryInBytes).     out.writeLong(pointsMemoryInBytes).     out.writeLong(docValuesMemoryInBytes).     out.writeLong(indexWriterMemoryInBytes).     out.writeLong(versionMapMemoryInBytes).     out.writeLong(bitsetMemoryInBytes).     out.writeLong(maxUnsafeAutoIdTimestamp).     out.writeVInt(fileSizes.size()).     for (ObjectObjectCursor<String, Long> entry : fileSizes) {         out.writeString(entry.key).         out.writeLong(entry.value.longValue()).     } }
