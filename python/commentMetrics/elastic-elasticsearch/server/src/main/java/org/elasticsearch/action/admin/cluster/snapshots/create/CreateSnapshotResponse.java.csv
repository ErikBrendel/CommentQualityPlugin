commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private void setSnapshotInfoFromBuilder(SnapshotInfoBuilder snapshotInfoBuilder) {     this.snapshotInfo = snapshotInfoBuilder.build(). }
true;public;0;3;/**  * Returns snapshot information if snapshot was completed by the time this method returned or null otherwise.  *  * @return snapshot information or null  */ ;/**  * Returns snapshot information if snapshot was completed by the time this method returned or null otherwise.  *  * @return snapshot information or null  */ public SnapshotInfo getSnapshotInfo() {     return snapshotInfo. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     snapshotInfo = in.readOptionalWriteable(SnapshotInfo::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalWriteable(snapshotInfo). }
true;public;0;6;/**  * Returns HTTP status  * <ul>  * <li>{@link RestStatus#ACCEPTED} if snapshot is still in progress</li>  * <li>{@link RestStatus#OK} if snapshot was successful or partially successful</li>  * <li>{@link RestStatus#INTERNAL_SERVER_ERROR} if snapshot failed completely</li>  * </ul>  */ ;/**  * Returns HTTP status  * <ul>  * <li>{@link RestStatus#ACCEPTED} if snapshot is still in progress</li>  * <li>{@link RestStatus#OK} if snapshot was successful or partially successful</li>  * <li>{@link RestStatus#INTERNAL_SERVER_ERROR} if snapshot failed completely</li>  * </ul>  */ public RestStatus status() {     if (snapshotInfo == null) {         return RestStatus.ACCEPTED.     }     return snapshotInfo.status(). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (snapshotInfo != null) {         builder.field("snapshot").         snapshotInfo.toXContent(builder, params).     } else {         builder.field("accepted", true).     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static CreateSnapshotResponse fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;6;;@Override public String toString() {     return "CreateSnapshotResponse{" + "snapshotInfo=" + snapshotInfo + '}'. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     CreateSnapshotResponse that = (CreateSnapshotResponse) o.     return Objects.equals(snapshotInfo, that.snapshotInfo). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(snapshotInfo). }
