commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected SortedNumericDocValues getValues(Numeric valuesSource, LeafReaderContext ctx) throws IOException {     return FieldData.toSortableLongBits(valuesSource.doubleValues(ctx)). }
false;public;1;5;;@Override public DoubleTerms buildAggregation(long owningBucketOrdinal) throws IOException {     final LongTerms terms = (LongTerms) super.buildAggregation(owningBucketOrdinal).     return convertToDouble(terms). }
false;public;0;5;;@Override public DoubleTerms buildEmptyAggregation() {     final LongTerms terms = (LongTerms) super.buildEmptyAggregation().     return convertToDouble(terms). }
false;private,static;1;6;;private static DoubleTerms convertToDouble(LongTerms terms) {     List<DoubleTerms.Bucket> buckets = terms.buckets.stream().map(DoubleTermsAggregator::convertToDouble).collect(Collectors.toList()).     return new DoubleTerms(terms.getName(), terms.order, terms.requiredSize, terms.minDocCount, terms.pipelineAggregators(), terms.getMetaData(), terms.format, terms.shardSize, terms.showTermDocCountError, terms.otherDocCount, buckets, terms.docCountError). }
false;private,static;1;5;;private static DoubleTerms.Bucket convertToDouble(LongTerms.Bucket bucket) {     double value = NumericUtils.sortableLongToDouble(bucket.term).     return new DoubleTerms.Bucket(value, bucket.docCount, bucket.aggregations, bucket.showDocCountError, bucket.docCountError, bucket.format). }
