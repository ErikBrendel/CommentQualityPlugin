commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     super.doWriteTo(out).     out.writeDouble(normalizationFactor). }
false;public;0;4;;@Override public String getWriteableName() {     return DerivativePipelineAggregationBuilder.NAME. }
false;public;0;4;;@Override public double normalizedValue() {     return normalizationFactor > 0 ? (value() / normalizationFactor) : value(). }
false;;0;3;;DocValueFormat formatter() {     return format. }
false;;0;3;;double getNormalizationFactor() {     return normalizationFactor. }
false;public;1;12;;@Override public Object getProperty(List<String> path) {     if (path.isEmpty()) {         return this.     } else if (path.size() == 1 && "value".equals(path.get(0))) {         return value().     } else if (path.size() == 1 && "normalized_value".equals(path.get(0))) {         return normalizedValue().     } else {         throw new IllegalArgumentException("path not supported for [" + getName() + "]: " + path).     } }
false;public;2;13;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     super.doXContentBody(builder, params).     if (normalizationFactor > 0) {         boolean hasValue = !(Double.isInfinite(normalizedValue()) || Double.isNaN(normalizedValue())).         builder.field("normalized_value", hasValue ? normalizedValue() : null).         if (hasValue && format != DocValueFormat.RAW) {             builder.field("normalized_value_as_string", format.format(normalizedValue())).         }     }     return builder. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(normalizationFactor, value). }
false;protected;1;6;;@Override protected boolean doEquals(Object obj) {     InternalDerivative other = (InternalDerivative) obj.     return Objects.equals(value, other.value) && Objects.equals(normalizationFactor, other.normalizationFactor). }
