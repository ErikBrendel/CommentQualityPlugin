commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;11;/**  * Read a {@linkplain TaskId} from a stream. {@linkplain TaskId} has this rather than the usual constructor that takes a  * {@linkplain StreamInput} so we can return the {@link #EMPTY_TASK_ID} without allocating.  */ ;/**  * Read a {@linkplain TaskId} from a stream. {@linkplain TaskId} has this rather than the usual constructor that takes a  * {@linkplain StreamInput} so we can return the {@link #EMPTY_TASK_ID} without allocating.  */ public static TaskId readFromStream(StreamInput in) throws IOException {     String nodeId = in.readString().     if (nodeId.isEmpty()) {         /*              * The only TaskId allowed to have the empty string as its nodeId is the EMPTY_TASK_ID and there is only ever one of it and it              * never writes its taskId to save bytes on the wire because it is by far the most common TaskId.              */         return EMPTY_TASK_ID.     }     return new TaskId(nodeId, in.readLong()). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(nodeId).     if (nodeId.isEmpty()) {         // Shortcut the EMPTY_TASK_ID, the only TaskId allowed to have the empty string as its nodeId.         return.     }     out.writeLong(id). }
false;public,static;0;8;;public static ContextParser<Void, TaskId> parser() {     return (p, c) -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return new TaskId(p.text()).         }         throw new ElasticsearchParseException("Expected a string but found [{}] instead", p.currentToken()).     }. }
false;public;0;3;;public String getNodeId() {     return nodeId. }
false;public;0;3;;public long getId() {     return id. }
false;public;0;3;;public boolean isSet() {     return id != -1L. }
false;public;0;8;;@Override public String toString() {     if (isSet()) {         return nodeId + ":" + id.     } else {         return "unset".     } }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TaskId taskId = (TaskId) o.     if (id != taskId.id)         return false.     return nodeId.equals(taskId.nodeId). }
false;public;0;6;;@Override public int hashCode() {     int result = nodeId.hashCode().     result = 31 * result + (int) (id ^ (id >>> 32)).     return result. }
