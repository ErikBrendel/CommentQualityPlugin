# id;timestamp;commentText;codeText;commentWords;codeWords
CreateIndexRequest -> public String index();1524684173;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1531179852;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1535666657;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1535723122;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1541592065;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1546566088;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public String index();1546912600;The index name to create.;public String index() {_        return index__    };the,index,name,to,create;public,string,index,return,index
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1524684173;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1531179852;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1535666657;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1535723122;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1541592065;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1546566088;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(String source, XContentType xContentType);1546912600;The settings to create the index with (either json or yaml format);public CreateIndexRequest settings(String source, XContentType xContentType) {_        this.settings = Settings.builder().loadFromSource(source, xContentType).build()__        return this__    };the,settings,to,create,the,index,with,either,json,or,yaml,format;public,create,index,request,settings,string,source,xcontent,type,x,content,type,this,settings,settings,builder,load,from,source,source,x,content,type,build,return,this
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1524684173;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1531179852;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1535666657;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1535723122;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1541592065;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1546566088;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(BytesReference source);1546912600;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(BytesReference source) {_        _        try (XContentParser parser = XContentHelper_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, source)) {_            _            parser.nextToken()__            while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                alias(Alias.fromXContent(parser))__            }_            return this__        } catch(IOException e) {_            throw new ElasticsearchParseException("Failed to parse aliases", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,bytes,reference,source,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,source,parser,next,token,while,parser,next,token,xcontent,parser,token,alias,alias,from,xcontent,parser,return,this,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,aliases,e
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1524684173;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1531179852;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1535666657;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1535723122;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1541592065;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1546566088;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest aliases(String source);1546912600;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(String source) {_        return aliases(new BytesArray(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,string,source,return,aliases,new,bytes,array,source
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1531179852;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        _        if (source.size() != 1 || !source.containsKey(type)) {_            source = MapBuilder.<String, Object>newMapBuilder().put(type, source).map()__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,if,source,size,1,source,contains,key,type,source,map,builder,string,object,new,map,builder,put,type,source,map,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1535666657;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        _        if (source.size() != 1 || !source.containsKey(type)) {_            source = MapBuilder.<String, Object>newMapBuilder().put(type, source).map()__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,if,source,size,1,source,contains,key,type,source,map,builder,string,object,new,map,builder,put,type,source,map,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1535723122;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        _        if (source.size() != 1 || !source.containsKey(type)) {_            source = MapBuilder.<String, Object>newMapBuilder().put(type, source).map()__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,if,source,size,1,source,contains,key,type,source,map,builder,string,object,new,map,builder,put,type,source,map,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1541592065;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        _        if (source.size() != 1 || !source.containsKey(type)) {_            source = MapBuilder.<String, Object>newMapBuilder().put(type, source).map()__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,if,source,size,1,source,contains,key,type,source,map,builder,string,object,new,map,builder,put,type,source,map,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1546566088;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Map<String, ?> source);1546912600;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, Map<String, ?> source) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        _        if (source.size() != 1 || !source.containsKey(type)) {_            source = MapBuilder.<String, Object>newMapBuilder().put(type, source).map()__        }_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            return mapping(type, builder)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,map,string,source,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,if,source,size,1,source,contains,key,type,source,map,builder,string,object,new,map,builder,put,type,source,map,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,return,mapping,type,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1524684173;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1531179852;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1535666657;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1535723122;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1541592065;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1546566088;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings settings);1546912600;The settings to create the index with.;public CreateIndexRequest settings(Settings settings) {_        this.settings = settings__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,settings,this,settings,settings,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1524684173;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                _                IndexMetaData.Custom proto = IndexMetaData.lookupPrototype(name)__                if (proto != null) {_                    try {_                        customs.put(name, proto.fromMap((Map<String, Object>) entry.getValue()))__                    } catch (IOException e) {_                        throw new ElasticsearchParseException("failed to parse custom metadata for [{}]", name)__                    }_                } else {_                    _                    throw new ElasticsearchParseException("unknown key [{}] for create index", name)__                }_            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,index,meta,data,custom,proto,index,meta,data,lookup,prototype,name,if,proto,null,try,customs,put,name,proto,from,map,map,string,object,entry,get,value,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,custom,metadata,for,name,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1531179852;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                _                IndexMetaData.Custom proto = IndexMetaData.lookupPrototype(name)__                if (proto != null) {_                    try {_                        customs.put(name, proto.fromMap((Map<String, Object>) entry.getValue()))__                    } catch (IOException e) {_                        throw new ElasticsearchParseException("failed to parse custom metadata for [{}]", name)__                    }_                } else {_                    _                    throw new ElasticsearchParseException("unknown key [{}] for create index", name)__                }_            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,index,meta,data,custom,proto,index,meta,data,lookup,prototype,name,if,proto,null,try,customs,put,name,proto,from,map,map,string,object,entry,get,value,catch,ioexception,e,throw,new,elasticsearch,parse,exception,failed,to,parse,custom,metadata,for,name,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1535666657;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                throw new ElasticsearchParseException("unknown key [{}] for create index", name)__            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1535723122;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                throw new ElasticsearchParseException("unknown key [{}] for create index", name)__            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1541592065;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                throw new ElasticsearchParseException("unknown key [{}] for create index", name)__            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1546566088;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                throw new ElasticsearchParseException("unknown key [{}] for create index", name)__            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> @SuppressWarnings("unchecked")     public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler);1546912600;Sets the settings and mappings as a single source.;@SuppressWarnings("unchecked")_    public CreateIndexRequest source(Map<String, ?> source, DeprecationHandler deprecationHandler) {_        for (Map.Entry<String, ?> entry : source.entrySet()) {_            String name = entry.getKey()__            if (SETTINGS.match(name, deprecationHandler)) {_                settings((Map<String, Object>) entry.getValue())__            } else if (MAPPINGS.match(name, deprecationHandler)) {_                Map<String, Object> mappings = (Map<String, Object>) entry.getValue()__                for (Map.Entry<String, Object> entry1 : mappings.entrySet()) {_                    mapping(entry1.getKey(), (Map<String, Object>) entry1.getValue())__                }_            } else if (ALIASES.match(name, deprecationHandler)) {_                aliases((Map<String, Object>) entry.getValue())__            } else {_                throw new ElasticsearchParseException("unknown key [{}] for create index", name)__            }_        }_        return this__    };sets,the,settings,and,mappings,as,a,single,source;suppress,warnings,unchecked,public,create,index,request,source,map,string,source,deprecation,handler,deprecation,handler,for,map,entry,string,entry,source,entry,set,string,name,entry,get,key,if,settings,match,name,deprecation,handler,settings,map,string,object,entry,get,value,else,if,mappings,match,name,deprecation,handler,map,string,object,mappings,map,string,object,entry,get,value,for,map,entry,string,object,entry1,mappings,entry,set,mapping,entry1,get,key,map,string,object,entry1,get,value,else,if,aliases,match,name,deprecation,handler,aliases,map,string,object,entry,get,value,else,throw,new,elasticsearch,parse,exception,unknown,key,for,create,index,name,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1524684173;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1531179852;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1535666657;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1535723122;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1541592065;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1546566088;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Settings.Builder settings);1546912600;The settings to create the index with.;public CreateIndexRequest settings(Settings.Builder settings) {_        this.settings = settings.build()__        return this__    };the,settings,to,create,the,index,with;public,create,index,request,settings,settings,builder,settings,this,settings,settings,build,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1524684173;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1531179852;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1535666657;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1535723122;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1541592065;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1546566088;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, String source, XContentType xContentType);1546912600;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType The content type of the source;public CreateIndexRequest mapping(String type, String source, XContentType xContentType) {_        return mapping(type, new BytesArray(source), xContentType)__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,source;public,create,index,request,mapping,string,type,string,source,xcontent,type,x,content,type,return,mapping,type,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1524684173;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1531179852;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1535666657;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1535723122;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1541592065;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1546566088;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, XContentType xContentType);1546912600;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, XContentType xContentType) {_        return source(source, 0, source.length, xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,xcontent,type,x,content,type,return,source,source,0,source,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1524684173;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1531179852;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1535666657;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1535723122;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1541592065;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1546566088;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public CreateIndexRequest aliases(XContentBuilder source);1546912600;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(XContentBuilder source) {_        return aliases(BytesReference.bytes(source))__    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,xcontent,builder,source,return,aliases,bytes,reference,bytes,source
CreateIndexRequest -> public Settings settings();1524684173;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1531179852;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1535666657;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1535723122;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1541592065;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1546566088;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public Settings settings();1546912600;The settings to create the index with.;public Settings settings() {_        return settings__    };the,settings,to,create,the,index,with;public,settings,settings,return,settings
CreateIndexRequest -> public CreateIndexRequest custom(IndexMetaData.Custom custom);1524684173;Adds custom metadata to the index to be created.;public CreateIndexRequest custom(IndexMetaData.Custom custom) {_        customs.put(custom.type(), custom)__        return this__    };adds,custom,metadata,to,the,index,to,be,created;public,create,index,request,custom,index,meta,data,custom,custom,customs,put,custom,type,custom,return,this
CreateIndexRequest -> public CreateIndexRequest custom(IndexMetaData.Custom custom);1531179852;Adds custom metadata to the index to be created.;public CreateIndexRequest custom(IndexMetaData.Custom custom) {_        customs.put(custom.type(), custom)__        return this__    };adds,custom,metadata,to,the,index,to,be,created;public,create,index,request,custom,index,meta,data,custom,custom,customs,put,custom,type,custom,return,this
CreateIndexRequest -> public String cause();1524684173;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1531179852;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1535666657;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1535723122;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1541592065;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1546566088;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public String cause();1546912600;The cause for this index creation.;public String cause() {_        return cause__    };the,cause,for,this,index,creation;public,string,cause,return,cause
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1524684173;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1531179852;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1535666657;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1535723122;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1541592065;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1546566088;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(final int waitForActiveShards);1546912600;A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical_shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}_to get the ActiveShardCount.;public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {_        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards))__    };a,shortcut,for,link,wait,for,active,shards,active,shard,count,where,the,numerical,shard,count,is,passed,in,instead,of,having,to,first,call,link,active,shard,count,from,int,to,get,the,active,shard,count;public,create,index,request,wait,for,active,shards,final,int,wait,for,active,shards,return,wait,for,active,shards,active,shard,count,from,wait,for,active,shards
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1524684173;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1531179852;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1535666657;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1535723122;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1541592065;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1546566088;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, XContentBuilder source);1546912600;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source;public CreateIndexRequest mapping(String type, XContentBuilder source) {_        return mapping(type, BytesReference.bytes(source), source.contentType())__    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source;public,create,index,request,mapping,string,type,xcontent,builder,source,return,mapping,type,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1524684173;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1531179852;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1535666657;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1535723122;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1541592065;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1546566088;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest(String index, Settings settings);1546912600;Constructs a new request to create an index with the specified name and settings.;public CreateIndexRequest(String index, Settings settings) {_        this.index = index__        this.settings = settings__    };constructs,a,new,request,to,create,an,index,with,the,specified,name,and,settings;public,create,index,request,string,index,settings,settings,this,index,index,this,settings,settings
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1524684173;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1531179852;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1535666657;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1535723122;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1541592065;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1546566088;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1546912600;Sets the number of shard copies that should be active for index creation to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Index creation will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public CreateIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_        this.waitForActiveShards = waitForActiveShards__        return this__    };sets,the,number,of,shard,copies,that,should,be,active,for,index,creation,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,index,creation,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,create,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,create,index,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1524684173;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1531179852;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1535666657;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1535723122;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1541592065;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1546566088;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(XContentBuilder builder);1546912600;Allows to set the settings using a json builder.;public CreateIndexRequest settings(XContentBuilder builder) {_        settings(Strings.toString(builder), builder.contentType())__        return this__    };allows,to,set,the,settings,using,a,json,builder;public,create,index,request,settings,xcontent,builder,builder,settings,strings,to,string,builder,builder,content,type,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1531179852;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1535666657;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1535723122;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1541592065;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1546566088;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest settings(Map<String, ?> source);1546912600;The settings to create the index with (either json/yaml/properties format);public CreateIndexRequest settings(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(source)__            settings(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_        return this__    };the,settings,to,create,the,index,with,either,json,yaml,properties,format;public,create,index,request,settings,map,string,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,source,settings,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1524684173;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1531179852;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1535666657;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1535723122;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1541592065;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1546566088;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest alias(Alias alias);1546912600;Adds an alias that will be associated with the index when it gets created;public CreateIndexRequest alias(Alias alias) {_        this.aliases.add(alias)__        return this__    };adds,an,alias,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,alias,alias,alias,this,aliases,add,alias,return,this
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1524684173;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1531179852;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1535666657;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1535723122;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1541592065;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1546566088;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> public CreateIndexRequest source(XContentBuilder source);1546912600;Sets the settings and mappings as a single source.;public CreateIndexRequest source(XContentBuilder source) {_        return source(BytesReference.bytes(source), source.contentType())__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,xcontent,builder,source,return,source,bytes,reference,bytes,source,source,content,type
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1524684173;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1531179852;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1535666657;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1535723122;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1541592065;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1546566088;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType);1546912600;Adds mapping that will be added when the index gets created.__@param type   The mapping type_@param source The mapping source_@param xContentType the content type of the mapping source;private CreateIndexRequest mapping(String type, BytesReference source, XContentType xContentType) {_        if (mappings.containsKey(type)) {_            throw new IllegalStateException("mappings for type \"" + type + "\" were already defined")__        }_        Objects.requireNonNull(xContentType)__        try {_            mappings.put(type, XContentHelper.convertToJson(source, false, false, xContentType))__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert to json", e)__        }_    };adds,mapping,that,will,be,added,when,the,index,gets,created,param,type,the,mapping,type,param,source,the,mapping,source,param,x,content,type,the,content,type,of,the,mapping,source;private,create,index,request,mapping,string,type,bytes,reference,source,xcontent,type,x,content,type,if,mappings,contains,key,type,throw,new,illegal,state,exception,mappings,for,type,type,were,already,defined,objects,require,non,null,x,content,type,try,mappings,put,type,xcontent,helper,convert,to,json,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,to,json,e
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1524684173;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1531179852;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1535666657;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1535723122;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1541592065;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1546566088;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);1546912600;Sets the settings and mappings as a single source.;public CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType) {_        return source(new BytesArray(source, offset, length), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,byte,source,int,offset,int,length,xcontent,type,x,content,type,return,source,new,bytes,array,source,offset,length,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1524684173;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1531179852;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1535666657;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1535723122;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1541592065;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1546566088;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest source(String source, XContentType xContentType);1546912600;Sets the settings and mappings as a single source.;public CreateIndexRequest source(String source, XContentType xContentType) {_        return source(new BytesArray(source), xContentType)__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,string,source,xcontent,type,x,content,type,return,source,new,bytes,array,source,x,content,type
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1524684173;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1531179852;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1535666657;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1535723122;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1541592065;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1546566088;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,source,return,this
CreateIndexRequest -> public CreateIndexRequest mapping(String type, Object... source);1546912600;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").;public CreateIndexRequest mapping(String type, Object... source) {_        mapping(type, PutMappingRequest.buildFromSimplifiedDef(type, source))__        return this__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true;public,create,index,request,mapping,string,type,object,source,mapping,type,put,mapping,request,build,from,simplified,def,type,source,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1524684173;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1531179852;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1535666657;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1535723122;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1541592065;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1546566088;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest cause(String cause);1546912600;The cause for this index creation.;public CreateIndexRequest cause(String cause) {_        this.cause = cause__        return this__    };the,cause,for,this,index,creation;public,create,index,request,cause,string,cause,this,cause,cause,return,this
CreateIndexRequest -> public CreateIndexRequest(String index);1524684173;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1531179852;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1535666657;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1535723122;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1541592065;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1546566088;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest(String index);1546912600;Constructs a new request to create an index with the specified name.;public CreateIndexRequest(String index) {_        this(index, EMPTY_SETTINGS)__    };constructs,a,new,request,to,create,an,index,with,the,specified,name;public,create,index,request,string,index,this,index
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1524684173;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1531179852;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1535666657;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1535723122;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1541592065;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1546566088;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest source(BytesReference source, XContentType xContentType);1546912600;Sets the settings and mappings as a single source.;public CreateIndexRequest source(BytesReference source, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        source(XContentHelper.convertToMap(source, false, xContentType).v2(), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,settings,and,mappings,as,a,single,source;public,create,index,request,source,bytes,reference,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,source,xcontent,helper,convert,to,map,source,false,x,content,type,v2,logging,deprecation,handler,instance,return,this
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1531179852;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1535666657;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1535723122;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1541592065;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1546566088;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
CreateIndexRequest -> public CreateIndexRequest aliases(Map<String, ?> source);1546912600;Sets the aliases that will be associated with the index when it gets created;public CreateIndexRequest aliases(Map<String, ?> source) {_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.map(source)__            return aliases(BytesReference.bytes(builder))__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + source + "]", e)__        }_    };sets,the,aliases,that,will,be,associated,with,the,index,when,it,gets,created;public,create,index,request,aliases,map,string,source,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,map,source,return,aliases,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,source,e
