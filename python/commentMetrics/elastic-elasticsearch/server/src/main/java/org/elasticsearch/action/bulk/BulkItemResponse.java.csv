commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestStatus status() {     return failure == null ? response.status() : failure.getStatus(). }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(opType.getLowercase()).     if (failure == null) {         response.innerToXContent(builder, params).         builder.field(STATUS, response.status().getStatus()).     } else {         builder.field(_INDEX, failure.getIndex()).         builder.field(_TYPE, failure.getType()).         builder.field(_ID, failure.getId()).         builder.field(STATUS, failure.getStatus().getStatus()).         builder.startObject(ERROR).         ElasticsearchException.generateThrowableXContent(builder, params, failure.getCause()).         builder.endObject().     }     builder.endObject().     builder.endObject().     return builder. }
true;public,static;2;66;/**  * Reads a {@link BulkItemResponse} from a {@link XContentParser}.  *  * @param parser the {@link XContentParser}  * @param id the id to assign to the parsed {@link BulkItemResponse}. It is usually the index of  *           the item in the {@link BulkResponse#getItems} array.  */ ;/**  * Reads a {@link BulkItemResponse} from a {@link XContentParser}.  *  * @param parser the {@link XContentParser}  * @param id the id to assign to the parsed {@link BulkItemResponse}. It is usually the index of  *           the item in the {@link BulkResponse#getItems} array.  */ public static BulkItemResponse fromXContent(XContentParser parser, int id) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     XContentParser.Token token = parser.nextToken().     ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).     String currentFieldName = parser.currentName().     token = parser.nextToken().     final OpType opType = OpType.fromString(currentFieldName).     ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).     DocWriteResponse.Builder builder = null.     CheckedConsumer<XContentParser, IOException> itemParser = null.     if (opType == OpType.INDEX || opType == OpType.CREATE) {         final IndexResponse.Builder indexResponseBuilder = new IndexResponse.Builder().         builder = indexResponseBuilder.         itemParser = (indexParser) -> IndexResponse.parseXContentFields(indexParser, indexResponseBuilder).     } else if (opType == OpType.UPDATE) {         final UpdateResponse.Builder updateResponseBuilder = new UpdateResponse.Builder().         builder = updateResponseBuilder.         itemParser = (updateParser) -> UpdateResponse.parseXContentFields(updateParser, updateResponseBuilder).     } else if (opType == OpType.DELETE) {         final DeleteResponse.Builder deleteResponseBuilder = new DeleteResponse.Builder().         builder = deleteResponseBuilder.         itemParser = (deleteParser) -> DeleteResponse.parseXContentFields(deleteParser, deleteResponseBuilder).     } else {         throwUnknownField(currentFieldName, parser.getTokenLocation()).     }     RestStatus status = null.     ElasticsearchException exception = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         }         if (ERROR.equals(currentFieldName)) {             if (token == XContentParser.Token.START_OBJECT) {                 exception = ElasticsearchException.fromXContent(parser).             }         } else if (STATUS.equals(currentFieldName)) {             if (token == XContentParser.Token.VALUE_NUMBER) {                 status = RestStatus.fromCode(parser.intValue()).             }         } else {             itemParser.accept(parser).         }     }     ensureExpectedToken(XContentParser.Token.END_OBJECT, token, parser::getTokenLocation).     token = parser.nextToken().     ensureExpectedToken(XContentParser.Token.END_OBJECT, token, parser::getTokenLocation).     BulkItemResponse bulkItemResponse.     if (exception != null) {         Failure failure = new Failure(builder.getShardId().getIndexName(), builder.getType(), builder.getId(), exception, status).         bulkItemResponse = new BulkItemResponse(id, opType, failure).     } else {         bulkItemResponse = new BulkItemResponse(id, opType, builder.build()).     }     return bulkItemResponse. }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(getIndex()).     out.writeString(getType()).     out.writeOptionalString(getId()).     out.writeException(getCause()).     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         out.writeZLong(getSeqNo()).     }     if (supportsAbortedFlag(out.getVersion())) {         out.writeBoolean(aborted).     } }
false;private,static;1;4;;private static boolean supportsAbortedFlag(Version version) {     // The "aborted" flag was not in 6.0.0-beta2     return version.after(Version.V_6_0_0_beta2). }
true;public;0;3;/**  * The index name of the action.  */ ;/**  * The index name of the action.  */ public String getIndex() {     return this.index. }
true;public;0;3;/**  * The type of the action.  */ ;/**  * The type of the action.  */ public String getType() {     return type. }
true;public;0;3;/**  * The id of the action.  */ ;/**  * The id of the action.  */ public String getId() {     return id. }
true;public;0;3;/**  * The failure message.  */ ;/**  * The failure message.  */ public String getMessage() {     return this.cause.toString(). }
true;public;0;3;/**  * The rest status.  */ ;/**  * The rest status.  */ public RestStatus getStatus() {     return this.status. }
true;public;0;3;/**  * The actual cause of the failure.  */ ;/**  * The actual cause of the failure.  */ public Exception getCause() {     return cause. }
true;public;0;3;/**  * The operation sequence number generated by primary  * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}  * indicates sequence number was not generated by primary  */ ;/**  * The operation sequence number generated by primary  * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}  * indicates sequence number was not generated by primary  */ public long getSeqNo() {     return seqNo. }
true;public;0;3;/**  * Whether this failure is the result of an <em>abort</em>.  * If {@code true}, the request to which this failure relates should never be retried, regardless of the {@link #getCause() cause}.  * @see BulkItemRequest#abort(String, Exception)  */ ;/**  * Whether this failure is the result of an <em>abort</em>.  * If {@code true}, the request to which this failure relates should never be retried, regardless of the {@link #getCause() cause}.  * @see BulkItemRequest#abort(String, Exception)  */ public boolean isAborted() {     return aborted. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(INDEX_FIELD, index).     builder.field(TYPE_FIELD, type).     if (id != null) {         builder.field(ID_FIELD, id).     }     builder.startObject(CAUSE_FIELD).     ElasticsearchException.generateThrowableXContent(builder, params, cause).     builder.endObject().     builder.field(STATUS_FIELD, status.getStatus()).     return builder. }
false;public,static;1;3;;public static Failure fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
true;public;0;3;/**  * The numeric order of the item matching the same request order in the bulk request.  */ ;/**  * The numeric order of the item matching the same request order in the bulk request.  */ public int getItemId() {     return id. }
true;public;0;3;/**  * The operation type ("index", "create" or "delete").  */ ;/**  * The operation type ("index", "create" or "delete").  */ public OpType getOpType() {     return this.opType. }
true;public;0;6;/**  * The index name of the action.  */ ;/**  * The index name of the action.  */ public String getIndex() {     if (failure != null) {         return failure.getIndex().     }     return response.getIndex(). }
true;public;0;6;/**  * The type of the action.  */ ;/**  * The type of the action.  */ public String getType() {     if (failure != null) {         return failure.getType().     }     return response.getType(). }
true;public;0;6;/**  * The id of the action.  */ ;/**  * The id of the action.  */ public String getId() {     if (failure != null) {         return failure.getId().     }     return response.getId(). }
true;public;0;6;/**  * The version of the action.  */ ;/**  * The version of the action.  */ public long getVersion() {     if (failure != null) {         return -1.     }     return response.getVersion(). }
true;public;0;3;/**  * The actual response ({@link IndexResponse} or {@link DeleteResponse}). {@code null} in  * case of failure.  */ ;/**  * The actual response ({@link IndexResponse} or {@link DeleteResponse}). {@code null} in  * case of failure.  */ public <T extends DocWriteResponse> T getResponse() {     return (T) response. }
true;public;0;3;/**  * Is this a failed execution of an operation.  */ ;/**  * Is this a failed execution of an operation.  */ public boolean isFailed() {     return failure != null. }
true;public;0;6;/**  * The failure message, {@code null} if it did not fail.  */ ;/**  * The failure message, {@code null} if it did not fail.  */ public String getFailureMessage() {     if (failure != null) {         return failure.getMessage().     }     return null. }
true;public;0;3;/**  * The actual failure object if there was a failure.  */ ;/**  * The actual failure object if there was a failure.  */ public Failure getFailure() {     return this.failure. }
false;public,static;1;5;;public static BulkItemResponse readBulkItem(StreamInput in) throws IOException {     BulkItemResponse response = new BulkItemResponse().     response.readFrom(in).     return response. }
false;public;1;22;;@Override public void readFrom(StreamInput in) throws IOException {     id = in.readVInt().     opType = OpType.fromId(in.readByte()).     byte type = in.readByte().     if (type == 0) {         response = new IndexResponse().         response.readFrom(in).     } else if (type == 1) {         response = new DeleteResponse().         response.readFrom(in).     } else if (type == 3) {         // make 3 instead of 2, because 2 is already in use for 'no responses'         response = new UpdateResponse().         response.readFrom(in).     }     if (in.readBoolean()) {         failure = new Failure(in).     } }
false;public;1;24;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(id).     out.writeByte(opType.getId()).     if (response == null) {         out.writeByte((byte) 2).     } else {         if (response instanceof IndexResponse) {             out.writeByte((byte) 0).         } else if (response instanceof DeleteResponse) {             out.writeByte((byte) 1).         } else if (response instanceof UpdateResponse) {             // make 3 instead of 2, because 2 is already in use for 'no responses'             out.writeByte((byte) 3).         }         response.writeTo(out).     }     if (failure == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         failure.writeTo(out).     } }
