commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "get_indices_action". }
false;public;2;16;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String[] indices = Strings.splitStringByCommaToArray(request.param("index")).     // starting with 7.0 we don't include types by default in the response     if (request.hasParam(INCLUDE_TYPE_NAME_PARAMETER)) {         deprecationLogger.deprecatedAndMaybeLog("get_indices_with_types", TYPES_DEPRECATION_MESSAGE).     }     final GetIndexRequest getIndexRequest = new GetIndexRequest().     getIndexRequest.indices(indices).     getIndexRequest.indicesOptions(IndicesOptions.fromRequest(request, getIndexRequest.indicesOptions())).     getIndexRequest.local(request.paramAsBoolean("local", getIndexRequest.local())).     getIndexRequest.masterNodeTimeout(request.paramAsTime("master_timeout", getIndexRequest.masterNodeTimeout())).     getIndexRequest.humanReadable(request.paramAsBoolean("human", false)).     getIndexRequest.includeDefaults(request.paramAsBoolean("include_defaults", false)).     return channel -> client.admin().indices().getIndex(getIndexRequest, new RestToXContentListener<>(channel)). }
true;protected;0;4;/**  * Parameters used for controlling the response and thus might not be consumed during  * preparation of the request execution in {@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)}.  */ ;/**  * Parameters used for controlling the response and thus might not be consumed during  * preparation of the request execution in {@link BaseRestHandler#prepareRequest(RestRequest, NodeClient)}.  */ @Override protected Set<String> responseParams() {     return allowedResponseParameters. }
