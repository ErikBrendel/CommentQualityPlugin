commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BulkItemRequest[] items() {     return items. }
false;public;0;10;;@Override public String[] indices() {     List<String> indices = new ArrayList<>().     for (BulkItemRequest item : items) {         if (item != null) {             indices.add(item.index()).         }     }     return indices.toArray(new String[indices.size()]). }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(items.length).     for (BulkItemRequest item : items) {         if (item != null) {             out.writeBoolean(true).             item.writeTo(out).         } else {             out.writeBoolean(false).         }     } }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     items = new BulkItemRequest[in.readVInt()].     for (int i = 0. i < items.length. i++) {         if (in.readBoolean()) {             items[i] = BulkItemRequest.readBulkItem(in).         }     } }
false;public;0;23;;@Override public String toString() {     // This is included in error messages so we'll try to make it somewhat user friendly.     StringBuilder b = new StringBuilder("BulkShardRequest [").     b.append(shardId).append("] containing [").     if (items.length > 1) {         b.append(items.length).append("] requests").     } else {         b.append(items[0].request()).append("]").     }     switch(getRefreshPolicy()) {         case IMMEDIATE:             b.append(" and a refresh").             break.         case WAIT_UNTIL:             b.append(" blocking until refresh").             break.         case NONE:             break.     }     return b.toString(). }
false;public;0;4;;@Override public String getDescription() {     return "requests[" + items.length + "], index[" + index + "]". }
false;public;0;10;;@Override public void onRetry() {     for (BulkItemRequest item : items) {         if (item.request() instanceof ReplicationRequest) {             // all replication requests need to be notified here as well to ie. make sure that internal optimizations are             // disabled see IndexRequest#canHaveDuplicates()             ((ReplicationRequest<?>) item.request()).onRetry().         }     } }
