commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The name of the field highlighted.  */ ;/**  * The name of the field highlighted.  */ public String name() {     return name. }
true;public;0;3;/**  * The name of the field highlighted.  */ ;/**  * The name of the field highlighted.  */ public String getName() {     return name(). }
true;public;0;3;/**  * The highlighted fragments. {@code null} if failed to highlight (for example, the field is not stored).  */ ;/**  * The highlighted fragments. {@code null} if failed to highlight (for example, the field is not stored).  */ public Text[] fragments() {     return fragments. }
true;public;0;3;/**  * The highlighted fragments. {@code null} if failed to highlight (for example, the field is not stored).  */ ;/**  * The highlighted fragments. {@code null} if failed to highlight (for example, the field is not stored).  */ public Text[] getFragments() {     return fragments(). }
false;public;0;4;;@Override public String toString() {     return "[" + name + "], fragments[" + Arrays.toString(fragments) + "]". }
false;public,static;1;5;;public static HighlightField readHighlightField(StreamInput in) throws IOException {     HighlightField field = new HighlightField().     field.readFrom(in).     return field. }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     name = in.readString().     if (in.readBoolean()) {         int size = in.readVInt().         if (size == 0) {             fragments = Text.EMPTY_ARRAY.         } else {             fragments = new Text[size].             for (int i = 0. i < size. i++) {                 fragments[i] = in.readText().             }         }     } }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     if (fragments == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeVInt(fragments.length).         for (Text fragment : fragments) {             out.writeText(fragment).         }     } }
false;public,static;1;19;;public static HighlightField fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation).     String fieldName = parser.currentName().     Text[] fragments = null.     XContentParser.Token token = parser.nextToken().     if (token == XContentParser.Token.START_ARRAY) {         List<Text> values = new ArrayList<>().         while (parser.nextToken() != XContentParser.Token.END_ARRAY) {             values.add(new Text(parser.text())).         }         fragments = values.toArray(new Text[values.size()]).     } else if (token == XContentParser.Token.VALUE_NULL) {         fragments = null.     } else {         throw new ParsingException(parser.getTokenLocation(), "unexpected token type [" + token + "]").     }     return new HighlightField(fieldName, fragments). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(name).     if (fragments == null) {         builder.nullValue().     } else {         builder.startArray().         for (Text fragment : fragments) {             builder.value(fragment).         }         builder.endArray().     }     return builder. }
false;public,final;1;11;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     HighlightField other = (HighlightField) obj.     return Objects.equals(name, other.name) && Arrays.equals(fragments, other.fragments). }
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(name, Arrays.hashCode(fragments)). }
