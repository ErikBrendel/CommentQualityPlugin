commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;2;1;/**  * Reads and parses the blob with given blob name.  *  * @param blobContainer blob container  * @param blobName blob name  * @return parsed blob object  */ ;/**  * Reads and parses the blob with given blob name.  *  * @param blobContainer blob container  * @param blobName blob name  * @return parsed blob object  */ public abstract T readBlob(BlobContainer blobContainer, String blobName) throws IOException.
true;public;2;4;/**  * Reads and parses the blob with given name, applying name translation using the {link #blobName} method  *  * @param blobContainer blob container  * @param name          name to be translated into  * @return parsed blob object  */ ;/**  * Reads and parses the blob with given name, applying name translation using the {link #blobName} method  *  * @param blobContainer blob container  * @param name          name to be translated into  * @return parsed blob object  */ public T read(BlobContainer blobContainer, String name) throws IOException {     String blobName = blobName(name).     return readBlob(blobContainer, blobName). }
true;public;2;3;/**  * Deletes obj in the blob container  */ ;/**  * Deletes obj in the blob container  */ public void delete(BlobContainer blobContainer, String name) throws IOException {     blobContainer.deleteBlob(blobName(name)). }
true;public;2;3;/**  * Checks obj in the blob container  */ ;/**  * Checks obj in the blob container  */ public boolean exists(BlobContainer blobContainer, String name) throws IOException {     return blobContainer.blobExists(blobName(name)). }
false;protected;1;3;;protected String blobName(String name) {     return String.format(Locale.ROOT, blobNameFormat, name). }
false;protected;1;7;;protected T read(BytesReference bytes) throws IOException {     try (XContentParser parser = XContentHelper.createParser(namedXContentRegistry, LoggingDeprecationHandler.INSTANCE, bytes)) {         T obj = reader.apply(parser).         return obj.     } }
