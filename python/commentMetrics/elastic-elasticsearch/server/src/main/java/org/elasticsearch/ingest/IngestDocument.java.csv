# id;timestamp;commentText;codeText;commentWords;codeWords
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1524684173;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1529658035;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1533063033;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1535552903;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1536177418;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1536218260;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1537806831;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1548236405;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        appendFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model))__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,append,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1524684173;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1529658035;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1533063033;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1535552903;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1536177418;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1536218260;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1537806831;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata);1548236405;Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,_source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at_init time, which makes equality comparisons impossible in tests.;public IngestDocument(Map<String, Object> sourceAndMetadata, Map<String, Object> ingestMetadata) {_        this.sourceAndMetadata = sourceAndMetadata__        this.ingestMetadata = ingestMetadata__    };constructor,needed,for,testing,that,allows,to,create,a,new,link,ingest,document,given,the,provided,elasticsearch,metadata,source,and,ingest,metadata,this,is,needed,because,the,ingest,metadata,will,be,initialized,with,the,current,timestamp,at,init,time,which,makes,equality,comparisons,impossible,in,tests;public,ingest,document,map,string,object,source,and,metadata,map,string,object,ingest,metadata,this,source,and,metadata,source,and,metadata,this,ingest,metadata,ingest,metadata
IngestDocument -> public IngestDocument executePipeline(Pipeline pipeline) throws Exception;1536177418;Executes the given pipeline with for this document unless the pipeline has already been executed_for this document._@param pipeline Pipeline to execute_@throws Exception On exception in pipeline execution;public IngestDocument executePipeline(Pipeline pipeline) throws Exception {_        if (this.executedPipelines.add(pipeline) == false) {_            throw new IllegalStateException("Recursive invocation of pipeline [" + pipeline.getId() + "] detected.")__        }_        return pipeline.execute(this)__    };executes,the,given,pipeline,with,for,this,document,unless,the,pipeline,has,already,been,executed,for,this,document,param,pipeline,pipeline,to,execute,throws,exception,on,exception,in,pipeline,execution;public,ingest,document,execute,pipeline,pipeline,pipeline,throws,exception,if,this,executed,pipelines,add,pipeline,false,throw,new,illegal,state,exception,recursive,invocation,of,pipeline,pipeline,get,id,detected,return,pipeline,execute,this
IngestDocument -> public IngestDocument executePipeline(Pipeline pipeline) throws Exception;1536218260;Executes the given pipeline with for this document unless the pipeline has already been executed_for this document._@param pipeline Pipeline to execute_@throws Exception On exception in pipeline execution;public IngestDocument executePipeline(Pipeline pipeline) throws Exception {_        try {_            if (this.executedPipelines.add(pipeline) == false) {_                throw new IllegalStateException("Recursive invocation of pipeline [" + pipeline.getId() + "] detected.")__            }_            return pipeline.execute(this)__        } finally {_            executedPipelines.remove(pipeline)__        }_    };executes,the,given,pipeline,with,for,this,document,unless,the,pipeline,has,already,been,executed,for,this,document,param,pipeline,pipeline,to,execute,throws,exception,on,exception,in,pipeline,execution;public,ingest,document,execute,pipeline,pipeline,pipeline,throws,exception,try,if,this,executed,pipelines,add,pipeline,false,throw,new,illegal,state,exception,recursive,invocation,of,pipeline,pipeline,get,id,detected,return,pipeline,execute,this,finally,executed,pipelines,remove,pipeline
IngestDocument -> public IngestDocument executePipeline(Pipeline pipeline) throws Exception;1537806831;Executes the given pipeline with for this document unless the pipeline has already been executed_for this document._@param pipeline Pipeline to execute_@throws Exception On exception in pipeline execution;public IngestDocument executePipeline(Pipeline pipeline) throws Exception {_        try {_            if (this.executedPipelines.add(pipeline) == false) {_                throw new IllegalStateException("Cycle detected for pipeline: " + pipeline.getId())__            }_            return pipeline.execute(this)__        } finally {_            executedPipelines.remove(pipeline)__        }_    };executes,the,given,pipeline,with,for,this,document,unless,the,pipeline,has,already,been,executed,for,this,document,param,pipeline,pipeline,to,execute,throws,exception,on,exception,in,pipeline,execution;public,ingest,document,execute,pipeline,pipeline,pipeline,throws,exception,try,if,this,executed,pipelines,add,pipeline,false,throw,new,illegal,state,exception,cycle,detected,for,pipeline,pipeline,get,id,return,pipeline,execute,this,finally,executed,pipelines,remove,pipeline
IngestDocument -> public IngestDocument executePipeline(Pipeline pipeline) throws Exception;1548236405;Executes the given pipeline with for this document unless the pipeline has already been executed_for this document._@param pipeline Pipeline to execute_@throws Exception On exception in pipeline execution;public IngestDocument executePipeline(Pipeline pipeline) throws Exception {_        try {_            if (this.executedPipelines.add(pipeline) == false) {_                throw new IllegalStateException("Cycle detected for pipeline: " + pipeline.getId())__            }_            return pipeline.execute(this)__        } finally {_            executedPipelines.remove(pipeline)__        }_    };executes,the,given,pipeline,with,for,this,document,unless,the,pipeline,has,already,been,executed,for,this,document,param,pipeline,pipeline,to,execute,throws,exception,on,exception,in,pipeline,execution;public,ingest,document,execute,pipeline,pipeline,pipeline,throws,exception,try,if,this,executed,pipelines,add,pipeline,false,throw,new,illegal,state,exception,cycle,detected,for,pipeline,pipeline,get,id,return,pipeline,execute,this,finally,executed,pipelines,remove,pipeline
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1524684173;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1529658035;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1533063033;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1535552903;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1536177418;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1536218260;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1537806831;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing);1548236405;Returns the value contained in the document for the provided path__@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the value for the provided path if existing, null otherwise._@throws IllegalArgumentException only if ignoreMissing is false and the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz, boolean ignoreMissing) {_        try {_            return getFieldValue(path, clazz)__        } catch (IllegalArgumentException e) {_            if (ignoreMissing && hasField(path) != true) {_                return null__            } else {_                throw e__            }_        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,only,if,ignore,missing,is,false,and,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,boolean,ignore,missing,try,return,get,field,value,path,clazz,catch,illegal,argument,exception,e,if,ignore,missing,has,field,path,true,return,null,else,throw,e
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1524684173;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1529658035;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1533063033;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1535552903;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1536177418;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1536218260;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1537806831;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);1548236405;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@param ignoreMissing The flag to determine whether to throw an exception when `path` is not found in the document._@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path, boolean ignoreMissing) {_        Object object = getFieldValue(path, Object.class, ignoreMissing)__        if (object == null) {_            return null__        } else if (object instanceof byte[]) {_            return (byte[]) object__        } else if (object instanceof String) {_            return Base64.getDecoder().decode(object.toString())__        } else {_            throw new IllegalArgumentException("Content field [" + path + "] of unknown type [" + object.getClass().getName() +_                "], must be string or byte array")__        }_    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,param,ignore,missing,the,flag,to,determine,whether,to,throw,an,exception,when,path,is,not,found,in,the,document,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,boolean,ignore,missing,object,object,get,field,value,path,object,class,ignore,missing,if,object,null,return,null,else,if,object,instanceof,byte,return,byte,object,else,if,object,instanceof,string,return,base64,get,decoder,decode,object,to,string,else,throw,new,illegal,argument,exception,content,field,path,of,unknown,type,object,get,class,get,name,must,be,string,or,byte,array
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1524684173;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1529658035;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1533063033;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1535552903;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1536177418;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1536218260;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1537806831;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public byte[] getFieldValueAsBytes(String path);1548236405;Returns the value contained in the document for the provided path as a byte array._If the path value is a string, a base64 decode operation will happen._If the path value is a byte array, it is just returned_@param path The path within the document in dot-notation_@return the byte array for the provided path if existing_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public byte[] getFieldValueAsBytes(String path) {_        return getFieldValueAsBytes(path, false)__    };returns,the,value,contained,in,the,document,for,the,provided,path,as,a,byte,array,if,the,path,value,is,a,string,a,base64,decode,operation,will,happen,if,the,path,value,is,a,byte,array,it,is,just,returned,param,path,the,path,within,the,document,in,dot,notation,return,the,byte,array,for,the,provided,path,if,existing,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,byte,get,field,value,as,bytes,string,path,return,get,field,value,as,bytes,path,false
IngestDocument -> public boolean hasField(String path);1524684173;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1529658035;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1533063033;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1535552903;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1536177418;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1536218260;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1537806831;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public boolean hasField(String path);1548236405;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path) {_        return hasField(path, false)__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,return,has,field,path,false
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1524684173;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1529658035;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1533063033;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1535552903;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1536177418;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1536218260;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1537806831;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz);1548236405;Returns the value contained in the document with the provided templated path_@param pathTemplate The path within the document in dot-notation_@param clazz The expected class fo the field value_@return the value fro the provided path if existing, null otherwise_@throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(TemplateScript.Factory pathTemplate, Class<T> clazz) {_        return getFieldValue(renderTemplate(pathTemplate), clazz)__    };returns,the,value,contained,in,the,document,with,the,provided,templated,path,param,path,template,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,fo,the,field,value,return,the,value,fro,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,template,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,template,script,factory,path,template,class,t,clazz,return,get,field,value,render,template,path,template,clazz
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1524684173;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1529658035;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1533063033;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1535552903;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1536177418;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1536218260;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1537806831;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public boolean hasField(String path, boolean failOutOfRange);1548236405;Checks whether the document contains a value for the provided path_@param path The path within the document in dot-notation_@param failOutOfRange Whether to throw an IllegalArgumentException if array is accessed outside of its range_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid.;public boolean hasField(String path, boolean failOutOfRange) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            String pathElement = fieldPath.pathElements[i]__            if (context == null) {_                return false__            }_            if (context instanceof Map) {_                @SuppressWarnings("unchecked")_                Map<String, Object> map = (Map<String, Object>) context__                context = map.get(pathElement)__            } else if (context instanceof List) {_                @SuppressWarnings("unchecked")_                List<Object> list = (List<Object>) context__                try {_                    int index = Integer.parseInt(pathElement)__                    if (index < 0 || index >= list.size()) {_                        if (failOutOfRange) {_                            throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                    list.size() + "] as part of path [" + path +"]")__                        } else {_                            return false__                        }_                    }_                    context = list.get(index)__                } catch (NumberFormatException e) {_                    return false__                }__            } else {_                return false__            }_        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            return map.containsKey(leafKey)__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            try {_                int index = Integer.parseInt(leafKey)__                if (index >= 0 && index < list.size()) {_                    return true__                } else {_                    if (failOutOfRange) {_                        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" +_                                list.size() + "] as part of path [" + path +"]")__                    } else {_                        return false__                    }_                }_            } catch (NumberFormatException e) {_                return false__            }_        }_        return false__    };checks,whether,the,document,contains,a,value,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,fail,out,of,range,whether,to,throw,an,illegal,argument,exception,if,array,is,accessed,outside,of,its,range,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,string,path,boolean,fail,out,of,range,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,string,path,element,field,path,path,elements,i,if,context,null,return,false,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,context,map,get,path,element,else,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,path,element,if,index,0,index,list,size,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,context,list,get,index,catch,number,format,exception,e,return,false,else,return,false,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,return,map,contains,key,leaf,key,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,try,int,index,integer,parse,int,leaf,key,if,index,0,index,list,size,return,true,else,if,fail,out,of,range,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,else,return,false,catch,number,format,exception,e,return,false,return,false
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1524684173;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1529658035;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1533063033;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1535552903;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1536177418;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1536218260;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1537806831;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public <T> T getFieldValue(String path, Class<T> clazz);1548236405;Returns the value contained in the document for the provided path_@param path The path within the document in dot-notation_@param clazz The expected class of the field value_@return the value for the provided path if existing, null otherwise_@throws IllegalArgumentException if the path is null, empty, invalid, if the field doesn't exist_or if the field that is found at the provided path is not of the expected type.;public <T> T getFieldValue(String path, Class<T> clazz) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (String pathElement : fieldPath.pathElements) {_            context = resolve(pathElement, path, context)__        }_        return cast(path, context, clazz)__    };returns,the,value,contained,in,the,document,for,the,provided,path,param,path,the,path,within,the,document,in,dot,notation,param,clazz,the,expected,class,of,the,field,value,return,the,value,for,the,provided,path,if,existing,null,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,if,the,field,doesn,t,exist,or,if,the,field,that,is,found,at,the,provided,path,is,not,of,the,expected,type;public,t,t,get,field,value,string,path,class,t,clazz,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,string,path,element,field,path,path,elements,context,resolve,path,element,path,context,return,cast,path,context,clazz
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1524684173;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1529658035;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1533063033;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1535552903;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1536177418;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1536218260;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1537806831;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public boolean hasField(TemplateScript.Factory fieldPathTemplate);1548236405;Checks whether the document contains a value for the provided templated path_@param fieldPathTemplate the template for the path within the document in dot-notation_@return true if the document contains a value for the field, false otherwise_@throws IllegalArgumentException if the path is null, empty or invalid;public boolean hasField(TemplateScript.Factory fieldPathTemplate) {_        return hasField(renderTemplate(fieldPathTemplate))__    };checks,whether,the,document,contains,a,value,for,the,provided,templated,path,param,field,path,template,the,template,for,the,path,within,the,document,in,dot,notation,return,true,if,the,document,contains,a,value,for,the,field,false,otherwise,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,boolean,has,field,template,script,factory,field,path,template,return,has,field,render,template,field,path,template
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1524684173;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1529658035;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1533063033;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1535552903;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1536177418;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1536218260;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1537806831;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);1548236405;Sets the provided value to the provided path in the document._Any non existing path element will be created. If the last element is a list,_the value will replace the existing list._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@param valueSource The value source that will produce the value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource) {_        Map<String, Object> model = createTemplateModel()__        setFieldValue(fieldPathTemplate.newInstance(model).execute(), valueSource.copyAndResolve(model), false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,element,is,a,list,the,value,will,replace,the,existing,list,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,param,value,source,the,value,source,that,will,produce,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,template,script,factory,field,path,template,value,source,value,source,map,string,object,model,create,template,model,set,field,value,field,path,template,new,instance,model,execute,value,source,copy,and,resolve,model,false
IngestDocument -> public void removeField(String path);1524684173;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1529658035;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1533063033;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1535552903;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1536177418;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1536218260;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1537806831;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public void removeField(String path);1548236405;Removes the field identified by the provided path._@param path the path of the field to be removed_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(String path) {_        FieldPath fieldPath = new FieldPath(path)__        Object context = fieldPath.initialContext__        for (int i = 0_ i < fieldPath.pathElements.length - 1_ i++) {_            context = resolve(fieldPath.pathElements[i], path, context)__        }__        String leafKey = fieldPath.pathElements[fieldPath.pathElements.length - 1]__        if (context instanceof Map) {_            @SuppressWarnings("unchecked")_            Map<String, Object> map = (Map<String, Object>) context__            if (map.containsKey(leafKey)) {_                map.remove(leafKey)__                return__            }_            throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path [" + path + "]")__        }_        if (context instanceof List) {_            @SuppressWarnings("unchecked")_            List<Object> list = (List<Object>) context__            int index__            try {_                index = Integer.parseInt(leafKey)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path [" +_                        path + "]", e)__            }_            if (index < 0 || index >= list.size()) {_                throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length [" + list.size() +_                        "] as part of path [" + path + "]")__            }_            list.remove(index)__            return__        }__        if (context == null) {_            throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path [" + path + "]")__        }_        throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type [" + context.getClass().getName() +_                "] as part of path [" + path + "]")__    };removes,the,field,identified,by,the,provided,path,param,path,the,path,of,the,field,to,be,removed,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,string,path,field,path,field,path,new,field,path,path,object,context,field,path,initial,context,for,int,i,0,i,field,path,path,elements,length,1,i,context,resolve,field,path,path,elements,i,path,context,string,leaf,key,field,path,path,elements,field,path,path,elements,length,1,if,context,instanceof,map,suppress,warnings,unchecked,map,string,object,map,map,string,object,context,if,map,contains,key,leaf,key,map,remove,leaf,key,return,throw,new,illegal,argument,exception,field,leaf,key,not,present,as,part,of,path,path,if,context,instanceof,list,suppress,warnings,unchecked,list,object,list,list,object,context,int,index,try,index,integer,parse,int,leaf,key,catch,number,format,exception,e,throw,new,illegal,argument,exception,leaf,key,is,not,an,integer,cannot,be,used,as,an,index,as,part,of,path,path,e,if,index,0,index,list,size,throw,new,illegal,argument,exception,index,is,out,of,bounds,for,array,with,length,list,size,as,part,of,path,path,list,remove,index,return,if,context,null,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,null,as,part,of,path,path,throw,new,illegal,argument,exception,cannot,remove,leaf,key,from,object,of,type,context,get,class,get,name,as,part,of,path,path
IngestDocument -> public Map<MetaData, Object> extractMetadata();1524684173;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1529658035;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1533063033;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1535552903;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1536177418;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1536218260;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1537806831;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> extractMetadata();1548236405;one time operation that extracts the metadata fields from the ingest document and returns them._Metadata fields that used to be accessible as ordinary top level fields will be removed as part of this call.;public Map<MetaData, Object> extractMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.remove(metaData.getFieldName()))__        }_        return metadataMap__    };one,time,operation,that,extracts,the,metadata,fields,from,the,ingest,document,and,returns,them,metadata,fields,that,used,to,be,accessible,as,ordinary,top,level,fields,will,be,removed,as,part,of,this,call;public,map,meta,data,object,extract,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,remove,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1524684173;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1529658035;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1533063033;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1535552903;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1536177418;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1536218260;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1537806831;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public Map<String, Object> getSourceAndMetadata();1548236405;Returns the document including its metadata fields, unless {@link #extractMetadata()} has been called, in which case the_metadata fields will not be present anymore._Modify the document instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getSourceAndMetadata() {_        return this.sourceAndMetadata__    };returns,the,document,including,its,metadata,fields,unless,link,extract,metadata,has,been,called,in,which,case,the,metadata,fields,will,not,be,present,anymore,modify,the,document,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,source,and,metadata,return,this,source,and,metadata
IngestDocument -> public void setFieldValue(String path, Object value);1524684173;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1529658035;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1533063033;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1535552903;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1536177418;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1536218260;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1537806831;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void setFieldValue(String path, Object value);1548236405;Sets the provided value to the provided path in the document._Any non existing path element will be created._If the last item in the path is a list, the value will replace the existing list as a whole._Use {@link #appendFieldValue(String, Object)} to append values to lists instead._@param path The path within the document in dot-notation_@param value The value to put in for the path key_@throws IllegalArgumentException if the path is null, empty, invalid or if the value cannot be set to the_item identified by the provided path.;public void setFieldValue(String path, Object value) {_        setFieldValue(path, value, false)__    };sets,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,last,item,in,the,path,is,a,list,the,value,will,replace,the,existing,list,as,a,whole,use,link,append,field,value,string,object,to,append,values,to,lists,instead,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,to,put,in,for,the,path,key,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,value,cannot,be,set,to,the,item,identified,by,the,provided,path;public,void,set,field,value,string,path,object,value,set,field,value,path,value,false
IngestDocument -> public void appendFieldValue(String path, Object value);1524684173;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1529658035;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1533063033;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1535552903;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1536177418;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1536218260;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1537806831;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public void appendFieldValue(String path, Object value);1548236405;Appends the provided value to the provided path in the document._Any non existing path element will be created._If the path identifies a list, the value will be appended to the existing list._If the path identifies a scalar, the scalar will be converted to a list and_the provided value will be added to the newly created list._Supports multiple values too provided in forms of list, in that case all the values will be appended to the_existing (or newly created) list._@param path The path within the document in dot-notation_@param value The value or values to append to the existing ones_@throws IllegalArgumentException if the path is null, empty or invalid.;public void appendFieldValue(String path, Object value) {_        setFieldValue(path, value, true)__    };appends,the,provided,value,to,the,provided,path,in,the,document,any,non,existing,path,element,will,be,created,if,the,path,identifies,a,list,the,value,will,be,appended,to,the,existing,list,if,the,path,identifies,a,scalar,the,scalar,will,be,converted,to,a,list,and,the,provided,value,will,be,added,to,the,newly,created,list,supports,multiple,values,too,provided,in,forms,of,list,in,that,case,all,the,values,will,be,appended,to,the,existing,or,newly,created,list,param,path,the,path,within,the,document,in,dot,notation,param,value,the,value,or,values,to,append,to,the,existing,ones,throws,illegal,argument,exception,if,the,path,is,null,empty,or,invalid;public,void,append,field,value,string,path,object,value,set,field,value,path,value,true
IngestDocument -> public IngestDocument(IngestDocument other);1524684173;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1529658035;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1533063033;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1535552903;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1536177418;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1536218260;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1537806831;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public IngestDocument(IngestDocument other);1548236405;Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties as the one provided as argument;public IngestDocument(IngestDocument other) {_        this(deepCopyMap(other.sourceAndMetadata), deepCopyMap(other.ingestMetadata))__    };copy,constructor,that,creates,a,new,link,ingest,document,which,has,exactly,the,same,properties,as,the,one,provided,as,argument;public,ingest,document,ingest,document,other,this,deep,copy,map,other,source,and,metadata,deep,copy,map,other,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1524684173;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1529658035;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1533063033;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1535552903;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1536177418;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1536218260;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1537806831;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<String, Object> getIngestMetadata();1548236405;Returns the available ingest metadata fields, by default only timestamp, but it is possible to set additional ones._Use only for reading values, modify them instead using {@link #setFieldValue(String, Object)} and {@link #removeField(String)};public Map<String, Object> getIngestMetadata() {_        return this.ingestMetadata__    };returns,the,available,ingest,metadata,fields,by,default,only,timestamp,but,it,is,possible,to,set,additional,ones,use,only,for,reading,values,modify,them,instead,using,link,set,field,value,string,object,and,link,remove,field,string;public,map,string,object,get,ingest,metadata,return,this,ingest,metadata
IngestDocument -> public Map<MetaData, Object> getMetadata();1529658035;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1533063033;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1535552903;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1536177418;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1536218260;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1537806831;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public Map<MetaData, Object> getMetadata();1548236405;Does the same thing as {@link #extractMetadata} but does not mutate the map.;public Map<MetaData, Object> getMetadata() {_        Map<MetaData, Object> metadataMap = new EnumMap<>(MetaData.class)__        for (MetaData metaData : MetaData.values()) {_            metadataMap.put(metaData, sourceAndMetadata.get(metaData.getFieldName()))__        }_        return metadataMap__    };does,the,same,thing,as,link,extract,metadata,but,does,not,mutate,the,map;public,map,meta,data,object,get,metadata,map,meta,data,object,metadata,map,new,enum,map,meta,data,class,for,meta,data,meta,data,meta,data,values,metadata,map,put,meta,data,source,and,metadata,get,meta,data,get,field,name,return,metadata,map
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1524684173;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1529658035;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1533063033;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1535552903;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1536177418;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1536218260;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1537806831;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
IngestDocument -> public void removeField(TemplateScript.Factory fieldPathTemplate);1548236405;Removes the field identified by the provided path._@param fieldPathTemplate Resolves to the path with dot-notation within the document_@throws IllegalArgumentException if the path is null, empty, invalid or if the field doesn't exist.;public void removeField(TemplateScript.Factory fieldPathTemplate) {_        removeField(renderTemplate(fieldPathTemplate))__    };removes,the,field,identified,by,the,provided,path,param,field,path,template,resolves,to,the,path,with,dot,notation,within,the,document,throws,illegal,argument,exception,if,the,path,is,null,empty,invalid,or,if,the,field,doesn,t,exist;public,void,remove,field,template,script,factory,field,path,template,remove,field,render,template,field,path,template
