# id;timestamp;commentText;codeText;commentWords;codeWords
IndexService -> public ScriptService getScriptService();1524684173;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1528706846;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1535405719;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1536611444;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1539723533;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1541092382;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1544692527;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1547520324;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1547520882;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1548593396;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1549294529;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1549395737;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public ScriptService getScriptService();1550483271;The {@link ScriptService} to use for this index.;public ScriptService getScriptService() {_        return scriptService__    };the,link,script,service,to,use,for,this,index;public,script,service,get,script,service,return,script,service
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1524684173;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1528706846;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1535405719;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1536611444;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1539723533;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1541092382;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1544692527;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1547520324;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1547520882;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1548593396;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1549294529;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1549395737;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias);1550483271;Creates a new QueryShardContext. The context has not types set yet, if types are required set them via_{@link QueryShardContext#setTypes(String...)}.__Passing a {@code null} {@link IndexReader} will return a valid context, however it won't be able to make_{@link IndexReader}-specific optimizations, such as rewriting containing range queries.;public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis, String clusterAlias) {_        return new QueryShardContext(_            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData::getForField, mapperService(),_                similarityService(), scriptService, xContentRegistry,_               namedWriteableRegistry, client, indexReader,_            nowInMillis, clusterAlias)__    };creates,a,new,query,shard,context,the,context,has,not,types,set,yet,if,types,are,required,set,them,via,link,query,shard,context,set,types,string,passing,a,code,null,link,index,reader,will,return,a,valid,context,however,it,won,t,be,able,to,make,link,index,reader,specific,optimizations,such,as,rewriting,containing,range,queries;public,query,shard,context,new,query,shard,context,int,shard,id,index,reader,index,reader,long,supplier,now,in,millis,string,cluster,alias,return,new,query,shard,context,shard,id,index,settings,index,cache,bitset,filter,cache,index,field,data,get,for,field,mapper,service,similarity,service,script,service,x,content,registry,named,writeable,registry,client,index,reader,now,in,millis,cluster,alias
IndexService -> public BigArrays getBigArrays();1524684173;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1528706846;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1535405719;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1536611444;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1539723533;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1541092382;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1544692527;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1547520324;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1547520882;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1548593396;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1549294529;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1549395737;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public BigArrays getBigArrays();1550483271;The {@link BigArrays} to use for this index.;public BigArrays getBigArrays() {_        return bigArrays__    };the,link,big,arrays,to,use,for,this,index;public,big,arrays,get,big,arrays,return,big,arrays
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1524684173;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1528706846;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1535405719;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1536611444;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1539723533;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1541092382;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1544692527;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1547520324;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1547520882;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1548593396;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1549294529;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1549395737;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields);1550483271;Clears the caches for the given shard id if the shard is still allocated on this node;public boolean clearCaches(boolean queryCache, boolean fieldDataCache, String...fields) {_        boolean clearedAtLeastOne = false__        if (queryCache) {_            clearedAtLeastOne = true__            indexCache.query().clear("api")__        }_        if (fieldDataCache) {_            clearedAtLeastOne = true__            if (fields.length == 0) {_                indexFieldData.clear()__            } else {_                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        if (clearedAtLeastOne == false) {_            if (fields.length ==  0) {_                indexCache.clear("api")__                indexFieldData.clear()__            } else {_                _                for (String field : fields) {_                    indexFieldData.clearField(field)__                }_            }_        }_        return clearedAtLeastOne__    };clears,the,caches,for,the,given,shard,id,if,the,shard,is,still,allocated,on,this,node;public,boolean,clear,caches,boolean,query,cache,boolean,field,data,cache,string,fields,boolean,cleared,at,least,one,false,if,query,cache,cleared,at,least,one,true,index,cache,query,clear,api,if,field,data,cache,cleared,at,least,one,true,if,fields,length,0,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,if,cleared,at,least,one,false,if,fields,length,0,index,cache,clear,api,index,field,data,clear,else,for,string,field,fields,index,field,data,clear,field,field,return,cleared,at,least,one
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1524684173;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1528706846;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1535405719;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1536611444;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1539723533;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1541092382;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1544692527;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1547520324;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1547520882;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1548593396;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1549294529;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1549395737;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> @Override     @Nullable     public IndexShard getShardOrNull(int shardId);1550483271;Return the shard with the provided id, or null if there is no such shard.;@Override_    @Nullable_    public IndexShard getShardOrNull(int shardId) {_        return shards.get(shardId)__    };return,the,shard,with,the,provided,id,or,null,if,there,is,no,such,shard;override,nullable,public,index,shard,get,shard,or,null,int,shard,id,return,shards,get,shard,id
IndexService -> public IndexShard getShard(int shardId);1524684173;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1528706846;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1535405719;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1536611444;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1539723533;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1541092382;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1544692527;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1547520324;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1547520882;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1548593396;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1549294529;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1549395737;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public IndexShard getShard(int shardId);1550483271;Return the shard with the provided id, or throw an exception if it doesn't exist.;public IndexShard getShard(int shardId) {_        IndexShard indexShard = getShardOrNull(shardId)__        if (indexShard == null) {_            throw new ShardNotFoundException(new ShardId(index(), shardId))__        }_        return indexShard__    };return,the,shard,with,the,provided,id,or,throw,an,exception,if,it,doesn,t,exist;public,index,shard,get,shard,int,shard,id,index,shard,index,shard,get,shard,or,null,shard,id,if,index,shard,null,throw,new,shard,not,found,exception,new,shard,id,index,shard,id,return,index,shard
IndexService -> public ThreadPool getThreadPool();1524684173;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1528706846;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1535405719;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1536611444;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1539723533;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1541092382;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1544692527;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1547520324;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1547520882;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1548593396;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1549294529;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1549395737;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
IndexService -> public ThreadPool getThreadPool();1550483271;The {@link ThreadPool} to use for this index.;public ThreadPool getThreadPool() {_        return threadPool__    };the,link,thread,pool,to,use,for,this,index;public,thread,pool,get,thread,pool,return,thread,pool
