# id;timestamp;commentText;codeText;commentWords;codeWords
CollectionUtils -> public static void ensureNoSelfReferences(Object value, String messageHint);1528706846;Deeply inspects a Map, Iterable, or Object array looking for references back to itself._@throws IllegalArgumentException if a self-reference is found_@param value The object to evaluate looking for self references_@param messageHint A string to be included in the exception message if the call fails, to provide_more context to the handler of the exception;public static void ensureNoSelfReferences(Object value, String messageHint) {_        Iterable<?> it = convert(value)__        if (it != null) {_            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint)__        }_    };deeply,inspects,a,map,iterable,or,object,array,looking,for,references,back,to,itself,throws,illegal,argument,exception,if,a,self,reference,is,found,param,value,the,object,to,evaluate,looking,for,self,references,param,message,hint,a,string,to,be,included,in,the,exception,message,if,the,call,fails,to,provide,more,context,to,the,handler,of,the,exception;public,static,void,ensure,no,self,references,object,value,string,message,hint,iterable,it,convert,value,if,it,null,ensure,no,self,references,it,value,collections,new,set,from,map,new,identity,hash,map,message,hint
CollectionUtils -> public static void ensureNoSelfReferences(Object value, String messageHint);1539815831;Deeply inspects a Map, Iterable, or Object array looking for references back to itself._@throws IllegalArgumentException if a self-reference is found_@param value The object to evaluate looking for self references_@param messageHint A string to be included in the exception message if the call fails, to provide_more context to the handler of the exception;public static void ensureNoSelfReferences(Object value, String messageHint) {_        Iterable<?> it = convert(value)__        if (it != null) {_            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint)__        }_    };deeply,inspects,a,map,iterable,or,object,array,looking,for,references,back,to,itself,throws,illegal,argument,exception,if,a,self,reference,is,found,param,value,the,object,to,evaluate,looking,for,self,references,param,message,hint,a,string,to,be,included,in,the,exception,message,if,the,call,fails,to,provide,more,context,to,the,handler,of,the,exception;public,static,void,ensure,no,self,references,object,value,string,message,hint,iterable,it,convert,value,if,it,null,ensure,no,self,references,it,value,collections,new,set,from,map,new,identity,hash,map,message,hint
CollectionUtils -> public static void ensureNoSelfReferences(Object value, String messageHint);1540583181;Deeply inspects a Map, Iterable, or Object array looking for references back to itself._@throws IllegalArgumentException if a self-reference is found_@param value The object to evaluate looking for self references_@param messageHint A string to be included in the exception message if the call fails, to provide_more context to the handler of the exception;public static void ensureNoSelfReferences(Object value, String messageHint) {_        Iterable<?> it = convert(value)__        if (it != null) {_            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint)__        }_    };deeply,inspects,a,map,iterable,or,object,array,looking,for,references,back,to,itself,throws,illegal,argument,exception,if,a,self,reference,is,found,param,value,the,object,to,evaluate,looking,for,self,references,param,message,hint,a,string,to,be,included,in,the,exception,message,if,the,call,fails,to,provide,more,context,to,the,handler,of,the,exception;public,static,void,ensure,no,self,references,object,value,string,message,hint,iterable,it,convert,value,if,it,null,ensure,no,self,references,it,value,collections,new,set,from,map,new,identity,hash,map,message,hint
CollectionUtils -> public static void ensureNoSelfReferences(Object value, String messageHint);1548422582;Deeply inspects a Map, Iterable, or Object array looking for references back to itself._@throws IllegalArgumentException if a self-reference is found_@param value The object to evaluate looking for self references_@param messageHint A string to be included in the exception message if the call fails, to provide_more context to the handler of the exception;public static void ensureNoSelfReferences(Object value, String messageHint) {_        Iterable<?> it = convert(value)__        if (it != null) {_            ensureNoSelfReferences(it, value, Collections.newSetFromMap(new IdentityHashMap<>()), messageHint)__        }_    };deeply,inspects,a,map,iterable,or,object,array,looking,for,references,back,to,itself,throws,illegal,argument,exception,if,a,self,reference,is,found,param,value,the,object,to,evaluate,looking,for,self,references,param,message,hint,a,string,to,be,included,in,the,exception,message,if,the,call,fails,to,provide,more,context,to,the,handler,of,the,exception;public,static,void,ensure,no,self,references,object,value,string,message,hint,iterable,it,convert,value,if,it,null,ensure,no,self,references,it,value,collections,new,set,from,map,new,identity,hash,map,message,hint
CollectionUtils -> public static <T> List<T> rotate(final List<T> list, int distance);1524684173;Return a rotated view of the given list with the given distance.;public static <T> List<T> rotate(final List<T> list, int distance) {_        if (list.isEmpty()) {_            return list__        }__        int d = distance % list.size()__        if (d < 0) {_            d += list.size()__        }__        if (d == 0) {_            return list__        }__        return new RotatedList<>(list, d)__    };return,a,rotated,view,of,the,given,list,with,the,given,distance;public,static,t,list,t,rotate,final,list,t,list,int,distance,if,list,is,empty,return,list,int,d,distance,list,size,if,d,0,d,list,size,if,d,0,return,list,return,new,rotated,list,list,d
CollectionUtils -> public static <T> List<T> rotate(final List<T> list, int distance);1528706846;Return a rotated view of the given list with the given distance.;public static <T> List<T> rotate(final List<T> list, int distance) {_        if (list.isEmpty()) {_            return list__        }__        int d = distance % list.size()__        if (d < 0) {_            d += list.size()__        }__        if (d == 0) {_            return list__        }__        return new RotatedList<>(list, d)__    };return,a,rotated,view,of,the,given,list,with,the,given,distance;public,static,t,list,t,rotate,final,list,t,list,int,distance,if,list,is,empty,return,list,int,d,distance,list,size,if,d,0,d,list,size,if,d,0,return,list,return,new,rotated,list,list,d
CollectionUtils -> public static <T> List<T> rotate(final List<T> list, int distance);1539815831;Return a rotated view of the given list with the given distance.;public static <T> List<T> rotate(final List<T> list, int distance) {_        if (list.isEmpty()) {_            return list__        }__        int d = distance % list.size()__        if (d < 0) {_            d += list.size()__        }__        if (d == 0) {_            return list__        }__        return new RotatedList<>(list, d)__    };return,a,rotated,view,of,the,given,list,with,the,given,distance;public,static,t,list,t,rotate,final,list,t,list,int,distance,if,list,is,empty,return,list,int,d,distance,list,size,if,d,0,d,list,size,if,d,0,return,list,return,new,rotated,list,list,d
CollectionUtils -> public static <T> List<T> rotate(final List<T> list, int distance);1540583181;Return a rotated view of the given list with the given distance.;public static <T> List<T> rotate(final List<T> list, int distance) {_        if (list.isEmpty()) {_            return list__        }__        int d = distance % list.size()__        if (d < 0) {_            d += list.size()__        }__        if (d == 0) {_            return list__        }__        return new RotatedList<>(list, d)__    };return,a,rotated,view,of,the,given,list,with,the,given,distance;public,static,t,list,t,rotate,final,list,t,list,int,distance,if,list,is,empty,return,list,int,d,distance,list,size,if,d,0,d,list,size,if,d,0,return,list,return,new,rotated,list,list,d
CollectionUtils -> public static <T> List<T> rotate(final List<T> list, int distance);1548422582;Return a rotated view of the given list with the given distance.;public static <T> List<T> rotate(final List<T> list, int distance) {_        if (list.isEmpty()) {_            return list__        }__        int d = distance % list.size()__        if (d < 0) {_            d += list.size()__        }__        if (d == 0) {_            return list__        }__        return new RotatedList<>(list, d)__    };return,a,rotated,view,of,the,given,list,with,the,given,distance;public,static,t,list,t,rotate,final,list,t,list,int,distance,if,list,is,empty,return,list,int,d,distance,list,size,if,d,0,d,list,size,if,d,0,return,list,return,new,rotated,list,list,d
CollectionUtils -> public static boolean isEmpty(Object[] array);1524684173;Checks if the given array contains any elements.__@param array The array to check__@return false if the array contains an element, true if not or the array is null.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };checks,if,the,given,array,contains,any,elements,param,array,the,array,to,check,return,false,if,the,array,contains,an,element,true,if,not,or,the,array,is,null;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CollectionUtils -> public static boolean isEmpty(Object[] array);1528706846;Checks if the given array contains any elements.__@param array The array to check__@return false if the array contains an element, true if not or the array is null.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };checks,if,the,given,array,contains,any,elements,param,array,the,array,to,check,return,false,if,the,array,contains,an,element,true,if,not,or,the,array,is,null;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CollectionUtils -> public static boolean isEmpty(Object[] array);1539815831;Checks if the given array contains any elements.__@param array The array to check__@return false if the array contains an element, true if not or the array is null.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };checks,if,the,given,array,contains,any,elements,param,array,the,array,to,check,return,false,if,the,array,contains,an,element,true,if,not,or,the,array,is,null;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CollectionUtils -> public static boolean isEmpty(Object[] array);1540583181;Checks if the given array contains any elements.__@param array The array to check__@return false if the array contains an element, true if not or the array is null.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };checks,if,the,given,array,contains,any,elements,param,array,the,array,to,check,return,false,if,the,array,contains,an,element,true,if,not,or,the,array,is,null;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CollectionUtils -> public static boolean isEmpty(Object[] array);1548422582;Checks if the given array contains any elements.__@param array The array to check__@return false if the array contains an element, true if not or the array is null.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };checks,if,the,given,array,contains,any,elements,param,array,the,array,to,check,return,false,if,the,array,contains,an,element,true,if,not,or,the,array,is,null;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
