# id;timestamp;commentText;codeText;commentWords;codeWords
TranslogHeader -> public long getPrimaryTerm();1524684173;Returns the primary term stored in this translog header._All operations in a translog file are expected to have their primary terms at most this term.;public long getPrimaryTerm() {_        return primaryTerm__    };returns,the,primary,term,stored,in,this,translog,header,all,operations,in,a,translog,file,are,expected,to,have,their,primary,terms,at,most,this,term;public,long,get,primary,term,return,primary,term
TranslogHeader -> public long getPrimaryTerm();1533641732;Returns the primary term stored in this translog header._All operations in a translog file are expected to have their primary terms at most this term.;public long getPrimaryTerm() {_        return primaryTerm__    };returns,the,primary,term,stored,in,this,translog,header,all,operations,in,a,translog,file,are,expected,to,have,their,primary,terms,at,most,this,term;public,long,get,primary,term,return,primary,term
TranslogHeader -> public long getPrimaryTerm();1537371806;Returns the primary term stored in this translog header._All operations in a translog file are expected to have their primary terms at most this term.;public long getPrimaryTerm() {_        return primaryTerm__    };returns,the,primary,term,stored,in,this,translog,header,all,operations,in,a,translog,file,are,expected,to,have,their,primary,terms,at,most,this,term;public,long,get,primary,term,return,primary,term
TranslogHeader -> public long getPrimaryTerm();1545221705;Returns the primary term stored in this translog header._All operations in a translog file are expected to have their primary terms at most this term.;public long getPrimaryTerm() {_        return primaryTerm__    };returns,the,primary,term,stored,in,this,translog,header,all,operations,in,a,translog,file,are,expected,to,have,their,primary,terms,at,most,this,term;public,long,get,primary,term,return,primary,term
TranslogHeader -> public int sizeInBytes();1524684173;Returns the header size in bytes. This value can be used as the offset of the first translog operation._See {@link BaseTranslogReader#getFirstOperationOffset()};public int sizeInBytes() {_        return headerSizeInBytes__    };returns,the,header,size,in,bytes,this,value,can,be,used,as,the,offset,of,the,first,translog,operation,see,link,base,translog,reader,get,first,operation,offset;public,int,size,in,bytes,return,header,size,in,bytes
TranslogHeader -> public int sizeInBytes();1533641732;Returns the header size in bytes. This value can be used as the offset of the first translog operation._See {@link BaseTranslogReader#getFirstOperationOffset()};public int sizeInBytes() {_        return headerSizeInBytes__    };returns,the,header,size,in,bytes,this,value,can,be,used,as,the,offset,of,the,first,translog,operation,see,link,base,translog,reader,get,first,operation,offset;public,int,size,in,bytes,return,header,size,in,bytes
TranslogHeader -> public int sizeInBytes();1537371806;Returns the header size in bytes. This value can be used as the offset of the first translog operation._See {@link BaseTranslogReader#getFirstOperationOffset()};public int sizeInBytes() {_        return headerSizeInBytes__    };returns,the,header,size,in,bytes,this,value,can,be,used,as,the,offset,of,the,first,translog,operation,see,link,base,translog,reader,get,first,operation,offset;public,int,size,in,bytes,return,header,size,in,bytes
TranslogHeader -> public int sizeInBytes();1545221705;Returns the header size in bytes. This value can be used as the offset of the first translog operation._See {@link BaseTranslogReader#getFirstOperationOffset()};public int sizeInBytes() {_        return headerSizeInBytes__    };returns,the,header,size,in,bytes,this,value,can,be,used,as,the,offset,of,the,first,translog,operation,see,link,base,translog,reader,get,first,operation,offset;public,int,size,in,bytes,return,header,size,in,bytes
TranslogHeader -> static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException;1524684173;Read a translog header from the given path and file channel;static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException {_        _        final BufferedChecksumStreamInput in =_            new BufferedChecksumStreamInput(new InputStreamStreamInput(java.nio.channels.Channels.newInputStream(channel), channel.size()))__        final int version__        try {_            version = CodecUtil.checkHeader(new InputStreamDataInput(in), TRANSLOG_CODEC, VERSION_CHECKSUMS, VERSION_PRIMARY_TERM)__        } catch (CorruptIndexException | IndexFormatTooOldException | IndexFormatTooNewException e) {_            tryReportOldVersionError(path, channel)__            throw new TranslogCorruptedException("Translog header corrupted. path:" + path, e)__        }_        if (version == VERSION_CHECKSUMS) {_            throw new IllegalStateException("pre-2.0 translog found [" + path + "]")__        }_        _        final int uuidLen = in.readInt()__        if (uuidLen > channel.size()) {_            throw new TranslogCorruptedException("uuid length can't be larger than the translog")__        }_        final BytesRef uuid = new BytesRef(uuidLen)__        uuid.length = uuidLen__        in.read(uuid.bytes, uuid.offset, uuid.length)__        final BytesRef expectedUUID = new BytesRef(translogUUID)__        if (uuid.bytesEquals(expectedUUID) == false) {_            throw new TranslogCorruptedException("expected shard UUID " + expectedUUID + " but got: " + uuid +_                " this translog file belongs to a different translog. path:" + path)__        }_        _        final long primaryTerm__        if (version == VERSION_PRIMARY_TERM) {_            primaryTerm = in.readLong()__            assert primaryTerm >= 0 : "Primary term must be non-negative [" + primaryTerm + "]_ translog path [" + path + "]"__        } else {_            assert version == VERSION_CHECKPOINTS : "Unknown header version [" + version + "]"__            primaryTerm = UNKNOWN_PRIMARY_TERM__        }_        _        if (version >= VERSION_PRIMARY_TERM) {_            Translog.verifyChecksum(in)__        }_        final int headerSizeInBytes = headerSizeInBytes(version, uuid.length)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully read_ header size [" + headerSizeInBytes + "], position [" + channel.position() + "]"__        return new TranslogHeader(translogUUID, primaryTerm, headerSizeInBytes)__    };read,a,translog,header,from,the,given,path,and,file,channel;static,translog,header,read,final,string,translog,uuid,final,path,path,final,file,channel,channel,throws,ioexception,final,buffered,checksum,stream,input,in,new,buffered,checksum,stream,input,new,input,stream,stream,input,java,nio,channels,channels,new,input,stream,channel,channel,size,final,int,version,try,version,codec,util,check,header,new,input,stream,data,input,in,catch,corrupt,index,exception,index,format,too,old,exception,index,format,too,new,exception,e,try,report,old,version,error,path,channel,throw,new,translog,corrupted,exception,translog,header,corrupted,path,path,e,if,version,throw,new,illegal,state,exception,pre,2,0,translog,found,path,final,int,uuid,len,in,read,int,if,uuid,len,channel,size,throw,new,translog,corrupted,exception,uuid,length,can,t,be,larger,than,the,translog,final,bytes,ref,uuid,new,bytes,ref,uuid,len,uuid,length,uuid,len,in,read,uuid,bytes,uuid,offset,uuid,length,final,bytes,ref,expected,uuid,new,bytes,ref,translog,uuid,if,uuid,bytes,equals,expected,uuid,false,throw,new,translog,corrupted,exception,expected,shard,uuid,expected,uuid,but,got,uuid,this,translog,file,belongs,to,a,different,translog,path,path,final,long,primary,term,if,version,primary,term,in,read,long,assert,primary,term,0,primary,term,must,be,non,negative,primary,term,translog,path,path,else,assert,version,unknown,header,version,version,primary,term,if,version,translog,verify,checksum,in,final,int,header,size,in,bytes,header,size,in,bytes,version,uuid,length,assert,channel,position,header,size,in,bytes,header,is,not,fully,read,header,size,header,size,in,bytes,position,channel,position,return,new,translog,header,translog,uuid,primary,term,header,size,in,bytes
TranslogHeader -> static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException;1533641732;Read a translog header from the given path and file channel;static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException {_        _        final BufferedChecksumStreamInput in =_            new BufferedChecksumStreamInput(_                    new InputStreamStreamInput(java.nio.channels.Channels.newInputStream(channel), channel.size()),_                    path.toString())__        final int version__        try {_            version = CodecUtil.checkHeader(new InputStreamDataInput(in), TRANSLOG_CODEC, VERSION_CHECKSUMS, VERSION_PRIMARY_TERM)__        } catch (CorruptIndexException | IndexFormatTooOldException | IndexFormatTooNewException e) {_            tryReportOldVersionError(path, channel)__            throw new TranslogCorruptedException(path.toString(), "translog header corrupted", e)__        }_        if (version == VERSION_CHECKSUMS) {_            throw new IllegalStateException("pre-2.0 translog found [" + path + "]")__        }_        _        final int uuidLen = in.readInt()__        if (uuidLen > channel.size()) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "UUID length can't be larger than the translog")__        }_        final BytesRef uuid = new BytesRef(uuidLen)__        uuid.length = uuidLen__        in.read(uuid.bytes, uuid.offset, uuid.length)__        final BytesRef expectedUUID = new BytesRef(translogUUID)__        if (uuid.bytesEquals(expectedUUID) == false) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "expected shard UUID " + expectedUUID + " but got: " + uuid +_                            " this translog file belongs to a different translog")__        }_        _        final long primaryTerm__        if (version == VERSION_PRIMARY_TERM) {_            primaryTerm = in.readLong()__            assert primaryTerm >= 0 : "Primary term must be non-negative [" + primaryTerm + "]_ translog path [" + path + "]"__        } else {_            assert version == VERSION_CHECKPOINTS : "Unknown header version [" + version + "]"__            primaryTerm = UNKNOWN_PRIMARY_TERM__        }_        _        if (version >= VERSION_PRIMARY_TERM) {_            Translog.verifyChecksum(in)__        }_        final int headerSizeInBytes = headerSizeInBytes(version, uuid.length)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully read_ header size [" + headerSizeInBytes + "], position [" + channel.position() + "]"__        return new TranslogHeader(translogUUID, primaryTerm, headerSizeInBytes)__    };read,a,translog,header,from,the,given,path,and,file,channel;static,translog,header,read,final,string,translog,uuid,final,path,path,final,file,channel,channel,throws,ioexception,final,buffered,checksum,stream,input,in,new,buffered,checksum,stream,input,new,input,stream,stream,input,java,nio,channels,channels,new,input,stream,channel,channel,size,path,to,string,final,int,version,try,version,codec,util,check,header,new,input,stream,data,input,in,catch,corrupt,index,exception,index,format,too,old,exception,index,format,too,new,exception,e,try,report,old,version,error,path,channel,throw,new,translog,corrupted,exception,path,to,string,translog,header,corrupted,e,if,version,throw,new,illegal,state,exception,pre,2,0,translog,found,path,final,int,uuid,len,in,read,int,if,uuid,len,channel,size,throw,new,translog,corrupted,exception,path,to,string,uuid,length,can,t,be,larger,than,the,translog,final,bytes,ref,uuid,new,bytes,ref,uuid,len,uuid,length,uuid,len,in,read,uuid,bytes,uuid,offset,uuid,length,final,bytes,ref,expected,uuid,new,bytes,ref,translog,uuid,if,uuid,bytes,equals,expected,uuid,false,throw,new,translog,corrupted,exception,path,to,string,expected,shard,uuid,expected,uuid,but,got,uuid,this,translog,file,belongs,to,a,different,translog,final,long,primary,term,if,version,primary,term,in,read,long,assert,primary,term,0,primary,term,must,be,non,negative,primary,term,translog,path,path,else,assert,version,unknown,header,version,version,primary,term,if,version,translog,verify,checksum,in,final,int,header,size,in,bytes,header,size,in,bytes,version,uuid,length,assert,channel,position,header,size,in,bytes,header,is,not,fully,read,header,size,header,size,in,bytes,position,channel,position,return,new,translog,header,translog,uuid,primary,term,header,size,in,bytes
TranslogHeader -> static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException;1537371806;Read a translog header from the given path and file channel;static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException {_        _        final BufferedChecksumStreamInput in =_            new BufferedChecksumStreamInput(_                    new InputStreamStreamInput(java.nio.channels.Channels.newInputStream(channel), channel.size()),_                    path.toString())__        final int version__        try {_            version = CodecUtil.checkHeader(new InputStreamDataInput(in), TRANSLOG_CODEC, VERSION_CHECKSUMS, VERSION_PRIMARY_TERM)__        } catch (CorruptIndexException | IndexFormatTooOldException | IndexFormatTooNewException e) {_            tryReportOldVersionError(path, channel)__            throw new TranslogCorruptedException(path.toString(), "translog header corrupted", e)__        }_        if (version == VERSION_CHECKSUMS) {_            throw new IllegalStateException("pre-2.0 translog found [" + path + "]")__        }_        _        final int uuidLen = in.readInt()__        if (uuidLen > channel.size()) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "UUID length can't be larger than the translog")__        }_        final BytesRef uuid = new BytesRef(uuidLen)__        uuid.length = uuidLen__        in.read(uuid.bytes, uuid.offset, uuid.length)__        final BytesRef expectedUUID = new BytesRef(translogUUID)__        if (uuid.bytesEquals(expectedUUID) == false) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "expected shard UUID " + expectedUUID + " but got: " + uuid +_                            " this translog file belongs to a different translog")__        }_        _        final long primaryTerm__        if (version == VERSION_PRIMARY_TERM) {_            primaryTerm = in.readLong()__        } else {_            assert version == VERSION_CHECKPOINTS : "Unknown header version [" + version + "]"__            primaryTerm = UNKNOWN_PRIMARY_TERM__        }_        _        if (version >= VERSION_PRIMARY_TERM) {_            Translog.verifyChecksum(in)__        }_        assert primaryTerm >= 0 : "Primary term must be non-negative [" + primaryTerm + "]_ translog path [" + path + "]"___        final int headerSizeInBytes = headerSizeInBytes(version, uuid.length)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully read_ header size [" + headerSizeInBytes + "], position [" + channel.position() + "]"__        return new TranslogHeader(translogUUID, primaryTerm, headerSizeInBytes)__    };read,a,translog,header,from,the,given,path,and,file,channel;static,translog,header,read,final,string,translog,uuid,final,path,path,final,file,channel,channel,throws,ioexception,final,buffered,checksum,stream,input,in,new,buffered,checksum,stream,input,new,input,stream,stream,input,java,nio,channels,channels,new,input,stream,channel,channel,size,path,to,string,final,int,version,try,version,codec,util,check,header,new,input,stream,data,input,in,catch,corrupt,index,exception,index,format,too,old,exception,index,format,too,new,exception,e,try,report,old,version,error,path,channel,throw,new,translog,corrupted,exception,path,to,string,translog,header,corrupted,e,if,version,throw,new,illegal,state,exception,pre,2,0,translog,found,path,final,int,uuid,len,in,read,int,if,uuid,len,channel,size,throw,new,translog,corrupted,exception,path,to,string,uuid,length,can,t,be,larger,than,the,translog,final,bytes,ref,uuid,new,bytes,ref,uuid,len,uuid,length,uuid,len,in,read,uuid,bytes,uuid,offset,uuid,length,final,bytes,ref,expected,uuid,new,bytes,ref,translog,uuid,if,uuid,bytes,equals,expected,uuid,false,throw,new,translog,corrupted,exception,path,to,string,expected,shard,uuid,expected,uuid,but,got,uuid,this,translog,file,belongs,to,a,different,translog,final,long,primary,term,if,version,primary,term,in,read,long,else,assert,version,unknown,header,version,version,primary,term,if,version,translog,verify,checksum,in,assert,primary,term,0,primary,term,must,be,non,negative,primary,term,translog,path,path,final,int,header,size,in,bytes,header,size,in,bytes,version,uuid,length,assert,channel,position,header,size,in,bytes,header,is,not,fully,read,header,size,header,size,in,bytes,position,channel,position,return,new,translog,header,translog,uuid,primary,term,header,size,in,bytes
TranslogHeader -> static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException;1545221705;Read a translog header from the given path and file channel;static TranslogHeader read(final String translogUUID, final Path path, final FileChannel channel) throws IOException {_        _        final BufferedChecksumStreamInput in =_            new BufferedChecksumStreamInput(_                    new InputStreamStreamInput(java.nio.channels.Channels.newInputStream(channel), channel.size()),_                    path.toString())__        final int version__        try {_            version = CodecUtil.checkHeader(new InputStreamDataInput(in), TRANSLOG_CODEC, VERSION_CHECKSUMS, VERSION_PRIMARY_TERM)__        } catch (CorruptIndexException | IndexFormatTooOldException | IndexFormatTooNewException e) {_            tryReportOldVersionError(path, channel)__            throw new TranslogCorruptedException(path.toString(), "translog header corrupted", e)__        }_        if (version == VERSION_CHECKSUMS) {_            throw new IllegalStateException("pre-2.0 translog found [" + path + "]")__        }_        _        final int uuidLen = in.readInt()__        if (uuidLen > channel.size()) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "UUID length can't be larger than the translog")__        }_        final BytesRef uuid = new BytesRef(uuidLen)__        uuid.length = uuidLen__        in.read(uuid.bytes, uuid.offset, uuid.length)__        final BytesRef expectedUUID = new BytesRef(translogUUID)__        if (uuid.bytesEquals(expectedUUID) == false) {_            throw new TranslogCorruptedException(_                    path.toString(),_                    "expected shard UUID " + expectedUUID + " but got: " + uuid +_                            " this translog file belongs to a different translog")__        }_        _        final long primaryTerm__        if (version == VERSION_PRIMARY_TERM) {_            primaryTerm = in.readLong()__        } else {_            assert version == VERSION_CHECKPOINTS : "Unknown header version [" + version + "]"__            primaryTerm = UNASSIGNED_PRIMARY_TERM__        }_        _        if (version >= VERSION_PRIMARY_TERM) {_            Translog.verifyChecksum(in)__        }_        assert primaryTerm >= 0 : "Primary term must be non-negative [" + primaryTerm + "]_ translog path [" + path + "]"___        final int headerSizeInBytes = headerSizeInBytes(version, uuid.length)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully read_ header size [" + headerSizeInBytes + "], position [" + channel.position() + "]"__        return new TranslogHeader(translogUUID, primaryTerm, headerSizeInBytes)__    };read,a,translog,header,from,the,given,path,and,file,channel;static,translog,header,read,final,string,translog,uuid,final,path,path,final,file,channel,channel,throws,ioexception,final,buffered,checksum,stream,input,in,new,buffered,checksum,stream,input,new,input,stream,stream,input,java,nio,channels,channels,new,input,stream,channel,channel,size,path,to,string,final,int,version,try,version,codec,util,check,header,new,input,stream,data,input,in,catch,corrupt,index,exception,index,format,too,old,exception,index,format,too,new,exception,e,try,report,old,version,error,path,channel,throw,new,translog,corrupted,exception,path,to,string,translog,header,corrupted,e,if,version,throw,new,illegal,state,exception,pre,2,0,translog,found,path,final,int,uuid,len,in,read,int,if,uuid,len,channel,size,throw,new,translog,corrupted,exception,path,to,string,uuid,length,can,t,be,larger,than,the,translog,final,bytes,ref,uuid,new,bytes,ref,uuid,len,uuid,length,uuid,len,in,read,uuid,bytes,uuid,offset,uuid,length,final,bytes,ref,expected,uuid,new,bytes,ref,translog,uuid,if,uuid,bytes,equals,expected,uuid,false,throw,new,translog,corrupted,exception,path,to,string,expected,shard,uuid,expected,uuid,but,got,uuid,this,translog,file,belongs,to,a,different,translog,final,long,primary,term,if,version,primary,term,in,read,long,else,assert,version,unknown,header,version,version,primary,term,if,version,translog,verify,checksum,in,assert,primary,term,0,primary,term,must,be,non,negative,primary,term,translog,path,path,final,int,header,size,in,bytes,header,size,in,bytes,version,uuid,length,assert,channel,position,header,size,in,bytes,header,is,not,fully,read,header,size,header,size,in,bytes,position,channel,position,return,new,translog,header,translog,uuid,primary,term,header,size,in,bytes
TranslogHeader -> void write(final FileChannel channel) throws IOException;1524684173;Writes this header with the latest format into the file channel;void write(final FileChannel channel) throws IOException {_        _        @SuppressWarnings({"IOResourceOpenedButNotSafelyClosed", "resource"})_        final BufferedChecksumStreamOutput out = new BufferedChecksumStreamOutput(_            new OutputStreamStreamOutput(java.nio.channels.Channels.newOutputStream(channel)))__        CodecUtil.writeHeader(new OutputStreamDataOutput(out), TRANSLOG_CODEC, CURRENT_VERSION)__        _        final BytesRef uuid = new BytesRef(translogUUID)__        out.writeInt(uuid.length)__        out.writeBytes(uuid.bytes, uuid.offset, uuid.length)__        _        out.writeLong(primaryTerm)__        _        out.writeInt((int) out.getChecksum())__        out.flush()__        channel.force(true)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully written_ header size [" + headerSizeInBytes + "], channel position [" + channel.position() + "]"__    };writes,this,header,with,the,latest,format,into,the,file,channel;void,write,final,file,channel,channel,throws,ioexception,suppress,warnings,ioresource,opened,but,not,safely,closed,resource,final,buffered,checksum,stream,output,out,new,buffered,checksum,stream,output,new,output,stream,stream,output,java,nio,channels,channels,new,output,stream,channel,codec,util,write,header,new,output,stream,data,output,out,final,bytes,ref,uuid,new,bytes,ref,translog,uuid,out,write,int,uuid,length,out,write,bytes,uuid,bytes,uuid,offset,uuid,length,out,write,long,primary,term,out,write,int,int,out,get,checksum,out,flush,channel,force,true,assert,channel,position,header,size,in,bytes,header,is,not,fully,written,header,size,header,size,in,bytes,channel,position,channel,position
TranslogHeader -> void write(final FileChannel channel) throws IOException;1533641732;Writes this header with the latest format into the file channel;void write(final FileChannel channel) throws IOException {_        _        @SuppressWarnings({"IOResourceOpenedButNotSafelyClosed", "resource"})_        final BufferedChecksumStreamOutput out = new BufferedChecksumStreamOutput(_            new OutputStreamStreamOutput(java.nio.channels.Channels.newOutputStream(channel)))__        CodecUtil.writeHeader(new OutputStreamDataOutput(out), TRANSLOG_CODEC, CURRENT_VERSION)__        _        final BytesRef uuid = new BytesRef(translogUUID)__        out.writeInt(uuid.length)__        out.writeBytes(uuid.bytes, uuid.offset, uuid.length)__        _        out.writeLong(primaryTerm)__        _        out.writeInt((int) out.getChecksum())__        out.flush()__        channel.force(true)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully written_ header size [" + headerSizeInBytes + "], channel position [" + channel.position() + "]"__    };writes,this,header,with,the,latest,format,into,the,file,channel;void,write,final,file,channel,channel,throws,ioexception,suppress,warnings,ioresource,opened,but,not,safely,closed,resource,final,buffered,checksum,stream,output,out,new,buffered,checksum,stream,output,new,output,stream,stream,output,java,nio,channels,channels,new,output,stream,channel,codec,util,write,header,new,output,stream,data,output,out,final,bytes,ref,uuid,new,bytes,ref,translog,uuid,out,write,int,uuid,length,out,write,bytes,uuid,bytes,uuid,offset,uuid,length,out,write,long,primary,term,out,write,int,int,out,get,checksum,out,flush,channel,force,true,assert,channel,position,header,size,in,bytes,header,is,not,fully,written,header,size,header,size,in,bytes,channel,position,channel,position
TranslogHeader -> void write(final FileChannel channel) throws IOException;1537371806;Writes this header with the latest format into the file channel;void write(final FileChannel channel) throws IOException {_        _        @SuppressWarnings({"IOResourceOpenedButNotSafelyClosed", "resource"})_        final BufferedChecksumStreamOutput out = new BufferedChecksumStreamOutput(_            new OutputStreamStreamOutput(java.nio.channels.Channels.newOutputStream(channel)))__        CodecUtil.writeHeader(new OutputStreamDataOutput(out), TRANSLOG_CODEC, CURRENT_VERSION)__        _        final BytesRef uuid = new BytesRef(translogUUID)__        out.writeInt(uuid.length)__        out.writeBytes(uuid.bytes, uuid.offset, uuid.length)__        _        out.writeLong(primaryTerm)__        _        out.writeInt((int) out.getChecksum())__        out.flush()__        channel.force(true)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully written_ header size [" + headerSizeInBytes + "], channel position [" + channel.position() + "]"__    };writes,this,header,with,the,latest,format,into,the,file,channel;void,write,final,file,channel,channel,throws,ioexception,suppress,warnings,ioresource,opened,but,not,safely,closed,resource,final,buffered,checksum,stream,output,out,new,buffered,checksum,stream,output,new,output,stream,stream,output,java,nio,channels,channels,new,output,stream,channel,codec,util,write,header,new,output,stream,data,output,out,final,bytes,ref,uuid,new,bytes,ref,translog,uuid,out,write,int,uuid,length,out,write,bytes,uuid,bytes,uuid,offset,uuid,length,out,write,long,primary,term,out,write,int,int,out,get,checksum,out,flush,channel,force,true,assert,channel,position,header,size,in,bytes,header,is,not,fully,written,header,size,header,size,in,bytes,channel,position,channel,position
TranslogHeader -> void write(final FileChannel channel) throws IOException;1545221705;Writes this header with the latest format into the file channel;void write(final FileChannel channel) throws IOException {_        _        @SuppressWarnings({"IOResourceOpenedButNotSafelyClosed", "resource"})_        final BufferedChecksumStreamOutput out = new BufferedChecksumStreamOutput(_            new OutputStreamStreamOutput(java.nio.channels.Channels.newOutputStream(channel)))__        CodecUtil.writeHeader(new OutputStreamDataOutput(out), TRANSLOG_CODEC, CURRENT_VERSION)__        _        final BytesRef uuid = new BytesRef(translogUUID)__        out.writeInt(uuid.length)__        out.writeBytes(uuid.bytes, uuid.offset, uuid.length)__        _        out.writeLong(primaryTerm)__        _        out.writeInt((int) out.getChecksum())__        out.flush()__        channel.force(true)__        assert channel.position() == headerSizeInBytes :_            "Header is not fully written_ header size [" + headerSizeInBytes + "], channel position [" + channel.position() + "]"__    };writes,this,header,with,the,latest,format,into,the,file,channel;void,write,final,file,channel,channel,throws,ioexception,suppress,warnings,ioresource,opened,but,not,safely,closed,resource,final,buffered,checksum,stream,output,out,new,buffered,checksum,stream,output,new,output,stream,stream,output,java,nio,channels,channels,new,output,stream,channel,codec,util,write,header,new,output,stream,data,output,out,final,bytes,ref,uuid,new,bytes,ref,translog,uuid,out,write,int,uuid,length,out,write,bytes,uuid,bytes,uuid,offset,uuid,length,out,write,long,primary,term,out,write,int,int,out,get,checksum,out,flush,channel,force,true,assert,channel,position,header,size,in,bytes,header,is,not,fully,written,header,size,header,size,in,bytes,channel,position,channel,position
TranslogHeader -> TranslogHeader(String translogUUID, long primaryTerm);1524684173;Creates a new translog header with the given uuid and primary term.__@param translogUUID this UUID is used to prevent accidental recovery from a transaction log that belongs to a_different engine_@param primaryTerm  the primary term of the owning index shard when creating (eg. rolling) this translog file._All operations' terms in this translog file are enforced to be at most this term.;TranslogHeader(String translogUUID, long primaryTerm) {_        this(translogUUID, primaryTerm, headerSizeInBytes(translogUUID))__        assert primaryTerm >= 0 : "Primary term must be non-negative_ term [" + primaryTerm + "]"__    };creates,a,new,translog,header,with,the,given,uuid,and,primary,term,param,translog,uuid,this,uuid,is,used,to,prevent,accidental,recovery,from,a,transaction,log,that,belongs,to,a,different,engine,param,primary,term,the,primary,term,of,the,owning,index,shard,when,creating,eg,rolling,this,translog,file,all,operations,terms,in,this,translog,file,are,enforced,to,be,at,most,this,term;translog,header,string,translog,uuid,long,primary,term,this,translog,uuid,primary,term,header,size,in,bytes,translog,uuid,assert,primary,term,0,primary,term,must,be,non,negative,term,primary,term
TranslogHeader -> TranslogHeader(String translogUUID, long primaryTerm);1533641732;Creates a new translog header with the given uuid and primary term.__@param translogUUID this UUID is used to prevent accidental recovery from a transaction log that belongs to a_different engine_@param primaryTerm  the primary term of the owning index shard when creating (eg. rolling) this translog file._All operations' terms in this translog file are enforced to be at most this term.;TranslogHeader(String translogUUID, long primaryTerm) {_        this(translogUUID, primaryTerm, headerSizeInBytes(translogUUID))__        assert primaryTerm >= 0 : "Primary term must be non-negative_ term [" + primaryTerm + "]"__    };creates,a,new,translog,header,with,the,given,uuid,and,primary,term,param,translog,uuid,this,uuid,is,used,to,prevent,accidental,recovery,from,a,transaction,log,that,belongs,to,a,different,engine,param,primary,term,the,primary,term,of,the,owning,index,shard,when,creating,eg,rolling,this,translog,file,all,operations,terms,in,this,translog,file,are,enforced,to,be,at,most,this,term;translog,header,string,translog,uuid,long,primary,term,this,translog,uuid,primary,term,header,size,in,bytes,translog,uuid,assert,primary,term,0,primary,term,must,be,non,negative,term,primary,term
TranslogHeader -> TranslogHeader(String translogUUID, long primaryTerm);1537371806;Creates a new translog header with the given uuid and primary term.__@param translogUUID this UUID is used to prevent accidental recovery from a transaction log that belongs to a_different engine_@param primaryTerm  the primary term of the owning index shard when creating (eg. rolling) this translog file._All operations' terms in this translog file are enforced to be at most this term.;TranslogHeader(String translogUUID, long primaryTerm) {_        this(translogUUID, primaryTerm, headerSizeInBytes(translogUUID))__        assert primaryTerm >= 0 : "Primary term must be non-negative_ term [" + primaryTerm + "]"__    };creates,a,new,translog,header,with,the,given,uuid,and,primary,term,param,translog,uuid,this,uuid,is,used,to,prevent,accidental,recovery,from,a,transaction,log,that,belongs,to,a,different,engine,param,primary,term,the,primary,term,of,the,owning,index,shard,when,creating,eg,rolling,this,translog,file,all,operations,terms,in,this,translog,file,are,enforced,to,be,at,most,this,term;translog,header,string,translog,uuid,long,primary,term,this,translog,uuid,primary,term,header,size,in,bytes,translog,uuid,assert,primary,term,0,primary,term,must,be,non,negative,term,primary,term
TranslogHeader -> TranslogHeader(String translogUUID, long primaryTerm);1545221705;Creates a new translog header with the given uuid and primary term.__@param translogUUID this UUID is used to prevent accidental recovery from a transaction log that belongs to a_different engine_@param primaryTerm  the primary term of the owning index shard when creating (eg. rolling) this translog file._All operations' terms in this translog file are enforced to be at most this term.;TranslogHeader(String translogUUID, long primaryTerm) {_        this(translogUUID, primaryTerm, headerSizeInBytes(translogUUID))__        assert primaryTerm >= 0 : "Primary term must be non-negative_ term [" + primaryTerm + "]"__    };creates,a,new,translog,header,with,the,given,uuid,and,primary,term,param,translog,uuid,this,uuid,is,used,to,prevent,accidental,recovery,from,a,transaction,log,that,belongs,to,a,different,engine,param,primary,term,the,primary,term,of,the,owning,index,shard,when,creating,eg,rolling,this,translog,file,all,operations,terms,in,this,translog,file,are,enforced,to,be,at,most,this,term;translog,header,string,translog,uuid,long,primary,term,this,translog,uuid,primary,term,header,size,in,bytes,translog,uuid,assert,primary,term,0,primary,term,must,be,non,negative,term,primary,term
