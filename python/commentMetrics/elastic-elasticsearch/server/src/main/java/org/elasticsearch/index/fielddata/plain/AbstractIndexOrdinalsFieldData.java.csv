commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public OrdinalMap getOrdinalMap() {     return null. }
false;public;1;34;;@Override public IndexOrdinalsFieldData loadGlobal(DirectoryReader indexReader) {     if (indexReader.leaves().size() <= 1) {         // ordinals are already global         return this.     }     boolean fieldFound = false.     for (LeafReaderContext context : indexReader.leaves()) {         if (context.reader().getFieldInfos().fieldInfo(getFieldName()) != null) {             fieldFound = true.             break.         }     }     if (fieldFound == false) {         // The next time the field is found, we do cache.         try {             return GlobalOrdinalsBuilder.buildEmpty(indexSettings, indexReader, this).         } catch (IOException e) {             throw new RuntimeException(e).         }     }     try {         return cache.load(indexReader, this).     } catch (Exception e) {         if (e instanceof ElasticsearchException) {             throw (ElasticsearchException) e.         } else {             throw new ElasticsearchException(e).         }     } }
false;public;1;5;;@Override public IndexOrdinalsFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception {     return GlobalOrdinalsBuilder.build(indexReader, this, indexSettings, breakerService, logger, AbstractAtomicOrdinalsFieldData.DEFAULT_SCRIPT_FUNCTION). }
false;protected;1;4;;@Override protected AtomicOrdinalsFieldData empty(int maxDoc) {     return AbstractAtomicOrdinalsFieldData.empty(). }
false;protected;3;21;;protected TermsEnum filter(Terms terms, TermsEnum iterator, LeafReader reader) throws IOException {     if (iterator == null) {         return null.     }     int docCount = terms.getDocCount().     if (docCount == -1) {         docCount = reader.maxDoc().     }     if (docCount >= minSegmentSize) {         final int minFreq = minFrequency > 1.0 ? (int) minFrequency : (int) (docCount * minFrequency).         final int maxFreq = maxFrequency > 1.0 ? (int) maxFrequency : (int) (docCount * maxFrequency).         if (minFreq > 1 || maxFreq < docCount) {             iterator = new FrequencyFilter(iterator, minFreq, maxFreq).         }     }     return iterator. }
false;protected;1;8;;@Override protected AcceptStatus accept(BytesRef arg0) throws IOException {     int docFreq = docFreq().     if (docFreq >= minFreq && docFreq <= maxFreq) {         return AcceptStatus.YES.     }     return AcceptStatus.NO. }
