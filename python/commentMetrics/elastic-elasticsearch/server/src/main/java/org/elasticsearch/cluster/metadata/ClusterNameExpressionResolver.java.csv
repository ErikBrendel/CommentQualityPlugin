commented;modifiers;parameterAmount;loc;comment;code
true;public;2;9;/**  * Resolves the provided cluster expression to matching cluster names. This method only  * supports exact or wildcard matches.  *  * @param remoteClusters    the aliases for remote clusters  * @param clusterExpression the expressions that can be resolved to cluster names.  * @return the resolved cluster aliases.  */ ;/**  * Resolves the provided cluster expression to matching cluster names. This method only  * supports exact or wildcard matches.  *  * @param remoteClusters    the aliases for remote clusters  * @param clusterExpression the expressions that can be resolved to cluster names.  * @return the resolved cluster aliases.  */ public List<String> resolveClusterNames(Set<String> remoteClusters, String clusterExpression) {     if (remoteClusters.contains(clusterExpression)) {         return Collections.singletonList(clusterExpression).     } else if (Regex.isSimpleMatchPattern(clusterExpression)) {         return wildcardResolver.resolve(remoteClusters, clusterExpression).     } else {         return Collections.emptyList().     } }
false;private;2;12;;private List<String> resolve(Set<String> remoteClusters, String clusterExpression) {     if (isTrivialWildcard(clusterExpression)) {         return resolveTrivialWildcard(remoteClusters).     }     Set<String> matches = matches(remoteClusters, clusterExpression).     if (matches.isEmpty()) {         return Collections.emptyList().     } else {         return new ArrayList<>(matches).     } }
false;private;1;3;;private boolean isTrivialWildcard(String clusterExpression) {     return Regex.isMatchAllPattern(clusterExpression). }
false;private;1;3;;private List<String> resolveTrivialWildcard(Set<String> remoteClusters) {     return new ArrayList<>(remoteClusters). }
false;private,static;2;3;;private static Set<String> matches(Set<String> remoteClusters, String expression) {     return otherWildcard(remoteClusters, expression). }
false;private,static;2;6;;private static Set<String> otherWildcard(Set<String> remoteClusters, String expression) {     final String pattern = expression.     return remoteClusters.stream().filter(n -> Regex.simpleMatch(pattern, n)).collect(Collectors.toSet()). }
