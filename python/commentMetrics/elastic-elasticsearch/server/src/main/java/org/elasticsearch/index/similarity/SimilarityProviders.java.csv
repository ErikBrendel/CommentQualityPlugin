# id;timestamp;commentText;codeText;commentWords;codeWords
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1524684173;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1536314350;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1540486836;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1540583181;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1541592065;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static Normalization parseNormalization(Settings settings);1544013836;Parses the given Settings and creates the appropriate {@link Normalization}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Normalization parseNormalization(Settings settings) {_        String normalization = settings.get("normalization")___        if ("no".equals(normalization)) {_            return new Normalization.NoNormalization()__        } else if ("h1".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h1.c", 1f)__            return new NormalizationH1(c)__        } else if ("h2".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h2.c", 1f)__            return new NormalizationH2(c)__        } else if ("h3".equals(normalization)) {_            float c = settings.getAsFloat("normalization.h3.c", 800f)__            return new NormalizationH3(c)__        } else if ("z".equals(normalization)) {_            float z = settings.getAsFloat("normalization.z.z", 0.30f)__            return new NormalizationZ(z)__        } else {_            throw new IllegalArgumentException("Unsupported Normalization [" + normalization + "]")__        }_    };parses,the,given,settings,and,creates,the,appropriate,link,normalization,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,normalization,parse,normalization,settings,settings,string,normalization,settings,get,normalization,if,no,equals,normalization,return,new,normalization,no,normalization,else,if,h1,equals,normalization,float,c,settings,get,as,float,normalization,h1,c,1f,return,new,normalization,h1,c,else,if,h2,equals,normalization,float,c,settings,get,as,float,normalization,h2,c,1f,return,new,normalization,h2,c,else,if,h3,equals,normalization,float,c,settings,get,as,float,normalization,h3,c,800f,return,new,normalization,h3,c,else,if,z,equals,normalization,float,z,settings,get,as,float,normalization,z,z,0,30f,return,new,normalization,z,z,else,throw,new,illegal,argument,exception,unsupported,normalization,normalization
SimilarityProviders -> private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings);1536314350;Parses the given Settings and creates the appropriate {@link BasicModel}__@param settings Settings to parse_@return {@link BasicModel} referred to in the Settings;private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings) {_        String basicModel = settings.get("basic_model")__        BasicModel model = BASIC_MODELS.get(basicModel)___        if (model == null) {_            String replacement = LEGACY_BASIC_MODELS.get(basicModel)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("Basic model [" + basicModel + "] isn't supported anymore, " +_                        "please use another model.")__                } else {_                    DEPRECATION_LOGGER.deprecated("Basic model [" + basicModel +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    model = BASIC_MODELS.get(replacement)__                    assert model != null__                }_            }_        }__        if (model == null) {_            throw new IllegalArgumentException("Unsupported BasicModel [" + basicModel + "], expected one of " + BASIC_MODELS.keySet())__        }_        return model__    };parses,the,given,settings,and,creates,the,appropriate,link,basic,model,param,settings,settings,to,parse,return,link,basic,model,referred,to,in,the,settings;private,static,basic,model,parse,basic,model,version,index,created,version,settings,settings,string,basic,model,settings,get,basic,model,model,get,basic,model,if,model,null,string,replacement,get,basic,model,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,basic,model,basic,model,isn,t,supported,anymore,please,use,another,model,else,deprecated,basic,model,basic,model,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,model,get,replacement,assert,model,null,if,model,null,throw,new,illegal,argument,exception,unsupported,basic,model,basic,model,expected,one,of,key,set,return,model
SimilarityProviders -> private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings);1540486836;Parses the given Settings and creates the appropriate {@link BasicModel}__@param settings Settings to parse_@return {@link BasicModel} referred to in the Settings;private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings) {_        String basicModel = settings.get("basic_model")__        BasicModel model = BASIC_MODELS.get(basicModel)___        if (model == null) {_            String replacement = LEGACY_BASIC_MODELS.get(basicModel)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("Basic model [" + basicModel + "] isn't supported anymore, " +_                        "please use another model.")__                } else {_                    DEPRECATION_LOGGER.deprecated("Basic model [" + basicModel +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    model = BASIC_MODELS.get(replacement)__                    assert model != null__                }_            }_        }__        if (model == null) {_            throw new IllegalArgumentException("Unsupported BasicModel [" + basicModel + "], expected one of " + BASIC_MODELS.keySet())__        }_        return model__    };parses,the,given,settings,and,creates,the,appropriate,link,basic,model,param,settings,settings,to,parse,return,link,basic,model,referred,to,in,the,settings;private,static,basic,model,parse,basic,model,version,index,created,version,settings,settings,string,basic,model,settings,get,basic,model,model,get,basic,model,if,model,null,string,replacement,get,basic,model,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,basic,model,basic,model,isn,t,supported,anymore,please,use,another,model,else,deprecated,basic,model,basic,model,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,model,get,replacement,assert,model,null,if,model,null,throw,new,illegal,argument,exception,unsupported,basic,model,basic,model,expected,one,of,key,set,return,model
SimilarityProviders -> private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings);1540583181;Parses the given Settings and creates the appropriate {@link BasicModel}__@param settings Settings to parse_@return {@link BasicModel} referred to in the Settings;private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings) {_        String basicModel = settings.get("basic_model")__        BasicModel model = BASIC_MODELS.get(basicModel)___        if (model == null) {_            String replacement = LEGACY_BASIC_MODELS.get(basicModel)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("Basic model [" + basicModel + "] isn't supported anymore, " +_                        "please use another model.")__                } else {_                    deprecationLogger.deprecated("Basic model [" + basicModel +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    model = BASIC_MODELS.get(replacement)__                    assert model != null__                }_            }_        }__        if (model == null) {_            throw new IllegalArgumentException("Unsupported BasicModel [" + basicModel + "], expected one of " + BASIC_MODELS.keySet())__        }_        return model__    };parses,the,given,settings,and,creates,the,appropriate,link,basic,model,param,settings,settings,to,parse,return,link,basic,model,referred,to,in,the,settings;private,static,basic,model,parse,basic,model,version,index,created,version,settings,settings,string,basic,model,settings,get,basic,model,model,get,basic,model,if,model,null,string,replacement,get,basic,model,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,basic,model,basic,model,isn,t,supported,anymore,please,use,another,model,else,deprecation,logger,deprecated,basic,model,basic,model,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,model,get,replacement,assert,model,null,if,model,null,throw,new,illegal,argument,exception,unsupported,basic,model,basic,model,expected,one,of,key,set,return,model
SimilarityProviders -> private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings);1541592065;Parses the given Settings and creates the appropriate {@link BasicModel}__@param settings Settings to parse_@return {@link BasicModel} referred to in the Settings;private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings) {_        String basicModel = settings.get("basic_model")__        BasicModel model = BASIC_MODELS.get(basicModel)___        if (model == null) {_            String replacement = LEGACY_BASIC_MODELS.get(basicModel)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0)) {_                    throw new IllegalArgumentException("Basic model [" + basicModel + "] isn't supported anymore, " +_                        "please use another model.")__                } else {_                    deprecationLogger.deprecated("Basic model [" + basicModel +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    model = BASIC_MODELS.get(replacement)__                    assert model != null__                }_            }_        }__        if (model == null) {_            throw new IllegalArgumentException("Unsupported BasicModel [" + basicModel + "], expected one of " + BASIC_MODELS.keySet())__        }_        return model__    };parses,the,given,settings,and,creates,the,appropriate,link,basic,model,param,settings,settings,to,parse,return,link,basic,model,referred,to,in,the,settings;private,static,basic,model,parse,basic,model,version,index,created,version,settings,settings,string,basic,model,settings,get,basic,model,model,get,basic,model,if,model,null,string,replacement,get,basic,model,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,basic,model,basic,model,isn,t,supported,anymore,please,use,another,model,else,deprecation,logger,deprecated,basic,model,basic,model,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,model,get,replacement,assert,model,null,if,model,null,throw,new,illegal,argument,exception,unsupported,basic,model,basic,model,expected,one,of,key,set,return,model
SimilarityProviders -> private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings);1544013836;Parses the given Settings and creates the appropriate {@link BasicModel}__@param settings Settings to parse_@return {@link BasicModel} referred to in the Settings;private static BasicModel parseBasicModel(Version indexCreatedVersion, Settings settings) {_        String basicModel = settings.get("basic_model")__        BasicModel model = BASIC_MODELS.get(basicModel)___        if (model == null) {_            String replacement = LEGACY_BASIC_MODELS.get(basicModel)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0)) {_                    throw new IllegalArgumentException("Basic model [" + basicModel + "] isn't supported anymore, " +_                        "please use another model.")__                } else {_                    deprecationLogger.deprecated("Basic model [" + basicModel +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    model = BASIC_MODELS.get(replacement)__                    assert model != null__                }_            }_        }__        if (model == null) {_            throw new IllegalArgumentException("Unsupported BasicModel [" + basicModel + "], expected one of " + BASIC_MODELS.keySet())__        }_        return model__    };parses,the,given,settings,and,creates,the,appropriate,link,basic,model,param,settings,settings,to,parse,return,link,basic,model,referred,to,in,the,settings;private,static,basic,model,parse,basic,model,version,index,created,version,settings,settings,string,basic,model,settings,get,basic,model,model,get,basic,model,if,model,null,string,replacement,get,basic,model,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,basic,model,basic,model,isn,t,supported,anymore,please,use,another,model,else,deprecation,logger,deprecated,basic,model,basic,model,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,model,get,replacement,assert,model,null,if,model,null,throw,new,illegal,argument,exception,unsupported,basic,model,basic,model,expected,one,of,key,set,return,model
SimilarityProviders -> private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings);1536314350;Parses the given Settings and creates the appropriate {@link AfterEffect}__@param settings Settings to parse_@return {@link AfterEffect} referred to in the Settings;private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings) {_        String afterEffect = settings.get("after_effect")__        AfterEffect effect = AFTER_EFFECTS.get(afterEffect)___        if (effect == null) {_            String replacement = LEGACY_AFTER_EFFECTS.get(afterEffect)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("After effect [" + afterEffect +_                        "] isn't supported anymore, please use another effect.")__                } else {_                    DEPRECATION_LOGGER.deprecated("After effect [" + afterEffect +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    effect = AFTER_EFFECTS.get(replacement)__                    assert effect != null__                }_            }_        }__        if (effect == null) {_            throw new IllegalArgumentException("Unsupported AfterEffect [" + afterEffect + "], expected one of " + AFTER_EFFECTS.keySet())__        }_        return effect__    };parses,the,given,settings,and,creates,the,appropriate,link,after,effect,param,settings,settings,to,parse,return,link,after,effect,referred,to,in,the,settings;private,static,after,effect,parse,after,effect,version,index,created,version,settings,settings,string,after,effect,settings,get,after,effect,effect,get,after,effect,if,effect,null,string,replacement,get,after,effect,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,after,effect,after,effect,isn,t,supported,anymore,please,use,another,effect,else,deprecated,after,effect,after,effect,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,effect,get,replacement,assert,effect,null,if,effect,null,throw,new,illegal,argument,exception,unsupported,after,effect,after,effect,expected,one,of,key,set,return,effect
SimilarityProviders -> private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings);1540486836;Parses the given Settings and creates the appropriate {@link AfterEffect}__@param settings Settings to parse_@return {@link AfterEffect} referred to in the Settings;private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings) {_        String afterEffect = settings.get("after_effect")__        AfterEffect effect = AFTER_EFFECTS.get(afterEffect)___        if (effect == null) {_            String replacement = LEGACY_AFTER_EFFECTS.get(afterEffect)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("After effect [" + afterEffect +_                        "] isn't supported anymore, please use another effect.")__                } else {_                    DEPRECATION_LOGGER.deprecated("After effect [" + afterEffect +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    effect = AFTER_EFFECTS.get(replacement)__                    assert effect != null__                }_            }_        }__        if (effect == null) {_            throw new IllegalArgumentException("Unsupported AfterEffect [" + afterEffect + "], expected one of " + AFTER_EFFECTS.keySet())__        }_        return effect__    };parses,the,given,settings,and,creates,the,appropriate,link,after,effect,param,settings,settings,to,parse,return,link,after,effect,referred,to,in,the,settings;private,static,after,effect,parse,after,effect,version,index,created,version,settings,settings,string,after,effect,settings,get,after,effect,effect,get,after,effect,if,effect,null,string,replacement,get,after,effect,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,after,effect,after,effect,isn,t,supported,anymore,please,use,another,effect,else,deprecated,after,effect,after,effect,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,effect,get,replacement,assert,effect,null,if,effect,null,throw,new,illegal,argument,exception,unsupported,after,effect,after,effect,expected,one,of,key,set,return,effect
SimilarityProviders -> private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings);1540583181;Parses the given Settings and creates the appropriate {@link AfterEffect}__@param settings Settings to parse_@return {@link AfterEffect} referred to in the Settings;private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings) {_        String afterEffect = settings.get("after_effect")__        AfterEffect effect = AFTER_EFFECTS.get(afterEffect)___        if (effect == null) {_            String replacement = LEGACY_AFTER_EFFECTS.get(afterEffect)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0_alpha1)) {_                    throw new IllegalArgumentException("After effect [" + afterEffect +_                        "] isn't supported anymore, please use another effect.")__                } else {_                    deprecationLogger.deprecated("After effect [" + afterEffect +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    effect = AFTER_EFFECTS.get(replacement)__                    assert effect != null__                }_            }_        }__        if (effect == null) {_            throw new IllegalArgumentException("Unsupported AfterEffect [" + afterEffect + "], expected one of " + AFTER_EFFECTS.keySet())__        }_        return effect__    };parses,the,given,settings,and,creates,the,appropriate,link,after,effect,param,settings,settings,to,parse,return,link,after,effect,referred,to,in,the,settings;private,static,after,effect,parse,after,effect,version,index,created,version,settings,settings,string,after,effect,settings,get,after,effect,effect,get,after,effect,if,effect,null,string,replacement,get,after,effect,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,after,effect,after,effect,isn,t,supported,anymore,please,use,another,effect,else,deprecation,logger,deprecated,after,effect,after,effect,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,effect,get,replacement,assert,effect,null,if,effect,null,throw,new,illegal,argument,exception,unsupported,after,effect,after,effect,expected,one,of,key,set,return,effect
SimilarityProviders -> private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings);1541592065;Parses the given Settings and creates the appropriate {@link AfterEffect}__@param settings Settings to parse_@return {@link AfterEffect} referred to in the Settings;private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings) {_        String afterEffect = settings.get("after_effect")__        AfterEffect effect = AFTER_EFFECTS.get(afterEffect)___        if (effect == null) {_            String replacement = LEGACY_AFTER_EFFECTS.get(afterEffect)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0)) {_                    throw new IllegalArgumentException("After effect [" + afterEffect +_                        "] isn't supported anymore, please use another effect.")__                } else {_                    deprecationLogger.deprecated("After effect [" + afterEffect +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    effect = AFTER_EFFECTS.get(replacement)__                    assert effect != null__                }_            }_        }__        if (effect == null) {_            throw new IllegalArgumentException("Unsupported AfterEffect [" + afterEffect + "], expected one of " + AFTER_EFFECTS.keySet())__        }_        return effect__    };parses,the,given,settings,and,creates,the,appropriate,link,after,effect,param,settings,settings,to,parse,return,link,after,effect,referred,to,in,the,settings;private,static,after,effect,parse,after,effect,version,index,created,version,settings,settings,string,after,effect,settings,get,after,effect,effect,get,after,effect,if,effect,null,string,replacement,get,after,effect,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,after,effect,after,effect,isn,t,supported,anymore,please,use,another,effect,else,deprecation,logger,deprecated,after,effect,after,effect,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,effect,get,replacement,assert,effect,null,if,effect,null,throw,new,illegal,argument,exception,unsupported,after,effect,after,effect,expected,one,of,key,set,return,effect
SimilarityProviders -> private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings);1544013836;Parses the given Settings and creates the appropriate {@link AfterEffect}__@param settings Settings to parse_@return {@link AfterEffect} referred to in the Settings;private static AfterEffect parseAfterEffect(Version indexCreatedVersion, Settings settings) {_        String afterEffect = settings.get("after_effect")__        AfterEffect effect = AFTER_EFFECTS.get(afterEffect)___        if (effect == null) {_            String replacement = LEGACY_AFTER_EFFECTS.get(afterEffect)__            if (replacement != null) {_                if (indexCreatedVersion.onOrAfter(Version.V_7_0_0)) {_                    throw new IllegalArgumentException("After effect [" + afterEffect +_                        "] isn't supported anymore, please use another effect.")__                } else {_                    deprecationLogger.deprecated("After effect [" + afterEffect +_                        "] isn't supported anymore and has arbitrarily been replaced with [" + replacement + "].")__                    effect = AFTER_EFFECTS.get(replacement)__                    assert effect != null__                }_            }_        }__        if (effect == null) {_            throw new IllegalArgumentException("Unsupported AfterEffect [" + afterEffect + "], expected one of " + AFTER_EFFECTS.keySet())__        }_        return effect__    };parses,the,given,settings,and,creates,the,appropriate,link,after,effect,param,settings,settings,to,parse,return,link,after,effect,referred,to,in,the,settings;private,static,after,effect,parse,after,effect,version,index,created,version,settings,settings,string,after,effect,settings,get,after,effect,effect,get,after,effect,if,effect,null,string,replacement,get,after,effect,if,replacement,null,if,index,created,version,on,or,after,version,throw,new,illegal,argument,exception,after,effect,after,effect,isn,t,supported,anymore,please,use,another,effect,else,deprecation,logger,deprecated,after,effect,after,effect,isn,t,supported,anymore,and,has,arbitrarily,been,replaced,with,replacement,effect,get,replacement,assert,effect,null,if,effect,null,throw,new,illegal,argument,exception,unsupported,after,effect,after,effect,expected,one,of,key,set,return,effect
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1524684173;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1536314350;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1540486836;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1540583181;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1541592065;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Lambda parseLambda(Settings settings);1544013836;Parses the given Settings and creates the appropriate {@link Lambda}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Lambda parseLambda(Settings settings) {_        String rawLambda = settings.get("lambda")__        Lambda lambda = LAMBDAS.get(rawLambda)__        if (lambda == null) {_            throw new IllegalArgumentException("Unsupported Lambda [" + rawLambda + "]")__        }_        return lambda__    };parses,the,given,settings,and,creates,the,appropriate,link,lambda,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,lambda,parse,lambda,settings,settings,string,raw,lambda,settings,get,lambda,lambda,lambda,lambdas,get,raw,lambda,if,lambda,null,throw,new,illegal,argument,exception,unsupported,lambda,raw,lambda,return,lambda
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1524684173;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1536314350;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1540486836;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1540583181;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1541592065;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
SimilarityProviders -> private static Distribution parseDistribution(Settings settings);1544013836;Parses the given Settings and creates the appropriate {@link Distribution}__@param settings Settings to parse_@return {@link Normalization} referred to in the Settings;private static Distribution parseDistribution(Settings settings) {_        String rawDistribution = settings.get("distribution")__        Distribution distribution = DISTRIBUTIONS.get(rawDistribution)__        if (distribution == null) {_            throw new IllegalArgumentException("Unsupported Distribution [" + rawDistribution + "]")__        }_        return distribution__    };parses,the,given,settings,and,creates,the,appropriate,link,distribution,param,settings,settings,to,parse,return,link,normalization,referred,to,in,the,settings;private,static,distribution,parse,distribution,settings,settings,string,raw,distribution,settings,get,distribution,distribution,distribution,distributions,get,raw,distribution,if,distribution,null,throw,new,illegal,argument,exception,unsupported,distribution,raw,distribution,return,distribution
