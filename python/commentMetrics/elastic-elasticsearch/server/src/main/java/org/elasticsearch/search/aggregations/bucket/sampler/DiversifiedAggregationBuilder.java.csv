commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     return PARSER.parse(parser, new DiversifiedAggregationBuilder(aggregationName), null). }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new DiversifiedAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;6;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeVInt(shardSize).     out.writeVInt(maxDocsPerValue).     out.writeOptionalString(executionHint). }
true;public;1;8;/**  * Set the max num docs to be returned from each shard.  */ ;/**  * Set the max num docs to be returned from each shard.  */ public DiversifiedAggregationBuilder shardSize(int shardSize) {     if (shardSize < 0) {         throw new IllegalArgumentException("[shardSize] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]").     }     this.shardSize = shardSize.     return this. }
true;public;0;3;/**  * Get the max num docs to be returned from each shard.  */ ;/**  * Get the max num docs to be returned from each shard.  */ public int shardSize() {     return shardSize. }
true;public;1;8;/**  * Set the max num docs to be returned per value.  */ ;/**  * Set the max num docs to be returned per value.  */ public DiversifiedAggregationBuilder maxDocsPerValue(int maxDocsPerValue) {     if (maxDocsPerValue < 0) {         throw new IllegalArgumentException("[maxDocsPerValue] must be greater than or equal to 0. Found [" + maxDocsPerValue + "] in [" + name + "]").     }     this.maxDocsPerValue = maxDocsPerValue.     return this. }
true;public;0;3;/**  * Get the max num docs to be returned per value.  */ ;/**  * Get the max num docs to be returned per value.  */ public int maxDocsPerValue() {     return maxDocsPerValue. }
true;public;1;4;/**  * Set the execution hint.  */ ;/**  * Set the execution hint.  */ public DiversifiedAggregationBuilder executionHint(String executionHint) {     this.executionHint = executionHint.     return this. }
true;public;0;3;/**  * Get the execution hint.  */ ;/**  * Get the execution hint.  */ public String executionHint() {     return executionHint. }
false;protected;4;6;;@Override protected ValuesSourceAggregatorFactory<ValuesSource, ?> innerBuild(SearchContext context, ValuesSourceConfig<ValuesSource> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     return new DiversifiedAggregatorFactory(name, config, shardSize, maxDocsPerValue, executionHint, context, parent, subFactoriesBuilder, metaData). }
false;protected;2;9;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(SamplerAggregator.SHARD_SIZE_FIELD.getPreferredName(), shardSize).     builder.field(SamplerAggregator.MAX_DOCS_PER_VALUE_FIELD.getPreferredName(), maxDocsPerValue).     if (executionHint != null) {         builder.field(SamplerAggregator.EXECUTION_HINT_FIELD.getPreferredName(), executionHint).     }     return builder. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(shardSize, maxDocsPerValue, executionHint). }
false;protected;1;7;;@Override protected boolean innerEquals(Object obj) {     DiversifiedAggregationBuilder other = (DiversifiedAggregationBuilder) obj.     return Objects.equals(shardSize, other.shardSize) && Objects.equals(maxDocsPerValue, other.maxDocsPerValue) && Objects.equals(executionHint, other.executionHint). }
false;public;0;4;;@Override public String getType() {     return NAME. }
