commented;modifiers;parameterAmount;loc;comment;code
false;public;3;11;;@Override public void shardRoutingChanged(IndexShard indexShard, @Nullable ShardRouting oldRouting, ShardRouting newRouting) {     for (IndexEventListener listener : listeners) {         try {             listener.shardRoutingChanged(indexShard, oldRouting, newRouting).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke shard touring changed callback", indexShard.shardId().getId()), e).         }     } }
false;public;1;12;;@Override public void afterIndexShardCreated(IndexShard indexShard) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexShardCreated(indexShard).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard created callback", indexShard.shardId().getId()), e).             throw e.         }     } }
false;public;1;12;;@Override public void afterIndexShardStarted(IndexShard indexShard) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexShardStarted(indexShard).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard started callback", indexShard.shardId().getId()), e).             throw e.         }     } }
false;public;3;13;;@Override public void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexShardClosed(shardId, indexShard, indexSettings).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard closed callback", shardId.getId()), e).             throw e.         }     } }
false;public;3;13;;@Override public void afterIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexShardClosed(shardId, indexShard, indexSettings).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard closed callback", shardId.getId()), e).             throw e.         }     } }
false;public;1;12;;@Override public void onShardInactive(IndexShard indexShard) {     for (IndexEventListener listener : listeners) {         try {             listener.onShardInactive(indexShard).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke on shard inactive callback", indexShard.shardId().getId()), e).             throw e.         }     } }
false;public;4;13;;@Override public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) {     for (IndexEventListener listener : listeners) {         try {             listener.indexShardStateChanged(indexShard, previousState, indexShard.state(), reason).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke index shard state changed callback", indexShard.shardId().getId()), e).             throw e.         }     } }
false;public;2;11;;@Override public void beforeIndexCreated(Index index, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexCreated(index, indexSettings).         } catch (Exception e) {             logger.warn("failed to invoke before index created callback", e).             throw e.         }     } }
false;public;1;11;;@Override public void afterIndexCreated(IndexService indexService) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexCreated(indexService).         } catch (Exception e) {             logger.warn("failed to invoke after index created callback", e).             throw e.         }     } }
false;public;2;12;;@Override public void beforeIndexShardCreated(ShardId shardId, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexShardCreated(shardId, indexSettings).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard created callback", shardId), e).             throw e.         }     } }
false;public;2;11;;@Override public void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexRemoved(indexService, reason).         } catch (Exception e) {             logger.warn("failed to invoke before index removed callback", e).             throw e.         }     } }
false;public;3;11;;@Override public void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexRemoved(index, indexSettings, reason).         } catch (Exception e) {             logger.warn("failed to invoke after index removed callback", e).             throw e.         }     } }
false;public;2;13;;@Override public void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexShardDeleted(shardId, indexSettings).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke before shard deleted callback", shardId.getId()), e).             throw e.         }     } }
false;public;2;13;;@Override public void afterIndexShardDeleted(ShardId shardId, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.afterIndexShardDeleted(shardId, indexSettings).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("[{}] failed to invoke after shard deleted callback", shardId.getId()), e).             throw e.         }     } }
false;public;2;11;;@Override public void beforeIndexAddedToCluster(Index index, Settings indexSettings) {     for (IndexEventListener listener : listeners) {         try {             listener.beforeIndexAddedToCluster(index, indexSettings).         } catch (Exception e) {             logger.warn("failed to invoke before index added to cluster callback", e).             throw e.         }     } }
false;public;1;11;;@Override public void onStoreCreated(ShardId shardId) {     for (IndexEventListener listener : listeners) {         try {             listener.onStoreCreated(shardId).         } catch (Exception e) {             logger.warn("failed to invoke on store created", e).             throw e.         }     } }
false;public;1;11;;@Override public void onStoreClosed(ShardId shardId) {     for (IndexEventListener listener : listeners) {         try {             listener.onStoreClosed(shardId).         } catch (Exception e) {             logger.warn("failed to invoke on store closed", e).             throw e.         }     } }
