commented;modifiers;parameterAmount;loc;comment;code
false;;1;19;;@Override void copyCurrent(int slot) {     values = bigArrays.grow(values, slot + 1).     valueBuilders = bigArrays.grow(valueBuilders, slot + 1).     BytesRefBuilder builder = valueBuilders.get(slot).     int byteSize = builder == null ? 0 : builder.bytes().length.     if (builder == null) {         builder = new BytesRefBuilder().         valueBuilders.set(slot, builder).     }     if (missingBucket && currentValue == null) {         values.set(slot, null).     } else {         assert currentValue != null.         builder.copyBytes(currentValue).         breakerConsumer.accept(builder.bytes().length - byteSize).         values.set(slot, builder.get()).     } }
false;;2;11;;@Override int compare(int from, int to) {     if (missingBucket) {         if (values.get(from) == null) {             return values.get(to) == null ? 0 : -1 * reverseMul.         } else if (values.get(to) == null) {             return reverseMul.         }     }     return compareValues(values.get(from), values.get(to)). }
false;;1;11;;@Override int compareCurrent(int slot) {     if (missingBucket) {         if (currentValue == null) {             return values.get(slot) == null ? 0 : -1 * reverseMul.         } else if (values.get(slot) == null) {             return reverseMul.         }     }     return compareValues(currentValue, values.get(slot)). }
false;;0;11;;@Override int compareCurrentWithAfter() {     if (missingBucket) {         if (currentValue == null) {             return afterValue == null ? 0 : -1 * reverseMul.         } else if (afterValue == null) {             return reverseMul.         }     }     return compareValues(currentValue, afterValue). }
false;;1;8;;@Override int hashCode(int slot) {     if (missingBucket && values.get(slot) == null) {         return 0.     } else {         return values.get(slot).hashCode().     } }
false;;0;8;;@Override int hashCodeCurrent() {     if (missingBucket && currentValue == null) {         return 0.     } else {         return currentValue.hashCode().     } }
false;;2;3;;int compareValues(BytesRef v1, BytesRef v2) {     return v1.compareTo(v2) * reverseMul. }
false;;1;10;;@Override void setAfter(Comparable value) {     if (missingBucket && value == null) {         afterValue = null.     } else if (value.getClass() == String.class) {         afterValue = format.parseBytesRef(value.toString()).     } else {         throw new IllegalArgumentException("invalid value, expected string, got " + value.getClass().getSimpleName()).     } }
false;;1;4;;@Override BytesRef toComparable(int slot) {     return values.get(slot). }
false;public;2;13;;@Override public void collect(int doc, long bucket) throws IOException {     if (dvs.advanceExact(doc)) {         int num = dvs.docValueCount().         for (int i = 0. i < num. i++) {             currentValue = dvs.nextValue().             next.collect(doc, bucket).         }     } else if (missingBucket) {         currentValue = null.         next.collect(doc, bucket).     } }
false;;2;19;;@Override LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector next) throws IOException {     final SortedBinaryDocValues dvs = docValuesFunc.apply(context).     return new LeafBucketCollector() {          @Override         public void collect(int doc, long bucket) throws IOException {             if (dvs.advanceExact(doc)) {                 int num = dvs.docValueCount().                 for (int i = 0. i < num. i++) {                     currentValue = dvs.nextValue().                     next.collect(doc, bucket).                 }             } else if (missingBucket) {                 currentValue = null.                 next.collect(doc, bucket).             }         }     }. }
false;public;2;4;;@Override public void collect(int doc, long bucket) throws IOException {     next.collect(doc, bucket). }
false;;3;13;;@Override LeafBucketCollector getLeafCollector(Comparable value, LeafReaderContext context, LeafBucketCollector next) {     if (value.getClass() != BytesRef.class) {         throw new IllegalArgumentException("Expected BytesRef, got " + value.getClass()).     }     currentValue = (BytesRef) value.     return new LeafBucketCollector() {          @Override         public void collect(int doc, long bucket) throws IOException {             next.collect(doc, bucket).         }     }. }
false;;2;9;;@Override SortedDocsProducer createSortedDocsProducerOrNull(IndexReader reader, Query query) {     if (checkIfSortedDocsIsApplicable(reader, fieldType) == false || fieldType instanceof StringFieldType == false || (query != null && query.getClass() != MatchAllDocsQuery.class)) {         return null.     }     return new TermsSortedDocsProducer(fieldType.name()). }
false;public;0;4;;@Override public void close() {     Releasables.close(values, valueBuilders). }
