commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;20;;public static <VS extends ValuesSource, T> void declareCommon(AbstractObjectParser<? extends MultiValuesSourceAggregationBuilder<VS, ?>, T> objectParser, boolean formattable, ValueType targetValueType) {     objectParser.declareField(MultiValuesSourceAggregationBuilder::valueType, p -> {         ValueType valueType = ValueType.resolveForScript(p.text()).         if (targetValueType != null && valueType.isNotA(targetValueType)) {             throw new ParsingException(p.getTokenLocation(), "Aggregation [" + objectParser.getName() + "] was configured with an incompatible value type [" + valueType + "]. It can only work on value of type [" + targetValueType + "]").         }         return valueType.     }, ValueType.VALUE_TYPE, ObjectParser.ValueType.STRING).     if (formattable) {         objectParser.declareField(MultiValuesSourceAggregationBuilder::format, XContentParser::text, ParseField.CommonFields.FORMAT, ObjectParser.ValueType.STRING).     } }
false;public,static;4;8;;public static <VS extends ValuesSource, T> void declareField(String fieldName, AbstractObjectParser<? extends MultiValuesSourceAggregationBuilder<VS, ?>, T> objectParser, boolean scriptable, boolean timezoneAware) {     objectParser.declareField((o, fieldConfig) -> o.field(fieldName, fieldConfig.build()), (p, c) -> MultiValuesSourceFieldConfig.PARSER.apply(scriptable, timezoneAware).parse(p, null), new ParseField(fieldName), ObjectParser.ValueType.OBJECT). }
