commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void handleResponse(TransportResponse.Empty response) {     if (counter.decrementAndGet() == 0) {         finishVerification(listener, nodes, errors).     } }
false;public;1;7;;@Override public void handleException(TransportException exp) {     errors.add(new VerificationFailure(node.getId(), exp)).     if (counter.decrementAndGet() == 0) {         finishVerification(listener, nodes, errors).     } }
false;public;3;44;;public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) {     final DiscoveryNodes discoNodes = clusterService.state().nodes().     final DiscoveryNode localNode = discoNodes.getLocalNode().     final ObjectContainer<DiscoveryNode> masterAndDataNodes = discoNodes.getMasterAndDataNodes().values().     final List<DiscoveryNode> nodes = new ArrayList<>().     for (ObjectCursor<DiscoveryNode> cursor : masterAndDataNodes) {         DiscoveryNode node = cursor.value.         nodes.add(node).     }     final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList<>().     final AtomicInteger counter = new AtomicInteger(nodes.size()).     for (final DiscoveryNode node : nodes) {         if (node.equals(localNode)) {             try {                 doVerify(repository, verificationToken, localNode).             } catch (Exception e) {                 logger.warn(() -> new ParameterizedMessage("[{}] failed to verify repository", repository), e).                 errors.add(new VerificationFailure(node.getId(), e)).             }             if (counter.decrementAndGet() == 0) {                 finishVerification(listener, nodes, errors).             }         } else {             transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {                  @Override                 public void handleResponse(TransportResponse.Empty response) {                     if (counter.decrementAndGet() == 0) {                         finishVerification(listener, nodes, errors).                     }                 }                  @Override                 public void handleException(TransportException exp) {                     errors.add(new VerificationFailure(node.getId(), exp)).                     if (counter.decrementAndGet() == 0) {                         finishVerification(listener, nodes, errors).                     }                 }             }).         }     } }
false;public;3;5;;public void finishVerification(ActionListener<VerifyResponse> listener, List<DiscoveryNode> nodes, CopyOnWriteArrayList<VerificationFailure> errors) {     listener.onResponse(new RepositoriesService.VerifyResponse(nodes.toArray(new DiscoveryNode[nodes.size()]), errors.toArray(new VerificationFailure[errors.size()]))). }
false;private;3;4;;private void doVerify(String repositoryName, String verificationToken, DiscoveryNode localNode) {     Repository repository = repositoriesService.repository(repositoryName).     repository.verify(verificationToken, localNode). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     repository = in.readString().     verificationToken = in.readString(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(repository).     out.writeString(verificationToken). }
false;public;3;11;;@Override public void messageReceived(VerifyNodeRepositoryRequest request, TransportChannel channel, Task task) throws Exception {     DiscoveryNode localNode = clusterService.state().nodes().getLocalNode().     try {         doVerify(request.repository, request.verificationToken, localNode).     } catch (Exception ex) {         logger.warn(() -> new ParameterizedMessage("[{}] failed to verify repository", request.repository), ex).         throw ex.     }     channel.sendResponse(TransportResponse.Empty.INSTANCE). }
