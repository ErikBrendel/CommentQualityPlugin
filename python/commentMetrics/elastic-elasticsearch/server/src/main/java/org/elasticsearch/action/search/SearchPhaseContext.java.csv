commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the total number of shards to the current search across all indices  */ ;// TODO maybe we can make this concrete later - for now we just implement this in the base class for all initial phases /**  * Returns the total number of shards to the current search across all indices  */ int getNumShards().
true;;0;1;/**  * Returns a logger for this context to prevent each individual phase to create their own logger.  */ ;/**  * Returns a logger for this context to prevent each individual phase to create their own logger.  */ Logger getLogger().
true;;0;1;/**  * Returns the currently executing search task  */ ;/**  * Returns the currently executing search task  */ SearchTask getTask().
true;;0;1;/**  * Returns the currently executing search request  */ ;/**  * Returns the currently executing search request  */ SearchRequest getRequest().
true;;2;1;/**  * Builds the final search response that should be send back to the user.  * @param internalSearchResponse the internal search response  * @param scrollId an optional scroll ID if this search is a scroll search  */ ;/**  * Builds the final search response that should be send back to the user.  * @param internalSearchResponse the internal search response  * @param scrollId an optional scroll ID if this search is a scroll search  */ SearchResponse buildSearchResponse(InternalSearchResponse internalSearchResponse, String scrollId).
true;;3;1;/**  * This method will communicate a fatal phase failure back to the user. In contrast to a shard failure  * will this method immediately fail the search request and return the failure to the issuer of the request  * @param phase the phase that failed  * @param msg an optional message  * @param cause the cause of the phase failure  */ ;/**  * This method will communicate a fatal phase failure back to the user. In contrast to a shard failure  * will this method immediately fail the search request and return the failure to the issuer of the request  * @param phase the phase that failed  * @param msg an optional message  * @param cause the cause of the phase failure  */ void onPhaseFailure(SearchPhase phase, String msg, Throwable cause).
true;;3;1;/**  * This method will record a shard failure for the given shard index. In contrast to a phase failure  * ({@link #onPhaseFailure(SearchPhase, String, Throwable)}) this method will immediately return to the user but will record  * a shard failure for the given shard index. This should be called if a shard failure happens after we successfully retrieved  * a result from that shard in a previous phase.  */ ;/**  * This method will record a shard failure for the given shard index. In contrast to a phase failure  * ({@link #onPhaseFailure(SearchPhase, String, Throwable)}) this method will immediately return to the user but will record  * a shard failure for the given shard index. This should be called if a shard failure happens after we successfully retrieved  * a result from that shard in a previous phase.  */ void onShardFailure(int shardIndex, @Nullable SearchShardTarget shardTarget, Exception e).
true;;2;1;/**  * Returns a connection to the node if connected otherwise and {@link org.elasticsearch.transport.ConnectTransportException} will be  * thrown.  */ ;/**  * Returns a connection to the node if connected otherwise and {@link org.elasticsearch.transport.ConnectTransportException} will be  * thrown.  */ Transport.Connection getConnection(String clusterAlias, String nodeId).
true;;0;1;/**  * Returns the {@link SearchTransportService} to send shard request to other nodes  */ ;/**  * Returns the {@link SearchTransportService} to send shard request to other nodes  */ SearchTransportService getSearchTransport().
true;default;3;5;/**  * Releases a search context with the given context ID on the node the given connection is connected to.  * @see org.elasticsearch.search.query.QuerySearchResult#getRequestId()  * @see org.elasticsearch.search.fetch.FetchSearchResult#getRequestId()  */ ;/**  * Releases a search context with the given context ID on the node the given connection is connected to.  * @see org.elasticsearch.search.query.QuerySearchResult#getRequestId()  * @see org.elasticsearch.search.fetch.FetchSearchResult#getRequestId()  */ default void sendReleaseSearchContext(long contextId, Transport.Connection connection, OriginalIndices originalIndices) {     if (connection != null) {         getSearchTransport().sendFreeContext(connection, contextId, originalIndices).     } }
true;;1;1;/**  * Builds an request for the initial search phase.  */ ;/**  * Builds an request for the initial search phase.  */ ShardSearchTransportRequest buildShardSearchRequest(SearchShardIterator shardIt).
true;;2;1;/**  * Processes the phase transition from on phase to another. This method handles all errors that happen during the initial run execution  * of the next phase. If there are no successful operations in the context when this method is executed the search is aborted and  * a response is returned to the user indicating that all shards have failed.  */ ;/**  * Processes the phase transition from on phase to another. This method handles all errors that happen during the initial run execution  * of the next phase. If there are no successful operations in the context when this method is executed the search is aborted and  * a response is returned to the user indicating that all shards have failed.  */ void executeNextPhase(SearchPhase currentPhase, SearchPhase nextPhase).
