# id;timestamp;commentText;codeText;commentWords;codeWords
TcpChannel -> void close()_;1524684173;Closes the channel. This might be an asynchronous process. There is no guarantee that the channel_will be closed when this method returns. Use the {@link #addCloseListener(ActionListener)} method_to implement logic that depends on knowing when the channel is closed.;void close()_;closes,the,channel,this,might,be,an,asynchronous,process,there,is,no,guarantee,that,the,channel,will,be,closed,when,this,method,returns,use,the,link,add,close,listener,action,listener,method,to,implement,logic,that,depends,on,knowing,when,the,channel,is,closed;void,close
TcpChannel -> void close()_;1526981569;Closes the channel. This might be an asynchronous process. There is no guarantee that the channel_will be closed when this method returns. Use the {@link #addCloseListener(ActionListener)} method_to implement logic that depends on knowing when the channel is closed.;void close()_;closes,the,channel,this,might,be,an,asynchronous,process,there,is,no,guarantee,that,the,channel,will,be,closed,when,this,method,returns,use,the,link,add,close,listener,action,listener,method,to,implement,logic,that,depends,on,knowing,when,the,channel,is,closed;void,close
TcpChannel -> static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)         throws ConnectTransportException;1524684173;Awaits for all of the pending connections to complete. Will throw an exception if at least one of the_connections fails.__@param discoveryNode the node for the pending connections_@param connectionFutures representing the pending connections_@param connectTimeout to wait for a connection_@throws ConnectTransportException if one of the connections fails;static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)_        throws ConnectTransportException {_        Exception connectionException = null__        boolean allConnected = true___        for (ActionFuture<Void> connectionFuture : connectionFutures) {_            try {_                connectionFuture.get(connectTimeout.getMillis(), TimeUnit.MILLISECONDS)__            } catch (TimeoutException e) {_                allConnected = false__                break__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__                throw new IllegalStateException(e)__            } catch (ExecutionException e) {_                allConnected = false__                connectionException = (Exception) e.getCause()__                break__            }_        }__        if (allConnected == false) {_            if (connectionException == null) {_                throw new ConnectTransportException(discoveryNode, "connect_timeout[" + connectTimeout + "]")__            } else {_                throw new ConnectTransportException(discoveryNode, "connect_exception", connectionException)__            }_        }_    };awaits,for,all,of,the,pending,connections,to,complete,will,throw,an,exception,if,at,least,one,of,the,connections,fails,param,discovery,node,the,node,for,the,pending,connections,param,connection,futures,representing,the,pending,connections,param,connect,timeout,to,wait,for,a,connection,throws,connect,transport,exception,if,one,of,the,connections,fails;static,void,await,connected,discovery,node,discovery,node,list,action,future,void,connection,futures,time,value,connect,timeout,throws,connect,transport,exception,exception,connection,exception,null,boolean,all,connected,true,for,action,future,void,connection,future,connection,futures,try,connection,future,get,connect,timeout,get,millis,time,unit,milliseconds,catch,timeout,exception,e,all,connected,false,break,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,e,catch,execution,exception,e,all,connected,false,connection,exception,exception,e,get,cause,break,if,all,connected,false,if,connection,exception,null,throw,new,connect,transport,exception,discovery,node,connect,timeout,else,throw,new,connect,transport,exception,discovery,node,connection,exception
TcpChannel -> static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)         throws ConnectTransportException;1526981569;Awaits for all of the pending connections to complete. Will throw an exception if at least one of the_connections fails.__@param discoveryNode the node for the pending connections_@param connectionFutures representing the pending connections_@param connectTimeout to wait for a connection_@throws ConnectTransportException if one of the connections fails;static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)_        throws ConnectTransportException {_        Exception connectionException = null__        boolean allConnected = true___        for (ActionFuture<Void> connectionFuture : connectionFutures) {_            try {_                connectionFuture.get(connectTimeout.getMillis(), TimeUnit.MILLISECONDS)__            } catch (TimeoutException e) {_                allConnected = false__                break__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__                throw new IllegalStateException(e)__            } catch (ExecutionException e) {_                allConnected = false__                connectionException = (Exception) e.getCause()__                break__            }_        }__        if (allConnected == false) {_            if (connectionException == null) {_                throw new ConnectTransportException(discoveryNode, "connect_timeout[" + connectTimeout + "]")__            } else {_                throw new ConnectTransportException(discoveryNode, "connect_exception", connectionException)__            }_        }_    };awaits,for,all,of,the,pending,connections,to,complete,will,throw,an,exception,if,at,least,one,of,the,connections,fails,param,discovery,node,the,node,for,the,pending,connections,param,connection,futures,representing,the,pending,connections,param,connect,timeout,to,wait,for,a,connection,throws,connect,transport,exception,if,one,of,the,connections,fails;static,void,await,connected,discovery,node,discovery,node,list,action,future,void,connection,futures,time,value,connect,timeout,throws,connect,transport,exception,exception,connection,exception,null,boolean,all,connected,true,for,action,future,void,connection,future,connection,futures,try,connection,future,get,connect,timeout,get,millis,time,unit,milliseconds,catch,timeout,exception,e,all,connected,false,break,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,e,catch,execution,exception,e,all,connected,false,connection,exception,exception,e,get,cause,break,if,all,connected,false,if,connection,exception,null,throw,new,connect,transport,exception,discovery,node,connect,timeout,else,throw,new,connect,transport,exception,discovery,node,connection,exception
TcpChannel -> static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)         throws ConnectTransportException;1529433467;Awaits for all of the pending connections to complete. Will throw an exception if at least one of the_connections fails.__@param discoveryNode the node for the pending connections_@param connectionFutures representing the pending connections_@param connectTimeout to wait for a connection_@throws ConnectTransportException if one of the connections fails;static void awaitConnected(DiscoveryNode discoveryNode, List<ActionFuture<Void>> connectionFutures, TimeValue connectTimeout)_        throws ConnectTransportException {_        Exception connectionException = null__        boolean allConnected = true___        for (ActionFuture<Void> connectionFuture : connectionFutures) {_            try {_                connectionFuture.get(connectTimeout.getMillis(), TimeUnit.MILLISECONDS)__            } catch (TimeoutException e) {_                allConnected = false__                break__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()__                throw new IllegalStateException(e)__            } catch (ExecutionException e) {_                allConnected = false__                connectionException = (Exception) e.getCause()__                break__            }_        }__        if (allConnected == false) {_            if (connectionException == null) {_                throw new ConnectTransportException(discoveryNode, "connect_timeout[" + connectTimeout + "]")__            } else {_                throw new ConnectTransportException(discoveryNode, "connect_exception", connectionException)__            }_        }_    };awaits,for,all,of,the,pending,connections,to,complete,will,throw,an,exception,if,at,least,one,of,the,connections,fails,param,discovery,node,the,node,for,the,pending,connections,param,connection,futures,representing,the,pending,connections,param,connect,timeout,to,wait,for,a,connection,throws,connect,transport,exception,if,one,of,the,connections,fails;static,void,await,connected,discovery,node,discovery,node,list,action,future,void,connection,futures,time,value,connect,timeout,throws,connect,transport,exception,exception,connection,exception,null,boolean,all,connected,true,for,action,future,void,connection,future,connection,futures,try,connection,future,get,connect,timeout,get,millis,time,unit,milliseconds,catch,timeout,exception,e,all,connected,false,break,catch,interrupted,exception,e,thread,current,thread,interrupt,throw,new,illegal,state,exception,e,catch,execution,exception,e,all,connected,false,connection,exception,exception,e,get,cause,break,if,all,connected,false,if,connection,exception,null,throw,new,connect,transport,exception,discovery,node,connect,timeout,else,throw,new,connect,transport,exception,discovery,node,connection,exception
TcpChannel -> InetSocketAddress getRemoteAddress()_;1524684173;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> InetSocketAddress getRemoteAddress()_;1526981569;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> InetSocketAddress getRemoteAddress()_;1529433467;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> InetSocketAddress getRemoteAddress()_;1541552300;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> InetSocketAddress getRemoteAddress()_;1543334894;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> InetSocketAddress getRemoteAddress()_;1543506953;Returns the remote address for this channel. Can be null if channel does not have a remote address.__@return the remote address of this channel.;InetSocketAddress getRemoteAddress()_;returns,the,remote,address,for,this,channel,can,be,null,if,channel,does,not,have,a,remote,address,return,the,remote,address,of,this,channel;inet,socket,address,get,remote,address
TcpChannel -> String getProfile()_;1524684173;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> String getProfile()_;1526981569;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> String getProfile()_;1529433467;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> String getProfile()_;1541552300;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> String getProfile()_;1543334894;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> String getProfile()_;1543506953;This returns the profile for this channel.;String getProfile()_;this,returns,the,profile,for,this,channel;string,get,profile
TcpChannel -> void addCloseListener(ActionListener<Void> listener)_;1524684173;Adds a listener that will be executed when the channel is closed. If the channel is still open when_this listener is added, the listener will be executed by the thread that eventually closes the_channel. If the channel is already closed when the listener is added the listener will immediately be_executed by the thread that is attempting to add the listener.__@param listener to be executed;void addCloseListener(ActionListener<Void> listener)_;adds,a,listener,that,will,be,executed,when,the,channel,is,closed,if,the,channel,is,still,open,when,this,listener,is,added,the,listener,will,be,executed,by,the,thread,that,eventually,closes,the,channel,if,the,channel,is,already,closed,when,the,listener,is,added,the,listener,will,immediately,be,executed,by,the,thread,that,is,attempting,to,add,the,listener,param,listener,to,be,executed;void,add,close,listener,action,listener,void,listener
TcpChannel -> void addCloseListener(ActionListener<Void> listener)_;1526981569;Adds a listener that will be executed when the channel is closed. If the channel is still open when_this listener is added, the listener will be executed by the thread that eventually closes the_channel. If the channel is already closed when the listener is added the listener will immediately be_executed by the thread that is attempting to add the listener.__@param listener to be executed;void addCloseListener(ActionListener<Void> listener)_;adds,a,listener,that,will,be,executed,when,the,channel,is,closed,if,the,channel,is,still,open,when,this,listener,is,added,the,listener,will,be,executed,by,the,thread,that,eventually,closes,the,channel,if,the,channel,is,already,closed,when,the,listener,is,added,the,listener,will,immediately,be,executed,by,the,thread,that,is,attempting,to,add,the,listener,param,listener,to,be,executed;void,add,close,listener,action,listener,void,listener
TcpChannel -> void addConnectListener(ActionListener<Void> listener)_;1541552300;Adds a listener that will be executed when the channel is connected. If the channel is still_unconnected when this listener is added, the listener will be executed by the thread that eventually_finishes the channel connection. If the channel is already connected when the listener is added the_listener will immediately be executed by the thread that is attempting to add the listener.__@param listener to be executed;void addConnectListener(ActionListener<Void> listener)_;adds,a,listener,that,will,be,executed,when,the,channel,is,connected,if,the,channel,is,still,unconnected,when,this,listener,is,added,the,listener,will,be,executed,by,the,thread,that,eventually,finishes,the,channel,connection,if,the,channel,is,already,connected,when,the,listener,is,added,the,listener,will,immediately,be,executed,by,the,thread,that,is,attempting,to,add,the,listener,param,listener,to,be,executed;void,add,connect,listener,action,listener,void,listener
TcpChannel -> void addConnectListener(ActionListener<Void> listener)_;1543334894;Adds a listener that will be executed when the channel is connected. If the channel is still_unconnected when this listener is added, the listener will be executed by the thread that eventually_finishes the channel connection. If the channel is already connected when the listener is added the_listener will immediately be executed by the thread that is attempting to add the listener.__@param listener to be executed;void addConnectListener(ActionListener<Void> listener)_;adds,a,listener,that,will,be,executed,when,the,channel,is,connected,if,the,channel,is,still,unconnected,when,this,listener,is,added,the,listener,will,be,executed,by,the,thread,that,eventually,finishes,the,channel,connection,if,the,channel,is,already,connected,when,the,listener,is,added,the,listener,will,immediately,be,executed,by,the,thread,that,is,attempting,to,add,the,listener,param,listener,to,be,executed;void,add,connect,listener,action,listener,void,listener
TcpChannel -> void addConnectListener(ActionListener<Void> listener)_;1543506953;Adds a listener that will be executed when the channel is connected. If the channel is still_unconnected when this listener is added, the listener will be executed by the thread that eventually_finishes the channel connection. If the channel is already connected when the listener is added the_listener will immediately be executed by the thread that is attempting to add the listener.__@param listener to be executed;void addConnectListener(ActionListener<Void> listener)_;adds,a,listener,that,will,be,executed,when,the,channel,is,connected,if,the,channel,is,still,unconnected,when,this,listener,is,added,the,listener,will,be,executed,by,the,thread,that,eventually,finishes,the,channel,connection,if,the,channel,is,already,connected,when,the,listener,is,added,the,listener,will,immediately,be,executed,by,the,thread,that,is,attempting,to,add,the,listener,param,listener,to,be,executed;void,add,connect,listener,action,listener,void,listener
TcpChannel -> static <C extends TcpChannel> void closeChannel(C channel, boolean blocking);1524684173;Closes the channel.__@param channel to close_@param blocking indicates if we should block on channel close;static <C extends TcpChannel> void closeChannel(C channel, boolean blocking) {_        closeChannels(Collections.singletonList(channel), blocking)__    };closes,the,channel,param,channel,to,close,param,blocking,indicates,if,we,should,block,on,channel,close;static,c,extends,tcp,channel,void,close,channel,c,channel,boolean,blocking,close,channels,collections,singleton,list,channel,blocking
TcpChannel -> static <C extends TcpChannel> void closeChannel(C channel, boolean blocking);1526981569;Closes the channel.__@param channel to close_@param blocking indicates if we should block on channel close;static <C extends TcpChannel> void closeChannel(C channel, boolean blocking) {_        closeChannels(Collections.singletonList(channel), blocking)__    };closes,the,channel,param,channel,to,close,param,blocking,indicates,if,we,should,block,on,channel,close;static,c,extends,tcp,channel,void,close,channel,c,channel,boolean,blocking,close,channels,collections,singleton,list,channel,blocking
TcpChannel -> void setSoLinger(int value) throws IOException_;1524684173;This sets the low level socket option {@link java.net.StandardSocketOptions} SO_LINGER on a channel.__@param value to set for SO_LINGER_@throws IOException that can be throw by the low level socket implementation;void setSoLinger(int value) throws IOException_;this,sets,the,low,level,socket,option,link,java,net,standard,socket,options,on,a,channel,param,value,to,set,for,throws,ioexception,that,can,be,throw,by,the,low,level,socket,implementation;void,set,so,linger,int,value,throws,ioexception
TcpChannel -> void setSoLinger(int value) throws IOException_;1526981569;This sets the low level socket option {@link java.net.StandardSocketOptions} SO_LINGER on a channel.__@param value to set for SO_LINGER_@throws IOException that can be throw by the low level socket implementation;void setSoLinger(int value) throws IOException_;this,sets,the,low,level,socket,option,link,java,net,standard,socket,options,on,a,channel,param,value,to,set,for,throws,ioexception,that,can,be,throw,by,the,low,level,socket,implementation;void,set,so,linger,int,value,throws,ioexception
TcpChannel -> void setSoLinger(int value) throws IOException_;1529433467;This sets the low level socket option {@link java.net.StandardSocketOptions} SO_LINGER on a channel.__@param value to set for SO_LINGER_@throws IOException that can be throw by the low level socket implementation;void setSoLinger(int value) throws IOException_;this,sets,the,low,level,socket,option,link,java,net,standard,socket,options,on,a,channel,param,value,to,set,for,throws,ioexception,that,can,be,throw,by,the,low,level,socket,implementation;void,set,so,linger,int,value,throws,ioexception
TcpChannel -> void setSoLinger(int value) throws IOException_;1541552300;This sets the low level socket option {@link java.net.StandardSocketOptions} SO_LINGER on a channel.__@param value to set for SO_LINGER_@throws IOException that can be throw by the low level socket implementation;void setSoLinger(int value) throws IOException_;this,sets,the,low,level,socket,option,link,java,net,standard,socket,options,on,a,channel,param,value,to,set,for,throws,ioexception,that,can,be,throw,by,the,low,level,socket,implementation;void,set,so,linger,int,value,throws,ioexception
TcpChannel -> boolean isOpen()_;1524684173;Indicates whether a channel is currently open__@return boolean indicating if channel is open;boolean isOpen()_;indicates,whether,a,channel,is,currently,open,return,boolean,indicating,if,channel,is,open;boolean,is,open
TcpChannel -> boolean isOpen()_;1526981569;Indicates whether a channel is currently open__@return boolean indicating if channel is open;boolean isOpen()_;indicates,whether,a,channel,is,currently,open,return,boolean,indicating,if,channel,is,open;boolean,is,open
TcpChannel -> InetSocketAddress getLocalAddress()_;1524684173;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> InetSocketAddress getLocalAddress()_;1526981569;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> InetSocketAddress getLocalAddress()_;1529433467;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> InetSocketAddress getLocalAddress()_;1541552300;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> InetSocketAddress getLocalAddress()_;1543334894;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> InetSocketAddress getLocalAddress()_;1543506953;Returns the local address for this channel.__@return the local address of this channel.;InetSocketAddress getLocalAddress()_;returns,the,local,address,for,this,channel,return,the,local,address,of,this,channel;inet,socket,address,get,local,address
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1524684173;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1526981569;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1529433467;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1541552300;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1543334894;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> void sendMessage(BytesReference reference, ActionListener<Void> listener)_;1543506953;Sends a tcp message to the channel. The listener will be executed once the send process has been_completed.__@param reference to send to channel_@param listener to execute upon send completion;void sendMessage(BytesReference reference, ActionListener<Void> listener)_;sends,a,tcp,message,to,the,channel,the,listener,will,be,executed,once,the,send,process,has,been,completed,param,reference,to,send,to,channel,param,listener,to,execute,upon,send,completion;void,send,message,bytes,reference,reference,action,listener,void,listener
TcpChannel -> static <C extends TcpChannel> void closeChannels(List<C> channels, boolean blocking);1524684173;Closes the channels.__@param channels to close_@param blocking indicates if we should block on channel close;static <C extends TcpChannel> void closeChannels(List<C> channels, boolean blocking) {_        if (blocking) {_            ArrayList<ActionFuture<Void>> futures = new ArrayList<>(channels.size())__            for (final C channel : channels) {_                if (channel.isOpen()) {_                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture()__                    channel.addCloseListener(closeFuture)__                    channel.close()__                    futures.add(closeFuture)__                }_            }_            blockOnFutures(futures)__        } else {_            Releasables.close(channels)__        }_    };closes,the,channels,param,channels,to,close,param,blocking,indicates,if,we,should,block,on,channel,close;static,c,extends,tcp,channel,void,close,channels,list,c,channels,boolean,blocking,if,blocking,array,list,action,future,void,futures,new,array,list,channels,size,for,final,c,channel,channels,if,channel,is,open,plain,action,future,void,close,future,plain,action,future,new,future,channel,add,close,listener,close,future,channel,close,futures,add,close,future,block,on,futures,futures,else,releasables,close,channels
TcpChannel -> static <C extends TcpChannel> void closeChannels(List<C> channels, boolean blocking);1526981569;Closes the channels.__@param channels to close_@param blocking indicates if we should block on channel close;static <C extends TcpChannel> void closeChannels(List<C> channels, boolean blocking) {_        if (blocking) {_            ArrayList<ActionFuture<Void>> futures = new ArrayList<>(channels.size())__            for (final C channel : channels) {_                if (channel.isOpen()) {_                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture()__                    channel.addCloseListener(closeFuture)__                    channel.close()__                    futures.add(closeFuture)__                }_            }_            blockOnFutures(futures)__        } else {_            Releasables.close(channels)__        }_    };closes,the,channels,param,channels,to,close,param,blocking,indicates,if,we,should,block,on,channel,close;static,c,extends,tcp,channel,void,close,channels,list,c,channels,boolean,blocking,if,blocking,array,list,action,future,void,futures,new,array,list,channels,size,for,final,c,channel,channels,if,channel,is,open,plain,action,future,void,close,future,plain,action,future,new,future,channel,add,close,listener,close,future,channel,close,futures,add,close,future,block,on,futures,futures,else,releasables,close,channels
