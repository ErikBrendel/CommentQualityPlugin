commented;modifiers;parameterAmount;loc;comment;code
false;;3;3;;@Override MetadataFieldMapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException.
true;;2;1;// since settings could be modified ;/**  * Get the default {@link MetadataFieldMapper} to use, if nothing had to be parsed.  * @param fieldType      the existing field type for this meta mapper on the current index  *                       or null if this is the first type being introduced  * @param parserContext context that may be useful to build the field like analyzers  */ // TODO: remove the fieldType parameter which is only used for bw compat with pre-2.0 // since settings could be modified MetadataFieldMapper getDefault(MappedFieldType fieldType, ParserContext parserContext).
true;public,abstract;1;1;/**  * Called before {@link FieldMapper#parse(ParseContext)} on the {@link RootObjectMapper}.  */ ;/**  * Called before {@link FieldMapper#parse(ParseContext)} on the {@link RootObjectMapper}.  */ public abstract void preParse(ParseContext context) throws IOException.
true;public;1;3;/**  * Called after {@link FieldMapper#parse(ParseContext)} on the {@link RootObjectMapper}.  */ ;/**  * Called after {@link FieldMapper#parse(ParseContext)} on the {@link RootObjectMapper}.  */ public void postParse(ParseContext context) throws IOException { // do nothing }
false;public;1;4;;@Override public MetadataFieldMapper merge(Mapper mergeWith) {     return (MetadataFieldMapper) super.merge(mergeWith). }
