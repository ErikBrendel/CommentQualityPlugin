commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the geo point of the context  */ ;/**  * Returns the geo point of the context  */ public GeoPoint getGeoPoint() {     return geoPoint. }
true;public;0;3;/**  * Returns the query-time boost of the context  */ ;/**  * Returns the query-time boost of the context  */ public int getBoost() {     return boost. }
true;public;0;3;/**  * Returns the precision (length) for the geohash  */ ;/**  * Returns the precision (length) for the geohash  */ public int getPrecision() {     return precision. }
true;public;0;3;/**  * Returns the precision levels at which geohash cells neighbours are considered  */ ;/**  * Returns the precision levels at which geohash cells neighbours are considered  */ public List<Integer> getNeighbours() {     return neighbours. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     GeoQueryContext that = (GeoQueryContext) o.     if (boost != that.boost)         return false.     if (precision != that.precision)         return false.     if (geoPoint != null ? !geoPoint.equals(that.geoPoint) : that.geoPoint != null)         return false.     return neighbours != null ? neighbours.equals(that.neighbours) : that.neighbours == null. }
false;public;0;8;;@Override public int hashCode() {     int result = geoPoint != null ? geoPoint.hashCode() : 0.     result = 31 * result + boost.     result = 31 * result + precision.     result = 31 * result + (neighbours != null ? neighbours.hashCode() : 0).     return result. }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public,static;1;12;;public static GeoQueryContext fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     GeoQueryContext.Builder builder = new Builder().     if (token == XContentParser.Token.START_OBJECT) {         GEO_CONTEXT_PARSER.parse(parser, builder, null).     } else if (token == XContentParser.Token.VALUE_STRING) {         builder.setGeoPoint(GeoPoint.fromGeohash(parser.text())).     } else {         throw new ElasticsearchParseException("geo context must be an object or string").     }     return builder.build(). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(CONTEXT_VALUE).     builder.field("lat", geoPoint.getLat()).     builder.field("lon", geoPoint.getLon()).     builder.endObject().     builder.field(CONTEXT_BOOST, boost).     builder.field(CONTEXT_NEIGHBOURS, neighbours).     builder.field(CONTEXT_PRECISION, precision).     builder.endObject().     return builder. }
true;public;1;7;/**  * Sets the query-time boost for the context  * Defaults to 1  */ ;/**  * Sets the query-time boost for the context  * Defaults to 1  */ public Builder setBoost(int boost) {     if (boost <= 0) {         throw new IllegalArgumentException("boost must be greater than 0").     }     this.boost = boost.     return this. }
true;public;1;7;/**  * Sets the precision level for computing the geohash from the context geo point.  * Defaults to using index-time precision level  */ ;/**  * Sets the precision level for computing the geohash from the context geo point.  * Defaults to using index-time precision level  */ public Builder setPrecision(int precision) {     if (precision < 1 || precision > 12) {         throw new IllegalArgumentException("precision must be between 1 and 12").     }     this.precision = precision.     return this. }
true;public;1;9;/**  * Sets the precision levels at which geohash cells neighbours are considered.  * Defaults to only considering neighbours at the index-time precision level  */ ;/**  * Sets the precision levels at which geohash cells neighbours are considered.  * Defaults to only considering neighbours at the index-time precision level  */ public Builder setNeighbours(List<Integer> neighbours) {     for (int neighbour : neighbours) {         if (neighbour < 1 || neighbour > 12) {             throw new IllegalArgumentException("neighbour value must be between 1 and 12").         }     }     this.neighbours = neighbours.     return this. }
true;public;1;5;/**  * Sets the geo point of the context.  * This is a required field  */ ;/**  * Sets the geo point of the context.  * This is a required field  */ public Builder setGeoPoint(GeoPoint geoPoint) {     Objects.requireNonNull(geoPoint, "geoPoint must not be null").     this.geoPoint = geoPoint.     return this. }
false;;1;3;;void setLat(double lat) {     this.lat = lat. }
false;;1;3;;void setLon(double lon) {     this.lon = lon. }
false;public;0;9;;public GeoQueryContext build() {     if (geoPoint == null) {         if (Double.isNaN(lat) == false && Double.isNaN(lon) == false) {             geoPoint = new GeoPoint(lat, lon).         }     }     Objects.requireNonNull(geoPoint, "geoPoint must not be null").     return new GeoQueryContext(geoPoint, boost, precision, neighbours). }
