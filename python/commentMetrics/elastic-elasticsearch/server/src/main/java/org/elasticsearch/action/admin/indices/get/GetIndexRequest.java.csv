commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public byte id() {     return id. }
false;public,static;1;6;;public static Feature fromId(byte id) {     if (id < 0 || id >= FEATURES.length) {         throw new IllegalArgumentException("No mapping for id [" + id + "]").     }     return FEATURES[id]. }
false;public;1;8;;public GetIndexRequest features(Feature... features) {     if (features == null) {         throw new IllegalArgumentException("features cannot be null").     } else {         this.features = features.     }     return this. }
false;public;1;7;;public GetIndexRequest addFeatures(Feature... features) {     if (this.features == DEFAULT_FEATURES) {         return features(features).     } else {         return features(ArrayUtils.concat(features(), features, Feature.class)).     } }
false;public;0;3;;public Feature[] features() {     return features. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;public GetIndexRequest humanReadable(boolean humanReadable) {     this.humanReadable = humanReadable.     return this. }
false;public;0;3;;public boolean humanReadable() {     return humanReadable. }
true;public;1;4;/**  * Sets the value of "include_defaults".  *  * @param includeDefaults value of "include_defaults" to be set.  * @return this request  */ ;/**  * Sets the value of "include_defaults".  *  * @param includeDefaults value of "include_defaults" to be set.  * @return this request  */ public GetIndexRequest includeDefaults(boolean includeDefaults) {     this.includeDefaults = includeDefaults.     return this. }
true;public;0;3;/**  * Whether to return all default settings for each of the indices.  *  * @return <code>true</code> if defaults settings for each of the indices need to returned.  * <code>false</code> otherwise.  */ ;/**  * Whether to return all default settings for each of the indices.  *  * @return <code>true</code> if defaults settings for each of the indices need to returned.  * <code>false</code> otherwise.  */ public boolean includeDefaults() {     return includeDefaults. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(features.length).     for (Feature feature : features) {         out.writeByte(feature.id).     }     out.writeBoolean(humanReadable).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeBoolean(includeDefaults).     } }
