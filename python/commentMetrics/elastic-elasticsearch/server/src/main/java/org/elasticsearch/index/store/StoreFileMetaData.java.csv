commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeVLong(length).     out.writeString(checksum).     out.writeString(writtenBy.toString()).     out.writeBytesRef(hash). }
true;public;0;3;/**  * Returns the name of this file  */ ;/**  * Returns the name of this file  */ public String name() {     return name. }
true;public;0;3;/**  * the actual file size on "disk", if compressed, the compressed size  */ ;/**  * the actual file size on "disk", if compressed, the compressed size  */ public long length() {     return length. }
true;public;0;3;/**  * Returns a string representation of the files checksum. Since Lucene 4.8 this is a CRC32 checksum written  * by lucene.  */ ;/**  * Returns a string representation of the files checksum. Since Lucene 4.8 this is a CRC32 checksum written  * by lucene.  */ public String checksum() {     return this.checksum. }
true;public;1;7;/**  * Returns <code>true</code> iff the length and the checksums are the same. otherwise <code>false</code>  */ ;/**  * Returns <code>true</code> iff the length and the checksums are the same. otherwise <code>false</code>  */ public boolean isSame(StoreFileMetaData other) {     if (checksum == null || other.checksum == null) {         // we can't tell if either or is null so we return false in this case! this is why we don't use equals for this!         return false.     }     return length == other.length && checksum.equals(other.checksum) && hash.equals(other.hash). }
false;public;0;4;;@Override public String toString() {     return "name [" + name + "], length [" + length + "], checksum [" + checksum + "], writtenBy [" + writtenBy + "]". }
true;public;0;3;/**  * Returns the Lucene version this file has been written by or <code>null</code> if unknown  */ ;/**  * Returns the Lucene version this file has been written by or <code>null</code> if unknown  */ public Version writtenBy() {     return writtenBy. }
true;public;0;3;/**  * Returns a variable length hash of the file represented by this metadata object. This can be the file  * itself if the file is small enough. If the length of the hash is {@code 0} no hash value is available  */ ;/**  * Returns a variable length hash of the file represented by this metadata object. This can be the file  * itself if the file is small enough. If the length of the hash is {@code 0} no hash value is available  */ public BytesRef hash() {     return hash. }
