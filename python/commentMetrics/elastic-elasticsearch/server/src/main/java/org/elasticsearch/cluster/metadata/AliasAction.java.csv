commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the index on which the operation should act.  */ ;/**  * Get the index on which the operation should act.  */ public String getIndex() {     return index. }
true;abstract;0;1;/**  * Should this action remove the index? Actions that return true from this will never execute  * {@link #apply(NewAliasValidator, MetaData.Builder, IndexMetaData)}.  */ ;/**  * Should this action remove the index? Actions that return true from this will never execute  * {@link #apply(NewAliasValidator, MetaData.Builder, IndexMetaData)}.  */ abstract boolean removeIndex().
true;abstract;3;1;/**  * Apply the action.  *  * @param aliasValidator call to validate a new alias before adding it to the builder  * @param metadata metadata builder for the changes made by all actions as part of this request  * @param index metadata for the index being changed  * @return did this action make any changes?  */ ;/**  * Apply the action.  *  * @param aliasValidator call to validate a new alias before adding it to the builder  * @param metadata metadata builder for the changes made by all actions as part of this request  * @param index metadata for the index being changed  * @return did this action make any changes?  */ abstract boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index).
false;;4;1;;void validate(String alias, @Nullable String indexRouting, @Nullable String filter, @Nullable Boolean writeIndex).
true;public;0;3;/**  * Alias to add to the index.  */ ;/**  * Alias to add to the index.  */ public String getAlias() {     return alias. }
false;public;0;3;;public Boolean writeIndex() {     return writeIndex. }
false;;0;4;;@Override boolean removeIndex() {     return false. }
false;;3;17;;@Override boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index) {     aliasValidator.validate(alias, indexRouting, filter, writeIndex).     AliasMetaData newAliasMd = AliasMetaData.newAliasMetaDataBuilder(alias).filter(filter).indexRouting(indexRouting).searchRouting(searchRouting).writeIndex(writeIndex).build().     // Check if this alias already exists     AliasMetaData currentAliasMd = index.getAliases().get(alias).     if (currentAliasMd != null && currentAliasMd.equals(newAliasMd)) {         // It already exists, ignore it         return false.     }     metadata.put(IndexMetaData.builder(index).putAlias(newAliasMd)).     return true. }
true;public;0;3;/**  * Alias to remove from the index.  */ ;/**  * Alias to remove from the index.  */ public String getAlias() {     return alias. }
false;;0;4;;@Override boolean removeIndex() {     return false. }
false;;3;8;;@Override boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index) {     if (false == index.getAliases().containsKey(alias)) {         return false.     }     metadata.put(IndexMetaData.builder(index).removeAlias(alias)).     return true. }
false;;0;4;;@Override boolean removeIndex() {     return true. }
false;;3;4;;@Override boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index) {     throw new UnsupportedOperationException(). }
