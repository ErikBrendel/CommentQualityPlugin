# id;timestamp;commentText;codeText;commentWords;codeWords
BulkByScrollTask -> public WorkerBulkByScrollTaskState getWorkerState();1524684173;Returns the object that manages sending search requests. Throws IllegalStateException if this task is not set to be a_worker task.;public WorkerBulkByScrollTaskState getWorkerState() {_        if (!isWorker()) {_            throw new IllegalStateException("This task is not set to be a worker")__        }_        return workerState__    };returns,the,object,that,manages,sending,search,requests,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,worker,task;public,worker,bulk,by,scroll,task,state,get,worker,state,if,is,worker,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,worker,return,worker,state
BulkByScrollTask -> public WorkerBulkByScrollTaskState getWorkerState();1535139672;Returns the object that manages sending search requests. Throws IllegalStateException if this task is not set to be a_worker task.;public WorkerBulkByScrollTaskState getWorkerState() {_        if (!isWorker()) {_            throw new IllegalStateException("This task is not set to be a worker")__        }_        return workerState__    };returns,the,object,that,manages,sending,search,requests,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,worker,task;public,worker,bulk,by,scroll,task,state,get,worker,state,if,is,worker,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,worker,return,worker,state
BulkByScrollTask -> public WorkerBulkByScrollTaskState getWorkerState();1535552903;Returns the object that manages sending search requests. Throws IllegalStateException if this task is not set to be a_worker task.;public WorkerBulkByScrollTaskState getWorkerState() {_        if (!isWorker()) {_            throw new IllegalStateException("This task is not set to be a worker")__        }_        return workerState__    };returns,the,object,that,manages,sending,search,requests,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,worker,task;public,worker,bulk,by,scroll,task,state,get,worker,state,if,is,worker,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,worker,return,worker,state
BulkByScrollTask -> public WorkerBulkByScrollTaskState getWorkerState();1535965276;Returns the object that manages sending search requests. Throws IllegalStateException if this task is not set to be a_worker task.;public WorkerBulkByScrollTaskState getWorkerState() {_        if (!isWorker()) {_            throw new IllegalStateException("This task is not set to be a worker")__        }_        return workerState__    };returns,the,object,that,manages,sending,search,requests,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,worker,task;public,worker,bulk,by,scroll,task,state,get,worker,state,if,is,worker,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,worker,return,worker,state
BulkByScrollTask -> public WorkerBulkByScrollTaskState getWorkerState();1539615817;Returns the object that manages sending search requests. Throws IllegalStateException if this task is not set to be a_worker task.;public WorkerBulkByScrollTaskState getWorkerState() {_        if (!isWorker()) {_            throw new IllegalStateException("This task is not set to be a worker")__        }_        return workerState__    };returns,the,object,that,manages,sending,search,requests,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,worker,task;public,worker,bulk,by,scroll,task,state,get,worker,state,if,is,worker,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,worker,return,worker,state
BulkByScrollTask -> Status -> Integer getSliceId();1524684173;The id of the slice that this status is reporting or {@code null} if this isn't the status of a sub-slice.;Integer getSliceId() {_            return sliceId__        };the,id,of,the,slice,that,this,status,is,reporting,or,code,null,if,this,isn,t,the,status,of,a,sub,slice;integer,get,slice,id,return,slice,id
BulkByScrollTask -> Status -> Integer getSliceId();1535139672;The id of the slice that this status is reporting or {@code null} if this isn't the status of a sub-slice.;Integer getSliceId() {_            return sliceId__        };the,id,of,the,slice,that,this,status,is,reporting,or,code,null,if,this,isn,t,the,status,of,a,sub,slice;integer,get,slice,id,return,slice,id
BulkByScrollTask -> Status -> Integer getSliceId();1535552903;The id of the slice that this status is reporting or {@code null} if this isn't the status of a sub-slice.;Integer getSliceId() {_            return sliceId__        };the,id,of,the,slice,that,this,status,is,reporting,or,code,null,if,this,isn,t,the,status,of,a,sub,slice;integer,get,slice,id,return,slice,id
BulkByScrollTask -> Status -> Integer getSliceId();1535965276;The id of the slice that this status is reporting or {@code null} if this isn't the status of a sub-slice.;Integer getSliceId() {_            return sliceId__        };the,id,of,the,slice,that,this,status,is,reporting,or,code,null,if,this,isn,t,the,status,of,a,sub,slice;integer,get,slice,id,return,slice,id
BulkByScrollTask -> Status -> Integer getSliceId();1539615817;The id of the slice that this status is reporting or {@code null} if this isn't the status of a sub-slice.;Integer getSliceId() {_            return sliceId__        };the,id,of,the,slice,that,this,status,is,reporting,or,code,null,if,this,isn,t,the,status,of,a,sub,slice;integer,get,slice,id,return,slice,id
BulkByScrollTask -> public void setWorkerCount(int slices);1524684173;Sets this task to be a leader task for {@code slices} sliced subtasks;public void setWorkerCount(int slices) {_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }__        leaderState = new LeaderBulkByScrollTaskState(this, slices)__    };sets,this,task,to,be,a,leader,task,for,code,slices,sliced,subtasks;public,void,set,worker,count,int,slices,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,leader,state,new,leader,bulk,by,scroll,task,state,this,slices
BulkByScrollTask -> public void setWorkerCount(int slices);1535139672;Sets this task to be a leader task for {@code slices} sliced subtasks;public void setWorkerCount(int slices) {_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }__        leaderState = new LeaderBulkByScrollTaskState(this, slices)__    };sets,this,task,to,be,a,leader,task,for,code,slices,sliced,subtasks;public,void,set,worker,count,int,slices,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,leader,state,new,leader,bulk,by,scroll,task,state,this,slices
BulkByScrollTask -> public void setWorkerCount(int slices);1535552903;Sets this task to be a leader task for {@code slices} sliced subtasks;public void setWorkerCount(int slices) {_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }__        leaderState = new LeaderBulkByScrollTaskState(this, slices)__    };sets,this,task,to,be,a,leader,task,for,code,slices,sliced,subtasks;public,void,set,worker,count,int,slices,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,leader,state,new,leader,bulk,by,scroll,task,state,this,slices
BulkByScrollTask -> public void setWorkerCount(int slices);1535965276;Sets this task to be a leader task for {@code slices} sliced subtasks;public void setWorkerCount(int slices) {_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }__        leaderState = new LeaderBulkByScrollTaskState(this, slices)__    };sets,this,task,to,be,a,leader,task,for,code,slices,sliced,subtasks;public,void,set,worker,count,int,slices,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,leader,state,new,leader,bulk,by,scroll,task,state,this,slices
BulkByScrollTask -> public void setWorkerCount(int slices);1539615817;Sets this task to be a leader task for {@code slices} sliced subtasks;public void setWorkerCount(int slices) {_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }__        leaderState = new LeaderBulkByScrollTaskState(this, slices)__    };sets,this,task,to,be,a,leader,task,for,code,slices,sliced,subtasks;public,void,set,worker,count,int,slices,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,leader,state,new,leader,bulk,by,scroll,task,state,this,slices
BulkByScrollTask -> Status -> public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled);1524684173;Constructor merging many statuses.__@param sliceStatuses Statuses of sub requests that this task was sliced into._@param reasonCancelled Reason that this *this* task was cancelled. Note that each entry in {@code sliceStatuses} can be cancelled_independently of this task but if this task is cancelled then the workers *should* be cancelled.;public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled) {_            sliceId = null__            this.reasonCancelled = reasonCancelled___            long mergedTotal = 0__            long mergedUpdated = 0__            long mergedCreated = 0__            long mergedDeleted = 0__            int mergedBatches = 0__            long mergedVersionConflicts = 0__            long mergedNoops = 0__            long mergedBulkRetries = 0__            long mergedSearchRetries = 0__            long mergedThrottled = 0__            float mergedRequestsPerSecond = 0__            long mergedThrottledUntil = Long.MAX_VALUE___            for (StatusOrException slice : sliceStatuses) {_                if (slice == null) {_                    _                    continue__                }_                if (slice.status == null) {_                    _                    continue__                }_                mergedTotal += slice.status.getTotal()__                mergedUpdated += slice.status.getUpdated()__                mergedCreated += slice.status.getCreated()__                mergedDeleted += slice.status.getDeleted()__                mergedBatches += slice.status.getBatches()__                mergedVersionConflicts += slice.status.getVersionConflicts()__                mergedNoops += slice.status.getNoops()__                mergedBulkRetries += slice.status.getBulkRetries()__                mergedSearchRetries += slice.status.getSearchRetries()__                mergedThrottled += slice.status.getThrottled().nanos()__                mergedRequestsPerSecond += slice.status.getRequestsPerSecond()__                mergedThrottledUntil = min(mergedThrottledUntil, slice.status.getThrottledUntil().nanos())__            }__            total = mergedTotal__            updated = mergedUpdated__            created = mergedCreated__            deleted = mergedDeleted__            batches = mergedBatches__            versionConflicts = mergedVersionConflicts__            noops = mergedNoops__            bulkRetries = mergedBulkRetries__            searchRetries = mergedSearchRetries__            throttled = timeValueNanos(mergedThrottled)__            requestsPerSecond = mergedRequestsPerSecond__            throttledUntil = timeValueNanos(mergedThrottledUntil == Long.MAX_VALUE ? 0 : mergedThrottledUntil)__            this.sliceStatuses = sliceStatuses__        };constructor,merging,many,statuses,param,slice,statuses,statuses,of,sub,requests,that,this,task,was,sliced,into,param,reason,cancelled,reason,that,this,this,task,was,cancelled,note,that,each,entry,in,code,slice,statuses,can,be,cancelled,independently,of,this,task,but,if,this,task,is,cancelled,then,the,workers,should,be,cancelled;public,status,list,status,or,exception,slice,statuses,nullable,string,reason,cancelled,slice,id,null,this,reason,cancelled,reason,cancelled,long,merged,total,0,long,merged,updated,0,long,merged,created,0,long,merged,deleted,0,int,merged,batches,0,long,merged,version,conflicts,0,long,merged,noops,0,long,merged,bulk,retries,0,long,merged,search,retries,0,long,merged,throttled,0,float,merged,requests,per,second,0,long,merged,throttled,until,long,for,status,or,exception,slice,slice,statuses,if,slice,null,continue,if,slice,status,null,continue,merged,total,slice,status,get,total,merged,updated,slice,status,get,updated,merged,created,slice,status,get,created,merged,deleted,slice,status,get,deleted,merged,batches,slice,status,get,batches,merged,version,conflicts,slice,status,get,version,conflicts,merged,noops,slice,status,get,noops,merged,bulk,retries,slice,status,get,bulk,retries,merged,search,retries,slice,status,get,search,retries,merged,throttled,slice,status,get,throttled,nanos,merged,requests,per,second,slice,status,get,requests,per,second,merged,throttled,until,min,merged,throttled,until,slice,status,get,throttled,until,nanos,total,merged,total,updated,merged,updated,created,merged,created,deleted,merged,deleted,batches,merged,batches,version,conflicts,merged,version,conflicts,noops,merged,noops,bulk,retries,merged,bulk,retries,search,retries,merged,search,retries,throttled,time,value,nanos,merged,throttled,requests,per,second,merged,requests,per,second,throttled,until,time,value,nanos,merged,throttled,until,long,0,merged,throttled,until,this,slice,statuses,slice,statuses
BulkByScrollTask -> Status -> public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled);1535139672;Constructor merging many statuses.__@param sliceStatuses Statuses of sub requests that this task was sliced into._@param reasonCancelled Reason that this *this* task was cancelled. Note that each entry in {@code sliceStatuses} can be cancelled_independently of this task but if this task is cancelled then the workers *should* be cancelled.;public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled) {_            sliceId = null__            this.reasonCancelled = reasonCancelled___            long mergedTotal = 0__            long mergedUpdated = 0__            long mergedCreated = 0__            long mergedDeleted = 0__            int mergedBatches = 0__            long mergedVersionConflicts = 0__            long mergedNoops = 0__            long mergedBulkRetries = 0__            long mergedSearchRetries = 0__            long mergedThrottled = 0__            float mergedRequestsPerSecond = 0__            long mergedThrottledUntil = Long.MAX_VALUE___            for (StatusOrException slice : sliceStatuses) {_                if (slice == null) {_                    _                    continue__                }_                if (slice.status == null) {_                    _                    continue__                }_                mergedTotal += slice.status.getTotal()__                mergedUpdated += slice.status.getUpdated()__                mergedCreated += slice.status.getCreated()__                mergedDeleted += slice.status.getDeleted()__                mergedBatches += slice.status.getBatches()__                mergedVersionConflicts += slice.status.getVersionConflicts()__                mergedNoops += slice.status.getNoops()__                mergedBulkRetries += slice.status.getBulkRetries()__                mergedSearchRetries += slice.status.getSearchRetries()__                mergedThrottled += slice.status.getThrottled().nanos()__                mergedRequestsPerSecond += slice.status.getRequestsPerSecond()__                mergedThrottledUntil = min(mergedThrottledUntil, slice.status.getThrottledUntil().nanos())__            }__            total = mergedTotal__            updated = mergedUpdated__            created = mergedCreated__            deleted = mergedDeleted__            batches = mergedBatches__            versionConflicts = mergedVersionConflicts__            noops = mergedNoops__            bulkRetries = mergedBulkRetries__            searchRetries = mergedSearchRetries__            throttled = timeValueNanos(mergedThrottled)__            requestsPerSecond = mergedRequestsPerSecond__            throttledUntil = timeValueNanos(mergedThrottledUntil == Long.MAX_VALUE ? 0 : mergedThrottledUntil)__            this.sliceStatuses = sliceStatuses__        };constructor,merging,many,statuses,param,slice,statuses,statuses,of,sub,requests,that,this,task,was,sliced,into,param,reason,cancelled,reason,that,this,this,task,was,cancelled,note,that,each,entry,in,code,slice,statuses,can,be,cancelled,independently,of,this,task,but,if,this,task,is,cancelled,then,the,workers,should,be,cancelled;public,status,list,status,or,exception,slice,statuses,nullable,string,reason,cancelled,slice,id,null,this,reason,cancelled,reason,cancelled,long,merged,total,0,long,merged,updated,0,long,merged,created,0,long,merged,deleted,0,int,merged,batches,0,long,merged,version,conflicts,0,long,merged,noops,0,long,merged,bulk,retries,0,long,merged,search,retries,0,long,merged,throttled,0,float,merged,requests,per,second,0,long,merged,throttled,until,long,for,status,or,exception,slice,slice,statuses,if,slice,null,continue,if,slice,status,null,continue,merged,total,slice,status,get,total,merged,updated,slice,status,get,updated,merged,created,slice,status,get,created,merged,deleted,slice,status,get,deleted,merged,batches,slice,status,get,batches,merged,version,conflicts,slice,status,get,version,conflicts,merged,noops,slice,status,get,noops,merged,bulk,retries,slice,status,get,bulk,retries,merged,search,retries,slice,status,get,search,retries,merged,throttled,slice,status,get,throttled,nanos,merged,requests,per,second,slice,status,get,requests,per,second,merged,throttled,until,min,merged,throttled,until,slice,status,get,throttled,until,nanos,total,merged,total,updated,merged,updated,created,merged,created,deleted,merged,deleted,batches,merged,batches,version,conflicts,merged,version,conflicts,noops,merged,noops,bulk,retries,merged,bulk,retries,search,retries,merged,search,retries,throttled,time,value,nanos,merged,throttled,requests,per,second,merged,requests,per,second,throttled,until,time,value,nanos,merged,throttled,until,long,0,merged,throttled,until,this,slice,statuses,slice,statuses
BulkByScrollTask -> Status -> public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled);1535552903;Constructor merging many statuses.__@param sliceStatuses Statuses of sub requests that this task was sliced into._@param reasonCancelled Reason that this *this* task was cancelled. Note that each entry in {@code sliceStatuses} can be cancelled_independently of this task but if this task is cancelled then the workers *should* be cancelled.;public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled) {_            sliceId = null__            this.reasonCancelled = reasonCancelled___            long mergedTotal = 0__            long mergedUpdated = 0__            long mergedCreated = 0__            long mergedDeleted = 0__            int mergedBatches = 0__            long mergedVersionConflicts = 0__            long mergedNoops = 0__            long mergedBulkRetries = 0__            long mergedSearchRetries = 0__            long mergedThrottled = 0__            float mergedRequestsPerSecond = 0__            long mergedThrottledUntil = Long.MAX_VALUE___            for (StatusOrException slice : sliceStatuses) {_                if (slice == null) {_                    _                    continue__                }_                if (slice.status == null) {_                    _                    continue__                }_                mergedTotal += slice.status.getTotal()__                mergedUpdated += slice.status.getUpdated()__                mergedCreated += slice.status.getCreated()__                mergedDeleted += slice.status.getDeleted()__                mergedBatches += slice.status.getBatches()__                mergedVersionConflicts += slice.status.getVersionConflicts()__                mergedNoops += slice.status.getNoops()__                mergedBulkRetries += slice.status.getBulkRetries()__                mergedSearchRetries += slice.status.getSearchRetries()__                mergedThrottled += slice.status.getThrottled().nanos()__                mergedRequestsPerSecond += slice.status.getRequestsPerSecond()__                mergedThrottledUntil = min(mergedThrottledUntil, slice.status.getThrottledUntil().nanos())__            }__            total = mergedTotal__            updated = mergedUpdated__            created = mergedCreated__            deleted = mergedDeleted__            batches = mergedBatches__            versionConflicts = mergedVersionConflicts__            noops = mergedNoops__            bulkRetries = mergedBulkRetries__            searchRetries = mergedSearchRetries__            throttled = timeValueNanos(mergedThrottled)__            requestsPerSecond = mergedRequestsPerSecond__            throttledUntil = timeValueNanos(mergedThrottledUntil == Long.MAX_VALUE ? 0 : mergedThrottledUntil)__            this.sliceStatuses = sliceStatuses__        };constructor,merging,many,statuses,param,slice,statuses,statuses,of,sub,requests,that,this,task,was,sliced,into,param,reason,cancelled,reason,that,this,this,task,was,cancelled,note,that,each,entry,in,code,slice,statuses,can,be,cancelled,independently,of,this,task,but,if,this,task,is,cancelled,then,the,workers,should,be,cancelled;public,status,list,status,or,exception,slice,statuses,nullable,string,reason,cancelled,slice,id,null,this,reason,cancelled,reason,cancelled,long,merged,total,0,long,merged,updated,0,long,merged,created,0,long,merged,deleted,0,int,merged,batches,0,long,merged,version,conflicts,0,long,merged,noops,0,long,merged,bulk,retries,0,long,merged,search,retries,0,long,merged,throttled,0,float,merged,requests,per,second,0,long,merged,throttled,until,long,for,status,or,exception,slice,slice,statuses,if,slice,null,continue,if,slice,status,null,continue,merged,total,slice,status,get,total,merged,updated,slice,status,get,updated,merged,created,slice,status,get,created,merged,deleted,slice,status,get,deleted,merged,batches,slice,status,get,batches,merged,version,conflicts,slice,status,get,version,conflicts,merged,noops,slice,status,get,noops,merged,bulk,retries,slice,status,get,bulk,retries,merged,search,retries,slice,status,get,search,retries,merged,throttled,slice,status,get,throttled,nanos,merged,requests,per,second,slice,status,get,requests,per,second,merged,throttled,until,min,merged,throttled,until,slice,status,get,throttled,until,nanos,total,merged,total,updated,merged,updated,created,merged,created,deleted,merged,deleted,batches,merged,batches,version,conflicts,merged,version,conflicts,noops,merged,noops,bulk,retries,merged,bulk,retries,search,retries,merged,search,retries,throttled,time,value,nanos,merged,throttled,requests,per,second,merged,requests,per,second,throttled,until,time,value,nanos,merged,throttled,until,long,0,merged,throttled,until,this,slice,statuses,slice,statuses
BulkByScrollTask -> Status -> public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled);1535965276;Constructor merging many statuses.__@param sliceStatuses Statuses of sub requests that this task was sliced into._@param reasonCancelled Reason that this *this* task was cancelled. Note that each entry in {@code sliceStatuses} can be cancelled_independently of this task but if this task is cancelled then the workers *should* be cancelled.;public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled) {_            sliceId = null__            this.reasonCancelled = reasonCancelled___            long mergedTotal = 0__            long mergedUpdated = 0__            long mergedCreated = 0__            long mergedDeleted = 0__            int mergedBatches = 0__            long mergedVersionConflicts = 0__            long mergedNoops = 0__            long mergedBulkRetries = 0__            long mergedSearchRetries = 0__            long mergedThrottled = 0__            float mergedRequestsPerSecond = 0__            long mergedThrottledUntil = Long.MAX_VALUE___            for (StatusOrException slice : sliceStatuses) {_                if (slice == null) {_                    _                    continue__                }_                if (slice.status == null) {_                    _                    continue__                }_                mergedTotal += slice.status.getTotal()__                mergedUpdated += slice.status.getUpdated()__                mergedCreated += slice.status.getCreated()__                mergedDeleted += slice.status.getDeleted()__                mergedBatches += slice.status.getBatches()__                mergedVersionConflicts += slice.status.getVersionConflicts()__                mergedNoops += slice.status.getNoops()__                mergedBulkRetries += slice.status.getBulkRetries()__                mergedSearchRetries += slice.status.getSearchRetries()__                mergedThrottled += slice.status.getThrottled().nanos()__                mergedRequestsPerSecond += slice.status.getRequestsPerSecond()__                mergedThrottledUntil = min(mergedThrottledUntil, slice.status.getThrottledUntil().nanos())__            }__            total = mergedTotal__            updated = mergedUpdated__            created = mergedCreated__            deleted = mergedDeleted__            batches = mergedBatches__            versionConflicts = mergedVersionConflicts__            noops = mergedNoops__            bulkRetries = mergedBulkRetries__            searchRetries = mergedSearchRetries__            throttled = timeValueNanos(mergedThrottled)__            requestsPerSecond = mergedRequestsPerSecond__            throttledUntil = timeValueNanos(mergedThrottledUntil == Long.MAX_VALUE ? 0 : mergedThrottledUntil)__            this.sliceStatuses = sliceStatuses__        };constructor,merging,many,statuses,param,slice,statuses,statuses,of,sub,requests,that,this,task,was,sliced,into,param,reason,cancelled,reason,that,this,this,task,was,cancelled,note,that,each,entry,in,code,slice,statuses,can,be,cancelled,independently,of,this,task,but,if,this,task,is,cancelled,then,the,workers,should,be,cancelled;public,status,list,status,or,exception,slice,statuses,nullable,string,reason,cancelled,slice,id,null,this,reason,cancelled,reason,cancelled,long,merged,total,0,long,merged,updated,0,long,merged,created,0,long,merged,deleted,0,int,merged,batches,0,long,merged,version,conflicts,0,long,merged,noops,0,long,merged,bulk,retries,0,long,merged,search,retries,0,long,merged,throttled,0,float,merged,requests,per,second,0,long,merged,throttled,until,long,for,status,or,exception,slice,slice,statuses,if,slice,null,continue,if,slice,status,null,continue,merged,total,slice,status,get,total,merged,updated,slice,status,get,updated,merged,created,slice,status,get,created,merged,deleted,slice,status,get,deleted,merged,batches,slice,status,get,batches,merged,version,conflicts,slice,status,get,version,conflicts,merged,noops,slice,status,get,noops,merged,bulk,retries,slice,status,get,bulk,retries,merged,search,retries,slice,status,get,search,retries,merged,throttled,slice,status,get,throttled,nanos,merged,requests,per,second,slice,status,get,requests,per,second,merged,throttled,until,min,merged,throttled,until,slice,status,get,throttled,until,nanos,total,merged,total,updated,merged,updated,created,merged,created,deleted,merged,deleted,batches,merged,batches,version,conflicts,merged,version,conflicts,noops,merged,noops,bulk,retries,merged,bulk,retries,search,retries,merged,search,retries,throttled,time,value,nanos,merged,throttled,requests,per,second,merged,requests,per,second,throttled,until,time,value,nanos,merged,throttled,until,long,0,merged,throttled,until,this,slice,statuses,slice,statuses
BulkByScrollTask -> Status -> public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled);1539615817;Constructor merging many statuses.__@param sliceStatuses Statuses of sub requests that this task was sliced into._@param reasonCancelled Reason that this *this* task was cancelled. Note that each entry in {@code sliceStatuses} can be cancelled_independently of this task but if this task is cancelled then the workers *should* be cancelled.;public Status(List<StatusOrException> sliceStatuses, @Nullable String reasonCancelled) {_            sliceId = null__            this.reasonCancelled = reasonCancelled___            long mergedTotal = 0__            long mergedUpdated = 0__            long mergedCreated = 0__            long mergedDeleted = 0__            int mergedBatches = 0__            long mergedVersionConflicts = 0__            long mergedNoops = 0__            long mergedBulkRetries = 0__            long mergedSearchRetries = 0__            long mergedThrottled = 0__            float mergedRequestsPerSecond = 0__            long mergedThrottledUntil = Long.MAX_VALUE___            for (StatusOrException slice : sliceStatuses) {_                if (slice == null) {_                    _                    continue__                }_                if (slice.status == null) {_                    _                    continue__                }_                mergedTotal += slice.status.getTotal()__                mergedUpdated += slice.status.getUpdated()__                mergedCreated += slice.status.getCreated()__                mergedDeleted += slice.status.getDeleted()__                mergedBatches += slice.status.getBatches()__                mergedVersionConflicts += slice.status.getVersionConflicts()__                mergedNoops += slice.status.getNoops()__                mergedBulkRetries += slice.status.getBulkRetries()__                mergedSearchRetries += slice.status.getSearchRetries()__                mergedThrottled += slice.status.getThrottled().nanos()__                mergedRequestsPerSecond += slice.status.getRequestsPerSecond()__                mergedThrottledUntil = min(mergedThrottledUntil, slice.status.getThrottledUntil().nanos())__            }__            total = mergedTotal__            updated = mergedUpdated__            created = mergedCreated__            deleted = mergedDeleted__            batches = mergedBatches__            versionConflicts = mergedVersionConflicts__            noops = mergedNoops__            bulkRetries = mergedBulkRetries__            searchRetries = mergedSearchRetries__            throttled = timeValueNanos(mergedThrottled)__            requestsPerSecond = mergedRequestsPerSecond__            throttledUntil = timeValueNanos(mergedThrottledUntil == Long.MAX_VALUE ? 0 : mergedThrottledUntil)__            this.sliceStatuses = sliceStatuses__        };constructor,merging,many,statuses,param,slice,statuses,statuses,of,sub,requests,that,this,task,was,sliced,into,param,reason,cancelled,reason,that,this,this,task,was,cancelled,note,that,each,entry,in,code,slice,statuses,can,be,cancelled,independently,of,this,task,but,if,this,task,is,cancelled,then,the,workers,should,be,cancelled;public,status,list,status,or,exception,slice,statuses,nullable,string,reason,cancelled,slice,id,null,this,reason,cancelled,reason,cancelled,long,merged,total,0,long,merged,updated,0,long,merged,created,0,long,merged,deleted,0,int,merged,batches,0,long,merged,version,conflicts,0,long,merged,noops,0,long,merged,bulk,retries,0,long,merged,search,retries,0,long,merged,throttled,0,float,merged,requests,per,second,0,long,merged,throttled,until,long,for,status,or,exception,slice,slice,statuses,if,slice,null,continue,if,slice,status,null,continue,merged,total,slice,status,get,total,merged,updated,slice,status,get,updated,merged,created,slice,status,get,created,merged,deleted,slice,status,get,deleted,merged,batches,slice,status,get,batches,merged,version,conflicts,slice,status,get,version,conflicts,merged,noops,slice,status,get,noops,merged,bulk,retries,slice,status,get,bulk,retries,merged,search,retries,slice,status,get,search,retries,merged,throttled,slice,status,get,throttled,nanos,merged,requests,per,second,slice,status,get,requests,per,second,merged,throttled,until,min,merged,throttled,until,slice,status,get,throttled,until,nanos,total,merged,total,updated,merged,updated,created,merged,created,deleted,merged,deleted,batches,merged,batches,version,conflicts,merged,version,conflicts,noops,merged,noops,bulk,retries,merged,bulk,retries,search,retries,merged,search,retries,throttled,time,value,nanos,merged,throttled,requests,per,second,merged,requests,per,second,throttled,until,time,value,nanos,merged,throttled,until,long,0,merged,throttled,until,this,slice,statuses,slice,statuses
BulkByScrollTask -> public void setWorker(float requestsPerSecond, @Nullable Integer sliceId);1524684173;Sets this task to be a worker task that performs search requests_@param requestsPerSecond How many search requests per second this task should make_@param sliceId If this is is a sliced task, which slice number this task corresponds to. Null if not sliced.;public void setWorker(float requestsPerSecond, @Nullable Integer sliceId) {_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }__        workerState = new WorkerBulkByScrollTaskState(this, sliceId, requestsPerSecond)__        if (isCancelled()) {_            workerState.handleCancel()__        }_    };sets,this,task,to,be,a,worker,task,that,performs,search,requests,param,requests,per,second,how,many,search,requests,per,second,this,task,should,make,param,slice,id,if,this,is,is,a,sliced,task,which,slice,number,this,task,corresponds,to,null,if,not,sliced;public,void,set,worker,float,requests,per,second,nullable,integer,slice,id,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,worker,state,new,worker,bulk,by,scroll,task,state,this,slice,id,requests,per,second,if,is,cancelled,worker,state,handle,cancel
BulkByScrollTask -> public void setWorker(float requestsPerSecond, @Nullable Integer sliceId);1535139672;Sets this task to be a worker task that performs search requests_@param requestsPerSecond How many search requests per second this task should make_@param sliceId If this is is a sliced task, which slice number this task corresponds to. Null if not sliced.;public void setWorker(float requestsPerSecond, @Nullable Integer sliceId) {_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }__        workerState = new WorkerBulkByScrollTaskState(this, sliceId, requestsPerSecond)__        if (isCancelled()) {_            workerState.handleCancel()__        }_    };sets,this,task,to,be,a,worker,task,that,performs,search,requests,param,requests,per,second,how,many,search,requests,per,second,this,task,should,make,param,slice,id,if,this,is,is,a,sliced,task,which,slice,number,this,task,corresponds,to,null,if,not,sliced;public,void,set,worker,float,requests,per,second,nullable,integer,slice,id,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,worker,state,new,worker,bulk,by,scroll,task,state,this,slice,id,requests,per,second,if,is,cancelled,worker,state,handle,cancel
BulkByScrollTask -> public void setWorker(float requestsPerSecond, @Nullable Integer sliceId);1535552903;Sets this task to be a worker task that performs search requests_@param requestsPerSecond How many search requests per second this task should make_@param sliceId If this is is a sliced task, which slice number this task corresponds to. Null if not sliced.;public void setWorker(float requestsPerSecond, @Nullable Integer sliceId) {_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }__        workerState = new WorkerBulkByScrollTaskState(this, sliceId, requestsPerSecond)__        if (isCancelled()) {_            workerState.handleCancel()__        }_    };sets,this,task,to,be,a,worker,task,that,performs,search,requests,param,requests,per,second,how,many,search,requests,per,second,this,task,should,make,param,slice,id,if,this,is,is,a,sliced,task,which,slice,number,this,task,corresponds,to,null,if,not,sliced;public,void,set,worker,float,requests,per,second,nullable,integer,slice,id,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,worker,state,new,worker,bulk,by,scroll,task,state,this,slice,id,requests,per,second,if,is,cancelled,worker,state,handle,cancel
BulkByScrollTask -> public void setWorker(float requestsPerSecond, @Nullable Integer sliceId);1535965276;Sets this task to be a worker task that performs search requests_@param requestsPerSecond How many search requests per second this task should make_@param sliceId If this is is a sliced task, which slice number this task corresponds to. Null if not sliced.;public void setWorker(float requestsPerSecond, @Nullable Integer sliceId) {_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }__        workerState = new WorkerBulkByScrollTaskState(this, sliceId, requestsPerSecond)__        if (isCancelled()) {_            workerState.handleCancel()__        }_    };sets,this,task,to,be,a,worker,task,that,performs,search,requests,param,requests,per,second,how,many,search,requests,per,second,this,task,should,make,param,slice,id,if,this,is,is,a,sliced,task,which,slice,number,this,task,corresponds,to,null,if,not,sliced;public,void,set,worker,float,requests,per,second,nullable,integer,slice,id,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,worker,state,new,worker,bulk,by,scroll,task,state,this,slice,id,requests,per,second,if,is,cancelled,worker,state,handle,cancel
BulkByScrollTask -> public void setWorker(float requestsPerSecond, @Nullable Integer sliceId);1539615817;Sets this task to be a worker task that performs search requests_@param requestsPerSecond How many search requests per second this task should make_@param sliceId If this is is a sliced task, which slice number this task corresponds to. Null if not sliced.;public void setWorker(float requestsPerSecond, @Nullable Integer sliceId) {_        if (isWorker()) {_            throw new IllegalStateException("This task is already a worker")__        }_        if (isLeader()) {_            throw new IllegalStateException("This task is already a leader for other slice subtasks")__        }__        workerState = new WorkerBulkByScrollTaskState(this, sliceId, requestsPerSecond)__        if (isCancelled()) {_            workerState.handleCancel()__        }_    };sets,this,task,to,be,a,worker,task,that,performs,search,requests,param,requests,per,second,how,many,search,requests,per,second,this,task,should,make,param,slice,id,if,this,is,is,a,sliced,task,which,slice,number,this,task,corresponds,to,null,if,not,sliced;public,void,set,worker,float,requests,per,second,nullable,integer,slice,id,if,is,worker,throw,new,illegal,state,exception,this,task,is,already,a,worker,if,is,leader,throw,new,illegal,state,exception,this,task,is,already,a,leader,for,other,slice,subtasks,worker,state,new,worker,bulk,by,scroll,task,state,this,slice,id,requests,per,second,if,is,cancelled,worker,state,handle,cancel
BulkByScrollTask -> StatusOrException -> public static StatusOrException fromXContent(XContentParser parser) throws IOException;1535552903;Since {@link StatusOrException} can contain either an {@link Exception} or a {@link Status} we need to peek_at a field first before deciding what needs to be parsed since the same object could contains either._The {@link #EXPECTED_EXCEPTION_FIELDS} contains the fields that are expected when the serialised object_was an instance of exception and the {@link Status#FIELDS_SET} is the set of fields expected when the_serialized object was an instance of Status.;public static StatusOrException fromXContent(XContentParser parser) throws IOException {_            XContentParser.Token token = parser.currentToken()__            if (token == null) {_                token = parser.nextToken()__            }_            if (token == Token.VALUE_NULL) {_                return null__            } else {_                ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__                token = parser.nextToken()__                _                _                while (token != Token.END_OBJECT) {_                    ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation)__                    String fieldName = parser.currentName()__                    _                    if (Status.FIELDS_SET.contains(fieldName)) {_                        return new StatusOrException(_                            Status.innerFromXContent(parser)_                        )__                    } else if (EXPECTED_EXCEPTION_FIELDS.contains(fieldName)){_                        return new StatusOrException(ElasticsearchException.innerFromXContent(parser, false))__                    } else {_                        _                        token = parser.nextToken()__                        if (token == Token.START_OBJECT || token == Token.START_ARRAY) {_                            parser.skipChildren()__                        }_                        token = parser.nextToken()__                    }_                }_                throw new XContentParseException("Unable to parse StatusFromException. Expected fields not found.")__            }_        };since,link,status,or,exception,can,contain,either,an,link,exception,or,a,link,status,we,need,to,peek,at,a,field,first,before,deciding,what,needs,to,be,parsed,since,the,same,object,could,contains,either,the,link,contains,the,fields,that,are,expected,when,the,serialised,object,was,an,instance,of,exception,and,the,link,status,is,the,set,of,fields,expected,when,the,serialized,object,was,an,instance,of,status;public,static,status,or,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,return,null,else,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,while,token,token,ensure,expected,token,token,token,parser,get,token,location,string,field,name,parser,current,name,if,status,contains,field,name,return,new,status,or,exception,status,inner,from,xcontent,parser,else,if,contains,field,name,return,new,status,or,exception,elasticsearch,exception,inner,from,xcontent,parser,false,else,token,parser,next,token,if,token,token,token,token,parser,skip,children,token,parser,next,token,throw,new,xcontent,parse,exception,unable,to,parse,status,from,exception,expected,fields,not,found
BulkByScrollTask -> StatusOrException -> public static StatusOrException fromXContent(XContentParser parser) throws IOException;1535965276;Since {@link StatusOrException} can contain either an {@link Exception} or a {@link Status} we need to peek_at a field first before deciding what needs to be parsed since the same object could contains either._The {@link #EXPECTED_EXCEPTION_FIELDS} contains the fields that are expected when the serialised object_was an instance of exception and the {@link Status#FIELDS_SET} is the set of fields expected when the_serialized object was an instance of Status.;public static StatusOrException fromXContent(XContentParser parser) throws IOException {_            XContentParser.Token token = parser.currentToken()__            if (token == null) {_                token = parser.nextToken()__            }_            if (token == Token.VALUE_NULL) {_                return null__            } else {_                ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__                token = parser.nextToken()__                _                _                while (token != Token.END_OBJECT) {_                    ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation)__                    String fieldName = parser.currentName()__                    _                    if (Status.FIELDS_SET.contains(fieldName)) {_                        return new StatusOrException(_                            Status.innerFromXContent(parser)_                        )__                    } else if (EXPECTED_EXCEPTION_FIELDS.contains(fieldName)){_                        return new StatusOrException(ElasticsearchException.innerFromXContent(parser, false))__                    } else {_                        _                        token = parser.nextToken()__                        if (token == Token.START_OBJECT || token == Token.START_ARRAY) {_                            parser.skipChildren()__                        }_                        token = parser.nextToken()__                    }_                }_                throw new XContentParseException("Unable to parse StatusFromException. Expected fields not found.")__            }_        };since,link,status,or,exception,can,contain,either,an,link,exception,or,a,link,status,we,need,to,peek,at,a,field,first,before,deciding,what,needs,to,be,parsed,since,the,same,object,could,contains,either,the,link,contains,the,fields,that,are,expected,when,the,serialised,object,was,an,instance,of,exception,and,the,link,status,is,the,set,of,fields,expected,when,the,serialized,object,was,an,instance,of,status;public,static,status,or,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,return,null,else,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,while,token,token,ensure,expected,token,token,token,parser,get,token,location,string,field,name,parser,current,name,if,status,contains,field,name,return,new,status,or,exception,status,inner,from,xcontent,parser,else,if,contains,field,name,return,new,status,or,exception,elasticsearch,exception,inner,from,xcontent,parser,false,else,token,parser,next,token,if,token,token,token,token,parser,skip,children,token,parser,next,token,throw,new,xcontent,parse,exception,unable,to,parse,status,from,exception,expected,fields,not,found
BulkByScrollTask -> StatusOrException -> public static StatusOrException fromXContent(XContentParser parser) throws IOException;1539615817;Since {@link StatusOrException} can contain either an {@link Exception} or a {@link Status} we need to peek_at a field first before deciding what needs to be parsed since the same object could contains either._The {@link #EXPECTED_EXCEPTION_FIELDS} contains the fields that are expected when the serialised object_was an instance of exception and the {@link Status#FIELDS_SET} is the set of fields expected when the_serialized object was an instance of Status.;public static StatusOrException fromXContent(XContentParser parser) throws IOException {_            XContentParser.Token token = parser.currentToken()__            if (token == null) {_                token = parser.nextToken()__            }_            if (token == Token.VALUE_NULL) {_                return null__            } else {_                ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__                token = parser.nextToken()__                _                _                while (token != Token.END_OBJECT) {_                    ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation)__                    String fieldName = parser.currentName()__                    _                    if (Status.FIELDS_SET.contains(fieldName)) {_                        return new StatusOrException(_                            Status.innerFromXContent(parser)_                        )__                    } else if (EXPECTED_EXCEPTION_FIELDS.contains(fieldName)){_                        return new StatusOrException(ElasticsearchException.innerFromXContent(parser, false))__                    } else {_                        _                        token = parser.nextToken()__                        if (token == Token.START_OBJECT || token == Token.START_ARRAY) {_                            parser.skipChildren()__                        }_                        token = parser.nextToken()__                    }_                }_                throw new XContentParseException("Unable to parse StatusFromException. Expected fields not found.")__            }_        };since,link,status,or,exception,can,contain,either,an,link,exception,or,a,link,status,we,need,to,peek,at,a,field,first,before,deciding,what,needs,to,be,parsed,since,the,same,object,could,contains,either,the,link,contains,the,fields,that,are,expected,when,the,serialised,object,was,an,instance,of,exception,and,the,link,status,is,the,set,of,fields,expected,when,the,serialized,object,was,an,instance,of,status;public,static,status,or,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,return,null,else,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,while,token,token,ensure,expected,token,token,token,parser,get,token,location,string,field,name,parser,current,name,if,status,contains,field,name,return,new,status,or,exception,status,inner,from,xcontent,parser,else,if,contains,field,name,return,new,status,or,exception,elasticsearch,exception,inner,from,xcontent,parser,false,else,token,parser,next,token,if,token,token,token,token,parser,skip,children,token,parser,next,token,throw,new,xcontent,parse,exception,unable,to,parse,status,from,exception,expected,fields,not,found
BulkByScrollTask -> public boolean isLeader();1524684173;Returns true if this task is a leader for other slice subtasks;public boolean isLeader() {_        return leaderState != null__    };returns,true,if,this,task,is,a,leader,for,other,slice,subtasks;public,boolean,is,leader,return,leader,state,null
BulkByScrollTask -> public boolean isLeader();1535139672;Returns true if this task is a leader for other slice subtasks;public boolean isLeader() {_        return leaderState != null__    };returns,true,if,this,task,is,a,leader,for,other,slice,subtasks;public,boolean,is,leader,return,leader,state,null
BulkByScrollTask -> public boolean isLeader();1535552903;Returns true if this task is a leader for other slice subtasks;public boolean isLeader() {_        return leaderState != null__    };returns,true,if,this,task,is,a,leader,for,other,slice,subtasks;public,boolean,is,leader,return,leader,state,null
BulkByScrollTask -> public boolean isLeader();1535965276;Returns true if this task is a leader for other slice subtasks;public boolean isLeader() {_        return leaderState != null__    };returns,true,if,this,task,is,a,leader,for,other,slice,subtasks;public,boolean,is,leader,return,leader,state,null
BulkByScrollTask -> public boolean isLeader();1539615817;Returns true if this task is a leader for other slice subtasks;public boolean isLeader() {_        return leaderState != null__    };returns,true,if,this,task,is,a,leader,for,other,slice,subtasks;public,boolean,is,leader,return,leader,state,null
BulkByScrollTask -> Status -> public TimeValue getThrottled();1524684173;The total time this request has throttled itself not including the current throttle time if it is currently sleeping.;public TimeValue getThrottled() {_            return throttled__        };the,total,time,this,request,has,throttled,itself,not,including,the,current,throttle,time,if,it,is,currently,sleeping;public,time,value,get,throttled,return,throttled
BulkByScrollTask -> Status -> public TimeValue getThrottled();1535139672;The total time this request has throttled itself not including the current throttle time if it is currently sleeping.;public TimeValue getThrottled() {_            return throttled__        };the,total,time,this,request,has,throttled,itself,not,including,the,current,throttle,time,if,it,is,currently,sleeping;public,time,value,get,throttled,return,throttled
BulkByScrollTask -> Status -> public TimeValue getThrottled();1535552903;The total time this request has throttled itself not including the current throttle time if it is currently sleeping.;public TimeValue getThrottled() {_            return throttled__        };the,total,time,this,request,has,throttled,itself,not,including,the,current,throttle,time,if,it,is,currently,sleeping;public,time,value,get,throttled,return,throttled
BulkByScrollTask -> Status -> public TimeValue getThrottled();1535965276;The total time this request has throttled itself not including the current throttle time if it is currently sleeping.;public TimeValue getThrottled() {_            return throttled__        };the,total,time,this,request,has,throttled,itself,not,including,the,current,throttle,time,if,it,is,currently,sleeping;public,time,value,get,throttled,return,throttled
BulkByScrollTask -> Status -> public TimeValue getThrottled();1539615817;The total time this request has throttled itself not including the current throttle time if it is currently sleeping.;public TimeValue getThrottled() {_            return throttled__        };the,total,time,this,request,has,throttled,itself,not,including,the,current,throttle,time,if,it,is,currently,sleeping;public,time,value,get,throttled,return,throttled
BulkByScrollTask -> Status -> public String getReasonCancelled();1524684173;The reason that the request was canceled or null if it hasn't been.;public String getReasonCancelled() {_            return reasonCancelled__        };the,reason,that,the,request,was,canceled,or,null,if,it,hasn,t,been;public,string,get,reason,cancelled,return,reason,cancelled
BulkByScrollTask -> Status -> public String getReasonCancelled();1535139672;The reason that the request was canceled or null if it hasn't been.;public String getReasonCancelled() {_            return reasonCancelled__        };the,reason,that,the,request,was,canceled,or,null,if,it,hasn,t,been;public,string,get,reason,cancelled,return,reason,cancelled
BulkByScrollTask -> Status -> public String getReasonCancelled();1535552903;The reason that the request was canceled or null if it hasn't been.;public String getReasonCancelled() {_            return reasonCancelled__        };the,reason,that,the,request,was,canceled,or,null,if,it,hasn,t,been;public,string,get,reason,cancelled,return,reason,cancelled
BulkByScrollTask -> Status -> public String getReasonCancelled();1535965276;The reason that the request was canceled or null if it hasn't been.;public String getReasonCancelled() {_            return reasonCancelled__        };the,reason,that,the,request,was,canceled,or,null,if,it,hasn,t,been;public,string,get,reason,cancelled,return,reason,cancelled
BulkByScrollTask -> Status -> public String getReasonCancelled();1539615817;The reason that the request was canceled or null if it hasn't been.;public String getReasonCancelled() {_            return reasonCancelled__        };the,reason,that,the,request,was,canceled,or,null,if,it,hasn,t,been;public,string,get,reason,cancelled,return,reason,cancelled
BulkByScrollTask -> Status -> public long getSearchRetries();1524684173;Number of retries that had to be attempted due to search actions being rejected.;public long getSearchRetries() {_            return searchRetries__        };number,of,retries,that,had,to,be,attempted,due,to,search,actions,being,rejected;public,long,get,search,retries,return,search,retries
BulkByScrollTask -> Status -> public long getSearchRetries();1535139672;Number of retries that had to be attempted due to search actions being rejected.;public long getSearchRetries() {_            return searchRetries__        };number,of,retries,that,had,to,be,attempted,due,to,search,actions,being,rejected;public,long,get,search,retries,return,search,retries
BulkByScrollTask -> Status -> public long getSearchRetries();1535552903;Number of retries that had to be attempted due to search actions being rejected.;public long getSearchRetries() {_            return searchRetries__        };number,of,retries,that,had,to,be,attempted,due,to,search,actions,being,rejected;public,long,get,search,retries,return,search,retries
BulkByScrollTask -> Status -> public long getSearchRetries();1535965276;Number of retries that had to be attempted due to search actions being rejected.;public long getSearchRetries() {_            return searchRetries__        };number,of,retries,that,had,to,be,attempted,due,to,search,actions,being,rejected;public,long,get,search,retries,return,search,retries
BulkByScrollTask -> Status -> public long getSearchRetries();1539615817;Number of retries that had to be attempted due to search actions being rejected.;public long getSearchRetries() {_            return searchRetries__        };number,of,retries,that,had,to,be,attempted,due,to,search,actions,being,rejected;public,long,get,search,retries,return,search,retries
BulkByScrollTask -> public LeaderBulkByScrollTaskState getLeaderState();1524684173;Returns the object that tracks the state of sliced subtasks. Throws IllegalStateException if this task is not set to be_a leader task.;public LeaderBulkByScrollTaskState getLeaderState() {_        if (!isLeader()) {_            throw new IllegalStateException("This task is not set to be a leader for other slice subtasks")__        }_        return leaderState__    };returns,the,object,that,tracks,the,state,of,sliced,subtasks,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,leader,task;public,leader,bulk,by,scroll,task,state,get,leader,state,if,is,leader,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,for,other,slice,subtasks,return,leader,state
BulkByScrollTask -> public LeaderBulkByScrollTaskState getLeaderState();1535139672;Returns the object that tracks the state of sliced subtasks. Throws IllegalStateException if this task is not set to be_a leader task.;public LeaderBulkByScrollTaskState getLeaderState() {_        if (!isLeader()) {_            throw new IllegalStateException("This task is not set to be a leader for other slice subtasks")__        }_        return leaderState__    };returns,the,object,that,tracks,the,state,of,sliced,subtasks,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,leader,task;public,leader,bulk,by,scroll,task,state,get,leader,state,if,is,leader,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,for,other,slice,subtasks,return,leader,state
BulkByScrollTask -> public LeaderBulkByScrollTaskState getLeaderState();1535552903;Returns the object that tracks the state of sliced subtasks. Throws IllegalStateException if this task is not set to be_a leader task.;public LeaderBulkByScrollTaskState getLeaderState() {_        if (!isLeader()) {_            throw new IllegalStateException("This task is not set to be a leader for other slice subtasks")__        }_        return leaderState__    };returns,the,object,that,tracks,the,state,of,sliced,subtasks,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,leader,task;public,leader,bulk,by,scroll,task,state,get,leader,state,if,is,leader,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,for,other,slice,subtasks,return,leader,state
BulkByScrollTask -> public LeaderBulkByScrollTaskState getLeaderState();1535965276;Returns the object that tracks the state of sliced subtasks. Throws IllegalStateException if this task is not set to be_a leader task.;public LeaderBulkByScrollTaskState getLeaderState() {_        if (!isLeader()) {_            throw new IllegalStateException("This task is not set to be a leader for other slice subtasks")__        }_        return leaderState__    };returns,the,object,that,tracks,the,state,of,sliced,subtasks,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,leader,task;public,leader,bulk,by,scroll,task,state,get,leader,state,if,is,leader,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,for,other,slice,subtasks,return,leader,state
BulkByScrollTask -> public LeaderBulkByScrollTaskState getLeaderState();1539615817;Returns the object that tracks the state of sliced subtasks. Throws IllegalStateException if this task is not set to be_a leader task.;public LeaderBulkByScrollTaskState getLeaderState() {_        if (!isLeader()) {_            throw new IllegalStateException("This task is not set to be a leader for other slice subtasks")__        }_        return leaderState__    };returns,the,object,that,tracks,the,state,of,sliced,subtasks,throws,illegal,state,exception,if,this,task,is,not,set,to,be,a,leader,task;public,leader,bulk,by,scroll,task,state,get,leader,state,if,is,leader,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,for,other,slice,subtasks,return,leader,state
BulkByScrollTask -> Status -> public float getRequestsPerSecond();1524684173;The number of requests per second to which to throttle the request. Float.POSITIVE_INFINITY means unlimited.;public float getRequestsPerSecond() {_            return requestsPerSecond__        };the,number,of,requests,per,second,to,which,to,throttle,the,request,float,means,unlimited;public,float,get,requests,per,second,return,requests,per,second
BulkByScrollTask -> Status -> public float getRequestsPerSecond();1535139672;The number of requests per second to which to throttle the request. Float.POSITIVE_INFINITY means unlimited.;public float getRequestsPerSecond() {_            return requestsPerSecond__        };the,number,of,requests,per,second,to,which,to,throttle,the,request,float,means,unlimited;public,float,get,requests,per,second,return,requests,per,second
BulkByScrollTask -> Status -> public float getRequestsPerSecond();1535552903;The number of requests per second to which to throttle the request. Float.POSITIVE_INFINITY means unlimited.;public float getRequestsPerSecond() {_            return requestsPerSecond__        };the,number,of,requests,per,second,to,which,to,throttle,the,request,float,means,unlimited;public,float,get,requests,per,second,return,requests,per,second
BulkByScrollTask -> Status -> public float getRequestsPerSecond();1535965276;The number of requests per second to which to throttle the request. Float.POSITIVE_INFINITY means unlimited.;public float getRequestsPerSecond() {_            return requestsPerSecond__        };the,number,of,requests,per,second,to,which,to,throttle,the,request,float,means,unlimited;public,float,get,requests,per,second,return,requests,per,second
BulkByScrollTask -> Status -> public float getRequestsPerSecond();1539615817;The number of requests per second to which to throttle the request. Float.POSITIVE_INFINITY means unlimited.;public float getRequestsPerSecond() {_            return requestsPerSecond__        };the,number,of,requests,per,second,to,which,to,throttle,the,request,float,means,unlimited;public,float,get,requests,per,second,return,requests,per,second
BulkByScrollTask -> public boolean isWorker();1524684173;Returns true if this task is a worker task that performs search requests. False otherwise;public boolean isWorker() {_        return workerState != null__    };returns,true,if,this,task,is,a,worker,task,that,performs,search,requests,false,otherwise;public,boolean,is,worker,return,worker,state,null
BulkByScrollTask -> public boolean isWorker();1535139672;Returns true if this task is a worker task that performs search requests. False otherwise;public boolean isWorker() {_        return workerState != null__    };returns,true,if,this,task,is,a,worker,task,that,performs,search,requests,false,otherwise;public,boolean,is,worker,return,worker,state,null
BulkByScrollTask -> public boolean isWorker();1535552903;Returns true if this task is a worker task that performs search requests. False otherwise;public boolean isWorker() {_        return workerState != null__    };returns,true,if,this,task,is,a,worker,task,that,performs,search,requests,false,otherwise;public,boolean,is,worker,return,worker,state,null
BulkByScrollTask -> public boolean isWorker();1535965276;Returns true if this task is a worker task that performs search requests. False otherwise;public boolean isWorker() {_        return workerState != null__    };returns,true,if,this,task,is,a,worker,task,that,performs,search,requests,false,otherwise;public,boolean,is,worker,return,worker,state,null
BulkByScrollTask -> public boolean isWorker();1539615817;Returns true if this task is a worker task that performs search requests. False otherwise;public boolean isWorker() {_        return workerState != null__    };returns,true,if,this,task,is,a,worker,task,that,performs,search,requests,false,otherwise;public,boolean,is,worker,return,worker,state,null
BulkByScrollTask -> public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo);1524684173;Build the status for this task given a snapshot of the information of running slices. This is only supported if the task is_set as a leader for slice subtasks;public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo) {_        if (isLeader() == false) {_            throw new IllegalStateException("This task is not set to be a leader of other slice subtasks")__        }__        List<BulkByScrollTask.StatusOrException> sliceStatuses = Arrays.asList(_            new BulkByScrollTask.StatusOrException[leaderState.getSlices()])__        for (TaskInfo t : sliceInfo) {_            BulkByScrollTask.Status status = (BulkByScrollTask.Status) t.getStatus()__            sliceStatuses.set(status.getSliceId(), new BulkByScrollTask.StatusOrException(status))__        }_        Status status = leaderState.getStatus(sliceStatuses)__        return taskInfo(localNodeId, getDescription(), status)__    };build,the,status,for,this,task,given,a,snapshot,of,the,information,of,running,slices,this,is,only,supported,if,the,task,is,set,as,a,leader,for,slice,subtasks;public,task,info,task,info,given,subtask,info,string,local,node,id,list,task,info,slice,info,if,is,leader,false,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,of,other,slice,subtasks,list,bulk,by,scroll,task,status,or,exception,slice,statuses,arrays,as,list,new,bulk,by,scroll,task,status,or,exception,leader,state,get,slices,for,task,info,t,slice,info,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,t,get,status,slice,statuses,set,status,get,slice,id,new,bulk,by,scroll,task,status,or,exception,status,status,status,leader,state,get,status,slice,statuses,return,task,info,local,node,id,get,description,status
BulkByScrollTask -> public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo);1535139672;Build the status for this task given a snapshot of the information of running slices. This is only supported if the task is_set as a leader for slice subtasks;public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo) {_        if (isLeader() == false) {_            throw new IllegalStateException("This task is not set to be a leader of other slice subtasks")__        }__        List<BulkByScrollTask.StatusOrException> sliceStatuses = Arrays.asList(_            new BulkByScrollTask.StatusOrException[leaderState.getSlices()])__        for (TaskInfo t : sliceInfo) {_            BulkByScrollTask.Status status = (BulkByScrollTask.Status) t.getStatus()__            sliceStatuses.set(status.getSliceId(), new BulkByScrollTask.StatusOrException(status))__        }_        Status status = leaderState.getStatus(sliceStatuses)__        return taskInfo(localNodeId, getDescription(), status)__    };build,the,status,for,this,task,given,a,snapshot,of,the,information,of,running,slices,this,is,only,supported,if,the,task,is,set,as,a,leader,for,slice,subtasks;public,task,info,task,info,given,subtask,info,string,local,node,id,list,task,info,slice,info,if,is,leader,false,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,of,other,slice,subtasks,list,bulk,by,scroll,task,status,or,exception,slice,statuses,arrays,as,list,new,bulk,by,scroll,task,status,or,exception,leader,state,get,slices,for,task,info,t,slice,info,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,t,get,status,slice,statuses,set,status,get,slice,id,new,bulk,by,scroll,task,status,or,exception,status,status,status,leader,state,get,status,slice,statuses,return,task,info,local,node,id,get,description,status
BulkByScrollTask -> public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo);1535552903;Build the status for this task given a snapshot of the information of running slices. This is only supported if the task is_set as a leader for slice subtasks;public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo) {_        if (isLeader() == false) {_            throw new IllegalStateException("This task is not set to be a leader of other slice subtasks")__        }__        List<BulkByScrollTask.StatusOrException> sliceStatuses = Arrays.asList(_            new BulkByScrollTask.StatusOrException[leaderState.getSlices()])__        for (TaskInfo t : sliceInfo) {_            BulkByScrollTask.Status status = (BulkByScrollTask.Status) t.getStatus()__            sliceStatuses.set(status.getSliceId(), new BulkByScrollTask.StatusOrException(status))__        }_        Status status = leaderState.getStatus(sliceStatuses)__        return taskInfo(localNodeId, getDescription(), status)__    };build,the,status,for,this,task,given,a,snapshot,of,the,information,of,running,slices,this,is,only,supported,if,the,task,is,set,as,a,leader,for,slice,subtasks;public,task,info,task,info,given,subtask,info,string,local,node,id,list,task,info,slice,info,if,is,leader,false,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,of,other,slice,subtasks,list,bulk,by,scroll,task,status,or,exception,slice,statuses,arrays,as,list,new,bulk,by,scroll,task,status,or,exception,leader,state,get,slices,for,task,info,t,slice,info,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,t,get,status,slice,statuses,set,status,get,slice,id,new,bulk,by,scroll,task,status,or,exception,status,status,status,leader,state,get,status,slice,statuses,return,task,info,local,node,id,get,description,status
BulkByScrollTask -> public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo);1535965276;Build the status for this task given a snapshot of the information of running slices. This is only supported if the task is_set as a leader for slice subtasks;public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo) {_        if (isLeader() == false) {_            throw new IllegalStateException("This task is not set to be a leader of other slice subtasks")__        }__        List<BulkByScrollTask.StatusOrException> sliceStatuses = Arrays.asList(_            new BulkByScrollTask.StatusOrException[leaderState.getSlices()])__        for (TaskInfo t : sliceInfo) {_            BulkByScrollTask.Status status = (BulkByScrollTask.Status) t.getStatus()__            sliceStatuses.set(status.getSliceId(), new BulkByScrollTask.StatusOrException(status))__        }_        Status status = leaderState.getStatus(sliceStatuses)__        return taskInfo(localNodeId, getDescription(), status)__    };build,the,status,for,this,task,given,a,snapshot,of,the,information,of,running,slices,this,is,only,supported,if,the,task,is,set,as,a,leader,for,slice,subtasks;public,task,info,task,info,given,subtask,info,string,local,node,id,list,task,info,slice,info,if,is,leader,false,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,of,other,slice,subtasks,list,bulk,by,scroll,task,status,or,exception,slice,statuses,arrays,as,list,new,bulk,by,scroll,task,status,or,exception,leader,state,get,slices,for,task,info,t,slice,info,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,t,get,status,slice,statuses,set,status,get,slice,id,new,bulk,by,scroll,task,status,or,exception,status,status,status,leader,state,get,status,slice,statuses,return,task,info,local,node,id,get,description,status
BulkByScrollTask -> public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo);1539615817;Build the status for this task given a snapshot of the information of running slices. This is only supported if the task is_set as a leader for slice subtasks;public TaskInfo taskInfoGivenSubtaskInfo(String localNodeId, List<TaskInfo> sliceInfo) {_        if (isLeader() == false) {_            throw new IllegalStateException("This task is not set to be a leader of other slice subtasks")__        }__        List<BulkByScrollTask.StatusOrException> sliceStatuses = Arrays.asList(_            new BulkByScrollTask.StatusOrException[leaderState.getSlices()])__        for (TaskInfo t : sliceInfo) {_            BulkByScrollTask.Status status = (BulkByScrollTask.Status) t.getStatus()__            sliceStatuses.set(status.getSliceId(), new BulkByScrollTask.StatusOrException(status))__        }_        Status status = leaderState.getStatus(sliceStatuses)__        return taskInfo(localNodeId, getDescription(), status)__    };build,the,status,for,this,task,given,a,snapshot,of,the,information,of,running,slices,this,is,only,supported,if,the,task,is,set,as,a,leader,for,slice,subtasks;public,task,info,task,info,given,subtask,info,string,local,node,id,list,task,info,slice,info,if,is,leader,false,throw,new,illegal,state,exception,this,task,is,not,set,to,be,a,leader,of,other,slice,subtasks,list,bulk,by,scroll,task,status,or,exception,slice,statuses,arrays,as,list,new,bulk,by,scroll,task,status,or,exception,leader,state,get,slices,for,task,info,t,slice,info,bulk,by,scroll,task,status,status,bulk,by,scroll,task,status,t,get,status,slice,statuses,set,status,get,slice,id,new,bulk,by,scroll,task,status,or,exception,status,status,status,leader,state,get,status,slice,statuses,return,task,info,local,node,id,get,description,status
BulkByScrollTask -> Status -> public XContentBuilder innerXContent(XContentBuilder builder, Params params)                 throws IOException;1535552903;We need to write a manual parser for this because of {@link StatusOrException}. Since_{@link StatusOrException#fromXContent(XContentParser)} tries to peek at a field first before deciding_what needs to be it cannot use an {@link ObjectParser}.;public XContentBuilder innerXContent(XContentBuilder builder, Params params)_                throws IOException {_            if (sliceId != null) {_                builder.field(SLICE_ID_FIELD, sliceId)__            }_            builder.field(TOTAL_FIELD, total)__            if (params.paramAsBoolean(INCLUDE_UPDATED, true)) {_                builder.field(UPDATED_FIELD, updated)__            }_            if (params.paramAsBoolean(INCLUDE_CREATED, true)) {_                builder.field(CREATED_FIELD, created)__            }_            builder.field(DELETED_FIELD, deleted)__            builder.field(BATCHES_FIELD, batches)__            builder.field(VERSION_CONFLICTS_FIELD, versionConflicts)__            builder.field(NOOPS_FIELD, noops)__            builder.startObject(RETRIES_FIELD)_ {_                builder.field(RETRIES_BULK_FIELD, bulkRetries)__                builder.field(RETRIES_SEARCH_FIELD, searchRetries)__            }_            builder.endObject()__            builder.humanReadableField(THROTTLED_RAW_FIELD, THROTTLED_HR_FIELD, throttled)__            builder.field(REQUESTS_PER_SEC_FIELD, requestsPerSecond == Float.POSITIVE_INFINITY ? -1 : requestsPerSecond)__            if (reasonCancelled != null) {_                builder.field(CANCELED_FIELD, reasonCancelled)__            }_            builder.humanReadableField(THROTTLED_UNTIL_RAW_FIELD, THROTTLED_UNTIL_HR_FIELD, throttledUntil)__            if (false == sliceStatuses.isEmpty()) {_                builder.startArray(SLICES_FIELD)__                for (StatusOrException slice : sliceStatuses) {_                    if (slice == null) {_                        builder.nullValue()__                    } else {_                        slice.toXContent(builder, params)__                    }_                }_                builder.endArray()__            }_            return builder__        };we,need,to,write,a,manual,parser,for,this,because,of,link,status,or,exception,since,link,status,or,exception,from,xcontent,xcontent,parser,tries,to,peek,at,a,field,first,before,deciding,what,needs,to,be,it,cannot,use,an,link,object,parser;public,xcontent,builder,inner,xcontent,xcontent,builder,builder,params,params,throws,ioexception,if,slice,id,null,builder,field,slice,id,builder,field,total,if,params,param,as,boolean,true,builder,field,updated,if,params,param,as,boolean,true,builder,field,created,builder,field,deleted,builder,field,batches,builder,field,version,conflicts,builder,field,noops,builder,start,object,builder,field,bulk,retries,builder,field,search,retries,builder,end,object,builder,human,readable,field,throttled,builder,field,requests,per,second,float,1,requests,per,second,if,reason,cancelled,null,builder,field,reason,cancelled,builder,human,readable,field,throttled,until,if,false,slice,statuses,is,empty,builder,start,array,for,status,or,exception,slice,slice,statuses,if,slice,null,builder,null,value,else,slice,to,xcontent,builder,params,builder,end,array,return,builder
BulkByScrollTask -> Status -> public XContentBuilder innerXContent(XContentBuilder builder, Params params)                 throws IOException;1535965276;We need to write a manual parser for this because of {@link StatusOrException}. Since_{@link StatusOrException#fromXContent(XContentParser)} tries to peek at a field first before deciding_what needs to be it cannot use an {@link ObjectParser}.;public XContentBuilder innerXContent(XContentBuilder builder, Params params)_                throws IOException {_            if (sliceId != null) {_                builder.field(SLICE_ID_FIELD, sliceId)__            }_            builder.field(TOTAL_FIELD, total)__            if (params.paramAsBoolean(INCLUDE_UPDATED, true)) {_                builder.field(UPDATED_FIELD, updated)__            }_            if (params.paramAsBoolean(INCLUDE_CREATED, true)) {_                builder.field(CREATED_FIELD, created)__            }_            builder.field(DELETED_FIELD, deleted)__            builder.field(BATCHES_FIELD, batches)__            builder.field(VERSION_CONFLICTS_FIELD, versionConflicts)__            builder.field(NOOPS_FIELD, noops)__            builder.startObject(RETRIES_FIELD)_ {_                builder.field(RETRIES_BULK_FIELD, bulkRetries)__                builder.field(RETRIES_SEARCH_FIELD, searchRetries)__            }_            builder.endObject()__            builder.humanReadableField(THROTTLED_RAW_FIELD, THROTTLED_HR_FIELD, throttled)__            builder.field(REQUESTS_PER_SEC_FIELD, requestsPerSecond == Float.POSITIVE_INFINITY ? -1 : requestsPerSecond)__            if (reasonCancelled != null) {_                builder.field(CANCELED_FIELD, reasonCancelled)__            }_            builder.humanReadableField(THROTTLED_UNTIL_RAW_FIELD, THROTTLED_UNTIL_HR_FIELD, throttledUntil)__            if (false == sliceStatuses.isEmpty()) {_                builder.startArray(SLICES_FIELD)__                for (StatusOrException slice : sliceStatuses) {_                    if (slice == null) {_                        builder.nullValue()__                    } else {_                        slice.toXContent(builder, params)__                    }_                }_                builder.endArray()__            }_            return builder__        };we,need,to,write,a,manual,parser,for,this,because,of,link,status,or,exception,since,link,status,or,exception,from,xcontent,xcontent,parser,tries,to,peek,at,a,field,first,before,deciding,what,needs,to,be,it,cannot,use,an,link,object,parser;public,xcontent,builder,inner,xcontent,xcontent,builder,builder,params,params,throws,ioexception,if,slice,id,null,builder,field,slice,id,builder,field,total,if,params,param,as,boolean,true,builder,field,updated,if,params,param,as,boolean,true,builder,field,created,builder,field,deleted,builder,field,batches,builder,field,version,conflicts,builder,field,noops,builder,start,object,builder,field,bulk,retries,builder,field,search,retries,builder,end,object,builder,human,readable,field,throttled,builder,field,requests,per,second,float,1,requests,per,second,if,reason,cancelled,null,builder,field,reason,cancelled,builder,human,readable,field,throttled,until,if,false,slice,statuses,is,empty,builder,start,array,for,status,or,exception,slice,slice,statuses,if,slice,null,builder,null,value,else,slice,to,xcontent,builder,params,builder,end,array,return,builder
BulkByScrollTask -> Status -> public XContentBuilder innerXContent(XContentBuilder builder, Params params)                 throws IOException;1539615817;We need to write a manual parser for this because of {@link StatusOrException}. Since_{@link StatusOrException#fromXContent(XContentParser)} tries to peek at a field first before deciding_what needs to be it cannot use an {@link ObjectParser}.;public XContentBuilder innerXContent(XContentBuilder builder, Params params)_                throws IOException {_            if (sliceId != null) {_                builder.field(SLICE_ID_FIELD, sliceId)__            }_            builder.field(TOTAL_FIELD, total)__            if (params.paramAsBoolean(INCLUDE_UPDATED, true)) {_                builder.field(UPDATED_FIELD, updated)__            }_            if (params.paramAsBoolean(INCLUDE_CREATED, true)) {_                builder.field(CREATED_FIELD, created)__            }_            builder.field(DELETED_FIELD, deleted)__            builder.field(BATCHES_FIELD, batches)__            builder.field(VERSION_CONFLICTS_FIELD, versionConflicts)__            builder.field(NOOPS_FIELD, noops)__            builder.startObject(RETRIES_FIELD)_ {_                builder.field(RETRIES_BULK_FIELD, bulkRetries)__                builder.field(RETRIES_SEARCH_FIELD, searchRetries)__            }_            builder.endObject()__            builder.humanReadableField(THROTTLED_RAW_FIELD, THROTTLED_HR_FIELD, throttled)__            builder.field(REQUESTS_PER_SEC_FIELD, requestsPerSecond == Float.POSITIVE_INFINITY ? -1 : requestsPerSecond)__            if (reasonCancelled != null) {_                builder.field(CANCELED_FIELD, reasonCancelled)__            }_            builder.humanReadableField(THROTTLED_UNTIL_RAW_FIELD, THROTTLED_UNTIL_HR_FIELD, throttledUntil)__            if (false == sliceStatuses.isEmpty()) {_                builder.startArray(SLICES_FIELD)__                for (StatusOrException slice : sliceStatuses) {_                    if (slice == null) {_                        builder.nullValue()__                    } else {_                        slice.toXContent(builder, params)__                    }_                }_                builder.endArray()__            }_            return builder__        };we,need,to,write,a,manual,parser,for,this,because,of,link,status,or,exception,since,link,status,or,exception,from,xcontent,xcontent,parser,tries,to,peek,at,a,field,first,before,deciding,what,needs,to,be,it,cannot,use,an,link,object,parser;public,xcontent,builder,inner,xcontent,xcontent,builder,builder,params,params,throws,ioexception,if,slice,id,null,builder,field,slice,id,builder,field,total,if,params,param,as,boolean,true,builder,field,updated,if,params,param,as,boolean,true,builder,field,created,builder,field,deleted,builder,field,batches,builder,field,version,conflicts,builder,field,noops,builder,start,object,builder,field,bulk,retries,builder,field,search,retries,builder,end,object,builder,human,readable,field,throttled,builder,field,requests,per,second,float,1,requests,per,second,if,reason,cancelled,null,builder,field,reason,cancelled,builder,human,readable,field,throttled,until,if,false,slice,statuses,is,empty,builder,start,array,for,status,or,exception,slice,slice,statuses,if,slice,null,builder,null,value,else,slice,to,xcontent,builder,params,builder,end,array,return,builder
BulkByScrollTask -> Status -> public long getBulkRetries();1524684173;Number of retries that had to be attempted due to bulk actions being rejected.;public long getBulkRetries() {_            return bulkRetries__        };number,of,retries,that,had,to,be,attempted,due,to,bulk,actions,being,rejected;public,long,get,bulk,retries,return,bulk,retries
BulkByScrollTask -> Status -> public long getBulkRetries();1535139672;Number of retries that had to be attempted due to bulk actions being rejected.;public long getBulkRetries() {_            return bulkRetries__        };number,of,retries,that,had,to,be,attempted,due,to,bulk,actions,being,rejected;public,long,get,bulk,retries,return,bulk,retries
BulkByScrollTask -> Status -> public long getBulkRetries();1535552903;Number of retries that had to be attempted due to bulk actions being rejected.;public long getBulkRetries() {_            return bulkRetries__        };number,of,retries,that,had,to,be,attempted,due,to,bulk,actions,being,rejected;public,long,get,bulk,retries,return,bulk,retries
BulkByScrollTask -> Status -> public long getBulkRetries();1535965276;Number of retries that had to be attempted due to bulk actions being rejected.;public long getBulkRetries() {_            return bulkRetries__        };number,of,retries,that,had,to,be,attempted,due,to,bulk,actions,being,rejected;public,long,get,bulk,retries,return,bulk,retries
BulkByScrollTask -> Status -> public long getBulkRetries();1539615817;Number of retries that had to be attempted due to bulk actions being rejected.;public long getBulkRetries() {_            return bulkRetries__        };number,of,retries,that,had,to,be,attempted,due,to,bulk,actions,being,rejected;public,long,get,bulk,retries,return,bulk,retries
BulkByScrollTask -> Status -> public long getTotal();1524684173;The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents_to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.;public long getTotal() {_            return total__        };the,total,number,of,documents,this,request,will,process,0,means,we,don,t,yet,know,or,possibly,there,are,actually,0,documents,to,process,its,ok,that,these,have,the,same,meaning,because,any,request,with,0,actual,documents,should,be,quite,short,lived;public,long,get,total,return,total
BulkByScrollTask -> Status -> public long getTotal();1535139672;The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents_to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.;public long getTotal() {_            return total__        };the,total,number,of,documents,this,request,will,process,0,means,we,don,t,yet,know,or,possibly,there,are,actually,0,documents,to,process,its,ok,that,these,have,the,same,meaning,because,any,request,with,0,actual,documents,should,be,quite,short,lived;public,long,get,total,return,total
BulkByScrollTask -> Status -> public long getTotal();1535552903;The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents_to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.;public long getTotal() {_            return total__        };the,total,number,of,documents,this,request,will,process,0,means,we,don,t,yet,know,or,possibly,there,are,actually,0,documents,to,process,its,ok,that,these,have,the,same,meaning,because,any,request,with,0,actual,documents,should,be,quite,short,lived;public,long,get,total,return,total
BulkByScrollTask -> Status -> public long getTotal();1535965276;The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents_to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.;public long getTotal() {_            return total__        };the,total,number,of,documents,this,request,will,process,0,means,we,don,t,yet,know,or,possibly,there,are,actually,0,documents,to,process,its,ok,that,these,have,the,same,meaning,because,any,request,with,0,actual,documents,should,be,quite,short,lived;public,long,get,total,return,total
BulkByScrollTask -> Status -> public long getTotal();1539615817;The total number of documents this request will process. 0 means we don't yet know or, possibly, there are actually 0 documents_to process. Its ok that these have the same meaning because any request with 0 actual documents should be quite short lived.;public long getTotal() {_            return total__        };the,total,number,of,documents,this,request,will,process,0,means,we,don,t,yet,know,or,possibly,there,are,actually,0,documents,to,process,its,ok,that,these,have,the,same,meaning,because,any,request,with,0,actual,documents,should,be,quite,short,lived;public,long,get,total,return,total
BulkByScrollTask -> Status -> public List<StatusOrException> getSliceStatuses();1524684173;Statuses of the sub requests into which this sub-request was sliced. Empty if this request wasn't sliced into sub-requests.;public List<StatusOrException> getSliceStatuses() {_            return sliceStatuses__        };statuses,of,the,sub,requests,into,which,this,sub,request,was,sliced,empty,if,this,request,wasn,t,sliced,into,sub,requests;public,list,status,or,exception,get,slice,statuses,return,slice,statuses
BulkByScrollTask -> Status -> public List<StatusOrException> getSliceStatuses();1535139672;Statuses of the sub requests into which this sub-request was sliced. Empty if this request wasn't sliced into sub-requests.;public List<StatusOrException> getSliceStatuses() {_            return sliceStatuses__        };statuses,of,the,sub,requests,into,which,this,sub,request,was,sliced,empty,if,this,request,wasn,t,sliced,into,sub,requests;public,list,status,or,exception,get,slice,statuses,return,slice,statuses
BulkByScrollTask -> Status -> public List<StatusOrException> getSliceStatuses();1535552903;Statuses of the sub requests into which this sub-request was sliced. Empty if this request wasn't sliced into sub-requests.;public List<StatusOrException> getSliceStatuses() {_            return sliceStatuses__        };statuses,of,the,sub,requests,into,which,this,sub,request,was,sliced,empty,if,this,request,wasn,t,sliced,into,sub,requests;public,list,status,or,exception,get,slice,statuses,return,slice,statuses
BulkByScrollTask -> Status -> public List<StatusOrException> getSliceStatuses();1535965276;Statuses of the sub requests into which this sub-request was sliced. Empty if this request wasn't sliced into sub-requests.;public List<StatusOrException> getSliceStatuses() {_            return sliceStatuses__        };statuses,of,the,sub,requests,into,which,this,sub,request,was,sliced,empty,if,this,request,wasn,t,sliced,into,sub,requests;public,list,status,or,exception,get,slice,statuses,return,slice,statuses
BulkByScrollTask -> Status -> public List<StatusOrException> getSliceStatuses();1539615817;Statuses of the sub requests into which this sub-request was sliced. Empty if this request wasn't sliced into sub-requests.;public List<StatusOrException> getSliceStatuses() {_            return sliceStatuses__        };statuses,of,the,sub,requests,into,which,this,sub,request,was,sliced,empty,if,this,request,wasn,t,sliced,into,sub,requests;public,list,status,or,exception,get,slice,statuses,return,slice,statuses
BulkByScrollTask -> StatusOrException -> public StatusOrException(StreamInput in) throws IOException;1524684173;Read from a stream.;public StatusOrException(StreamInput in) throws IOException {_            if (in.readBoolean()) {_                status = new Status(in)__                exception = null__            } else {_                status = null__                exception = in.readException()__            }_        };read,from,a,stream;public,status,or,exception,stream,input,in,throws,ioexception,if,in,read,boolean,status,new,status,in,exception,null,else,status,null,exception,in,read,exception
BulkByScrollTask -> StatusOrException -> public StatusOrException(StreamInput in) throws IOException;1535139672;Read from a stream.;public StatusOrException(StreamInput in) throws IOException {_            if (in.readBoolean()) {_                status = new Status(in)__                exception = null__            } else {_                status = null__                exception = in.readException()__            }_        };read,from,a,stream;public,status,or,exception,stream,input,in,throws,ioexception,if,in,read,boolean,status,new,status,in,exception,null,else,status,null,exception,in,read,exception
BulkByScrollTask -> StatusOrException -> public StatusOrException(StreamInput in) throws IOException;1535552903;Read from a stream.;public StatusOrException(StreamInput in) throws IOException {_            if (in.readBoolean()) {_                status = new Status(in)__                exception = null__            } else {_                status = null__                exception = in.readException()__            }_        };read,from,a,stream;public,status,or,exception,stream,input,in,throws,ioexception,if,in,read,boolean,status,new,status,in,exception,null,else,status,null,exception,in,read,exception
BulkByScrollTask -> StatusOrException -> public StatusOrException(StreamInput in) throws IOException;1535965276;Read from a stream.;public StatusOrException(StreamInput in) throws IOException {_            if (in.readBoolean()) {_                status = new Status(in)__                exception = null__            } else {_                status = null__                exception = in.readException()__            }_        };read,from,a,stream;public,status,or,exception,stream,input,in,throws,ioexception,if,in,read,boolean,status,new,status,in,exception,null,else,status,null,exception,in,read,exception
BulkByScrollTask -> StatusOrException -> public StatusOrException(StreamInput in) throws IOException;1539615817;Read from a stream.;public StatusOrException(StreamInput in) throws IOException {_            if (in.readBoolean()) {_                status = new Status(in)__                exception = null__            } else {_                status = null__                exception = in.readException()__            }_        };read,from,a,stream;public,status,or,exception,stream,input,in,throws,ioexception,if,in,read,boolean,status,new,status,in,exception,null,else,status,null,exception,in,read,exception
BulkByScrollTask -> Status -> public long getNoops();1524684173;Number of noops (skipped bulk items) as part of this request.;public long getNoops() {_            return noops__        };number,of,noops,skipped,bulk,items,as,part,of,this,request;public,long,get,noops,return,noops
BulkByScrollTask -> Status -> public long getNoops();1535139672;Number of noops (skipped bulk items) as part of this request.;public long getNoops() {_            return noops__        };number,of,noops,skipped,bulk,items,as,part,of,this,request;public,long,get,noops,return,noops
BulkByScrollTask -> Status -> public long getNoops();1535552903;Number of noops (skipped bulk items) as part of this request.;public long getNoops() {_            return noops__        };number,of,noops,skipped,bulk,items,as,part,of,this,request;public,long,get,noops,return,noops
BulkByScrollTask -> Status -> public long getNoops();1535965276;Number of noops (skipped bulk items) as part of this request.;public long getNoops() {_            return noops__        };number,of,noops,skipped,bulk,items,as,part,of,this,request;public,long,get,noops,return,noops
BulkByScrollTask -> Status -> public long getNoops();1539615817;Number of noops (skipped bulk items) as part of this request.;public long getNoops() {_            return noops__        };number,of,noops,skipped,bulk,items,as,part,of,this,request;public,long,get,noops,return,noops
BulkByScrollTask -> Status -> public int getBatches();1524684173;Number of scan responses this request has processed.;public int getBatches() {_            return batches__        };number,of,scan,responses,this,request,has,processed;public,int,get,batches,return,batches
BulkByScrollTask -> Status -> public int getBatches();1535139672;Number of scan responses this request has processed.;public int getBatches() {_            return batches__        };number,of,scan,responses,this,request,has,processed;public,int,get,batches,return,batches
BulkByScrollTask -> Status -> public int getBatches();1535552903;Number of scan responses this request has processed.;public int getBatches() {_            return batches__        };number,of,scan,responses,this,request,has,processed;public,int,get,batches,return,batches
BulkByScrollTask -> Status -> public int getBatches();1535965276;Number of scan responses this request has processed.;public int getBatches() {_            return batches__        };number,of,scan,responses,this,request,has,processed;public,int,get,batches,return,batches
BulkByScrollTask -> Status -> public int getBatches();1539615817;Number of scan responses this request has processed.;public int getBatches() {_            return batches__        };number,of,scan,responses,this,request,has,processed;public,int,get,batches,return,batches
BulkByScrollTask -> Status -> public long getVersionConflicts();1524684173;Number of version conflicts this request has hit.;public long getVersionConflicts() {_            return versionConflicts__        };number,of,version,conflicts,this,request,has,hit;public,long,get,version,conflicts,return,version,conflicts
BulkByScrollTask -> Status -> public long getVersionConflicts();1535139672;Number of version conflicts this request has hit.;public long getVersionConflicts() {_            return versionConflicts__        };number,of,version,conflicts,this,request,has,hit;public,long,get,version,conflicts,return,version,conflicts
BulkByScrollTask -> Status -> public long getVersionConflicts();1535552903;Number of version conflicts this request has hit.;public long getVersionConflicts() {_            return versionConflicts__        };number,of,version,conflicts,this,request,has,hit;public,long,get,version,conflicts,return,version,conflicts
BulkByScrollTask -> Status -> public long getVersionConflicts();1535965276;Number of version conflicts this request has hit.;public long getVersionConflicts() {_            return versionConflicts__        };number,of,version,conflicts,this,request,has,hit;public,long,get,version,conflicts,return,version,conflicts
BulkByScrollTask -> Status -> public long getVersionConflicts();1539615817;Number of version conflicts this request has hit.;public long getVersionConflicts() {_            return versionConflicts__        };number,of,version,conflicts,this,request,has,hit;public,long,get,version,conflicts,return,version,conflicts
BulkByScrollTask -> Status -> public TimeValue getThrottledUntil();1524684173;Remaining delay of any current throttle sleep or 0 if not sleeping.;public TimeValue getThrottledUntil() {_            return throttledUntil__        };remaining,delay,of,any,current,throttle,sleep,or,0,if,not,sleeping;public,time,value,get,throttled,until,return,throttled,until
BulkByScrollTask -> Status -> public TimeValue getThrottledUntil();1535139672;Remaining delay of any current throttle sleep or 0 if not sleeping.;public TimeValue getThrottledUntil() {_            return throttledUntil__        };remaining,delay,of,any,current,throttle,sleep,or,0,if,not,sleeping;public,time,value,get,throttled,until,return,throttled,until
BulkByScrollTask -> Status -> public TimeValue getThrottledUntil();1535552903;Remaining delay of any current throttle sleep or 0 if not sleeping.;public TimeValue getThrottledUntil() {_            return throttledUntil__        };remaining,delay,of,any,current,throttle,sleep,or,0,if,not,sleeping;public,time,value,get,throttled,until,return,throttled,until
BulkByScrollTask -> Status -> public TimeValue getThrottledUntil();1535965276;Remaining delay of any current throttle sleep or 0 if not sleeping.;public TimeValue getThrottledUntil() {_            return throttledUntil__        };remaining,delay,of,any,current,throttle,sleep,or,0,if,not,sleeping;public,time,value,get,throttled,until,return,throttled,until
BulkByScrollTask -> Status -> public TimeValue getThrottledUntil();1539615817;Remaining delay of any current throttle sleep or 0 if not sleeping.;public TimeValue getThrottledUntil() {_            return throttledUntil__        };remaining,delay,of,any,current,throttle,sleep,or,0,if,not,sleeping;public,time,value,get,throttled,until,return,throttled,until
