commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;12;/**  * Add access to single file path  * @param policy current policy to add permissions to  * @param path the path itself  * @param permissions set of file permissions to grant to the path  */ ;/**  * Add access to single file path  * @param policy current policy to add permissions to  * @param path the path itself  * @param permissions set of file permissions to grant to the path  */ @SuppressForbidden(reason = "only place where creating Java-9 compatible FilePermission objects is possible") public static void addSingleFilePath(Permissions policy, Path path, String permissions) throws IOException {     policy.add(new FilePermission(path.toString(), permissions)).     if (VERSION_IS_AT_LEAST_JAVA_9 && Files.exists(path)) {         // Java 9 FilePermission model requires this due to the removal of pathname canonicalization,         // see also https://github.com/elastic/elasticsearch/issues/21534         Path realPath = path.toRealPath().         if (path.toString().equals(realPath.toString()) == false) {             policy.add(new FilePermission(realPath.toString(), permissions)).         }     } }
true;public,static;4;22;/**  * Add access to path (and all files underneath it). this also creates the directory if it does not exist.  *  * @param policy            current policy to add permissions to  * @param configurationName the configuration name associated with the path (for error messages only)  * @param path              the path itself  * @param permissions       set of file permissions to grant to the path  */ ;/**  * Add access to path (and all files underneath it). this also creates the directory if it does not exist.  *  * @param policy            current policy to add permissions to  * @param configurationName the configuration name associated with the path (for error messages only)  * @param path              the path itself  * @param permissions       set of file permissions to grant to the path  */ @SuppressForbidden(reason = "only place where creating Java-9 compatible FilePermission objects is possible") public static void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions) throws IOException {     // paths may not exist yet, this also checks accessibility     try {         Security.ensureDirectoryExists(path).     } catch (IOException e) {         throw new IllegalStateException("Unable to access '" + configurationName + "' (" + path + ")", e).     }     // add each path twice: once for itself, again for files underneath it     policy.add(new FilePermission(path.toString(), permissions)).     policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + "-", permissions)).     if (VERSION_IS_AT_LEAST_JAVA_9) {         // Java 9 FilePermission model requires this due to the removal of pathname canonicalization,         // see also https://github.com/elastic/elasticsearch/issues/21534         Path realPath = path.toRealPath().         if (path.toString().equals(realPath.toString()) == false) {             policy.add(new FilePermission(realPath.toString(), permissions)).             policy.add(new FilePermission(realPath.toString() + realPath.getFileSystem().getSeparator() + "-", permissions)).         }     } }
