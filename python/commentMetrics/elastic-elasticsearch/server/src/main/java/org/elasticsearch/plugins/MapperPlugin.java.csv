commented;modifiers;parameterAmount;loc;comment;code
true;default;0;3;/**  * Returns additional mapper implementations added by this plugin.  * <p>  * The key of the returned {@link Map} is the unique name for the mapper which will be used  * as the mapping {@code type}, and the value is a {@link Mapper.TypeParser} to parse the  * mapper settings into a {@link Mapper}.  */ ;/**  * Returns additional mapper implementations added by this plugin.  * <p>  * The key of the returned {@link Map} is the unique name for the mapper which will be used  * as the mapping {@code type}, and the value is a {@link Mapper.TypeParser} to parse the  * mapper settings into a {@link Mapper}.  */ default Map<String, Mapper.TypeParser> getMappers() {     return Collections.emptyMap(). }
true;default;0;3;/**  * Returns additional metadata mapper implementations added by this plugin.  * <p>  * The key of the returned {@link Map} is the unique name for the metadata mapper, which  * is used in the mapping json to configure the metadata mapper, and the value is a  * {@link MetadataFieldMapper.TypeParser} to parse the mapper settings into a  * {@link MetadataFieldMapper}.  */ ;/**  * Returns additional metadata mapper implementations added by this plugin.  * <p>  * The key of the returned {@link Map} is the unique name for the metadata mapper, which  * is used in the mapping json to configure the metadata mapper, and the value is a  * {@link MetadataFieldMapper.TypeParser} to parse the mapper settings into a  * {@link MetadataFieldMapper}.  */ default Map<String, MetadataFieldMapper.TypeParser> getMetadataMappers() {     return Collections.emptyMap(). }
true;default;0;3;/**  * Returns a function that given an index name returns a predicate which fields must match in order to be returned by get mappings,  * get index, get field mappings and field capabilities API. Useful to filter the fields that such API return. The predicate receives  * the field name as input argument and should return true to show the field and false to hide it.  */ ;/**  * Returns a function that given an index name returns a predicate which fields must match in order to be returned by get mappings,  * get index, get field mappings and field capabilities API. Useful to filter the fields that such API return. The predicate receives  * the field name as input argument and should return true to show the field and false to hide it.  */ default Function<String, Predicate<String>> getFieldFilter() {     return NOOP_FIELD_FILTER. }
