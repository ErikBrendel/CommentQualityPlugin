commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the type to index the document to.  */ ;/**  * Sets the type to index the document to.  */ public IndexRequestBuilder setType(String type) {     request.type(type).     return this. }
true;public;1;4;/**  * Sets the id to index the document under. Optional, and if not set, one will be automatically  * generated.  */ ;/**  * Sets the id to index the document under. Optional, and if not set, one will be automatically  * generated.  */ public IndexRequestBuilder setId(String id) {     request.id(id).     return this. }
true;public;1;4;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ ;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ public IndexRequestBuilder setRouting(String routing) {     request.routing(routing).     return this. }
true;public;2;4;/**  * Sets the source.  */ ;/**  * Sets the source.  */ public IndexRequestBuilder setSource(BytesReference source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;1;4;/**  * Index the Map as a JSON.  *  * @param source The map to index  */ ;/**  * Index the Map as a JSON.  *  * @param source The map to index  */ public IndexRequestBuilder setSource(Map<String, ?> source) {     request.source(source).     return this. }
true;public;2;4;/**  * Index the Map as the provided content type.  *  * @param source The map to index  */ ;/**  * Index the Map as the provided content type.  *  * @param source The map to index  */ public IndexRequestBuilder setSource(Map<String, ?> source, XContentType contentType) {     request.source(source, contentType).     return this. }
true;public;2;4;/**  * Sets the document source to index.  * <p>  * Note, its preferable to either set it using {@link #setSource(org.elasticsearch.common.xcontent.XContentBuilder)}  * or using the {@link #setSource(byte[], XContentType)}.  */ ;/**  * Sets the document source to index.  * <p>  * Note, its preferable to either set it using {@link #setSource(org.elasticsearch.common.xcontent.XContentBuilder)}  * or using the {@link #setSource(byte[], XContentType)}.  */ public IndexRequestBuilder setSource(String source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;1;4;/**  * Sets the content source to index.  */ ;/**  * Sets the content source to index.  */ public IndexRequestBuilder setSource(XContentBuilder sourceBuilder) {     request.source(sourceBuilder).     return this. }
true;public;2;4;/**  * Sets the document to index in bytes form.  */ ;/**  * Sets the document to index in bytes form.  */ public IndexRequestBuilder setSource(byte[] source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;4;4;/**  * Sets the document to index in bytes form (assumed to be safe to be used from different  * threads).  *  * @param source The source to index  * @param offset The offset in the byte array  * @param length The length of the data  * @param xContentType The type/format of the source  */ ;/**  * Sets the document to index in bytes form (assumed to be safe to be used from different  * threads).  *  * @param source The source to index  * @param offset The offset in the byte array  * @param length The length of the data  * @param xContentType The type/format of the source  */ public IndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType) {     request.source(source, offset, length, xContentType).     return this. }
true;public;1;4;/**  * Constructs a simple document with a field name and value pairs.  * <p>  * <b>Note: the number of objects passed to this method must be an even  * number. Also the first argument in each pair (the field name) must have a  * valid String representation.</b>  * </p>  */ ;/**  * Constructs a simple document with a field name and value pairs.  * <p>  * <b>Note: the number of objects passed to this method must be an even  * number. Also the first argument in each pair (the field name) must have a  * valid String representation.</b>  * </p>  */ public IndexRequestBuilder setSource(Object... source) {     request.source(source).     return this. }
true;public;2;4;/**  * Constructs a simple document with a field name and value pairs.  * <p>  * <b>Note: the number of objects passed as varargs to this method must be an even  * number. Also the first argument in each pair (the field name) must have a  * valid String representation.</b>  * </p>  */ ;/**  * Constructs a simple document with a field name and value pairs.  * <p>  * <b>Note: the number of objects passed as varargs to this method must be an even  * number. Also the first argument in each pair (the field name) must have a  * valid String representation.</b>  * </p>  */ public IndexRequestBuilder setSource(XContentType xContentType, Object... source) {     request.source(xContentType, source).     return this. }
true;public;1;4;/**  * Sets the type of operation to perform.  */ ;/**  * Sets the type of operation to perform.  */ public IndexRequestBuilder setOpType(DocWriteRequest.OpType opType) {     request.opType(opType).     return this. }
true;public;1;4;/**  * Set to {@code true} to force this index to use {@link org.elasticsearch.action.index.IndexRequest.OpType#CREATE}.  */ ;/**  * Set to {@code true} to force this index to use {@link org.elasticsearch.action.index.IndexRequest.OpType#CREATE}.  */ public IndexRequestBuilder setCreate(boolean create) {     request.create(create).     return this. }
true;public;1;4;/**  * Sets the version, which will cause the index operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ ;/**  * Sets the version, which will cause the index operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ public IndexRequestBuilder setVersion(long version) {     request.version(version).     return this. }
true;public;1;4;/**  * Sets the versioning type. Defaults to {@link VersionType#INTERNAL}.  */ ;/**  * Sets the versioning type. Defaults to {@link VersionType#INTERNAL}.  */ public IndexRequestBuilder setVersionType(VersionType versionType) {     request.versionType(versionType).     return this. }
true;public;1;4;/**  * only perform this indexing request if the document was last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the document last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only perform this indexing request if the document was last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the document last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public IndexRequestBuilder setIfSeqNo(long seqNo) {     request.setIfSeqNo(seqNo).     return this. }
true;public;1;4;/**  * only perform this indexing request if the document was last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the document last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only perform this indexing request if the document was last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the document last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public IndexRequestBuilder setIfPrimaryTerm(long term) {     request.setIfPrimaryTerm(term).     return this. }
true;public;1;4;/**  * Sets the ingest pipeline to be executed before indexing the document  */ ;/**  * Sets the ingest pipeline to be executed before indexing the document  */ public IndexRequestBuilder setPipeline(String pipeline) {     request.setPipeline(pipeline).     return this. }
