commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public Scorer scorer(LeafReaderContext context) throws IOException {     ScorerSupplier supplier = scorerSupplier(context).     if (supplier == null) {         return null.     }     return supplier.get(Long.MAX_VALUE). }
false;public;1;9;;@Override public Scorer get(long loadCost) throws IOException {     timer.start().     try {         return new ProfileScorer(weight, subQueryScorerSupplier.get(loadCost), profile).     } finally {         timer.stop().     } }
false;public;0;9;;@Override public long cost() {     timer.start().     try {         return subQueryScorerSupplier.cost().     } finally {         timer.stop().     } }
false;public;1;38;;@Override public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {     Timer timer = profile.getTimer(QueryTimingType.BUILD_SCORER).     timer.start().     final ScorerSupplier subQueryScorerSupplier.     try {         subQueryScorerSupplier = subQueryWeight.scorerSupplier(context).     } finally {         timer.stop().     }     if (subQueryScorerSupplier == null) {         return null.     }     final ProfileWeight weight = this.     return new ScorerSupplier() {          @Override         public Scorer get(long loadCost) throws IOException {             timer.start().             try {                 return new ProfileScorer(weight, subQueryScorerSupplier.get(loadCost), profile).             } finally {                 timer.stop().             }         }          @Override         public long cost() {             timer.start().             try {                 return subQueryScorerSupplier.cost().             } finally {                 timer.stop().             }         }     }. }
false;public;1;11;;@Override public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {     // like disjunctions, but in general this is what is done anyway     return super.bulkScorer(context). }
false;public;2;4;;@Override public Explanation explain(LeafReaderContext context, int doc) throws IOException {     return subQueryWeight.explain(context, doc). }
false;public;1;4;;@Override public void extractTerms(Set<Term> set) {     subQueryWeight.extractTerms(set). }
false;public;1;4;;@Override public boolean isCacheable(LeafReaderContext ctx) {     return subQueryWeight.isCacheable(ctx). }
