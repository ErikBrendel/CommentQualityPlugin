commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Called for each response obtained from non master nodes  *  * @param node the node that replied to the publish event  */ ;/**  * Called for each response obtained from non master nodes  *  * @param node the node that replied to the publish event  */ public void onResponse(DiscoveryNode node) {     boolean found = pendingNodes.remove(node).     assert found : "node [" + node + "] already responded or failed".     latch.countDown(). }
true;public;2;7;/**  * Called for each failure obtained from non master nodes  * @param node the node that replied to the publish event  */ ;/**  * Called for each failure obtained from non master nodes  * @param node the node that replied to the publish event  */ public void onFailure(DiscoveryNode node, Exception e) {     boolean found = pendingNodes.remove(node).     assert found : "node [" + node + "] already responded or failed".     boolean added = failedNodes.add(node).     assert added : "duplicate failures for " + node.     latch.countDown(). }
true;public;1;5;/**  * Allows to wait for all non master nodes to reply to the publish event up to a timeout  * @param timeout the timeout  * @return true if the timeout expired or not, false otherwise  */ ;/**  * Allows to wait for all non master nodes to reply to the publish event up to a timeout  * @param timeout the timeout  * @return true if the timeout expired or not, false otherwise  */ public boolean awaitAllNodes(TimeValue timeout) throws InterruptedException {     boolean success = latch.await(timeout.millis(), TimeUnit.MILLISECONDS).     assert !success || pendingNodes.isEmpty() : "response count reached 0 but still waiting for some nodes".     return success. }
true;public;0;5;/**  * returns a list of nodes which didn't respond yet  */ ;/**  * returns a list of nodes which didn't respond yet  */ public DiscoveryNode[] pendingNodes() {     // nulls if some nodes responded in the meanwhile     return pendingNodes.toArray(new DiscoveryNode[0]). }
true;public;0;3;/**  * returns a set of nodes for which publication has failed.  */ ;/**  * returns a set of nodes for which publication has failed.  */ public Set<DiscoveryNode> getFailedNodes() {     return Collections.unmodifiableSet(failedNodes). }
