commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected long getSubsetSize() {     return subsetSize. }
false;protected;0;3;;protected long getSupersetSize() {     return supersetSize. }
false;public;0;4;;@Override public List<? extends SignificantTerms.Bucket> getBuckets() {     return buckets. }
false;public;1;7;;@Override public SignificantTerms.Bucket getBucketByKey(String term) {     if (bucketMap == null) {         bucketMap = buckets.stream().collect(Collectors.toMap(SignificantTerms.Bucket::getKeyAsString, Function.identity())).     }     return bucketMap.get(term). }
false;public;0;4;;@Override public Iterator<SignificantTerms.Bucket> iterator() {     return buckets.stream().map(bucket -> (SignificantTerms.Bucket) bucket).collect(Collectors.toList()).iterator(). }
false;protected;2;11;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(CommonFields.DOC_COUNT.getPreferredName(), subsetSize).     builder.field(InternalMappedSignificantTerms.BG_COUNT, supersetSize).     builder.startArray(CommonFields.BUCKETS.getPreferredName()).     for (SignificantTerms.Bucket bucket : buckets) {         bucket.toXContent(builder, params).     }     builder.endArray().     return builder. }
false;static;2;10;;static <T extends ParsedSignificantTerms> T parseSignificantTermsXContent(final CheckedSupplier<T, IOException> aggregationSupplier, final String name) throws IOException {     T aggregation = aggregationSupplier.get().     aggregation.setName(name).     for (ParsedBucket bucket : aggregation.buckets) {         bucket.subsetSize = aggregation.subsetSize.         bucket.supersetSize = aggregation.supersetSize.     }     return aggregation. }
false;static;2;7;;static void declareParsedSignificantTermsFields(final ObjectParser<? extends ParsedSignificantTerms, Void> objectParser, final CheckedFunction<XContentParser, ParsedSignificantTerms.ParsedBucket, IOException> bucketParser) {     declareMultiBucketAggregationFields(objectParser, bucketParser::apply, bucketParser::apply).     objectParser.declareLong((parsedTerms, value) -> parsedTerms.subsetSize = value, CommonFields.DOC_COUNT).     objectParser.declareLong((parsedTerms, value) -> parsedTerms.supersetSize = value, new ParseField(InternalMappedSignificantTerms.BG_COUNT)). }
false;public;0;4;;@Override public long getDocCount() {     return getSubsetDf(). }
false;public;0;4;;@Override public long getSubsetDf() {     return subsetDf. }
false;public;0;4;;@Override public long getSupersetDf() {     return supersetDf. }
false;public;0;4;;@Override public double getSignificanceScore() {     return score. }
false;public;0;4;;@Override public long getSupersetSize() {     return supersetSize. }
false;public;0;4;;@Override public long getSubsetSize() {     return subsetSize. }
false;public,final;2;11;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     keyToXContent(builder).     builder.field(CommonFields.DOC_COUNT.getPreferredName(), getDocCount()).     builder.field(InternalSignificantTerms.SCORE, getSignificanceScore()).     builder.field(InternalSignificantTerms.BG_COUNT, getSupersetDf()).     getAggregations().toXContentInternal(builder, params).     builder.endObject().     return builder. }
false;protected,abstract;1;2;;@Override protected abstract XContentBuilder keyToXContent(XContentBuilder builder) throws IOException.
false;static;3;31;;static <B extends ParsedBucket> B parseSignificantTermsBucketXContent(final XContentParser parser, final B bucket, final CheckedBiConsumer<XContentParser, B, IOException> keyConsumer) throws IOException {     final List<Aggregation> aggregations = new ArrayList<>().     XContentParser.Token token.     String currentFieldName = parser.currentName().     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (CommonFields.KEY_AS_STRING.getPreferredName().equals(currentFieldName)) {                 bucket.setKeyAsString(parser.text()).             } else if (CommonFields.KEY.getPreferredName().equals(currentFieldName)) {                 keyConsumer.accept(parser, bucket).             } else if (CommonFields.DOC_COUNT.getPreferredName().equals(currentFieldName)) {                 long value = parser.longValue().                 bucket.subsetDf = value.                 bucket.setDocCount(value).             } else if (InternalSignificantTerms.SCORE.equals(currentFieldName)) {                 bucket.score = parser.doubleValue().             } else if (InternalSignificantTerms.BG_COUNT.equals(currentFieldName)) {                 bucket.supersetDf = parser.longValue().             }         } else if (token == XContentParser.Token.START_OBJECT) {             XContentParserUtils.parseTypedKeysObject(parser, Aggregation.TYPED_KEYS_DELIMITER, Aggregation.class, aggregations::add).         }     }     bucket.setAggregations(new Aggregations(aggregations)).     return bucket. }
