# id;timestamp;commentText;codeText;commentWords;codeWords
WorkerBulkByScrollTaskState -> DelayedPrepareBulkRequest -> TimeValue newDelay(long remainingDelay, float newRequestsPerSecond);1524684173;Scale back remaining delay to fit the new delay.;TimeValue newDelay(long remainingDelay, float newRequestsPerSecond) {_            if (remainingDelay < 0) {_                return timeValueNanos(0)__            }_            return timeValueNanos(round(remainingDelay * requestsPerSecond / newRequestsPerSecond))__        };scale,back,remaining,delay,to,fit,the,new,delay;time,value,new,delay,long,remaining,delay,float,new,requests,per,second,if,remaining,delay,0,return,time,value,nanos,0,return,time,value,nanos,round,remaining,delay,requests,per,second,new,requests,per,second
WorkerBulkByScrollTaskState -> DelayedPrepareBulkRequest -> TimeValue newDelay(long remainingDelay, float newRequestsPerSecond);1540486836;Scale back remaining delay to fit the new delay.;TimeValue newDelay(long remainingDelay, float newRequestsPerSecond) {_            if (remainingDelay < 0) {_                return timeValueNanos(0)__            }_            return timeValueNanos(round(remainingDelay * requestsPerSecond / newRequestsPerSecond))__        };scale,back,remaining,delay,to,fit,the,new,delay;time,value,new,delay,long,remaining,delay,float,new,requests,per,second,if,remaining,delay,0,return,time,value,nanos,0,return,time,value,nanos,round,remaining,delay,requests,per,second,new,requests,per,second
WorkerBulkByScrollTaskState -> DelayedPrepareBulkRequest -> TimeValue newDelay(long remainingDelay, float newRequestsPerSecond);1542213184;Scale back remaining delay to fit the new delay.;TimeValue newDelay(long remainingDelay, float newRequestsPerSecond) {_            if (remainingDelay < 0) {_                return timeValueNanos(0)__            }_            return timeValueNanos(round(remainingDelay * requestsPerSecond / newRequestsPerSecond))__        };scale,back,remaining,delay,to,fit,the,new,delay;time,value,new,delay,long,remaining,delay,float,new,requests,per,second,if,remaining,delay,0,return,time,value,nanos,0,return,time,value,nanos,round,remaining,delay,requests,per,second,new,requests,per,second
WorkerBulkByScrollTaskState -> DelayedPrepareBulkRequest -> TimeValue newDelay(long remainingDelay, float newRequestsPerSecond);1548953505;Scale back remaining delay to fit the new delay.;TimeValue newDelay(long remainingDelay, float newRequestsPerSecond) {_            if (remainingDelay < 0) {_                return timeValueNanos(0)__            }_            return timeValueNanos(round(remainingDelay * requestsPerSecond / newRequestsPerSecond))__        };scale,back,remaining,delay,to,fit,the,new,delay;time,value,new,delay,long,remaining,delay,float,new,requests,per,second,if,remaining,delay,0,return,time,value,nanos,0,return,time,value,nanos,round,remaining,delay,requests,per,second,new,requests,per,second
WorkerBulkByScrollTaskState -> float perfectlyThrottledBatchTime(int lastBatchSize);1524684173;How many nanoseconds should a batch of lastBatchSize have taken if it were perfectly throttled? Package private for testing.;float perfectlyThrottledBatchTime(int lastBatchSize) {_        if (requestsPerSecond == Float.POSITIVE_INFINITY) {_            return 0__        }_        _        _        _        float targetBatchTimeInSeconds = lastBatchSize / requestsPerSecond__        _        return TimeUnit.SECONDS.toNanos(1) * targetBatchTimeInSeconds__    };how,many,nanoseconds,should,a,batch,of,last,batch,size,have,taken,if,it,were,perfectly,throttled,package,private,for,testing;float,perfectly,throttled,batch,time,int,last,batch,size,if,requests,per,second,float,return,0,float,target,batch,time,in,seconds,last,batch,size,requests,per,second,return,time,unit,seconds,to,nanos,1,target,batch,time,in,seconds
WorkerBulkByScrollTaskState -> float perfectlyThrottledBatchTime(int lastBatchSize);1540486836;How many nanoseconds should a batch of lastBatchSize have taken if it were perfectly throttled? Package private for testing.;float perfectlyThrottledBatchTime(int lastBatchSize) {_        if (requestsPerSecond == Float.POSITIVE_INFINITY) {_            return 0__        }_        _        _        _        float targetBatchTimeInSeconds = lastBatchSize / requestsPerSecond__        _        return TimeUnit.SECONDS.toNanos(1) * targetBatchTimeInSeconds__    };how,many,nanoseconds,should,a,batch,of,last,batch,size,have,taken,if,it,were,perfectly,throttled,package,private,for,testing;float,perfectly,throttled,batch,time,int,last,batch,size,if,requests,per,second,float,return,0,float,target,batch,time,in,seconds,last,batch,size,requests,per,second,return,time,unit,seconds,to,nanos,1,target,batch,time,in,seconds
WorkerBulkByScrollTaskState -> float perfectlyThrottledBatchTime(int lastBatchSize);1542213184;How many nanoseconds should a batch of lastBatchSize have taken if it were perfectly throttled? Package private for testing.;float perfectlyThrottledBatchTime(int lastBatchSize) {_        if (requestsPerSecond == Float.POSITIVE_INFINITY) {_            return 0__        }_        _        _        _        float targetBatchTimeInSeconds = lastBatchSize / requestsPerSecond__        _        return TimeUnit.SECONDS.toNanos(1) * targetBatchTimeInSeconds__    };how,many,nanoseconds,should,a,batch,of,last,batch,size,have,taken,if,it,were,perfectly,throttled,package,private,for,testing;float,perfectly,throttled,batch,time,int,last,batch,size,if,requests,per,second,float,return,0,float,target,batch,time,in,seconds,last,batch,size,requests,per,second,return,time,unit,seconds,to,nanos,1,target,batch,time,in,seconds
WorkerBulkByScrollTaskState -> float perfectlyThrottledBatchTime(int lastBatchSize);1548953505;How many nanoseconds should a batch of lastBatchSize have taken if it were perfectly throttled? Package private for testing.;float perfectlyThrottledBatchTime(int lastBatchSize) {_        if (requestsPerSecond == Float.POSITIVE_INFINITY) {_            return 0__        }_        _        _        _        float targetBatchTimeInSeconds = lastBatchSize / requestsPerSecond__        _        return TimeUnit.SECONDS.toNanos(1) * targetBatchTimeInSeconds__    };how,many,nanoseconds,should,a,batch,of,last,batch,size,have,taken,if,it,were,perfectly,throttled,package,private,for,testing;float,perfectly,throttled,batch,time,int,last,batch,size,if,requests,per,second,float,return,0,float,target,batch,time,in,seconds,last,batch,size,requests,per,second,return,time,unit,seconds,to,nanos,1,target,batch,time,in,seconds
WorkerBulkByScrollTaskState -> public void rethrottle(float newRequestsPerSecond);1524684173;Apply {@code newRequestsPerSecond} as the new rate limit for this task's search requests;public void rethrottle(float newRequestsPerSecond) {_        synchronized (delayedPrepareBulkRequestReference) {_            logger.debug("[{}]: rethrottling to [{}] requests per second", task.getId(), newRequestsPerSecond)__            setRequestsPerSecond(newRequestsPerSecond)___            DelayedPrepareBulkRequest delayedPrepareBulkRequest = this.delayedPrepareBulkRequestReference.get()__            if (delayedPrepareBulkRequest == null) {_                _                logger.debug("[{}]: skipping rescheduling because there is no scheduled task", task.getId())__                return__            }__            this.delayedPrepareBulkRequestReference.set(delayedPrepareBulkRequest.rethrottle(newRequestsPerSecond))__        }_    };apply,code,new,requests,per,second,as,the,new,rate,limit,for,this,task,s,search,requests;public,void,rethrottle,float,new,requests,per,second,synchronized,delayed,prepare,bulk,request,reference,logger,debug,rethrottling,to,requests,per,second,task,get,id,new,requests,per,second,set,requests,per,second,new,requests,per,second,delayed,prepare,bulk,request,delayed,prepare,bulk,request,this,delayed,prepare,bulk,request,reference,get,if,delayed,prepare,bulk,request,null,logger,debug,skipping,rescheduling,because,there,is,no,scheduled,task,task,get,id,return,this,delayed,prepare,bulk,request,reference,set,delayed,prepare,bulk,request,rethrottle,new,requests,per,second
WorkerBulkByScrollTaskState -> public void rethrottle(float newRequestsPerSecond);1540486836;Apply {@code newRequestsPerSecond} as the new rate limit for this task's search requests;public void rethrottle(float newRequestsPerSecond) {_        synchronized (delayedPrepareBulkRequestReference) {_            logger.debug("[{}]: rethrottling to [{}] requests per second", task.getId(), newRequestsPerSecond)__            setRequestsPerSecond(newRequestsPerSecond)___            DelayedPrepareBulkRequest delayedPrepareBulkRequest = this.delayedPrepareBulkRequestReference.get()__            if (delayedPrepareBulkRequest == null) {_                _                logger.debug("[{}]: skipping rescheduling because there is no scheduled task", task.getId())__                return__            }__            this.delayedPrepareBulkRequestReference.set(delayedPrepareBulkRequest.rethrottle(newRequestsPerSecond))__        }_    };apply,code,new,requests,per,second,as,the,new,rate,limit,for,this,task,s,search,requests;public,void,rethrottle,float,new,requests,per,second,synchronized,delayed,prepare,bulk,request,reference,logger,debug,rethrottling,to,requests,per,second,task,get,id,new,requests,per,second,set,requests,per,second,new,requests,per,second,delayed,prepare,bulk,request,delayed,prepare,bulk,request,this,delayed,prepare,bulk,request,reference,get,if,delayed,prepare,bulk,request,null,logger,debug,skipping,rescheduling,because,there,is,no,scheduled,task,task,get,id,return,this,delayed,prepare,bulk,request,reference,set,delayed,prepare,bulk,request,rethrottle,new,requests,per,second
WorkerBulkByScrollTaskState -> public void rethrottle(float newRequestsPerSecond);1542213184;Apply {@code newRequestsPerSecond} as the new rate limit for this task's search requests;public void rethrottle(float newRequestsPerSecond) {_        synchronized (delayedPrepareBulkRequestReference) {_            logger.debug("[{}]: rethrottling to [{}] requests per second", task.getId(), newRequestsPerSecond)__            setRequestsPerSecond(newRequestsPerSecond)___            DelayedPrepareBulkRequest delayedPrepareBulkRequest = this.delayedPrepareBulkRequestReference.get()__            if (delayedPrepareBulkRequest == null) {_                _                logger.debug("[{}]: skipping rescheduling because there is no scheduled task", task.getId())__                return__            }__            this.delayedPrepareBulkRequestReference.set(delayedPrepareBulkRequest.rethrottle(newRequestsPerSecond))__        }_    };apply,code,new,requests,per,second,as,the,new,rate,limit,for,this,task,s,search,requests;public,void,rethrottle,float,new,requests,per,second,synchronized,delayed,prepare,bulk,request,reference,logger,debug,rethrottling,to,requests,per,second,task,get,id,new,requests,per,second,set,requests,per,second,new,requests,per,second,delayed,prepare,bulk,request,delayed,prepare,bulk,request,this,delayed,prepare,bulk,request,reference,get,if,delayed,prepare,bulk,request,null,logger,debug,skipping,rescheduling,because,there,is,no,scheduled,task,task,get,id,return,this,delayed,prepare,bulk,request,reference,set,delayed,prepare,bulk,request,rethrottle,new,requests,per,second
WorkerBulkByScrollTaskState -> public void rethrottle(float newRequestsPerSecond);1548953505;Apply {@code newRequestsPerSecond} as the new rate limit for this task's search requests;public void rethrottle(float newRequestsPerSecond) {_        synchronized (delayedPrepareBulkRequestReference) {_            logger.debug("[{}]: rethrottling to [{}] requests per second", task.getId(), newRequestsPerSecond)__            setRequestsPerSecond(newRequestsPerSecond)___            DelayedPrepareBulkRequest delayedPrepareBulkRequest = this.delayedPrepareBulkRequestReference.get()__            if (delayedPrepareBulkRequest == null) {_                _                logger.debug("[{}]: skipping rescheduling because there is no scheduled task", task.getId())__                return__            }__            this.delayedPrepareBulkRequestReference.set(delayedPrepareBulkRequest.rethrottle(newRequestsPerSecond))__        }_    };apply,code,new,requests,per,second,as,the,new,rate,limit,for,this,task,s,search,requests;public,void,rethrottle,float,new,requests,per,second,synchronized,delayed,prepare,bulk,request,reference,logger,debug,rethrottling,to,requests,per,second,task,get,id,new,requests,per,second,set,requests,per,second,new,requests,per,second,delayed,prepare,bulk,request,delayed,prepare,bulk,request,this,delayed,prepare,bulk,request,reference,get,if,delayed,prepare,bulk,request,null,logger,debug,skipping,rescheduling,because,there,is,no,scheduled,task,task,get,id,return,this,delayed,prepare,bulk,request,reference,set,delayed,prepare,bulk,request,rethrottle,new,requests,per,second
WorkerBulkByScrollTaskState -> public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,                                         AbstractRunnable prepareBulkRequestRunnable);1524684173;Schedule prepareBulkRequestRunnable to run after some delay. This is where throttling plugs into reindexing so the request can be_rescheduled over and over again.;public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,_                                        AbstractRunnable prepareBulkRequestRunnable) {_        _        synchronized (delayedPrepareBulkRequestReference) {_            TimeValue delay = throttleWaitTime(lastBatchStartTime, timeValueNanos(System.nanoTime()), lastBatchSize)__            logger.debug("[{}]: preparing bulk request for [{}]", task.getId(), delay)__            delayedPrepareBulkRequestReference.set(new DelayedPrepareBulkRequest(threadPool, getRequestsPerSecond(),_                delay, new RunOnce(prepareBulkRequestRunnable)))__        }_    };schedule,prepare,bulk,request,runnable,to,run,after,some,delay,this,is,where,throttling,plugs,into,reindexing,so,the,request,can,be,rescheduled,over,and,over,again;public,void,delay,prepare,bulk,request,thread,pool,thread,pool,time,value,last,batch,start,time,int,last,batch,size,abstract,runnable,prepare,bulk,request,runnable,synchronized,delayed,prepare,bulk,request,reference,time,value,delay,throttle,wait,time,last,batch,start,time,time,value,nanos,system,nano,time,last,batch,size,logger,debug,preparing,bulk,request,for,task,get,id,delay,delayed,prepare,bulk,request,reference,set,new,delayed,prepare,bulk,request,thread,pool,get,requests,per,second,delay,new,run,once,prepare,bulk,request,runnable
WorkerBulkByScrollTaskState -> public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,                                         AbstractRunnable prepareBulkRequestRunnable);1540486836;Schedule prepareBulkRequestRunnable to run after some delay. This is where throttling plugs into reindexing so the request can be_rescheduled over and over again.;public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,_                                        AbstractRunnable prepareBulkRequestRunnable) {_        _        synchronized (delayedPrepareBulkRequestReference) {_            TimeValue delay = throttleWaitTime(lastBatchStartTime, timeValueNanos(System.nanoTime()), lastBatchSize)__            logger.debug("[{}]: preparing bulk request for [{}]", task.getId(), delay)__            delayedPrepareBulkRequestReference.set(new DelayedPrepareBulkRequest(threadPool, getRequestsPerSecond(),_                delay, new RunOnce(prepareBulkRequestRunnable)))__        }_    };schedule,prepare,bulk,request,runnable,to,run,after,some,delay,this,is,where,throttling,plugs,into,reindexing,so,the,request,can,be,rescheduled,over,and,over,again;public,void,delay,prepare,bulk,request,thread,pool,thread,pool,time,value,last,batch,start,time,int,last,batch,size,abstract,runnable,prepare,bulk,request,runnable,synchronized,delayed,prepare,bulk,request,reference,time,value,delay,throttle,wait,time,last,batch,start,time,time,value,nanos,system,nano,time,last,batch,size,logger,debug,preparing,bulk,request,for,task,get,id,delay,delayed,prepare,bulk,request,reference,set,new,delayed,prepare,bulk,request,thread,pool,get,requests,per,second,delay,new,run,once,prepare,bulk,request,runnable
WorkerBulkByScrollTaskState -> public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,                                         AbstractRunnable prepareBulkRequestRunnable);1542213184;Schedule prepareBulkRequestRunnable to run after some delay. This is where throttling plugs into reindexing so the request can be_rescheduled over and over again.;public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,_                                        AbstractRunnable prepareBulkRequestRunnable) {_        _        synchronized (delayedPrepareBulkRequestReference) {_            TimeValue delay = throttleWaitTime(lastBatchStartTime, timeValueNanos(System.nanoTime()), lastBatchSize)__            logger.debug("[{}]: preparing bulk request for [{}]", task.getId(), delay)__            try {_                delayedPrepareBulkRequestReference.set(new DelayedPrepareBulkRequest(threadPool, getRequestsPerSecond(),_                    delay, new RunOnce(prepareBulkRequestRunnable)))__            } catch (EsRejectedExecutionException e) {_                prepareBulkRequestRunnable.onRejection(e)__            }_        }_    };schedule,prepare,bulk,request,runnable,to,run,after,some,delay,this,is,where,throttling,plugs,into,reindexing,so,the,request,can,be,rescheduled,over,and,over,again;public,void,delay,prepare,bulk,request,thread,pool,thread,pool,time,value,last,batch,start,time,int,last,batch,size,abstract,runnable,prepare,bulk,request,runnable,synchronized,delayed,prepare,bulk,request,reference,time,value,delay,throttle,wait,time,last,batch,start,time,time,value,nanos,system,nano,time,last,batch,size,logger,debug,preparing,bulk,request,for,task,get,id,delay,try,delayed,prepare,bulk,request,reference,set,new,delayed,prepare,bulk,request,thread,pool,get,requests,per,second,delay,new,run,once,prepare,bulk,request,runnable,catch,es,rejected,execution,exception,e,prepare,bulk,request,runnable,on,rejection,e
WorkerBulkByScrollTaskState -> public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,                                         AbstractRunnable prepareBulkRequestRunnable);1548953505;Schedule prepareBulkRequestRunnable to run after some delay. This is where throttling plugs into reindexing so the request can be_rescheduled over and over again.;public void delayPrepareBulkRequest(ThreadPool threadPool, TimeValue lastBatchStartTime, int lastBatchSize,_                                        AbstractRunnable prepareBulkRequestRunnable) {_        _        synchronized (delayedPrepareBulkRequestReference) {_            TimeValue delay = throttleWaitTime(lastBatchStartTime, timeValueNanos(System.nanoTime()), lastBatchSize)__            logger.debug("[{}]: preparing bulk request for [{}]", task.getId(), delay)__            try {_                delayedPrepareBulkRequestReference.set(new DelayedPrepareBulkRequest(threadPool, getRequestsPerSecond(),_                    delay, new RunOnce(prepareBulkRequestRunnable)))__            } catch (EsRejectedExecutionException e) {_                prepareBulkRequestRunnable.onRejection(e)__            }_        }_    };schedule,prepare,bulk,request,runnable,to,run,after,some,delay,this,is,where,throttling,plugs,into,reindexing,so,the,request,can,be,rescheduled,over,and,over,again;public,void,delay,prepare,bulk,request,thread,pool,thread,pool,time,value,last,batch,start,time,int,last,batch,size,abstract,runnable,prepare,bulk,request,runnable,synchronized,delayed,prepare,bulk,request,reference,time,value,delay,throttle,wait,time,last,batch,start,time,time,value,nanos,system,nano,time,last,batch,size,logger,debug,preparing,bulk,request,for,task,get,id,delay,try,delayed,prepare,bulk,request,reference,set,new,delayed,prepare,bulk,request,thread,pool,get,requests,per,second,delay,new,run,once,prepare,bulk,request,runnable,catch,es,rejected,execution,exception,e,prepare,bulk,request,runnable,on,rejection,e
