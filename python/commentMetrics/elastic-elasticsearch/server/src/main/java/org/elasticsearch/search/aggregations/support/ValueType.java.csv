commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPreferredName() {     return preferredName. }
false;public;0;3;;public ValuesSourceType getValuesSourceType() {     return valuesSourceType. }
false;public;1;4;;public boolean isA(ValueType valueType) {     return valueType.valuesSourceType == valuesSourceType && valueType.fieldDataType.isAssignableFrom(fieldDataType). }
false;public;1;3;;public boolean isNotA(ValueType valueType) {     return !isA(valueType). }
false;public;0;3;;public DocValueFormat defaultFormat() {     return defaultFormat. }
false;public,static;1;17;;public static ValueType resolveForScript(String type) {     switch(type) {         case "string":             return STRING.         case "double":         case "float":             return DOUBLE.         case "long":         case "integer":         case "short":         case "byte":             return LONG.         case "date":             return DATE.         case "ip":             return IP.         case "boolean":             return BOOLEAN.         default:             // TODO: do not be lenient here             return null.     } }
false;public;0;4;;@Override public String toString() {     return description. }
false;public,static;1;9;;public static ValueType readFromStream(StreamInput in) throws IOException {     byte id = in.readByte().     for (ValueType valueType : values()) {         if (id == valueType.id) {             return valueType.         }     }     throw new IOException("No valueType found for id [" + id + "]"). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeByte(id). }
