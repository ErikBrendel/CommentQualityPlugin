commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalStreamable(docs).     out.writeOptionalStreamable(store).     out.writeOptionalStreamable(indexing).     out.writeOptionalStreamable(get).     out.writeOptionalWriteable(search).     out.writeOptionalStreamable(merge).     out.writeOptionalStreamable(refresh).     out.writeOptionalStreamable(flush).     out.writeOptionalStreamable(warmer).     out.writeOptionalStreamable(queryCache).     out.writeOptionalStreamable(fieldData).     out.writeOptionalStreamable(completion).     out.writeOptionalStreamable(segments).     out.writeOptionalStreamable(translog).     out.writeOptionalStreamable(requestCache).     out.writeOptionalStreamable(recoveryStats). }
false;public;1;131;;public void add(CommonStats stats) {     if (docs == null) {         if (stats.getDocs() != null) {             docs = new DocsStats().             docs.add(stats.getDocs()).         }     } else {         docs.add(stats.getDocs()).     }     if (store == null) {         if (stats.getStore() != null) {             store = new StoreStats().             store.add(stats.getStore()).         }     } else {         store.add(stats.getStore()).     }     if (indexing == null) {         if (stats.getIndexing() != null) {             indexing = new IndexingStats().             indexing.add(stats.getIndexing()).         }     } else {         indexing.add(stats.getIndexing()).     }     if (get == null) {         if (stats.getGet() != null) {             get = new GetStats().             get.add(stats.getGet()).         }     } else {         get.add(stats.getGet()).     }     if (search == null) {         if (stats.getSearch() != null) {             search = new SearchStats().             search.add(stats.getSearch()).         }     } else {         search.add(stats.getSearch()).     }     if (merge == null) {         if (stats.getMerge() != null) {             merge = new MergeStats().             merge.add(stats.getMerge()).         }     } else {         merge.add(stats.getMerge()).     }     if (refresh == null) {         if (stats.getRefresh() != null) {             refresh = new RefreshStats().             refresh.add(stats.getRefresh()).         }     } else {         refresh.add(stats.getRefresh()).     }     if (flush == null) {         if (stats.getFlush() != null) {             flush = new FlushStats().             flush.add(stats.getFlush()).         }     } else {         flush.add(stats.getFlush()).     }     if (warmer == null) {         if (stats.getWarmer() != null) {             warmer = new WarmerStats().             warmer.add(stats.getWarmer()).         }     } else {         warmer.add(stats.getWarmer()).     }     if (queryCache == null) {         if (stats.getQueryCache() != null) {             queryCache = new QueryCacheStats().             queryCache.add(stats.getQueryCache()).         }     } else {         queryCache.add(stats.getQueryCache()).     }     if (fieldData == null) {         if (stats.getFieldData() != null) {             fieldData = new FieldDataStats().             fieldData.add(stats.getFieldData()).         }     } else {         fieldData.add(stats.getFieldData()).     }     if (completion == null) {         if (stats.getCompletion() != null) {             completion = new CompletionStats().             completion.add(stats.getCompletion()).         }     } else {         completion.add(stats.getCompletion()).     }     if (segments == null) {         if (stats.getSegments() != null) {             segments = new SegmentsStats().             segments.add(stats.getSegments()).         }     } else {         segments.add(stats.getSegments()).     }     if (translog == null) {         if (stats.getTranslog() != null) {             translog = new TranslogStats().             translog.add(stats.getTranslog()).         }     } else {         translog.add(stats.getTranslog()).     }     if (requestCache == null) {         if (stats.getRequestCache() != null) {             requestCache = new RequestCacheStats().             requestCache.add(stats.getRequestCache()).         }     } else {         requestCache.add(stats.getRequestCache()).     }     if (recoveryStats == null) {         if (stats.getRecoveryStats() != null) {             recoveryStats = new RecoveryStats().             recoveryStats.add(stats.getRecoveryStats()).         }     } else {         recoveryStats.add(stats.getRecoveryStats()).     } }
false;public;0;4;;@Nullable public DocsStats getDocs() {     return this.docs. }
false;public;0;4;;@Nullable public StoreStats getStore() {     return store. }
false;public;0;4;;@Nullable public IndexingStats getIndexing() {     return indexing. }
false;public;0;4;;@Nullable public GetStats getGet() {     return get. }
false;public;0;4;;@Nullable public SearchStats getSearch() {     return search. }
false;public;0;4;;@Nullable public MergeStats getMerge() {     return merge. }
false;public;0;4;;@Nullable public RefreshStats getRefresh() {     return refresh. }
false;public;0;4;;@Nullable public FlushStats getFlush() {     return flush. }
false;public;0;4;;@Nullable public WarmerStats getWarmer() {     return this.warmer. }
false;public;0;4;;@Nullable public QueryCacheStats getQueryCache() {     return this.queryCache. }
false;public;0;4;;@Nullable public FieldDataStats getFieldData() {     return this.fieldData. }
false;public;0;4;;@Nullable public CompletionStats getCompletion() {     return completion. }
false;public;0;4;;@Nullable public SegmentsStats getSegments() {     return segments. }
false;public;0;4;;@Nullable public TranslogStats getTranslog() {     return translog. }
false;public;0;4;;@Nullable public RequestCacheStats getRequestCache() {     return requestCache. }
false;public;0;4;;@Nullable public RecoveryStats getRecoveryStats() {     return recoveryStats. }
true;public;0;16;/**  * Utility method which computes total memory by adding  * FieldData, PercolatorCache, Segments (memory, index writer, version map)  */ ;/**  * Utility method which computes total memory by adding  * FieldData, PercolatorCache, Segments (memory, index writer, version map)  */ public ByteSizeValue getTotalMemory() {     long size = 0.     if (this.getFieldData() != null) {         size += this.getFieldData().getMemorySizeInBytes().     }     if (this.getQueryCache() != null) {         size += this.getQueryCache().getMemorySizeInBytes().     }     if (this.getSegments() != null) {         size += this.getSegments().getMemoryInBytes() + this.getSegments().getIndexWriterMemoryInBytes() + this.getSegments().getVersionMapMemoryInBytes().     }     return new ByteSizeValue(size). }
true;public;2;11;// note, requires a wrapping object ;// note, requires a wrapping object @Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     final Stream<ToXContent> stream = Arrays.stream(new ToXContent[] { docs, store, indexing, get, search, merge, refresh, flush, warmer, queryCache, fieldData, completion, segments, translog, requestCache, recoveryStats }).filter(Objects::nonNull).     for (ToXContent toXContent : ((Iterable<ToXContent>) stream::iterator)) {         toXContent.toXContent(builder, params).     }     return builder. }
