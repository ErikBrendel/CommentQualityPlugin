# id;timestamp;commentText;codeText;commentWords;codeWords
Channels -> public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException;1524684173;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param offset  start copying from this offset_@param length  how many bytes to copy_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException {_        int toWrite = Math.min(length, WRITE_CHUNK_SIZE)__        ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)__        int written = channel.write(buffer)__        length -= written__        while (length > 0) {_            toWrite = Math.min(length, WRITE_CHUNK_SIZE)__            buffer.limit(buffer.position() + toWrite)__            written = channel.write(buffer)__            length -= written__        }_        assert length == 0 : "wrote more then expected bytes (length=" + length + ")"__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,offset,start,copying,from,this,offset,param,length,how,many,bytes,to,copy,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,int,offset,int,length,writable,byte,channel,channel,throws,ioexception,int,to,write,math,min,length,byte,buffer,buffer,byte,buffer,wrap,source,offset,to,write,int,written,channel,write,buffer,length,written,while,length,0,to,write,math,min,length,buffer,limit,buffer,position,to,write,written,channel,write,buffer,length,written,assert,length,0,wrote,more,then,expected,bytes,length,length
Channels -> public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException;1528762805;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param offset  start copying from this offset_@param length  how many bytes to copy_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException {_        int toWrite = Math.min(length, WRITE_CHUNK_SIZE)__        ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)__        int written = channel.write(buffer)__        length -= written__        while (length > 0) {_            toWrite = Math.min(length, WRITE_CHUNK_SIZE)__            buffer.limit(buffer.position() + toWrite)__            written = channel.write(buffer)__            length -= written__        }_        assert length == 0 : "wrote more then expected bytes (length=" + length + ")"__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,offset,start,copying,from,this,offset,param,length,how,many,bytes,to,copy,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,int,offset,int,length,writable,byte,channel,channel,throws,ioexception,int,to,write,math,min,length,byte,buffer,buffer,byte,buffer,wrap,source,offset,to,write,int,written,channel,write,buffer,length,written,while,length,0,to,write,math,min,length,buffer,limit,buffer,position,to,write,written,channel,write,buffer,length,written,assert,length,0,wrote,more,then,expected,bytes,length,length
Channels -> public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException;1540583181;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param offset  start copying from this offset_@param length  how many bytes to copy_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException {_        int toWrite = Math.min(length, WRITE_CHUNK_SIZE)__        ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)__        int written = channel.write(buffer)__        length -= written__        while (length > 0) {_            toWrite = Math.min(length, WRITE_CHUNK_SIZE)__            buffer.limit(buffer.position() + toWrite)__            written = channel.write(buffer)__            length -= written__        }_        assert length == 0 : "wrote more then expected bytes (length=" + length + ")"__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,offset,start,copying,from,this,offset,param,length,how,many,bytes,to,copy,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,int,offset,int,length,writable,byte,channel,channel,throws,ioexception,int,to,write,math,min,length,byte,buffer,buffer,byte,buffer,wrap,source,offset,to,write,int,written,channel,write,buffer,length,written,while,length,0,to,write,math,min,length,buffer,limit,buffer,position,to,write,written,channel,write,buffer,length,written,assert,length,0,wrote,more,then,expected,bytes,length,length
Channels -> public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException;1524684173;read <i>length</i> bytes from <i>position</i> of a file channel;public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException {_        byte[] res = new byte[length]__        readFromFileChannelWithEofException(channel, position, res, 0, length)__        return res___    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel;public,static,byte,read,from,file,channel,file,channel,channel,long,position,int,length,throws,ioexception,byte,res,new,byte,length,read,from,file,channel,with,eof,exception,channel,position,res,0,length,return,res
Channels -> public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException;1528762805;read <i>length</i> bytes from <i>position</i> of a file channel;public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException {_        byte[] res = new byte[length]__        readFromFileChannelWithEofException(channel, position, res, 0, length)__        return res___    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel;public,static,byte,read,from,file,channel,file,channel,channel,long,position,int,length,throws,ioexception,byte,res,new,byte,length,read,from,file,channel,with,eof,exception,channel,position,res,0,length,return,res
Channels -> public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException;1540583181;read <i>length</i> bytes from <i>position</i> of a file channel;public static byte[] readFromFileChannel(FileChannel channel, long position, int length) throws IOException {_        byte[] res = new byte[length]__        readFromFileChannelWithEofException(channel, position, res, 0, length)__        return res___    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel;public,static,byte,read,from,file,channel,file,channel,channel,long,position,int,length,throws,ioexception,byte,res,new,byte,length,read,from,file,channel,with,eof,exception,channel,position,res,0,length,return,res
Channels -> public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException;1524684173;Writes a {@link java.nio.ByteBuffer} to a {@link java.nio.channels.WritableByteChannel}__@param byteBuffer source buffer_@param channel    channel to write to;public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException {_        if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) {_            while (byteBuffer.hasRemaining()) {_                channel.write(byteBuffer)__            }_        } else {_            _            ByteBuffer tmpBuffer = byteBuffer.duplicate()__            try {_                while (byteBuffer.hasRemaining()) {_                    tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))__                    while (tmpBuffer.hasRemaining()) {_                        channel.write(tmpBuffer)__                    }_                    byteBuffer.position(tmpBuffer.position())__                }_            } finally {_                _                byteBuffer.position(tmpBuffer.position())__            }_        }_    };writes,a,link,java,nio,byte,buffer,to,a,link,java,nio,channels,writable,byte,channel,param,byte,buffer,source,buffer,param,channel,channel,to,write,to;public,static,void,write,to,channel,byte,buffer,byte,buffer,writable,byte,channel,channel,throws,ioexception,if,byte,buffer,is,direct,byte,buffer,remaining,while,byte,buffer,has,remaining,channel,write,byte,buffer,else,byte,buffer,tmp,buffer,byte,buffer,duplicate,try,while,byte,buffer,has,remaining,tmp,buffer,limit,math,min,byte,buffer,limit,tmp,buffer,position,while,tmp,buffer,has,remaining,channel,write,tmp,buffer,byte,buffer,position,tmp,buffer,position,finally,byte,buffer,position,tmp,buffer,position
Channels -> public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException;1528762805;Writes a {@link java.nio.ByteBuffer} to a {@link java.nio.channels.WritableByteChannel}__@param byteBuffer source buffer_@param channel    channel to write to;public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException {_        if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) {_            while (byteBuffer.hasRemaining()) {_                channel.write(byteBuffer)__            }_        } else {_            _            ByteBuffer tmpBuffer = byteBuffer.duplicate()__            try {_                while (byteBuffer.hasRemaining()) {_                    tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))__                    while (tmpBuffer.hasRemaining()) {_                        channel.write(tmpBuffer)__                    }_                    byteBuffer.position(tmpBuffer.position())__                }_            } finally {_                _                byteBuffer.position(tmpBuffer.position())__            }_        }_    };writes,a,link,java,nio,byte,buffer,to,a,link,java,nio,channels,writable,byte,channel,param,byte,buffer,source,buffer,param,channel,channel,to,write,to;public,static,void,write,to,channel,byte,buffer,byte,buffer,writable,byte,channel,channel,throws,ioexception,if,byte,buffer,is,direct,byte,buffer,remaining,while,byte,buffer,has,remaining,channel,write,byte,buffer,else,byte,buffer,tmp,buffer,byte,buffer,duplicate,try,while,byte,buffer,has,remaining,tmp,buffer,limit,math,min,byte,buffer,limit,tmp,buffer,position,while,tmp,buffer,has,remaining,channel,write,tmp,buffer,byte,buffer,position,tmp,buffer,position,finally,byte,buffer,position,tmp,buffer,position
Channels -> public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException;1540583181;Writes a {@link java.nio.ByteBuffer} to a {@link java.nio.channels.WritableByteChannel}__@param byteBuffer source buffer_@param channel    channel to write to;public static void writeToChannel(ByteBuffer byteBuffer, WritableByteChannel channel) throws IOException {_        if (byteBuffer.isDirect() || (byteBuffer.remaining() <= WRITE_CHUNK_SIZE)) {_            while (byteBuffer.hasRemaining()) {_                channel.write(byteBuffer)__            }_        } else {_            _            ByteBuffer tmpBuffer = byteBuffer.duplicate()__            try {_                while (byteBuffer.hasRemaining()) {_                    tmpBuffer.limit(Math.min(byteBuffer.limit(), tmpBuffer.position() + WRITE_CHUNK_SIZE))__                    while (tmpBuffer.hasRemaining()) {_                        channel.write(tmpBuffer)__                    }_                    byteBuffer.position(tmpBuffer.position())__                }_            } finally {_                _                byteBuffer.position(tmpBuffer.position())__            }_        }_    };writes,a,link,java,nio,byte,buffer,to,a,link,java,nio,channels,writable,byte,channel,param,byte,buffer,source,buffer,param,channel,channel,to,write,to;public,static,void,write,to,channel,byte,buffer,byte,buffer,writable,byte,channel,channel,throws,ioexception,if,byte,buffer,is,direct,byte,buffer,remaining,while,byte,buffer,has,remaining,channel,write,byte,buffer,else,byte,buffer,tmp,buffer,byte,buffer,duplicate,try,while,byte,buffer,has,remaining,tmp,buffer,limit,math,min,byte,buffer,limit,tmp,buffer,position,while,tmp,buffer,has,remaining,channel,write,tmp,buffer,byte,buffer,position,tmp,buffer,position,finally,byte,buffer,position,tmp,buffer,position
Channels -> public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1524684173;read from a file channel into a byte buffer, starting at a certain position.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in_@return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes_that will fit in the destination byte buffer.;public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) {_            return readSingleChunk(channel, channelPosition, dest)__        } else {_            int bytesRead = 0__            int bytesToRead = dest.remaining()___            _            ByteBuffer tmpBuffer = dest.duplicate()__            try {_                while (dest.hasRemaining()) {_                    tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))__                    int read = readSingleChunk(channel, channelPosition, tmpBuffer)__                    if (read < 0) {_                        return read__                    }_                    bytesRead += read__                    channelPosition += read__                    dest.position(tmpBuffer.position())__                }_            } finally {_                _                dest.position(tmpBuffer.position())__            }__            assert bytesRead == bytesToRead : "failed to read an entire buffer but also didn't get an EOF (read [" + bytesRead + "] needed [" + bytesToRead + "]"__            return bytesRead__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in,return,total,bytes,read,or,1,if,an,attempt,was,made,to,read,past,eof,the,method,always,tries,to,read,all,the,bytes,that,will,fit,in,the,destination,byte,buffer;public,static,int,read,from,file,channel,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,if,dest,is,direct,dest,remaining,return,read,single,chunk,channel,channel,position,dest,else,int,bytes,read,0,int,bytes,to,read,dest,remaining,byte,buffer,tmp,buffer,dest,duplicate,try,while,dest,has,remaining,tmp,buffer,limit,math,min,dest,limit,tmp,buffer,position,int,read,read,single,chunk,channel,channel,position,tmp,buffer,if,read,0,return,read,bytes,read,read,channel,position,read,dest,position,tmp,buffer,position,finally,dest,position,tmp,buffer,position,assert,bytes,read,bytes,to,read,failed,to,read,an,entire,buffer,but,also,didn,t,get,an,eof,read,bytes,read,needed,bytes,to,read,return,bytes,read
Channels -> public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1528762805;read from a file channel into a byte buffer, starting at a certain position.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in_@return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes_that will fit in the destination byte buffer.;public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) {_            return readSingleChunk(channel, channelPosition, dest)__        } else {_            int bytesRead = 0__            int bytesToRead = dest.remaining()___            _            ByteBuffer tmpBuffer = dest.duplicate()__            try {_                while (dest.hasRemaining()) {_                    tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))__                    int read = readSingleChunk(channel, channelPosition, tmpBuffer)__                    if (read < 0) {_                        return read__                    }_                    bytesRead += read__                    channelPosition += read__                    dest.position(tmpBuffer.position())__                }_            } finally {_                _                dest.position(tmpBuffer.position())__            }__            assert bytesRead == bytesToRead : "failed to read an entire buffer but also didn't get an EOF (read [" + bytesRead + "] needed [" + bytesToRead + "]"__            return bytesRead__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in,return,total,bytes,read,or,1,if,an,attempt,was,made,to,read,past,eof,the,method,always,tries,to,read,all,the,bytes,that,will,fit,in,the,destination,byte,buffer;public,static,int,read,from,file,channel,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,if,dest,is,direct,dest,remaining,return,read,single,chunk,channel,channel,position,dest,else,int,bytes,read,0,int,bytes,to,read,dest,remaining,byte,buffer,tmp,buffer,dest,duplicate,try,while,dest,has,remaining,tmp,buffer,limit,math,min,dest,limit,tmp,buffer,position,int,read,read,single,chunk,channel,channel,position,tmp,buffer,if,read,0,return,read,bytes,read,read,channel,position,read,dest,position,tmp,buffer,position,finally,dest,position,tmp,buffer,position,assert,bytes,read,bytes,to,read,failed,to,read,an,entire,buffer,but,also,didn,t,get,an,eof,read,bytes,read,needed,bytes,to,read,return,bytes,read
Channels -> public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1540583181;read from a file channel into a byte buffer, starting at a certain position.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in_@return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes_that will fit in the destination byte buffer.;public static int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        if (dest.isDirect() || (dest.remaining() < READ_CHUNK_SIZE)) {_            return readSingleChunk(channel, channelPosition, dest)__        } else {_            int bytesRead = 0__            int bytesToRead = dest.remaining()___            _            ByteBuffer tmpBuffer = dest.duplicate()__            try {_                while (dest.hasRemaining()) {_                    tmpBuffer.limit(Math.min(dest.limit(), tmpBuffer.position() + READ_CHUNK_SIZE))__                    int read = readSingleChunk(channel, channelPosition, tmpBuffer)__                    if (read < 0) {_                        return read__                    }_                    bytesRead += read__                    channelPosition += read__                    dest.position(tmpBuffer.position())__                }_            } finally {_                _                dest.position(tmpBuffer.position())__            }__            assert bytesRead == bytesToRead : "failed to read an entire buffer but also didn't get an EOF (read [" +_                bytesRead + "] needed [" + bytesToRead + "]"__            return bytesRead__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in,return,total,bytes,read,or,1,if,an,attempt,was,made,to,read,past,eof,the,method,always,tries,to,read,all,the,bytes,that,will,fit,in,the,destination,byte,buffer;public,static,int,read,from,file,channel,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,if,dest,is,direct,dest,remaining,return,read,single,chunk,channel,channel,position,dest,else,int,bytes,read,0,int,bytes,to,read,dest,remaining,byte,buffer,tmp,buffer,dest,duplicate,try,while,dest,has,remaining,tmp,buffer,limit,math,min,dest,limit,tmp,buffer,position,int,read,read,single,chunk,channel,channel,position,tmp,buffer,if,read,0,return,read,bytes,read,read,channel,position,read,dest,position,tmp,buffer,position,finally,dest,position,tmp,buffer,position,assert,bytes,read,bytes,to,read,failed,to,read,an,entire,buffer,but,also,didn,t,get,an,eof,read,bytes,read,needed,bytes,to,read,return,bytes,read
Channels -> public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1524684173;read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you_attempt to read beyond the end of file.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in;public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        int read = readFromFileChannel(channel, channelPosition, dest)__        if (read < 0) {_            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + dest.limit() + "] end: [" + channel.size() + "]")__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,an,eofexception,will,be,thrown,if,you,attempt,to,read,beyond,the,end,of,file,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in;public,static,void,read,from,file,channel,with,eof,exception,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,int,read,read,from,file,channel,channel,channel,position,dest,if,read,0,throw,new,eofexception,read,past,eof,pos,channel,position,length,dest,limit,end,channel,size
Channels -> public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1528762805;read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you_attempt to read beyond the end of file.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in;public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        int read = readFromFileChannel(channel, channelPosition, dest)__        if (read < 0) {_            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + dest.limit() + "] end: [" + channel.size() + "]")__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,an,eofexception,will,be,thrown,if,you,attempt,to,read,beyond,the,end,of,file,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in;public,static,void,read,from,file,channel,with,eof,exception,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,int,read,read,from,file,channel,channel,channel,position,dest,if,read,0,throw,new,eofexception,read,past,eof,pos,channel,position,length,dest,limit,end,channel,size
Channels -> public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException;1540583181;read from a file channel into a byte buffer, starting at a certain position.  An EOFException will be thrown if you_attempt to read beyond the end of file.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination {@link java.nio.ByteBuffer} to put data in;public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest) throws IOException {_        int read = readFromFileChannel(channel, channelPosition, dest)__        if (read < 0) {_            throw new EOFException("read past EOF. pos [" + channelPosition +_                "] length: [" + dest.limit() + "] end: [" + channel.size() + "]")__        }_    };read,from,a,file,channel,into,a,byte,buffer,starting,at,a,certain,position,an,eofexception,will,be,thrown,if,you,attempt,to,read,beyond,the,end,of,file,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,link,java,nio,byte,buffer,to,put,data,in;public,static,void,read,from,file,channel,with,eof,exception,file,channel,channel,long,channel,position,byte,buffer,dest,throws,ioexception,int,read,read,from,file,channel,channel,channel,position,dest,if,read,0,throw,new,eofexception,read,past,eof,pos,channel,position,length,dest,limit,end,channel,size
Channels -> public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException;1524684173;read <i>length</i> bytes from <i>position</i> of a file channel. An EOFException will be thrown if you_attempt to read beyond the end of file.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination byte array to put data in_@param destOffset      offset in dest to read into_@param length          number of bytes to read;public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException {_        int read = readFromFileChannel(channel, channelPosition, dest, destOffset, length)__        if (read < 0) {_            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + length + "] end: [" + channel.size() + "]")__        }_    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel,an,eofexception,will,be,thrown,if,you,attempt,to,read,beyond,the,end,of,file,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,byte,array,to,put,data,in,param,dest,offset,offset,in,dest,to,read,into,param,length,number,of,bytes,to,read;public,static,void,read,from,file,channel,with,eof,exception,file,channel,channel,long,channel,position,byte,dest,int,dest,offset,int,length,throws,ioexception,int,read,read,from,file,channel,channel,channel,position,dest,dest,offset,length,if,read,0,throw,new,eofexception,read,past,eof,pos,channel,position,length,length,end,channel,size
Channels -> public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException;1528762805;read <i>length</i> bytes from <i>position</i> of a file channel. An EOFException will be thrown if you_attempt to read beyond the end of file.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination byte array to put data in_@param destOffset      offset in dest to read into_@param length          number of bytes to read;public static void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException {_        int read = readFromFileChannel(channel, channelPosition, dest, destOffset, length)__        if (read < 0) {_            throw new EOFException("read past EOF. pos [" + channelPosition + "] length: [" + length + "] end: [" + channel.size() + "]")__        }_    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel,an,eofexception,will,be,thrown,if,you,attempt,to,read,beyond,the,end,of,file,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,byte,array,to,put,data,in,param,dest,offset,offset,in,dest,to,read,into,param,length,number,of,bytes,to,read;public,static,void,read,from,file,channel,with,eof,exception,file,channel,channel,long,channel,position,byte,dest,int,dest,offset,int,length,throws,ioexception,int,read,read,from,file,channel,channel,channel,position,dest,dest,offset,length,if,read,0,throw,new,eofexception,read,past,eof,pos,channel,position,length,length,end,channel,size
Channels -> public static int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException;1524684173;read <i>length</i> bytes from <i>position</i> of a file channel.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination byte array to put data in_@param destOffset      offset in dest to read into_@param length          number of bytes to read_@return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes_that will fit in the destination byte buffer.;public static int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException {_        ByteBuffer buffer = ByteBuffer.wrap(dest, destOffset, length)__        return readFromFileChannel(channel, channelPosition, buffer)__    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,byte,array,to,put,data,in,param,dest,offset,offset,in,dest,to,read,into,param,length,number,of,bytes,to,read,return,total,bytes,read,or,1,if,an,attempt,was,made,to,read,past,eof,the,method,always,tries,to,read,all,the,bytes,that,will,fit,in,the,destination,byte,buffer;public,static,int,read,from,file,channel,file,channel,channel,long,channel,position,byte,dest,int,dest,offset,int,length,throws,ioexception,byte,buffer,buffer,byte,buffer,wrap,dest,dest,offset,length,return,read,from,file,channel,channel,channel,position,buffer
Channels -> public static int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException;1528762805;read <i>length</i> bytes from <i>position</i> of a file channel.__@param channel         channel to read from_@param channelPosition position to read from_@param dest            destination byte array to put data in_@param destOffset      offset in dest to read into_@param length          number of bytes to read_@return total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes_that will fit in the destination byte buffer.;public static int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length) throws IOException {_        ByteBuffer buffer = ByteBuffer.wrap(dest, destOffset, length)__        return readFromFileChannel(channel, channelPosition, buffer)__    };read,i,length,i,bytes,from,i,position,i,of,a,file,channel,param,channel,channel,to,read,from,param,channel,position,position,to,read,from,param,dest,destination,byte,array,to,put,data,in,param,dest,offset,offset,in,dest,to,read,into,param,length,number,of,bytes,to,read,return,total,bytes,read,or,1,if,an,attempt,was,made,to,read,past,eof,the,method,always,tries,to,read,all,the,bytes,that,will,fit,in,the,destination,byte,buffer;public,static,int,read,from,file,channel,file,channel,channel,long,channel,position,byte,dest,int,dest,offset,int,length,throws,ioexception,byte,buffer,buffer,byte,buffer,wrap,dest,dest,offset,length,return,read,from,file,channel,channel,channel,position,buffer
Channels -> public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException;1524684173;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException {_        writeToChannel(source, 0, source.length, channel)__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,writable,byte,channel,channel,throws,ioexception,write,to,channel,source,0,source,length,channel
Channels -> public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException;1528762805;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException {_        writeToChannel(source, 0, source.length, channel)__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,writable,byte,channel,channel,throws,ioexception,write,to,channel,source,0,source,length,channel
Channels -> public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException;1540583181;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel}__@param source  byte array to copy from_@param channel target WritableByteChannel;public static void writeToChannel(byte[] source, WritableByteChannel channel) throws IOException {_        writeToChannel(source, 0, source.length, channel)__    };writes,part,of,a,byte,array,to,a,link,java,nio,channels,writable,byte,channel,param,source,byte,array,to,copy,from,param,channel,target,writable,byte,channel;public,static,void,write,to,channel,byte,source,writable,byte,channel,channel,throws,ioexception,write,to,channel,source,0,source,length,channel
