# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBulkByScrollRequestBuilder -> public Self setSlices(int slices);1524684173;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        request.setSlices(slices)__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,request,set,slices,slices,return,self
AbstractBulkByScrollRequestBuilder -> public Self setSlices(int slices);1527840262;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        request.setSlices(slices)__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,request,set,slices,slices,return,self
AbstractBulkByScrollRequestBuilder -> public Self setSlices(int slices);1529433467;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        request.setSlices(slices)__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,request,set,slices,slices,return,self
AbstractBulkByScrollRequestBuilder -> public Self setSlices(int slices);1547716969;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.;public Self setSlices(int slices) {_        request.setSlices(slices)__        return self()__    };the,number,of,slices,this,task,should,be,divided,into,defaults,to,1,meaning,the,task,isn,t,sliced,into,subtasks;public,self,set,slices,int,slices,request,set,slices,slices,return,self
AbstractBulkByScrollRequestBuilder -> public Self refresh(boolean refresh);1524684173;Call refresh on the indexes we've written to after the request ends?;public Self refresh(boolean refresh) {_        request.setRefresh(refresh)__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,refresh,boolean,refresh,request,set,refresh,refresh,return,self
AbstractBulkByScrollRequestBuilder -> public Self refresh(boolean refresh);1527840262;Call refresh on the indexes we've written to after the request ends?;public Self refresh(boolean refresh) {_        request.setRefresh(refresh)__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,refresh,boolean,refresh,request,set,refresh,refresh,return,self
AbstractBulkByScrollRequestBuilder -> public Self refresh(boolean refresh);1529433467;Call refresh on the indexes we've written to after the request ends?;public Self refresh(boolean refresh) {_        request.setRefresh(refresh)__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,refresh,boolean,refresh,request,set,refresh,refresh,return,self
AbstractBulkByScrollRequestBuilder -> public Self refresh(boolean refresh);1547716969;Call refresh on the indexes we've written to after the request ends?;public Self refresh(boolean refresh) {_        request.setRefresh(refresh)__        return self()__    };call,refresh,on,the,indexes,we,ve,written,to,after,the,request,ends;public,self,refresh,boolean,refresh,request,set,refresh,refresh,return,self
AbstractBulkByScrollRequestBuilder -> public Self waitForActiveShards(ActiveShardCount activeShardCount);1524684173;The number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self waitForActiveShards(ActiveShardCount activeShardCount) {_        request.setWaitForActiveShards(activeShardCount)__        return self()__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,wait,for,active,shards,active,shard,count,active,shard,count,request,set,wait,for,active,shards,active,shard,count,return,self
AbstractBulkByScrollRequestBuilder -> public Self waitForActiveShards(ActiveShardCount activeShardCount);1527840262;The number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self waitForActiveShards(ActiveShardCount activeShardCount) {_        request.setWaitForActiveShards(activeShardCount)__        return self()__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,wait,for,active,shards,active,shard,count,active,shard,count,request,set,wait,for,active,shards,active,shard,count,return,self
AbstractBulkByScrollRequestBuilder -> public Self waitForActiveShards(ActiveShardCount activeShardCount);1529433467;The number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self waitForActiveShards(ActiveShardCount activeShardCount) {_        request.setWaitForActiveShards(activeShardCount)__        return self()__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,wait,for,active,shards,active,shard,count,active,shard,count,request,set,wait,for,active,shards,active,shard,count,return,self
AbstractBulkByScrollRequestBuilder -> public Self waitForActiveShards(ActiveShardCount activeShardCount);1547716969;The number of shard copies that must be active before proceeding with the write._See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.;public Self waitForActiveShards(ActiveShardCount activeShardCount) {_        request.setWaitForActiveShards(activeShardCount)__        return self()__    };the,number,of,shard,copies,that,must,be,active,before,proceeding,with,the,write,see,link,replication,request,wait,for,active,shards,active,shard,count,for,details;public,self,wait,for,active,shards,active,shard,count,active,shard,count,request,set,wait,for,active,shards,active,shard,count,return,self
AbstractBulkByScrollRequestBuilder -> public Self filter(QueryBuilder filter);1524684173;Set the query that will filter the source. Just a convenience method for_easy chaining.;public Self filter(QueryBuilder filter) {_        source.setQuery(filter)__        return self()__    };set,the,query,that,will,filter,the,source,just,a,convenience,method,for,easy,chaining;public,self,filter,query,builder,filter,source,set,query,filter,return,self
AbstractBulkByScrollRequestBuilder -> public Self filter(QueryBuilder filter);1527840262;Set the query that will filter the source. Just a convenience method for_easy chaining.;public Self filter(QueryBuilder filter) {_        source.setQuery(filter)__        return self()__    };set,the,query,that,will,filter,the,source,just,a,convenience,method,for,easy,chaining;public,self,filter,query,builder,filter,source,set,query,filter,return,self
AbstractBulkByScrollRequestBuilder -> public Self filter(QueryBuilder filter);1529433467;Set the query that will filter the source. Just a convenience method for_easy chaining.;public Self filter(QueryBuilder filter) {_        source.setQuery(filter)__        return self()__    };set,the,query,that,will,filter,the,source,just,a,convenience,method,for,easy,chaining;public,self,filter,query,builder,filter,source,set,query,filter,return,self
AbstractBulkByScrollRequestBuilder -> public Self filter(QueryBuilder filter);1547716969;Set the query that will filter the source. Just a convenience method for_easy chaining.;public Self filter(QueryBuilder filter) {_        source.setQuery(filter)__        return self()__    };set,the,query,that,will,filter,the,source,just,a,convenience,method,for,easy,chaining;public,self,filter,query,builder,filter,source,set,query,filter,return,self
AbstractBulkByScrollRequestBuilder -> public Self size(int size);1524684173;The maximum number of documents to attempt.;public Self size(int size) {_        request.setSize(size)__        return self()__    };the,maximum,number,of,documents,to,attempt;public,self,size,int,size,request,set,size,size,return,self
AbstractBulkByScrollRequestBuilder -> public Self size(int size);1527840262;The maximum number of documents to attempt.;public Self size(int size) {_        request.setSize(size)__        return self()__    };the,maximum,number,of,documents,to,attempt;public,self,size,int,size,request,set,size,size,return,self
AbstractBulkByScrollRequestBuilder -> public Self size(int size);1529433467;The maximum number of documents to attempt.;public Self size(int size) {_        request.setSize(size)__        return self()__    };the,maximum,number,of,documents,to,attempt;public,self,size,int,size,request,set,size,size,return,self
AbstractBulkByScrollRequestBuilder -> public Self size(int size);1547716969;The maximum number of documents to attempt.;public Self size(int size) {_        request.setSize(size)__        return self()__    };the,maximum,number,of,documents,to,attempt;public,self,size,int,size,request,set,size,size,return,self
AbstractBulkByScrollRequestBuilder -> public Self setMaxRetries(int maxRetries);1524684173;Total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        request.setMaxRetries(maxRetries)__        return self()__    };total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,request,set,max,retries,max,retries,return,self
AbstractBulkByScrollRequestBuilder -> public Self setMaxRetries(int maxRetries);1527840262;Total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        request.setMaxRetries(maxRetries)__        return self()__    };total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,request,set,max,retries,max,retries,return,self
AbstractBulkByScrollRequestBuilder -> public Self setMaxRetries(int maxRetries);1529433467;Total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        request.setMaxRetries(maxRetries)__        return self()__    };total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,request,set,max,retries,max,retries,return,self
AbstractBulkByScrollRequestBuilder -> public Self setMaxRetries(int maxRetries);1547716969;Total number of retries attempted for rejections. There is no way to ask for unlimited retries.;public Self setMaxRetries(int maxRetries) {_        request.setMaxRetries(maxRetries)__        return self()__    };total,number,of,retries,attempted,for,rejections,there,is,no,way,to,ask,for,unlimited,retries;public,self,set,max,retries,int,max,retries,request,set,max,retries,max,retries,return,self
AbstractBulkByScrollRequestBuilder -> public Self setShouldStoreResult(boolean shouldStoreResult);1524684173;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        request.setShouldStoreResult(shouldStoreResult)__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,request,set,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequestBuilder -> public Self setShouldStoreResult(boolean shouldStoreResult);1527840262;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        request.setShouldStoreResult(shouldStoreResult)__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,request,set,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequestBuilder -> public Self setShouldStoreResult(boolean shouldStoreResult);1529433467;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        request.setShouldStoreResult(shouldStoreResult)__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,request,set,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequestBuilder -> public Self setShouldStoreResult(boolean shouldStoreResult);1547716969;Should this task store its result after it has finished?;public Self setShouldStoreResult(boolean shouldStoreResult) {_        request.setShouldStoreResult(shouldStoreResult)__        return self()__    };should,this,task,store,its,result,after,it,has,finished;public,self,set,should,store,result,boolean,should,store,result,request,set,should,store,result,should,store,result,return,self
AbstractBulkByScrollRequestBuilder -> public SearchRequestBuilder source();1524684173;The search used to find documents to process.;public SearchRequestBuilder source() {_        return source__    };the,search,used,to,find,documents,to,process;public,search,request,builder,source,return,source
AbstractBulkByScrollRequestBuilder -> public SearchRequestBuilder source();1527840262;The search used to find documents to process.;public SearchRequestBuilder source() {_        return source__    };the,search,used,to,find,documents,to,process;public,search,request,builder,source,return,source
AbstractBulkByScrollRequestBuilder -> public SearchRequestBuilder source();1529433467;The search used to find documents to process.;public SearchRequestBuilder source() {_        return source__    };the,search,used,to,find,documents,to,process;public,search,request,builder,source,return,source
AbstractBulkByScrollRequestBuilder -> public SearchRequestBuilder source();1547716969;The search used to find documents to process.;public SearchRequestBuilder source() {_        return source__    };the,search,used,to,find,documents,to,process;public,search,request,builder,source,return,source
AbstractBulkByScrollRequestBuilder -> public Self timeout(TimeValue timeout);1524684173;Timeout to wait for the shards on to be available for each bulk request.;public Self timeout(TimeValue timeout) {_        request.setTimeout(timeout)__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,timeout,time,value,timeout,request,set,timeout,timeout,return,self
AbstractBulkByScrollRequestBuilder -> public Self timeout(TimeValue timeout);1527840262;Timeout to wait for the shards on to be available for each bulk request.;public Self timeout(TimeValue timeout) {_        request.setTimeout(timeout)__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,timeout,time,value,timeout,request,set,timeout,timeout,return,self
AbstractBulkByScrollRequestBuilder -> public Self timeout(TimeValue timeout);1529433467;Timeout to wait for the shards on to be available for each bulk request.;public Self timeout(TimeValue timeout) {_        request.setTimeout(timeout)__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,timeout,time,value,timeout,request,set,timeout,timeout,return,self
AbstractBulkByScrollRequestBuilder -> public Self timeout(TimeValue timeout);1547716969;Timeout to wait for the shards on to be available for each bulk request.;public Self timeout(TimeValue timeout) {_        request.setTimeout(timeout)__        return self()__    };timeout,to,wait,for,the,shards,on,to,be,available,for,each,bulk,request;public,self,timeout,time,value,timeout,request,set,timeout,timeout,return,self
AbstractBulkByScrollRequestBuilder -> public Self source(String... indices);1524684173;Set the source indices.;public Self source(String... indices) {_        source.setIndices(indices)__        return self()__    };set,the,source,indices;public,self,source,string,indices,source,set,indices,indices,return,self
AbstractBulkByScrollRequestBuilder -> public Self source(String... indices);1527840262;Set the source indices.;public Self source(String... indices) {_        source.setIndices(indices)__        return self()__    };set,the,source,indices;public,self,source,string,indices,source,set,indices,indices,return,self
AbstractBulkByScrollRequestBuilder -> public Self source(String... indices);1529433467;Set the source indices.;public Self source(String... indices) {_        source.setIndices(indices)__        return self()__    };set,the,source,indices;public,self,source,string,indices,source,set,indices,indices,return,self
AbstractBulkByScrollRequestBuilder -> public Self source(String... indices);1547716969;Set the source indices.;public Self source(String... indices) {_        source.setIndices(indices)__        return self()__    };set,the,source,indices;public,self,source,string,indices,source,set,indices,indices,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRequestsPerSecond(float requestsPerSecond);1524684173;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        request.setRequestsPerSecond(requestsPerSecond)__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,request,set,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRequestsPerSecond(float requestsPerSecond);1527840262;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        request.setRequestsPerSecond(requestsPerSecond)__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,request,set,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRequestsPerSecond(float requestsPerSecond);1529433467;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        request.setRequestsPerSecond(requestsPerSecond)__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,request,set,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRequestsPerSecond(float requestsPerSecond);1547716969;Set the throttle for this request in sub-requests per second. {@link Float#POSITIVE_INFINITY} means set no throttle and that is the_default. Throttling is done between batches, as we start the next scroll requests. That way we can increase the scroll's timeout to_make sure that it contains any time that we might wait.;public Self setRequestsPerSecond(float requestsPerSecond) {_        request.setRequestsPerSecond(requestsPerSecond)__        return self()__    };set,the,throttle,for,this,request,in,sub,requests,per,second,link,float,means,set,no,throttle,and,that,is,the,default,throttling,is,done,between,batches,as,we,start,the,next,scroll,requests,that,way,we,can,increase,the,scroll,s,timeout,to,make,sure,that,it,contains,any,time,that,we,might,wait;public,self,set,requests,per,second,float,requests,per,second,request,set,requests,per,second,requests,per,second,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1524684173;Initial delay after a rejection before retrying a bulk request. With the default maxRetries the total backoff for retrying rejections_is about one minute per bulk request. Once the entire bulk request is successful the retry counter resets.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        request.setRetryBackoffInitialTime(retryBackoffInitialTime)__        return self()__    };initial,delay,after,a,rejection,before,retrying,a,bulk,request,with,the,default,max,retries,the,total,backoff,for,retrying,rejections,is,about,one,minute,per,bulk,request,once,the,entire,bulk,request,is,successful,the,retry,counter,resets;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,request,set,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1527840262;Initial delay after a rejection before retrying a bulk request. With the default maxRetries the total backoff for retrying rejections_is about one minute per bulk request. Once the entire bulk request is successful the retry counter resets.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        request.setRetryBackoffInitialTime(retryBackoffInitialTime)__        return self()__    };initial,delay,after,a,rejection,before,retrying,a,bulk,request,with,the,default,max,retries,the,total,backoff,for,retrying,rejections,is,about,one,minute,per,bulk,request,once,the,entire,bulk,request,is,successful,the,retry,counter,resets;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,request,set,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1529433467;Initial delay after a rejection before retrying a bulk request. With the default maxRetries the total backoff for retrying rejections_is about one minute per bulk request. Once the entire bulk request is successful the retry counter resets.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        request.setRetryBackoffInitialTime(retryBackoffInitialTime)__        return self()__    };initial,delay,after,a,rejection,before,retrying,a,bulk,request,with,the,default,max,retries,the,total,backoff,for,retrying,rejections,is,about,one,minute,per,bulk,request,once,the,entire,bulk,request,is,successful,the,retry,counter,resets;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,request,set,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequestBuilder -> public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime);1547716969;Initial delay after a rejection before retrying a bulk request. With the default maxRetries the total backoff for retrying rejections_is about one minute per bulk request. Once the entire bulk request is successful the retry counter resets.;public Self setRetryBackoffInitialTime(TimeValue retryBackoffInitialTime) {_        request.setRetryBackoffInitialTime(retryBackoffInitialTime)__        return self()__    };initial,delay,after,a,rejection,before,retrying,a,bulk,request,with,the,default,max,retries,the,total,backoff,for,retrying,rejections,is,about,one,minute,per,bulk,request,once,the,entire,bulk,request,is,successful,the,retry,counter,resets;public,self,set,retry,backoff,initial,time,time,value,retry,backoff,initial,time,request,set,retry,backoff,initial,time,retry,backoff,initial,time,return,self
AbstractBulkByScrollRequestBuilder -> public Self abortOnVersionConflict(boolean abortOnVersionConflict);1524684173;Should we version conflicts cause the action to abort?;public Self abortOnVersionConflict(boolean abortOnVersionConflict) {_        request.setAbortOnVersionConflict(abortOnVersionConflict)__        return self()__    };should,we,version,conflicts,cause,the,action,to,abort;public,self,abort,on,version,conflict,boolean,abort,on,version,conflict,request,set,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequestBuilder -> public Self abortOnVersionConflict(boolean abortOnVersionConflict);1527840262;Should we version conflicts cause the action to abort?;public Self abortOnVersionConflict(boolean abortOnVersionConflict) {_        request.setAbortOnVersionConflict(abortOnVersionConflict)__        return self()__    };should,we,version,conflicts,cause,the,action,to,abort;public,self,abort,on,version,conflict,boolean,abort,on,version,conflict,request,set,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequestBuilder -> public Self abortOnVersionConflict(boolean abortOnVersionConflict);1529433467;Should we version conflicts cause the action to abort?;public Self abortOnVersionConflict(boolean abortOnVersionConflict) {_        request.setAbortOnVersionConflict(abortOnVersionConflict)__        return self()__    };should,we,version,conflicts,cause,the,action,to,abort;public,self,abort,on,version,conflict,boolean,abort,on,version,conflict,request,set,abort,on,version,conflict,abort,on,version,conflict,return,self
AbstractBulkByScrollRequestBuilder -> public Self abortOnVersionConflict(boolean abortOnVersionConflict);1547716969;Set whether or not version conflicts cause the action to abort.;public Self abortOnVersionConflict(boolean abortOnVersionConflict) {_        request.setAbortOnVersionConflict(abortOnVersionConflict)__        return self()__    };set,whether,or,not,version,conflicts,cause,the,action,to,abort;public,self,abort,on,version,conflict,boolean,abort,on,version,conflict,request,set,abort,on,version,conflict,abort,on,version,conflict,return,self
