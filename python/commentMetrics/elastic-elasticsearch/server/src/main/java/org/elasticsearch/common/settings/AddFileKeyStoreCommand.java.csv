commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;42;;@Override protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {     KeyStoreWrapper keystore = KeyStoreWrapper.load(env.configFile()).     if (keystore == null) {         if (options.has(forceOption) == false && terminal.promptYesNo("The elasticsearch keystore does not exist. Do you want to create it?", false) == false) {             terminal.println("Exiting without creating keystore.").             return.         }         keystore = KeyStoreWrapper.create().         keystore.save(env.configFile(), new char[0]).         terminal.println("Created elasticsearch keystore in " + env.configFile()).     } else {         keystore.decrypt(new char[0]).     }     List<String> argumentValues = arguments.values(options).     if (argumentValues.size() == 0) {         throw new UserException(ExitCodes.USAGE, "Missing setting name").     }     String setting = argumentValues.get(0).     if (keystore.getSettingNames().contains(setting) && options.has(forceOption) == false) {         if (terminal.promptYesNo("Setting " + setting + " already exists. Overwrite?", false) == false) {             terminal.println("Exiting without modifying keystore.").             return.         }     }     if (argumentValues.size() == 1) {         throw new UserException(ExitCodes.USAGE, "Missing file name").     }     Path file = getPath(argumentValues.get(1)).     if (Files.exists(file) == false) {         throw new UserException(ExitCodes.IO_ERROR, "File [" + file.toString() + "] does not exist").     }     if (argumentValues.size() > 2) {         throw new UserException(ExitCodes.USAGE, "Unrecognized extra arguments [" + String.join(", ", argumentValues.subList(2, argumentValues.size())) + "] after filepath").     }     keystore.setFile(setting, Files.readAllBytes(file)).     keystore.save(env.configFile(), new char[0]). }
false;private;1;4;;@SuppressForbidden(reason = "file arg for cli") private Path getPath(String file) {     return PathUtils.get(file). }
