commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;7;/**  * Creates a GeoDistance instance from an input stream  */ ;/**  * Creates a GeoDistance instance from an input stream  */ public static GeoDistance readFromStream(StreamInput in) throws IOException {     int ord = in.readVInt().     if (ord < 0 || ord >= values().length) {         throw new IOException("Unknown GeoDistance ordinal [" + ord + "]").     }     return GeoDistance.values()[ord]. }
true;public;1;4;/**  * Writes an instance of a GeoDistance object to an output stream  */ ;/**  * Writes an instance of a GeoDistance object to an output stream  */ @Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(this.ordinal()). }
true;public,static;1;9;/**  * Get a {@link GeoDistance} according to a given name. Valid values are  *  * <ul>  *     <li><b>plane</b> for <code>GeoDistance.PLANE</code></li>  *     <li><b>arc</b> for <code>GeoDistance.ARC</code></li>  * </ul>  *  * @param name name of the {@link GeoDistance}  * @return a {@link GeoDistance}  */ ;/**  * Get a {@link GeoDistance} according to a given name. Valid values are  *  * <ul>  *     <li><b>plane</b> for <code>GeoDistance.PLANE</code></li>  *     <li><b>arc</b> for <code>GeoDistance.ARC</code></li>  * </ul>  *  * @param name name of the {@link GeoDistance}  * @return a {@link GeoDistance}  */ public static GeoDistance fromString(String name) {     name = name.toLowerCase(Locale.ROOT).     if ("plane".equals(name)) {         return PLANE.     } else if ("arc".equals(name)) {         return ARC.     }     throw new IllegalArgumentException("No geo distance for [" + name + "]"). }
true;public;5;7;/**  * compute the distance between two points using the selected algorithm (PLANE, ARC)  */ ;/**  * compute the distance between two points using the selected algorithm (PLANE, ARC)  */ public double calculate(double srcLat, double srcLon, double dstLat, double dstLon, DistanceUnit unit) {     if (this == PLANE) {         return DistanceUnit.convert(GeoUtils.planeDistance(srcLat, srcLon, dstLat, dstLon), DistanceUnit.METERS, unit).     }     return DistanceUnit.convert(GeoUtils.arcDistance(srcLat, srcLon, dstLat, dstLon), DistanceUnit.METERS, unit). }
