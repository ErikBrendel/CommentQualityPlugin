commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitNoScoping(). }
false;public;0;4;;@Override public Scope getScopeInstance() {     return Scopes.NO_SCOPE. }
false;public;0;4;;@Override public String toString() {     return Scopes.NO_SCOPE.toString(). }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) { // do nothing }
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitScopeAnnotation(Singleton.class). }
false;public;0;4;;@Override public Class<? extends Annotation> getScopeAnnotation() {     return Singleton.class. }
false;public;0;4;;@Override public String toString() {     return Singleton.class.getName(). }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {     scopedBindingBuilder.in(Singleton.class). }
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitScope(Scopes.SINGLETON). }
false;public;0;4;;@Override public Scope getScopeInstance() {     return Scopes.SINGLETON. }
false;public;0;4;;@Override public String toString() {     return Scopes.SINGLETON.toString(). }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {     scopedBindingBuilder.in(Scopes.SINGLETON). }
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitEagerSingleton(). }
false;public;0;4;;@Override public Scope getScopeInstance() {     return Scopes.SINGLETON. }
false;public;0;4;;@Override public String toString() {     return "eager singleton". }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {     scopedBindingBuilder.asEagerSingleton(). }
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitScopeAnnotation(scopingAnnotation). }
false;public;0;4;;@Override public Class<? extends Annotation> getScopeAnnotation() {     return scopingAnnotation. }
false;public;0;4;;@Override public String toString() {     return scopingAnnotation.getName(). }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {     scopedBindingBuilder.in(scopingAnnotation). }
false;public,static;1;27;;public static Scoping forAnnotation(final Class<? extends Annotation> scopingAnnotation) {     if (scopingAnnotation == Singleton.class) {         return SINGLETON_ANNOTATION.     }     return new Scoping() {          @Override         public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {             return visitor.visitScopeAnnotation(scopingAnnotation).         }          @Override         public Class<? extends Annotation> getScopeAnnotation() {             return scopingAnnotation.         }          @Override         public String toString() {             return scopingAnnotation.getName().         }          @Override         public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {             scopedBindingBuilder.in(scopingAnnotation).         }     }. }
false;public;1;4;;@Override public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {     return visitor.visitScope(scope). }
false;public;0;4;;@Override public Scope getScopeInstance() {     return scope. }
false;public;0;4;;@Override public String toString() {     return scope.toString(). }
false;public;1;4;;@Override public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {     scopedBindingBuilder.in(scope). }
false;public,static;1;27;;public static Scoping forInstance(final Scope scope) {     if (scope == Scopes.SINGLETON) {         return SINGLETON_INSTANCE.     }     return new Scoping() {          @Override         public <V> V acceptVisitor(BindingScopingVisitor<V> visitor) {             return visitor.visitScope(scope).         }          @Override         public Scope getScopeInstance() {             return scope.         }          @Override         public String toString() {             return scope.toString().         }          @Override         public void applyTo(ScopedBindingBuilder scopedBindingBuilder) {             scopedBindingBuilder.in(scope).         }     }. }
true;public;0;3;/**  * Returns true if this scope was explicitly applied. If no scope was explicitly applied then the  * scoping annotation will be used.  */ ;/**  * Returns true if this scope was explicitly applied. If no scope was explicitly applied then the  * scoping annotation will be used.  */ public boolean isExplicitlyScoped() {     return this != UNSCOPED. }
true;public;0;3;/**  * Returns true if this is the default scope. In this case a new instance will be provided for  * each injection.  */ ;/**  * Returns true if this is the default scope. In this case a new instance will be provided for  * each injection.  */ public boolean isNoScope() {     return getScopeInstance() == Scopes.NO_SCOPE. }
true;public;1;11;/**  * Returns true if this scope is a singleton that should be loaded eagerly in {@code stage}.  */ ;/**  * Returns true if this scope is a singleton that should be loaded eagerly in {@code stage}.  */ public boolean isEagerSingleton(Stage stage) {     if (this == EAGER_SINGLETON) {         return true.     }     if (stage == Stage.PRODUCTION) {         return this == SINGLETON_ANNOTATION || this == SINGLETON_INSTANCE.     }     return false. }
true;public;0;3;/**  * Returns the scope instance, or {@code null} if that isn't known for this instance.  */ ;/**  * Returns the scope instance, or {@code null} if that isn't known for this instance.  */ public Scope getScopeInstance() {     return null. }
true;public;0;3;/**  * Returns the scope annotation, or {@code null} if that isn't known for this instance.  */ ;/**  * Returns the scope annotation, or {@code null} if that isn't known for this instance.  */ public Class<? extends Annotation> getScopeAnnotation() {     return null. }
false;public,abstract;1;1;;public abstract <V> V acceptVisitor(BindingScopingVisitor<V> visitor).
false;public,abstract;1;1;;public abstract void applyTo(ScopedBindingBuilder scopedBindingBuilder).
