commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String id() {     return this.id. }
false;public;0;3;;public String type() {     return this.type. }
false;public;0;3;;public Field version() {     return version. }
false;public;2;5;;public void updateSeqID(long sequenceNumber, long primaryTerm) {     this.seqID.seqNo.setLongValue(sequenceNumber).     this.seqID.seqNoDocValue.setLongValue(sequenceNumber).     this.seqID.primaryTerm.setLongValue(primaryTerm). }
true;;0;6;/**  * Makes the processing document as a tombstone document rather than a regular document.  * Tombstone documents are stored in Lucene index to represent delete operations or Noops.  */ ;/**  * Makes the processing document as a tombstone document rather than a regular document.  * Tombstone documents are stored in Lucene index to represent delete operations or Noops.  */ ParsedDocument toTombstone() {     assert docs().size() == 1 : "Tombstone should have a single doc [" + docs() + "]".     this.seqID.tombstoneField.setLongValue(1).     rootDoc().add(this.seqID.tombstoneField).     return this. }
false;public;0;3;;public String routing() {     return this.routing. }
false;public;0;3;;public Document rootDoc() {     return documents.get(documents.size() - 1). }
false;public;0;3;;public List<Document> docs() {     return this.documents. }
false;public;0;3;;public BytesReference source() {     return this.source. }
false;public;0;3;;public XContentType getXContentType() {     return this.xContentType. }
false;public;2;4;;public void setSource(BytesReference source, XContentType xContentType) {     this.source = source.     this.xContentType = xContentType. }
true;public;0;3;/**  * Return dynamic updates to mappings or {@code null} if there were no  * updates to the mappings.  */ ;/**  * Return dynamic updates to mappings or {@code null} if there were no  * updates to the mappings.  */ public Mapping dynamicMappingsUpdate() {     return dynamicMappingsUpdate. }
false;public;1;7;;public void addDynamicMappingsUpdate(Mapping update) {     if (dynamicMappingsUpdate == null) {         dynamicMappingsUpdate = update.     } else {         dynamicMappingsUpdate = dynamicMappingsUpdate.merge(update).     } }
false;public;0;4;;@Override public String toString() {     return "Document id[" + id + "] doc [" + documents + ']'. }
