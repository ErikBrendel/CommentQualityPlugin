commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeString(fieldName).     out.writeString(value).     out.writeVInt(flagsValue).     out.writeVInt(maxDeterminizedStates).     out.writeOptionalString(rewrite). }
true;public;0;4;/**  * Returns the field name used in this query.  */ ;/**  * Returns the field name used in this query.  */ @Override public String fieldName() {     return this.fieldName. }
true;public;0;3;/**  *  Returns the value used in this query.  */ ;/**  *  Returns the value used in this query.  */ public String value() {     return this.value. }
false;public;1;16;;public RegexpQueryBuilder flags(RegexpFlag... flags) {     if (flags == null) {         this.flagsValue = DEFAULT_FLAGS_VALUE.         return this.     }     int value = 0.     if (flags.length == 0) {         value = RegexpFlag.ALL.value.     } else {         for (RegexpFlag flag : flags) {             value |= flag.value.         }     }     this.flagsValue = value.     return this. }
false;public;1;4;;public RegexpQueryBuilder flags(int flags) {     this.flagsValue = flags.     return this. }
false;public;0;3;;public int flags() {     return this.flagsValue. }
true;public;1;4;/**  * Sets the regexp maxDeterminizedStates.  */ ;/**  * Sets the regexp maxDeterminizedStates.  */ public RegexpQueryBuilder maxDeterminizedStates(int value) {     this.maxDeterminizedStates = value.     return this. }
false;public;0;3;;public int maxDeterminizedStates() {     return this.maxDeterminizedStates. }
false;public;1;4;;public RegexpQueryBuilder rewrite(String rewrite) {     this.rewrite = rewrite.     return this. }
false;public;0;3;;public String rewrite() {     return this.rewrite. }
false;protected;2;14;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.startObject(fieldName).     builder.field(VALUE_FIELD.getPreferredName(), this.value).     builder.field(FLAGS_VALUE_FIELD.getPreferredName(), flagsValue).     builder.field(MAX_DETERMINIZED_STATES_FIELD.getPreferredName(), maxDeterminizedStates).     if (rewrite != null) {         builder.field(REWRITE_FIELD.getPreferredName(), rewrite).     }     printBoostAndQueryName(builder).     builder.endObject().     builder.endObject(). }
false;public,static;1;55;;public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {     String fieldName = null.     String rewrite = null.     String value = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE.     int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES.     String queryName = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName).             fieldName = currentFieldName.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else {                     if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = parser.textOrNull().                     } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         boost = parser.floatValue().                     } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         rewrite = parser.textOrNull().                     } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         String flags = parser.textOrNull().                         flagsValue = RegexpFlag.resolveValue(flags).                     } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         maxDeterminizedStates = parser.intValue().                     } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         flagsValue = parser.intValue().                     } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         queryName = parser.text().                     } else {                         throw new ParsingException(parser.getTokenLocation(), "[regexp] query does not support [" + currentFieldName + "]").                     }                 }             }         } else {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName()).             fieldName = currentFieldName.             value = parser.textOrNull().         }     }     return new RegexpQueryBuilder(fieldName, value).flags(flagsValue).maxDeterminizedStates(maxDeterminizedStates).rewrite(rewrite).boost(boost).queryName(queryName). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;26;;@Override protected Query doToQuery(QueryShardContext context) throws QueryShardException, IOException {     final int maxAllowedRegexLength = context.getIndexSettings().getMaxRegexLength().     if (value.length() > maxAllowedRegexLength) {         throw new IllegalArgumentException("The length of regex [" + value.length() + "] used in the Regexp Query request has exceeded " + "the allowed maximum of [" + maxAllowedRegexLength + "]. " + "This maximum can be set by changing the [" + IndexSettings.MAX_REGEX_LENGTH_SETTING.getKey() + "] index level setting.").     }     MultiTermQuery.RewriteMethod method = QueryParsers.parseRewriteMethod(rewrite, null, LoggingDeprecationHandler.INSTANCE).     Query query = null.     MappedFieldType fieldType = context.fieldMapper(fieldName).     if (fieldType != null) {         query = fieldType.regexpQuery(value, flagsValue, maxDeterminizedStates, method, context).     }     if (query == null) {         RegexpQuery regexpQuery = new RegexpQuery(new Term(fieldName, BytesRefs.toBytesRef(value)), flagsValue, maxDeterminizedStates).         if (method != null) {             regexpQuery.setRewriteMethod(method).         }         query = regexpQuery.     }     return query. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(fieldName, value, flagsValue, maxDeterminizedStates, rewrite). }
false;protected;1;8;;@Override protected boolean doEquals(RegexpQueryBuilder other) {     return Objects.equals(fieldName, other.fieldName) && Objects.equals(value, other.value) && Objects.equals(flagsValue, other.flagsValue) && Objects.equals(maxDeterminizedStates, other.maxDeterminizedStates) && Objects.equals(rewrite, other.rewrite). }
