commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the analyzer name to use in order to analyze the text.  *  * @param analyzer The analyzer name.  */ ;/**  * Sets the analyzer name to use in order to analyze the text.  *  * @param analyzer The analyzer name.  */ public AnalyzeRequestBuilder setAnalyzer(String analyzer) {     request.analyzer(analyzer).     return this. }
true;public;1;4;/**  * Sets the field that its analyzer will be used to analyze the text. Note, requires an index  * to be set.  */ ;/**  * Sets the field that its analyzer will be used to analyze the text. Note, requires an index  * to be set.  */ public AnalyzeRequestBuilder setField(String field) {     request.field(field).     return this. }
true;public;1;4;/**  * Instead of setting the analyzer, sets the tokenizer as name that will be used as part of a custom  * analyzer.  */ ;/**  * Instead of setting the analyzer, sets the tokenizer as name that will be used as part of a custom  * analyzer.  */ public AnalyzeRequestBuilder setTokenizer(String tokenizer) {     request.tokenizer(tokenizer).     return this. }
true;public;1;4;/**  * Instead of setting the analyzer, sets the tokenizer using custom settings that will be used as part of a custom  * analyzer.  */ ;/**  * Instead of setting the analyzer, sets the tokenizer using custom settings that will be used as part of a custom  * analyzer.  */ public AnalyzeRequestBuilder setTokenizer(Map<String, ?> tokenizer) {     request.tokenizer(tokenizer).     return this. }
true;public;1;4;/**  * Add token filter setting that will be used on top of a tokenizer provided.  */ ;/**  * Add token filter setting that will be used on top of a tokenizer provided.  */ public AnalyzeRequestBuilder addTokenFilter(Map<String, ?> tokenFilter) {     request.addTokenFilter(tokenFilter).     return this. }
true;public;1;4;/**  * Add a name of token filter that will be used on top of a tokenizer provided.  */ ;/**  * Add a name of token filter that will be used on top of a tokenizer provided.  */ public AnalyzeRequestBuilder addTokenFilter(String tokenFilter) {     request.addTokenFilter(tokenFilter).     return this. }
true;public;1;4;/**  * Add char filter setting that will be used on top of a tokenizer provided.  */ ;/**  * Add char filter setting that will be used on top of a tokenizer provided.  */ public AnalyzeRequestBuilder addCharFilter(Map<String, ?> charFilter) {     request.addCharFilter(charFilter).     return this. }
true;public;1;4;/**  * Add a name of char filter that will be used before the tokenizer.  */ ;/**  * Add a name of char filter that will be used before the tokenizer.  */ public AnalyzeRequestBuilder addCharFilter(String tokenFilter) {     request.addCharFilter(tokenFilter).     return this. }
true;public;1;4;/**  * Sets explain  */ ;/**  * Sets explain  */ public AnalyzeRequestBuilder setExplain(boolean explain) {     request.explain(explain).     return this. }
true;public;1;4;/**  * Sets attributes that will include results  */ ;/**  * Sets attributes that will include results  */ public AnalyzeRequestBuilder setAttributes(String... attributes) {     request.attributes(attributes).     return this. }
true;public;1;4;/**  * Sets texts to analyze  */ ;/**  * Sets texts to analyze  */ public AnalyzeRequestBuilder setText(String... texts) {     request.text(texts).     return this. }
true;public;1;4;/**  * Instead of setting the analyzer and tokenizer, sets the normalizer as name  */ ;/**  * Instead of setting the analyzer and tokenizer, sets the normalizer as name  */ public AnalyzeRequestBuilder setNormalizer(String normalizer) {     request.normalizer(normalizer).     return this. }
