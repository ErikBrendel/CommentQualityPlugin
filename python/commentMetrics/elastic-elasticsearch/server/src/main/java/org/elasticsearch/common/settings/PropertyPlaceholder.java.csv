commented;modifiers;parameterAmount;loc;comment;code
true;;2;4;/**  * Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied {@link  * PlaceholderResolver}.  *  * @param value               the value containing the placeholders to be replaced.  * @param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement.  * @return the supplied value with placeholders replaced inline.  * @throws NullPointerException if value is null  */ ;/**  * Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied {@link  * PlaceholderResolver}.  *  * @param value               the value containing the placeholders to be replaced.  * @param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement.  * @return the supplied value with placeholders replaced inline.  * @throws NullPointerException if value is null  */ String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {     Objects.requireNonNull(value).     return parseStringValue(value, placeholderResolver, new HashSet<>()). }
false;private;3;55;;private String parseStringValue(String strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {     StringBuilder buf = new StringBuilder(strVal).     int startIndex = strVal.indexOf(this.placeholderPrefix).     while (startIndex != -1) {         int endIndex = findPlaceholderEndIndex(buf, startIndex).         if (endIndex != -1) {             String placeholder = buf.substring(startIndex + this.placeholderPrefix.length(), endIndex).             if (!visitedPlaceholders.add(placeholder)) {                 throw new IllegalArgumentException("Circular placeholder reference '" + placeholder + "' in property definitions").             }             // Recursive invocation, parsing placeholders contained in the placeholder key.             placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders).             // Now obtain the value for the fully resolved key...             int defaultValueIdx = placeholder.indexOf(':').             String defaultValue = null.             if (defaultValueIdx != -1) {                 defaultValue = placeholder.substring(defaultValueIdx + 1).                 placeholder = placeholder.substring(0, defaultValueIdx).             }             String propVal = placeholderResolver.resolvePlaceholder(placeholder).             if (propVal == null) {                 propVal = defaultValue.             }             if (propVal == null && placeholderResolver.shouldIgnoreMissing(placeholder)) {                 if (placeholderResolver.shouldRemoveMissingPlaceholder(placeholder)) {                     propVal = "".                 } else {                     return strVal.                 }             }             if (propVal != null) {                 // Recursive invocation, parsing placeholders contained in the                 // previously resolved placeholder value.                 propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders).                 buf.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal).                 startIndex = buf.indexOf(this.placeholderPrefix, startIndex + propVal.length()).             } else if (this.ignoreUnresolvablePlaceholders) {                 // Proceed with unprocessed value.                 startIndex = buf.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length()).             } else {                 throw new IllegalArgumentException("Could not resolve placeholder '" + placeholder + "'").             }             visitedPlaceholders.remove(placeholder).         } else {             startIndex = -1.         }     }     return buf.toString(). }
false;private;2;20;;private int findPlaceholderEndIndex(CharSequence buf, int startIndex) {     int index = startIndex + this.placeholderPrefix.length().     int withinNestedPlaceholder = 0.     while (index < buf.length()) {         if (Strings.substringMatch(buf, index, this.placeholderSuffix)) {             if (withinNestedPlaceholder > 0) {                 withinNestedPlaceholder--.                 index = index + this.placeholderSuffix.length().             } else {                 return index.             }         } else if (Strings.substringMatch(buf, index, this.placeholderPrefix)) {             withinNestedPlaceholder++.             index = index + this.placeholderPrefix.length().         } else {             index++.         }     }     return -1. }
true;;1;1;/**  * Resolves the supplied placeholder name into the replacement value.  *  * @param placeholderName the name of the placeholder to resolve.  * @return the replacement value or <code>null</code> if no replacement is to be made.  */ ;/**  * Resolves the supplied placeholder name into the replacement value.  *  * @param placeholderName the name of the placeholder to resolve.  * @return the replacement value or <code>null</code> if no replacement is to be made.  */ String resolvePlaceholder(String placeholderName).
false;;1;1;;boolean shouldIgnoreMissing(String placeholderName).
true;;1;1;/**  * Allows for special handling for ignored missing placeholders that may be resolved elsewhere  *  * @param placeholderName the name of the placeholder to resolve.  * @return true if the placeholder should be replaced with a empty string  */ ;/**  * Allows for special handling for ignored missing placeholders that may be resolved elsewhere  *  * @param placeholderName the name of the placeholder to resolve.  * @return true if the placeholder should be replaced with a empty string  */ boolean shouldRemoveMissingPlaceholder(String placeholderName).
