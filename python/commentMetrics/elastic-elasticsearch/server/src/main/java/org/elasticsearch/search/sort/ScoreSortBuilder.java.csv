commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     order.writeTo(out). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startObject(NAME).     builder.field(ORDER_FIELD.getPreferredName(), order).     builder.endObject().     builder.endObject().     return builder. }
true;public,static;2;3;/**  * Creates a new {@link ScoreSortBuilder} from the query held by the {@link XContentParser} in  * {@link org.elasticsearch.common.xcontent.XContent} format.  *  * @param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this  *        method call  * @param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g.  *        in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument  */ ;/**  * Creates a new {@link ScoreSortBuilder} from the query held by the {@link XContentParser} in  * {@link org.elasticsearch.common.xcontent.XContent} format.  *  * @param parser the input parser. The state on the parser contained in this context will be changed as a side effect of this  *        method call  * @param fieldName in some sort syntax variations the field name precedes the xContent object that specifies further parameters, e.g.  *        in '{ "foo": { "order" : "asc"} }'. When parsing the inner object, the field name can be passed in via this argument  */ public static ScoreSortBuilder fromXContent(XContentParser parser, String fieldName) {     return PARSER.apply(parser, null). }
false;public;1;8;;@Override public SortFieldAndFormat build(QueryShardContext context) {     if (order == SortOrder.DESC) {         return SORT_SCORE.     } else {         return SORT_SCORE_REVERSE.     } }
false;public;1;11;;@Override public boolean equals(Object object) {     if (this == object) {         return true.     }     if (object == null || getClass() != object.getClass()) {         return false.     }     ScoreSortBuilder other = (ScoreSortBuilder) object.     return Objects.equals(order, other.order). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(this.order). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;4;;@Override public ScoreSortBuilder rewrite(QueryRewriteContext ctx) throws IOException {     return this. }
