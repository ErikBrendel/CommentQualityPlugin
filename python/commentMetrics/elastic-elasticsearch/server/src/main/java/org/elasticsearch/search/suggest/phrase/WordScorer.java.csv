commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public long frequency(BytesRef term) throws IOException {     if (termsEnum.seekExact(term)) {         return useTotalTermFreq ? termsEnum.totalTermFreq() : termsEnum.docFreq().     }     return 0. }
false;protected;2;6;;protected double channelScore(Candidate candidate, Candidate original) throws IOException {     if (candidate.stringDistance == 1.0d) {         return realWordLikelihood.     }     return candidate.stringDistance. }
false;public;4;9;;public double score(Candidate[] path, CandidateSet[] candidateSet, int at, int gramSize) throws IOException {     if (at == 0 || gramSize == 1) {         return Math.log10(channelScore(path[at], candidateSet[at].originalTerm) * scoreUnigram(path[at])).     } else if (at == 1 || gramSize == 2) {         return Math.log10(channelScore(path[at], candidateSet[at].originalTerm) * scoreBigram(path[at], path[at - 1])).     } else {         return Math.log10(channelScore(path[at], candidateSet[at].originalTerm) * scoreTrigram(path[at], path[at - 1], path[at - 2])).     } }
false;protected;1;3;;protected double scoreUnigram(Candidate word) throws IOException {     return (1.0 + frequency(word.term)) / (vocabluarySize + numTerms). }
false;protected;2;3;;protected double scoreBigram(Candidate word, Candidate w_1) throws IOException {     return scoreUnigram(word). }
false;protected;3;3;;protected double scoreTrigram(Candidate word, Candidate w_1, Candidate w_2) throws IOException {     return scoreBigram(word, w_1). }
false;public,static;3;9;;public static BytesRef join(BytesRef separator, BytesRefBuilder result, BytesRef... toJoin) {     result.clear().     for (int i = 0. i < toJoin.length - 1. i++) {         result.append(toJoin[i]).         result.append(separator).     }     result.append(toJoin[toJoin.length - 1]).     return result.get(). }
false;;5;2;;WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelihood, BytesRef separator) throws IOException.
