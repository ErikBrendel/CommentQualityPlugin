commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return super.validateNonNullIndex(). }
false;public;0;3;;public int shardId() {     return this.shardId. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public MultiGetShardRequest preference(String preference) {     this.preference = preference.     return this. }
false;public;0;3;;public String preference() {     return this.preference. }
false;public;0;3;;public boolean realtime() {     return this.realtime. }
false;public;1;4;;public MultiGetShardRequest realtime(boolean realtime) {     this.realtime = realtime.     return this. }
false;public;0;3;;public boolean refresh() {     return this.refresh. }
false;public;1;4;;public MultiGetShardRequest refresh(boolean refresh) {     this.refresh = refresh.     return this. }
false;;2;4;;void add(int location, MultiGetRequest.Item item) {     this.locations.add(location).     this.items.add(item). }
false;public;0;8;;@Override public String[] indices() {     String[] indices = new String[items.size()].     for (int i = 0. i < indices.length. i++) {         indices[i] = items.get(i).index().     }     return indices. }
false;public;1;16;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     locations = new IntArrayList(size).     items = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         locations.add(in.readVInt()).         items.add(MultiGetRequest.Item.readItem(in)).     }     preference = in.readOptionalString().     refresh = in.readBoolean().     realtime = in.readBoolean(). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(locations.size()).     for (int i = 0. i < locations.size(). i++) {         out.writeVInt(locations.get(i)).         items.get(i).writeTo(out).     }     out.writeOptionalString(preference).     out.writeBoolean(refresh).     out.writeBoolean(realtime). }
