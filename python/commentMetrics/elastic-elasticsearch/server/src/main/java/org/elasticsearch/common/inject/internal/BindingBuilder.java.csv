commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public BindingBuilder<T> annotatedWith(Class<? extends Annotation> annotationType) {     annotatedWithInternal(annotationType).     return this. }
false;public;1;5;;@Override public BindingBuilder<T> annotatedWith(Annotation annotation) {     annotatedWithInternal(annotation).     return this. }
false;public;1;4;;@Override public BindingBuilder<T> to(Class<? extends T> implementation) {     return to(Key.get(implementation)). }
false;public;1;4;;@Override public BindingBuilder<T> to(TypeLiteral<? extends T> implementation) {     return to(Key.get(implementation)). }
false;public;1;9;;@Override public BindingBuilder<T> to(Key<? extends T> linkedKey) {     Objects.requireNonNull(linkedKey, "linkedKey").     checkNotTargetted().     BindingImpl<T> base = getBinding().     setBinding(new LinkedBindingImpl<>(base.getSource(), base.getKey(), base.getScoping(), linkedKey)).     return this. }
false;public;1;24;;@Override public void toInstance(T instance) {     checkNotTargetted().     // lookup the injection points, adding any errors to the binder's errors list     Set<InjectionPoint> injectionPoints.     if (instance != null) {         try {             injectionPoints = InjectionPoint.forInstanceMethodsAndFields(instance.getClass()).         } catch (ConfigurationException e) {             for (Message message : e.getErrorMessages()) {                 binder.addError(message).             }             injectionPoints = unmodifiableSet(new HashSet<InjectionPoint>(e.getPartialValue())).         }     } else {         binder.addError(BINDING_TO_NULL).         injectionPoints = emptySet().     }     BindingImpl<T> base = getBinding().     setBinding(new InstanceBindingImpl<>(base.getSource(), base.getKey(), base.getScoping(), injectionPoints, instance)). }
false;public;1;21;;@Override public BindingBuilder<T> toProvider(Provider<? extends T> provider) {     Objects.requireNonNull(provider, "provider").     checkNotTargetted().     // lookup the injection points, adding any errors to the binder's errors list     Set<InjectionPoint> injectionPoints.     try {         injectionPoints = InjectionPoint.forInstanceMethodsAndFields(provider.getClass()).     } catch (ConfigurationException e) {         for (Message message : e.getErrorMessages()) {             binder.addError(message).         }         injectionPoints = unmodifiableSet(new HashSet<InjectionPoint>(e.getPartialValue())).     }     BindingImpl<T> base = getBinding().     setBinding(new ProviderInstanceBindingImpl<>(base.getSource(), base.getKey(), base.getScoping(), injectionPoints, provider)).     return this. }
false;public;1;4;;@Override public BindingBuilder<T> toProvider(Class<? extends Provider<? extends T>> providerType) {     return toProvider(Key.get(providerType)). }
false;public;1;10;;@Override public BindingBuilder<T> toProvider(Key<? extends Provider<? extends T>> providerKey) {     Objects.requireNonNull(providerKey, "providerKey").     checkNotTargetted().     BindingImpl<T> base = getBinding().     setBinding(new LinkedProviderBindingImpl<>(base.getSource(), base.getKey(), base.getScoping(), providerKey)).     return this. }
false;public;0;4;;@Override public String toString() {     return "BindingBuilder<" + getBinding().getKey().getTypeLiteral() + ">". }
