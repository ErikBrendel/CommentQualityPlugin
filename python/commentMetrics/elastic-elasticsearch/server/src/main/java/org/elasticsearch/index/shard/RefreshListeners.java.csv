# id;timestamp;commentText;codeText;commentWords;codeWords
RefreshListeners -> public boolean refreshNeeded();1524684173;Returns true if there are pending listeners.;public boolean refreshNeeded() {_        _        return refreshListeners != null && false == closed__    };returns,true,if,there,are,pending,listeners;public,boolean,refresh,needed,return,refresh,listeners,null,false,closed
RefreshListeners -> public boolean refreshNeeded();1546011771;Returns true if there are pending listeners.;public boolean refreshNeeded() {_        _        return refreshListeners != null && false == closed__    };returns,true,if,there,are,pending,listeners;public,boolean,refresh,needed,return,refresh,listeners,null,false,closed
RefreshListeners -> public boolean refreshNeeded();1547749127;Returns true if there are pending listeners.;public boolean refreshNeeded() {_        _        return refreshListeners != null && false == closed__    };returns,true,if,there,are,pending,listeners;public,boolean,refresh,needed,return,refresh,listeners,null,false,closed
RefreshListeners -> public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier);1524684173;Setup the translog used to find the last refreshed location.;public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier) {_        this.currentRefreshLocationSupplier = currentRefreshLocationSupplier__    };setup,the,translog,used,to,find,the,last,refreshed,location;public,void,set,current,refresh,location,supplier,supplier,translog,location,current,refresh,location,supplier,this,current,refresh,location,supplier,current,refresh,location,supplier
RefreshListeners -> public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier);1546011771;Setup the translog used to find the last refreshed location.;public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier) {_        this.currentRefreshLocationSupplier = currentRefreshLocationSupplier__    };setup,the,translog,used,to,find,the,last,refreshed,location;public,void,set,current,refresh,location,supplier,supplier,translog,location,current,refresh,location,supplier,this,current,refresh,location,supplier,current,refresh,location,supplier
RefreshListeners -> public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier);1547749127;Setup the translog used to find the last refreshed location.;public void setCurrentRefreshLocationSupplier(Supplier<Translog.Location> currentRefreshLocationSupplier) {_        this.currentRefreshLocationSupplier = currentRefreshLocationSupplier__    };setup,the,translog,used,to,find,the,last,refreshed,location;public,void,set,current,refresh,location,supplier,supplier,translog,location,current,refresh,location,supplier,this,current,refresh,location,supplier,current,refresh,location,supplier
RefreshListeners -> public int pendingCount();1524684173;The number of pending listeners.;public int pendingCount() {_        _        List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__        _        return listeners == null ? 0 : listeners.size()__    };the,number,of,pending,listeners;public,int,pending,count,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,return,listeners,null,0,listeners,size
RefreshListeners -> public int pendingCount();1546011771;The number of pending listeners.;public int pendingCount() {_        _        List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__        _        return listeners == null ? 0 : listeners.size()__    };the,number,of,pending,listeners;public,int,pending,count,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,return,listeners,null,0,listeners,size
RefreshListeners -> public int pendingCount();1547749127;The number of pending listeners.;public int pendingCount() {_        _        List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__        _        return listeners == null ? 0 : listeners.size()__    };the,number,of,pending,listeners;public,int,pending,count,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,return,listeners,null,0,listeners,size
RefreshListeners -> public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener);1524684173;Add a listener for refreshes, calling it immediately if the location is already visible. If this runs out of listener slots then it_forces a refresh and calls the listener immediately as well.__@param location the location to listen for_@param listener for the refresh. Called with true if registering the listener ran it out of slots and forced a refresh. Called with_false otherwise._@return did we call the listener (true) or register the listener to call later (false)?;public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener) {_        requireNonNull(listener, "listener cannot be null")__        requireNonNull(location, "location cannot be null")___        if (lastRefreshedLocation != null && lastRefreshedLocation.compareTo(location) >= 0) {_            _            listener.accept(false)__            return true__        }_        synchronized (this) {_            List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__            if (listeners == null) {_                if (closed) {_                    throw new IllegalStateException("can't wait for refresh on a closed index")__                }_                listeners = new ArrayList<>()__                refreshListeners = listeners__            }_            if (listeners.size() < getMaxRefreshListeners.getAsInt()) {_                ThreadContext.StoredContext storedContext = threadContext.newStoredContext(true)__                Consumer<Boolean> contextPreservingListener = forced -> {_                    try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_                        storedContext.restore()__                        listener.accept(forced)__                    }_                }__                _                listeners.add(new Tuple<>(location, contextPreservingListener))__                return false__            }_        }_        _        forceRefresh.run()__        listener.accept(true)__        return true__    };add,a,listener,for,refreshes,calling,it,immediately,if,the,location,is,already,visible,if,this,runs,out,of,listener,slots,then,it,forces,a,refresh,and,calls,the,listener,immediately,as,well,param,location,the,location,to,listen,for,param,listener,for,the,refresh,called,with,true,if,registering,the,listener,ran,it,out,of,slots,and,forced,a,refresh,called,with,false,otherwise,return,did,we,call,the,listener,true,or,register,the,listener,to,call,later,false;public,boolean,add,or,notify,translog,location,location,consumer,boolean,listener,require,non,null,listener,listener,cannot,be,null,require,non,null,location,location,cannot,be,null,if,last,refreshed,location,null,last,refreshed,location,compare,to,location,0,listener,accept,false,return,true,synchronized,this,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,if,listeners,null,if,closed,throw,new,illegal,state,exception,can,t,wait,for,refresh,on,a,closed,index,listeners,new,array,list,refresh,listeners,listeners,if,listeners,size,get,max,refresh,listeners,get,as,int,thread,context,stored,context,stored,context,thread,context,new,stored,context,true,consumer,boolean,context,preserving,listener,forced,try,thread,context,stored,context,ignore,thread,context,stash,context,stored,context,restore,listener,accept,forced,listeners,add,new,tuple,location,context,preserving,listener,return,false,force,refresh,run,listener,accept,true,return,true
RefreshListeners -> public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener);1546011771;Add a listener for refreshes, calling it immediately if the location is already visible. If this runs out of listener slots then it_forces a refresh and calls the listener immediately as well.__@param location the location to listen for_@param listener for the refresh. Called with true if registering the listener ran it out of slots and forced a refresh. Called with_false otherwise._@return did we call the listener (true) or register the listener to call later (false)?;public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener) {_        requireNonNull(listener, "listener cannot be null")__        requireNonNull(location, "location cannot be null")___        if (lastRefreshedLocation != null && lastRefreshedLocation.compareTo(location) >= 0) {_            _            listener.accept(false)__            return true__        }_        synchronized (this) {_            List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__            if (listeners == null) {_                if (closed) {_                    throw new IllegalStateException("can't wait for refresh on a closed index")__                }_                listeners = new ArrayList<>()__                refreshListeners = listeners__            }_            if (refreshForcers == 0 && listeners.size() < getMaxRefreshListeners.getAsInt()) {_                ThreadContext.StoredContext storedContext = threadContext.newStoredContext(true)__                Consumer<Boolean> contextPreservingListener = forced -> {_                    try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_                        storedContext.restore()__                        listener.accept(forced)__                    }_                }__                _                listeners.add(new Tuple<>(location, contextPreservingListener))__                return false__            }_        }_        _        forceRefresh.run()__        listener.accept(true)__        return true__    };add,a,listener,for,refreshes,calling,it,immediately,if,the,location,is,already,visible,if,this,runs,out,of,listener,slots,then,it,forces,a,refresh,and,calls,the,listener,immediately,as,well,param,location,the,location,to,listen,for,param,listener,for,the,refresh,called,with,true,if,registering,the,listener,ran,it,out,of,slots,and,forced,a,refresh,called,with,false,otherwise,return,did,we,call,the,listener,true,or,register,the,listener,to,call,later,false;public,boolean,add,or,notify,translog,location,location,consumer,boolean,listener,require,non,null,listener,listener,cannot,be,null,require,non,null,location,location,cannot,be,null,if,last,refreshed,location,null,last,refreshed,location,compare,to,location,0,listener,accept,false,return,true,synchronized,this,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,if,listeners,null,if,closed,throw,new,illegal,state,exception,can,t,wait,for,refresh,on,a,closed,index,listeners,new,array,list,refresh,listeners,listeners,if,refresh,forcers,0,listeners,size,get,max,refresh,listeners,get,as,int,thread,context,stored,context,stored,context,thread,context,new,stored,context,true,consumer,boolean,context,preserving,listener,forced,try,thread,context,stored,context,ignore,thread,context,stash,context,stored,context,restore,listener,accept,forced,listeners,add,new,tuple,location,context,preserving,listener,return,false,force,refresh,run,listener,accept,true,return,true
RefreshListeners -> public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener);1547749127;Add a listener for refreshes, calling it immediately if the location is already visible. If this runs out of listener slots then it_forces a refresh and calls the listener immediately as well.__@param location the location to listen for_@param listener for the refresh. Called with true if registering the listener ran it out of slots and forced a refresh. Called with_false otherwise._@return did we call the listener (true) or register the listener to call later (false)?;public boolean addOrNotify(Translog.Location location, Consumer<Boolean> listener) {_        requireNonNull(listener, "listener cannot be null")__        requireNonNull(location, "location cannot be null")___        if (lastRefreshedLocation != null && lastRefreshedLocation.compareTo(location) >= 0) {_            _            listener.accept(false)__            return true__        }_        synchronized (this) {_            if (closed) {_                throw new IllegalStateException("can't wait for refresh on a closed index")__            }_            List<Tuple<Translog.Location, Consumer<Boolean>>> listeners = refreshListeners__            final int maxRefreshes = getMaxRefreshListeners.getAsInt()__            if (refreshForcers == 0 && maxRefreshes > 0 && (listeners == null || listeners.size() < maxRefreshes)) {_                ThreadContext.StoredContext storedContext = threadContext.newStoredContext(true)__                Consumer<Boolean> contextPreservingListener = forced -> {_                    try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_                        storedContext.restore()__                        listener.accept(forced)__                    }_                }__                if (listeners == null) {_                    listeners = new ArrayList<>()__                }_                _                listeners.add(new Tuple<>(location, contextPreservingListener))__                refreshListeners = listeners__                return false__            }_        }_        _        forceRefresh.run()__        listener.accept(true)__        return true__    };add,a,listener,for,refreshes,calling,it,immediately,if,the,location,is,already,visible,if,this,runs,out,of,listener,slots,then,it,forces,a,refresh,and,calls,the,listener,immediately,as,well,param,location,the,location,to,listen,for,param,listener,for,the,refresh,called,with,true,if,registering,the,listener,ran,it,out,of,slots,and,forced,a,refresh,called,with,false,otherwise,return,did,we,call,the,listener,true,or,register,the,listener,to,call,later,false;public,boolean,add,or,notify,translog,location,location,consumer,boolean,listener,require,non,null,listener,listener,cannot,be,null,require,non,null,location,location,cannot,be,null,if,last,refreshed,location,null,last,refreshed,location,compare,to,location,0,listener,accept,false,return,true,synchronized,this,if,closed,throw,new,illegal,state,exception,can,t,wait,for,refresh,on,a,closed,index,list,tuple,translog,location,consumer,boolean,listeners,refresh,listeners,final,int,max,refreshes,get,max,refresh,listeners,get,as,int,if,refresh,forcers,0,max,refreshes,0,listeners,null,listeners,size,max,refreshes,thread,context,stored,context,stored,context,thread,context,new,stored,context,true,consumer,boolean,context,preserving,listener,forced,try,thread,context,stored,context,ignore,thread,context,stash,context,stored,context,restore,listener,accept,forced,if,listeners,null,listeners,new,array,list,listeners,add,new,tuple,location,context,preserving,listener,refresh,listeners,listeners,return,false,force,refresh,run,listener,accept,true,return,true
RefreshListeners -> public Releasable forceRefreshes();1546011771;Force-refreshes newly added listeners and forces a refresh if there are currently listeners registered. See {@link #refreshForcers}.;public Releasable forceRefreshes() {_        synchronized (this) {_            assert refreshForcers >= 0__            refreshForcers += 1__        }_        final RunOnce runOnce = new RunOnce(() -> {_            synchronized (RefreshListeners.this) {_                assert refreshForcers > 0__                refreshForcers -= 1__            }_        })__        if (refreshNeeded()) {_            try {_                forceRefresh.run()__            } catch (Exception e) {_                runOnce.run()__                throw e__            }_        }_        assert refreshListeners == null__        return () -> runOnce.run()__    };force,refreshes,newly,added,listeners,and,forces,a,refresh,if,there,are,currently,listeners,registered,see,link,refresh,forcers;public,releasable,force,refreshes,synchronized,this,assert,refresh,forcers,0,refresh,forcers,1,final,run,once,run,once,new,run,once,synchronized,refresh,listeners,this,assert,refresh,forcers,0,refresh,forcers,1,if,refresh,needed,try,force,refresh,run,catch,exception,e,run,once,run,throw,e,assert,refresh,listeners,null,return,run,once,run
RefreshListeners -> public Releasable forceRefreshes();1547749127;Force-refreshes newly added listeners and forces a refresh if there are currently listeners registered. See {@link #refreshForcers}.;public Releasable forceRefreshes() {_        synchronized (this) {_            assert refreshForcers >= 0__            refreshForcers += 1__        }_        final RunOnce runOnce = new RunOnce(() -> {_            synchronized (RefreshListeners.this) {_                assert refreshForcers > 0__                refreshForcers -= 1__            }_        })__        if (refreshNeeded()) {_            try {_                forceRefresh.run()__            } catch (Exception e) {_                runOnce.run()__                throw e__            }_        }_        assert refreshListeners == null__        return () -> runOnce.run()__    };force,refreshes,newly,added,listeners,and,forces,a,refresh,if,there,are,currently,listeners,registered,see,link,refresh,forcers;public,releasable,force,refreshes,synchronized,this,assert,refresh,forcers,0,refresh,forcers,1,final,run,once,run,once,new,run,once,synchronized,refresh,listeners,this,assert,refresh,forcers,0,refresh,forcers,1,if,refresh,needed,try,force,refresh,run,catch,exception,e,run,once,run,throw,e,assert,refresh,listeners,null,return,run,once,run
RefreshListeners -> private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire);1524684173;Fire some listeners. Does nothing if the list of listeners is null.;private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire) {_        if (listenersToFire != null) {_            listenerExecutor.execute(() -> {_                for (Tuple<Translog.Location, Consumer<Boolean>> listener : listenersToFire) {_                    try {_                        listener.v2().accept(false)__                    } catch (Exception e) {_                        logger.warn("Error firing refresh listener", e)__                    }_                }_            })__        }_    };fire,some,listeners,does,nothing,if,the,list,of,listeners,is,null;private,void,fire,listeners,list,tuple,translog,location,consumer,boolean,listeners,to,fire,if,listeners,to,fire,null,listener,executor,execute,for,tuple,translog,location,consumer,boolean,listener,listeners,to,fire,try,listener,v2,accept,false,catch,exception,e,logger,warn,error,firing,refresh,listener,e
RefreshListeners -> private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire);1546011771;Fire some listeners. Does nothing if the list of listeners is null.;private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire) {_        if (listenersToFire != null) {_            listenerExecutor.execute(() -> {_                for (Tuple<Translog.Location, Consumer<Boolean>> listener : listenersToFire) {_                    try {_                        listener.v2().accept(false)__                    } catch (Exception e) {_                        logger.warn("Error firing refresh listener", e)__                    }_                }_            })__        }_    };fire,some,listeners,does,nothing,if,the,list,of,listeners,is,null;private,void,fire,listeners,list,tuple,translog,location,consumer,boolean,listeners,to,fire,if,listeners,to,fire,null,listener,executor,execute,for,tuple,translog,location,consumer,boolean,listener,listeners,to,fire,try,listener,v2,accept,false,catch,exception,e,logger,warn,error,firing,refresh,listener,e
RefreshListeners -> private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire);1547749127;Fire some listeners. Does nothing if the list of listeners is null.;private void fireListeners(List<Tuple<Translog.Location, Consumer<Boolean>>> listenersToFire) {_        if (listenersToFire != null) {_            listenerExecutor.execute(() -> {_                for (Tuple<Translog.Location, Consumer<Boolean>> listener : listenersToFire) {_                    try {_                        listener.v2().accept(false)__                    } catch (Exception e) {_                        logger.warn("Error firing refresh listener", e)__                    }_                }_            })__        }_    };fire,some,listeners,does,nothing,if,the,list,of,listeners,is,null;private,void,fire,listeners,list,tuple,translog,location,consumer,boolean,listeners,to,fire,if,listeners,to,fire,null,listener,executor,execute,for,tuple,translog,location,consumer,boolean,listener,listeners,to,fire,try,listener,v2,accept,false,catch,exception,e,logger,warn,error,firing,refresh,listener,e
