commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The admin client that can be used to perform administrative operations.  */ ;/**  * The admin client that can be used to perform administrative operations.  */ AdminClient admin().
true;;1;1;/**  * Index a JSON source associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param request The index request  * @return The result future  * @see Requests#indexRequest(String)  */ ;/**  * Index a JSON source associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param request The index request  * @return The result future  * @see Requests#indexRequest(String)  */ ActionFuture<IndexResponse> index(IndexRequest request).
true;;2;1;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param request  The index request  * @param listener A listener to be notified with a result  * @see Requests#indexRequest(String)  */ ;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param request  The index request  * @param listener A listener to be notified with a result  * @see Requests#indexRequest(String)  */ void index(IndexRequest request, ActionListener<IndexResponse> listener).
true;;0;1;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  */ ;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  */ IndexRequestBuilder prepareIndex().
true;;1;1;/**  * Updates a document based on a script.  *  * @param request The update request  * @return The result future  */ ;/**  * Updates a document based on a script.  *  * @param request The update request  * @return The result future  */ ActionFuture<UpdateResponse> update(UpdateRequest request).
true;;2;1;/**  * Updates a document based on a script.  *  * @param request  The update request  * @param listener A listener to be notified with a result  */ ;/**  * Updates a document based on a script.  *  * @param request  The update request  * @param listener A listener to be notified with a result  */ void update(UpdateRequest request, ActionListener<UpdateResponse> listener).
true;;0;1;/**  * Updates a document based on a script.  */ ;/**  * Updates a document based on a script.  */ UpdateRequestBuilder prepareUpdate().
true;;3;1;/**  * Updates a document based on a script.  */ ;/**  * Updates a document based on a script.  */ UpdateRequestBuilder prepareUpdate(String index, String type, String id).
true;;2;1;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param index The index to index the document to  * @param type  The type to index the document to  */ ;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param index The index to index the document to  * @param type  The type to index the document to  */ IndexRequestBuilder prepareIndex(String index, String type).
true;;3;1;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param index The index to index the document to  * @param type  The type to index the document to  * @param id    The id of the document  */ ;/**  * Index a document associated with a given index and type.  * <p>  * The id is optional, if it is not provided, one will be generated automatically.  *  * @param index The index to index the document to  * @param type  The type to index the document to  * @param id    The id of the document  */ IndexRequestBuilder prepareIndex(String index, String type, @Nullable String id).
true;;1;1;/**  * Deletes a document from the index based on the index, type and id.  *  * @param request The delete request  * @return The result future  * @see Requests#deleteRequest(String)  */ ;/**  * Deletes a document from the index based on the index, type and id.  *  * @param request The delete request  * @return The result future  * @see Requests#deleteRequest(String)  */ ActionFuture<DeleteResponse> delete(DeleteRequest request).
true;;2;1;/**  * Deletes a document from the index based on the index, type and id.  *  * @param request  The delete request  * @param listener A listener to be notified with a result  * @see Requests#deleteRequest(String)  */ ;/**  * Deletes a document from the index based on the index, type and id.  *  * @param request  The delete request  * @param listener A listener to be notified with a result  * @see Requests#deleteRequest(String)  */ void delete(DeleteRequest request, ActionListener<DeleteResponse> listener).
true;;0;1;/**  * Deletes a document from the index based on the index, type and id.  */ ;/**  * Deletes a document from the index based on the index, type and id.  */ DeleteRequestBuilder prepareDelete().
true;;3;1;/**  * Deletes a document from the index based on the index, type and id.  *  * @param index The index to delete the document from  * @param type  The type of the document to delete  * @param id    The id of the document to delete  */ ;/**  * Deletes a document from the index based on the index, type and id.  *  * @param index The index to delete the document from  * @param type  The type of the document to delete  * @param id    The id of the document to delete  */ DeleteRequestBuilder prepareDelete(String index, String type, String id).
true;;1;1;/**  * Executes a bulk of index / delete operations.  *  * @param request The bulk request  * @return The result future  * @see org.elasticsearch.client.Requests#bulkRequest()  */ ;/**  * Executes a bulk of index / delete operations.  *  * @param request The bulk request  * @return The result future  * @see org.elasticsearch.client.Requests#bulkRequest()  */ ActionFuture<BulkResponse> bulk(BulkRequest request).
true;;2;1;/**  * Executes a bulk of index / delete operations.  *  * @param request  The bulk request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#bulkRequest()  */ ;/**  * Executes a bulk of index / delete operations.  *  * @param request  The bulk request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#bulkRequest()  */ void bulk(BulkRequest request, ActionListener<BulkResponse> listener).
true;;0;1;/**  * Executes a bulk of index / delete operations.  */ ;/**  * Executes a bulk of index / delete operations.  */ BulkRequestBuilder prepareBulk().
true;;2;1;/**  * Executes a bulk of index / delete operations with default index and/or type  */ ;/**  * Executes a bulk of index / delete operations with default index and/or type  */ BulkRequestBuilder prepareBulk(@Nullable String globalIndex, @Nullable String globalType).
true;;1;1;/**  * Gets the document that was indexed from an index with a type and id.  *  * @param request The get request  * @return The result future  * @see Requests#getRequest(String)  */ ;/**  * Gets the document that was indexed from an index with a type and id.  *  * @param request The get request  * @return The result future  * @see Requests#getRequest(String)  */ ActionFuture<GetResponse> get(GetRequest request).
true;;2;1;/**  * Gets the document that was indexed from an index with a type and id.  *  * @param request  The get request  * @param listener A listener to be notified with a result  * @see Requests#getRequest(String)  */ ;/**  * Gets the document that was indexed from an index with a type and id.  *  * @param request  The get request  * @param listener A listener to be notified with a result  * @see Requests#getRequest(String)  */ void get(GetRequest request, ActionListener<GetResponse> listener).
true;;0;1;/**  * Gets the document that was indexed from an index with a type and id.  */ ;/**  * Gets the document that was indexed from an index with a type and id.  */ GetRequestBuilder prepareGet().
true;;3;1;/**  * Gets the document that was indexed from an index with a type (optional) and id.  */ ;/**  * Gets the document that was indexed from an index with a type (optional) and id.  */ GetRequestBuilder prepareGet(String index, @Nullable String type, String id).
true;;1;1;/**  * Multi get documents.  */ ;/**  * Multi get documents.  */ ActionFuture<MultiGetResponse> multiGet(MultiGetRequest request).
true;;2;1;/**  * Multi get documents.  */ ;/**  * Multi get documents.  */ void multiGet(MultiGetRequest request, ActionListener<MultiGetResponse> listener).
true;;0;1;/**  * Multi get documents.  */ ;/**  * Multi get documents.  */ MultiGetRequestBuilder prepareMultiGet().
true;;1;1;/**  * Search across one or more indices and one or more types with a query.  *  * @param request The search request  * @return The result future  * @see Requests#searchRequest(String...)  */ ;/**  * Search across one or more indices and one or more types with a query.  *  * @param request The search request  * @return The result future  * @see Requests#searchRequest(String...)  */ ActionFuture<SearchResponse> search(SearchRequest request).
true;;2;1;/**  * Search across one or more indices and one or more types with a query.  *  * @param request  The search request  * @param listener A listener to be notified of the result  * @see Requests#searchRequest(String...)  */ ;/**  * Search across one or more indices and one or more types with a query.  *  * @param request  The search request  * @param listener A listener to be notified of the result  * @see Requests#searchRequest(String...)  */ void search(SearchRequest request, ActionListener<SearchResponse> listener).
true;;1;1;/**  * Search across one or more indices and one or more types with a query.  */ ;/**  * Search across one or more indices and one or more types with a query.  */ SearchRequestBuilder prepareSearch(String... indices).
true;;1;1;/**  * A search scroll request to continue searching a previous scrollable search request.  *  * @param request The search scroll request  * @return The result future  * @see Requests#searchScrollRequest(String)  */ ;/**  * A search scroll request to continue searching a previous scrollable search request.  *  * @param request The search scroll request  * @return The result future  * @see Requests#searchScrollRequest(String)  */ ActionFuture<SearchResponse> searchScroll(SearchScrollRequest request).
true;;2;1;/**  * A search scroll request to continue searching a previous scrollable search request.  *  * @param request  The search scroll request  * @param listener A listener to be notified of the result  * @see Requests#searchScrollRequest(String)  */ ;/**  * A search scroll request to continue searching a previous scrollable search request.  *  * @param request  The search scroll request  * @param listener A listener to be notified of the result  * @see Requests#searchScrollRequest(String)  */ void searchScroll(SearchScrollRequest request, ActionListener<SearchResponse> listener).
true;;1;1;/**  * A search scroll request to continue searching a previous scrollable search request.  */ ;/**  * A search scroll request to continue searching a previous scrollable search request.  */ SearchScrollRequestBuilder prepareSearchScroll(String scrollId).
true;;1;1;/**  * Performs multiple search requests.  */ ;/**  * Performs multiple search requests.  */ ActionFuture<MultiSearchResponse> multiSearch(MultiSearchRequest request).
true;;2;1;/**  * Performs multiple search requests.  */ ;/**  * Performs multiple search requests.  */ void multiSearch(MultiSearchRequest request, ActionListener<MultiSearchResponse> listener).
true;;0;1;/**  * Performs multiple search requests.  */ ;/**  * Performs multiple search requests.  */ MultiSearchRequestBuilder prepareMultiSearch().
true;;1;1;/**  * An action that returns the term vectors for a specific document.  *  * @param request The term vector request  * @return The response future  */ ;/**  * An action that returns the term vectors for a specific document.  *  * @param request The term vector request  * @return The response future  */ ActionFuture<TermVectorsResponse> termVectors(TermVectorsRequest request).
true;;2;1;/**  * An action that returns the term vectors for a specific document.  *  * @param request The term vector request  */ ;/**  * An action that returns the term vectors for a specific document.  *  * @param request The term vector request  */ void termVectors(TermVectorsRequest request, ActionListener<TermVectorsResponse> listener).
true;;0;1;/**  * Builder for the term vector request.  */ ;/**  * Builder for the term vector request.  */ TermVectorsRequestBuilder prepareTermVectors().
true;;3;1;/**  * Builder for the term vector request.  *  * @param index The index to load the document from  * @param type  The type of the document  * @param id    The id of the document  */ ;/**  * Builder for the term vector request.  *  * @param index The index to load the document from  * @param type  The type of the document  * @param id    The id of the document  */ TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id).
true;;1;1;/**  * Multi get term vectors.  */ ;/**  * Multi get term vectors.  */ ActionFuture<MultiTermVectorsResponse> multiTermVectors(MultiTermVectorsRequest request).
true;;2;1;/**  * Multi get term vectors.  */ ;/**  * Multi get term vectors.  */ void multiTermVectors(MultiTermVectorsRequest request, ActionListener<MultiTermVectorsResponse> listener).
true;;0;1;/**  * Multi get term vectors.  */ ;/**  * Multi get term vectors.  */ MultiTermVectorsRequestBuilder prepareMultiTermVectors().
true;;3;1;/**  * Computes a score explanation for the specified request.  *  * @param index The index this explain is targeted for  * @param type  The type this explain is targeted for  * @param id    The document identifier this explain is targeted for  */ ;/**  * Computes a score explanation for the specified request.  *  * @param index The index this explain is targeted for  * @param type  The type this explain is targeted for  * @param id    The document identifier this explain is targeted for  */ ExplainRequestBuilder prepareExplain(String index, String type, String id).
true;;1;1;/**  * Computes a score explanation for the specified request.  *  * @param request The request encapsulating the query and document identifier to compute a score explanation for  */ ;/**  * Computes a score explanation for the specified request.  *  * @param request The request encapsulating the query and document identifier to compute a score explanation for  */ ActionFuture<ExplainResponse> explain(ExplainRequest request).
true;;2;1;/**  * Computes a score explanation for the specified request.  *  * @param request  The request encapsulating the query and document identifier to compute a score explanation for  * @param listener A listener to be notified of the result  */ ;/**  * Computes a score explanation for the specified request.  *  * @param request  The request encapsulating the query and document identifier to compute a score explanation for  * @param listener A listener to be notified of the result  */ void explain(ExplainRequest request, ActionListener<ExplainResponse> listener).
true;;0;1;/**  * Clears the search contexts associated with specified scroll ids.  */ ;/**  * Clears the search contexts associated with specified scroll ids.  */ ClearScrollRequestBuilder prepareClearScroll().
true;;1;1;/**  * Clears the search contexts associated with specified scroll ids.  */ ;/**  * Clears the search contexts associated with specified scroll ids.  */ ActionFuture<ClearScrollResponse> clearScroll(ClearScrollRequest request).
true;;2;1;/**  * Clears the search contexts associated with specified scroll ids.  */ ;/**  * Clears the search contexts associated with specified scroll ids.  */ void clearScroll(ClearScrollRequest request, ActionListener<ClearScrollResponse> listener).
true;;1;1;/**  * Builder for the field capabilities request.  */ ;/**  * Builder for the field capabilities request.  */ FieldCapabilitiesRequestBuilder prepareFieldCaps(String... indices).
true;;1;1;/**  * An action that returns the field capabilities from the provided request  */ ;/**  * An action that returns the field capabilities from the provided request  */ ActionFuture<FieldCapabilitiesResponse> fieldCaps(FieldCapabilitiesRequest request).
true;;2;1;/**  * An action that returns the field capabilities from the provided request  */ ;/**  * An action that returns the field capabilities from the provided request  */ void fieldCaps(FieldCapabilitiesRequest request, ActionListener<FieldCapabilitiesResponse> listener).
true;;0;1;/**  * Returns this clients settings  */ ;/**  * Returns this clients settings  */ Settings settings().
true;;1;1;/**  * Returns a new lightweight Client that applies all given headers to each of the requests  * issued from it.  */ ;/**  * Returns a new lightweight Client that applies all given headers to each of the requests  * issued from it.  */ Client filterWithHeader(Map<String, String> headers).
true;default;1;3;/**  * Returns a client to a remote cluster with the given cluster alias.  *  * @throws IllegalArgumentException if the given clusterAlias doesn't exist  * @throws UnsupportedOperationException if this functionality is not available on this client.  */ ;/**  * Returns a client to a remote cluster with the given cluster alias.  *  * @throws IllegalArgumentException if the given clusterAlias doesn't exist  * @throws UnsupportedOperationException if this functionality is not available on this client.  */ default Client getRemoteClusterClient(String clusterAlias) {     throw new UnsupportedOperationException("this client doesn't support remote cluster connections"). }
