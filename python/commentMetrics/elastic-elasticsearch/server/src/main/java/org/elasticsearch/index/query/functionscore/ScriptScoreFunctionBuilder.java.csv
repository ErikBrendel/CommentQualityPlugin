commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     script.writeTo(out). }
false;public;0;3;;public Script getScript() {     return this.script. }
false;public;2;6;;@Override public void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(getName()).     builder.field(Script.SCRIPT_PARSE_FIELD.getPreferredName(), script).     builder.endObject(). }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;protected;1;4;;@Override protected boolean doEquals(ScriptScoreFunctionBuilder functionBuilder) {     return Objects.equals(this.script, functionBuilder.script). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(this.script). }
false;protected;1;10;;@Override protected ScoreFunction doToFunction(QueryShardContext context) {     try {         ScoreScript.Factory factory = context.getScriptService().compile(script, ScoreScript.CONTEXT).         ScoreScript.LeafFactory searchScript = factory.newFactory(script.getParams(), context.lookup()).         return new ScriptScoreFunction(script, searchScript).     } catch (Exception e) {         throw new QueryShardException(context, "script_score: the script could not be loaded", e).     } }
false;public,static;1;23;;public static ScriptScoreFunctionBuilder fromXContent(XContentParser parser) throws IOException, ParsingException {     Script script = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else {             if (Script.SCRIPT_PARSE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 script = Script.parse(parser).             } else {                 throw new ParsingException(parser.getTokenLocation(), NAME + " query does not support [" + currentFieldName + "]").             }         }     }     if (script == null) {         throw new ParsingException(parser.getTokenLocation(), NAME + " requires 'script' field").     }     return new ScriptScoreFunctionBuilder(script). }
