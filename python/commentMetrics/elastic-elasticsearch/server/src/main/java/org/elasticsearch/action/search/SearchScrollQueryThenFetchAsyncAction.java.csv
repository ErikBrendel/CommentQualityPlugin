commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;3;;protected void onFirstPhaseResult(int shardId, ScrollQuerySearchResult result) {     queryResults.setOnce(shardId, result.queryResult()). }
false;protected;3;5;;@Override protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest, SearchActionListener<ScrollQuerySearchResult> searchActionListener) {     searchTransportService.sendExecuteScrollQuery(connection, internalRequest, task, searchActionListener). }
false;protected;1;7;;@Override protected void innerOnResponse(FetchSearchResult response) {     fetchResults.setOnce(response.getShardIndex(), response).     if (counter.countDown()) {         sendResponse(reducedQueryPhase, fetchResults).     } }
false;public;1;6;;@Override public void onFailure(Exception t) {     onShardFailure(getName(), counter, querySearchResult.getRequestId(), t, querySearchResult.getSearchShardTarget(), () -> sendResponsePhase(reducedQueryPhase, fetchResults)). }
false;public;0;52;;@Override public void run() {     final SearchPhaseController.ReducedQueryPhase reducedQueryPhase = searchPhaseController.reducedScrollQueryPhase(queryResults.asList()).     ScoreDoc[] scoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs.     if (scoreDocs.length == 0) {         sendResponse(reducedQueryPhase, fetchResults).         return.     }     final IntArrayList[] docIdsToLoad = searchPhaseController.fillDocIdsToLoad(queryResults.length(), scoreDocs).     final ScoreDoc[] lastEmittedDocPerShard = searchPhaseController.getLastEmittedDocPerShard(reducedQueryPhase, queryResults.length()).     final CountDown counter = new CountDown(docIdsToLoad.length).     for (int i = 0. i < docIdsToLoad.length. i++) {         final int index = i.         final IntArrayList docIds = docIdsToLoad[index].         if (docIds != null) {             final QuerySearchResult querySearchResult = queryResults.get(index).             ScoreDoc lastEmittedDoc = lastEmittedDocPerShard[index].             ShardFetchRequest shardFetchRequest = new ShardFetchRequest(querySearchResult.getRequestId(), docIds, lastEmittedDoc).             SearchShardTarget searchShardTarget = querySearchResult.getSearchShardTarget().             DiscoveryNode node = clusterNodeLookup.apply(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId()).             assert node != null : "target node is null in secondary phase".             Transport.Connection connection = getConnection(searchShardTarget.getClusterAlias(), node).             searchTransportService.sendExecuteFetchScroll(connection, shardFetchRequest, task, new SearchActionListener<FetchSearchResult>(querySearchResult.getSearchShardTarget(), index) {                  @Override                 protected void innerOnResponse(FetchSearchResult response) {                     fetchResults.setOnce(response.getShardIndex(), response).                     if (counter.countDown()) {                         sendResponse(reducedQueryPhase, fetchResults).                     }                 }                  @Override                 public void onFailure(Exception t) {                     onShardFailure(getName(), counter, querySearchResult.getRequestId(), t, querySearchResult.getSearchShardTarget(), () -> sendResponsePhase(reducedQueryPhase, fetchResults)).                 }             }).         } else {             // which can have null values so we have to count them down too             if (counter.countDown()) {                 sendResponse(reducedQueryPhase, fetchResults).             }         }     } }
false;protected;1;57;;@Override protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {     return new SearchPhase("fetch") {          @Override         public void run() {             final SearchPhaseController.ReducedQueryPhase reducedQueryPhase = searchPhaseController.reducedScrollQueryPhase(queryResults.asList()).             ScoreDoc[] scoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs.             if (scoreDocs.length == 0) {                 sendResponse(reducedQueryPhase, fetchResults).                 return.             }             final IntArrayList[] docIdsToLoad = searchPhaseController.fillDocIdsToLoad(queryResults.length(), scoreDocs).             final ScoreDoc[] lastEmittedDocPerShard = searchPhaseController.getLastEmittedDocPerShard(reducedQueryPhase, queryResults.length()).             final CountDown counter = new CountDown(docIdsToLoad.length).             for (int i = 0. i < docIdsToLoad.length. i++) {                 final int index = i.                 final IntArrayList docIds = docIdsToLoad[index].                 if (docIds != null) {                     final QuerySearchResult querySearchResult = queryResults.get(index).                     ScoreDoc lastEmittedDoc = lastEmittedDocPerShard[index].                     ShardFetchRequest shardFetchRequest = new ShardFetchRequest(querySearchResult.getRequestId(), docIds, lastEmittedDoc).                     SearchShardTarget searchShardTarget = querySearchResult.getSearchShardTarget().                     DiscoveryNode node = clusterNodeLookup.apply(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId()).                     assert node != null : "target node is null in secondary phase".                     Transport.Connection connection = getConnection(searchShardTarget.getClusterAlias(), node).                     searchTransportService.sendExecuteFetchScroll(connection, shardFetchRequest, task, new SearchActionListener<FetchSearchResult>(querySearchResult.getSearchShardTarget(), index) {                          @Override                         protected void innerOnResponse(FetchSearchResult response) {                             fetchResults.setOnce(response.getShardIndex(), response).                             if (counter.countDown()) {                                 sendResponse(reducedQueryPhase, fetchResults).                             }                         }                          @Override                         public void onFailure(Exception t) {                             onShardFailure(getName(), counter, querySearchResult.getRequestId(), t, querySearchResult.getSearchShardTarget(), () -> sendResponsePhase(reducedQueryPhase, fetchResults)).                         }                     }).                 } else {                     // which can have null values so we have to count them down too                     if (counter.countDown()) {                         sendResponse(reducedQueryPhase, fetchResults).                     }                 }             }         }     }. }
