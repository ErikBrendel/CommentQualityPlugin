commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Sets all flags to return all stats.  */ ;/**  * Sets all flags to return all stats.  */ public IndicesStatsRequest all() {     flags.all().     return this. }
true;public;0;4;/**  * Clears all stats.  */ ;/**  * Clears all stats.  */ public IndicesStatsRequest clear() {     flags.clear().     return this. }
true;public;0;3;/**  * Returns the underlying stats flags.  */ ;/**  * Returns the underlying stats flags.  */ public CommonStatsFlags flags() {     return flags. }
true;public;1;4;/**  * Sets the underlying stats flags.  */ ;/**  * Sets the underlying stats flags.  */ public IndicesStatsRequest flags(CommonStatsFlags flags) {     this.flags = flags.     return this. }
true;public;1;4;/**  * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when  * enabled, returning specific indexing stats for those types.  */ ;/**  * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when  * enabled, returning specific indexing stats for those types.  */ public IndicesStatsRequest types(String... types) {     flags.types(types).     return this. }
true;public;0;3;/**  * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when  * enabled, returning specific indexing stats for those types.  */ ;/**  * Document types to return stats for. Mainly affects {@link #indexing(boolean)} when  * enabled, returning specific indexing stats for those types.  */ public String[] types() {     return this.flags.types(). }
true;public;1;4;/**  * Sets specific search group stats to retrieve the stats for. Mainly affects search  * when enabled.  */ ;/**  * Sets specific search group stats to retrieve the stats for. Mainly affects search  * when enabled.  */ public IndicesStatsRequest groups(String... groups) {     flags.groups(groups).     return this. }
false;public;0;3;;public String[] groups() {     return this.flags.groups(). }
false;public;1;4;;public IndicesStatsRequest docs(boolean docs) {     flags.set(Flag.Docs, docs).     return this. }
false;public;0;3;;public boolean docs() {     return flags.isSet(Flag.Docs). }
false;public;1;4;;public IndicesStatsRequest store(boolean store) {     flags.set(Flag.Store, store).     return this. }
false;public;0;3;;public boolean store() {     return flags.isSet(Flag.Store). }
false;public;1;5;;public IndicesStatsRequest indexing(boolean indexing) {     flags.set(Flag.Indexing, indexing).     return this. }
false;public;0;3;;public boolean indexing() {     return flags.isSet(Flag.Indexing). }
false;public;1;4;;public IndicesStatsRequest get(boolean get) {     flags.set(Flag.Get, get).     return this. }
false;public;0;3;;public boolean get() {     return flags.isSet(Flag.Get). }
false;public;1;4;;public IndicesStatsRequest search(boolean search) {     flags.set(Flag.Search, search).     return this. }
false;public;0;3;;public boolean search() {     return flags.isSet(Flag.Search). }
false;public;1;4;;public IndicesStatsRequest merge(boolean merge) {     flags.set(Flag.Merge, merge).     return this. }
false;public;0;3;;public boolean merge() {     return flags.isSet(Flag.Merge). }
false;public;1;4;;public IndicesStatsRequest refresh(boolean refresh) {     flags.set(Flag.Refresh, refresh).     return this. }
false;public;0;3;;public boolean refresh() {     return flags.isSet(Flag.Refresh). }
false;public;1;4;;public IndicesStatsRequest flush(boolean flush) {     flags.set(Flag.Flush, flush).     return this. }
false;public;0;3;;public boolean flush() {     return flags.isSet(Flag.Flush). }
false;public;1;4;;public IndicesStatsRequest warmer(boolean warmer) {     flags.set(Flag.Warmer, warmer).     return this. }
false;public;0;3;;public boolean warmer() {     return flags.isSet(Flag.Warmer). }
false;public;1;4;;public IndicesStatsRequest queryCache(boolean queryCache) {     flags.set(Flag.QueryCache, queryCache).     return this. }
false;public;0;3;;public boolean queryCache() {     return flags.isSet(Flag.QueryCache). }
false;public;1;4;;public IndicesStatsRequest fieldData(boolean fieldData) {     flags.set(Flag.FieldData, fieldData).     return this. }
false;public;0;3;;public boolean fieldData() {     return flags.isSet(Flag.FieldData). }
false;public;1;4;;public IndicesStatsRequest segments(boolean segments) {     flags.set(Flag.Segments, segments).     return this. }
false;public;0;3;;public boolean segments() {     return flags.isSet(Flag.Segments). }
false;public;1;4;;public IndicesStatsRequest fieldDataFields(String... fieldDataFields) {     flags.fieldDataFields(fieldDataFields).     return this. }
false;public;0;3;;public String[] fieldDataFields() {     return flags.fieldDataFields(). }
false;public;1;4;;public IndicesStatsRequest completion(boolean completion) {     flags.set(Flag.Completion, completion).     return this. }
false;public;0;3;;public boolean completion() {     return flags.isSet(Flag.Completion). }
false;public;1;4;;public IndicesStatsRequest completionFields(String... completionDataFields) {     flags.completionDataFields(completionDataFields).     return this. }
false;public;0;3;;public String[] completionFields() {     return flags.completionDataFields(). }
false;public;1;4;;public IndicesStatsRequest translog(boolean translog) {     flags.set(Flag.Translog, translog).     return this. }
false;public;0;3;;public boolean translog() {     return flags.isSet(Flag.Translog). }
false;public;1;4;;public IndicesStatsRequest requestCache(boolean requestCache) {     flags.set(Flag.RequestCache, requestCache).     return this. }
false;public;0;3;;public boolean requestCache() {     return flags.isSet(Flag.RequestCache). }
false;public;1;4;;public IndicesStatsRequest recovery(boolean recovery) {     flags.set(Flag.Recovery, recovery).     return this. }
false;public;0;3;;public boolean recovery() {     return flags.isSet(Flag.Recovery). }
false;public;0;3;;public boolean includeSegmentFileSizes() {     return flags.includeSegmentFileSizes(). }
false;public;1;4;;public IndicesStatsRequest includeSegmentFileSizes(boolean includeSegmentFileSizes) {     flags.includeSegmentFileSizes(includeSegmentFileSizes).     return this. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     flags.writeTo(out). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     flags = new CommonStatsFlags(in). }
