commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;public static JvmInfo jvmInfo() {     SecurityManager sm = System.getSecurityManager().     if (sm != null) {         sm.checkPermission(new ManagementPermission("monitor")).         sm.checkPropertyAccess("*").     }     return INSTANCE. }
false;public;1;24;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(pid).     out.writeString(version).     out.writeString(vmName).     out.writeString(vmVersion).     out.writeString(vmVendor).     out.writeLong(startTime).     out.writeInt(inputArguments.length).     for (String inputArgument : inputArguments) {         out.writeString(inputArgument).     }     out.writeString(bootClassPath).     out.writeString(classPath).     out.writeVInt(this.systemProperties.size()).     for (Map.Entry<String, String> entry : systemProperties.entrySet()) {         out.writeString(entry.getKey()).         out.writeString(entry.getValue()).     }     mem.writeTo(out).     out.writeStringArray(gcCollectors).     out.writeStringArray(memoryPools).     out.writeString(useCompressedOops). }
true;public;0;3;/**  * The process id.  */ ;/**  * The process id.  */ public long pid() {     return this.pid. }
true;public;0;3;/**  * The process id.  */ ;/**  * The process id.  */ public long getPid() {     return pid. }
false;public;0;3;;public String version() {     return this.version. }
false;public;0;3;;public String getVersion() {     return this.version. }
false;public;0;20;;public int versionAsInteger() {     try {         int i = 0.         StringBuilder sVersion = new StringBuilder().         for (. i < version.length(). i++) {             if (!Character.isDigit(version.charAt(i)) && version.charAt(i) != '.') {                 break.             }             if (version.charAt(i) != '.') {                 sVersion.append(version.charAt(i)).             }         }         if (i == 0) {             return -1.         }         return Integer.parseInt(sVersion.toString()).     } catch (Exception e) {         return -1.     } }
false;public;0;40;;public int versionUpdatePack() {     try {         int i = 0.         StringBuilder sVersion = new StringBuilder().         for (. i < version.length(). i++) {             if (!Character.isDigit(version.charAt(i)) && version.charAt(i) != '.') {                 break.             }             if (version.charAt(i) != '.') {                 sVersion.append(version.charAt(i)).             }         }         if (i == 0) {             return -1.         }         Integer.parseInt(sVersion.toString()).         int from.         if (version.charAt(i) == '_') {             // 1.7.0_4             from = ++i.         } else if (version.charAt(i) == '-' && version.charAt(i + 1) == 'u') {             // 1.7.0-u2-b21             i = i + 2.             from = i.         } else {             return -1.         }         for (. i < version.length(). i++) {             if (!Character.isDigit(version.charAt(i)) && version.charAt(i) != '.') {                 break.             }         }         if (from == i) {             return -1.         }         return Integer.parseInt(version.substring(from, i)).     } catch (Exception e) {         return -1.     } }
false;public;0;3;;public String getVmName() {     return this.vmName. }
false;public;0;3;;public String getVmVersion() {     return this.vmVersion. }
false;public;0;3;;public String getVmVendor() {     return this.vmVendor. }
false;public;0;3;;public long getStartTime() {     return this.startTime. }
false;public;0;3;;public Mem getMem() {     return this.mem. }
false;public;0;3;;public String[] getInputArguments() {     return this.inputArguments. }
false;public;0;3;;public String getBootClassPath() {     return this.bootClassPath. }
false;public;0;3;;public String getClassPath() {     return this.classPath. }
false;public;0;3;;public Map<String, String> getSystemProperties() {     return this.systemProperties. }
false;public;0;3;;public long getConfiguredInitialHeapSize() {     return configuredInitialHeapSize. }
false;public;0;3;;public long getConfiguredMaxHeapSize() {     return configuredMaxHeapSize. }
false;public;0;3;;public String onError() {     return onError. }
false;public;0;3;;public String onOutOfMemoryError() {     return onOutOfMemoryError. }
true;public;0;3;/**  * The value of the JVM flag UseCompressedOops, if available otherwise  * "unknown". The value "unknown" indicates that an attempt was  * made to obtain the value of the flag on this JVM and the attempt  * failed.  *  * @return the value of the JVM flag UseCompressedOops or "unknown"  */ ;/**  * The value of the JVM flag UseCompressedOops, if available otherwise  * "unknown". The value "unknown" indicates that an attempt was  * made to obtain the value of the flag on this JVM and the attempt  * failed.  *  * @return the value of the JVM flag UseCompressedOops or "unknown"  */ public String useCompressedOops() {     return this.useCompressedOops. }
false;public;0;3;;public String useG1GC() {     return this.useG1GC. }
false;public;0;3;;public String useSerialGC() {     return this.useSerialGC. }
false;public;0;3;;public String[] getGcCollectors() {     return gcCollectors. }
false;public;0;3;;public String[] getMemoryPools() {     return memoryPools. }
false;public;2;28;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.JVM).     builder.field(Fields.PID, pid).     builder.field(Fields.VERSION, version).     builder.field(Fields.VM_NAME, vmName).     builder.field(Fields.VM_VERSION, vmVersion).     builder.field(Fields.VM_VENDOR, vmVendor).     builder.timeField(Fields.START_TIME_IN_MILLIS, Fields.START_TIME, startTime).     builder.startObject(Fields.MEM).     builder.humanReadableField(Fields.HEAP_INIT_IN_BYTES, Fields.HEAP_INIT, new ByteSizeValue(mem.heapInit)).     builder.humanReadableField(Fields.HEAP_MAX_IN_BYTES, Fields.HEAP_MAX, new ByteSizeValue(mem.heapMax)).     builder.humanReadableField(Fields.NON_HEAP_INIT_IN_BYTES, Fields.NON_HEAP_INIT, new ByteSizeValue(mem.nonHeapInit)).     builder.humanReadableField(Fields.NON_HEAP_MAX_IN_BYTES, Fields.NON_HEAP_MAX, new ByteSizeValue(mem.nonHeapMax)).     builder.humanReadableField(Fields.DIRECT_MAX_IN_BYTES, Fields.DIRECT_MAX, new ByteSizeValue(mem.directMemoryMax)).     builder.endObject().     builder.array(Fields.GC_COLLECTORS, gcCollectors).     builder.array(Fields.MEMORY_POOLS, memoryPools).     builder.field(Fields.USING_COMPRESSED_OOPS, useCompressedOops).     builder.field(Fields.INPUT_ARGUMENTS, inputArguments).     builder.endObject().     return builder. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(heapInit).     out.writeVLong(heapMax).     out.writeVLong(nonHeapInit).     out.writeVLong(nonHeapMax).     out.writeVLong(directMemoryMax). }
false;public;0;3;;public ByteSizeValue getHeapInit() {     return new ByteSizeValue(heapInit). }
false;public;0;3;;public ByteSizeValue getHeapMax() {     return new ByteSizeValue(heapMax). }
false;public;0;3;;public ByteSizeValue getNonHeapInit() {     return new ByteSizeValue(nonHeapInit). }
false;public;0;3;;public ByteSizeValue getNonHeapMax() {     return new ByteSizeValue(nonHeapMax). }
false;public;0;3;;public ByteSizeValue getDirectMemoryMax() {     return new ByteSizeValue(directMemoryMax). }
