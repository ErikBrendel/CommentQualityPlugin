commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "nodes_info_action". }
false;public;2;46;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String[] nodeIds.     Set<String> metrics.     // this means one must differentiate between allowed metrics and arbitrary node ids in the same place     if (request.hasParam("nodeId") && !request.hasParam("metrics")) {         Set<String> metricsOrNodeIds = Strings.tokenizeByCommaToSet(request.param("nodeId", "_all")).         boolean isMetricsOnly = ALLOWED_METRICS.containsAll(metricsOrNodeIds).         if (isMetricsOnly) {             nodeIds = new String[] { "_all" }.             metrics = metricsOrNodeIds.         } else {             nodeIds = metricsOrNodeIds.toArray(new String[] {}).             metrics = Sets.newHashSet("_all").         }     } else {         nodeIds = Strings.splitStringByCommaToArray(request.param("nodeId", "_all")).         metrics = Strings.tokenizeByCommaToSet(request.param("metrics", "_all")).     }     final NodesInfoRequest nodesInfoRequest = new NodesInfoRequest(nodeIds).     nodesInfoRequest.timeout(request.param("timeout")).     // shortcut, don't do checks if only all is specified     if (metrics.size() == 1 && metrics.contains("_all")) {         nodesInfoRequest.all().     } else {         nodesInfoRequest.clear().         nodesInfoRequest.settings(metrics.contains("settings")).         nodesInfoRequest.os(metrics.contains("os")).         nodesInfoRequest.process(metrics.contains("process")).         nodesInfoRequest.jvm(metrics.contains("jvm")).         nodesInfoRequest.threadPool(metrics.contains("thread_pool")).         nodesInfoRequest.transport(metrics.contains("transport")).         nodesInfoRequest.http(metrics.contains("http")).         nodesInfoRequest.plugins(metrics.contains("plugins")).         nodesInfoRequest.ingest(metrics.contains("ingest")).         nodesInfoRequest.indices(metrics.contains("indices")).     }     settingsFilter.addFilterSettingParams(request).     return channel -> client.admin().cluster().nodesInfo(nodesInfoRequest, new NodesResponseRestListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return Settings.FORMAT_PARAMS. }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
