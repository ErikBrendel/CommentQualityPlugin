# id;timestamp;commentText;codeText;commentWords;codeWords
AliasOrIndex -> boolean isAlias()_;1524684173;@return whether this an alias or concrete index;boolean isAlias()_;return,whether,this,an,alias,or,concrete,index;boolean,is,alias
AliasOrIndex -> boolean isAlias()_;1529082965;@return whether this an alias or concrete index;boolean isAlias()_;return,whether,this,an,alias,or,concrete,index;boolean,is,alias
AliasOrIndex -> boolean isAlias()_;1531179852;@return whether this an alias or concrete index;boolean isAlias()_;return,whether,this,an,alias,or,concrete,index;boolean,is,alias
AliasOrIndex -> boolean isAlias()_;1540847035;@return whether this an alias or concrete index;boolean isAlias()_;return,whether,this,an,alias,or,concrete,index;boolean,is,alias
AliasOrIndex -> boolean isAlias()_;1544702062;@return whether this an alias or concrete index;boolean isAlias()_;return,whether,this,an,alias,or,concrete,index;boolean,is,alias
AliasOrIndex -> Index -> public IndexMetaData getIndex();1524684173;@return If this is an concrete index, its {@link IndexMetaData};public IndexMetaData getIndex() {_            return concreteIndex__        };return,if,this,is,an,concrete,index,its,link,index,meta,data;public,index,meta,data,get,index,return,concrete,index
AliasOrIndex -> Index -> public IndexMetaData getIndex();1529082965;@return If this is an concrete index, its {@link IndexMetaData};public IndexMetaData getIndex() {_            return concreteIndex__        };return,if,this,is,an,concrete,index,its,link,index,meta,data;public,index,meta,data,get,index,return,concrete,index
AliasOrIndex -> Index -> public IndexMetaData getIndex();1531179852;@return If this is an concrete index, its {@link IndexMetaData};public IndexMetaData getIndex() {_            return concreteIndex__        };return,if,this,is,an,concrete,index,its,link,index,meta,data;public,index,meta,data,get,index,return,concrete,index
AliasOrIndex -> Index -> public IndexMetaData getIndex();1540847035;@return If this is an concrete index, its {@link IndexMetaData};public IndexMetaData getIndex() {_            return concreteIndex__        };return,if,this,is,an,concrete,index,its,link,index,meta,data;public,index,meta,data,get,index,return,concrete,index
AliasOrIndex -> Alias -> public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas();1524684173;Returns the unique alias metadata per concrete index.__(note that although alias can point to the same concrete indices, each alias reference may have its own routing_and filters);public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas() {_            return new Iterable<Tuple<String, AliasMetaData>>() {_                @Override_                public Iterator<Tuple<String, AliasMetaData>> iterator() {_                    return new Iterator<Tuple<String,AliasMetaData>>() {__                        int index = 0___                        @Override_                        public boolean hasNext() {_                            return index < referenceIndexMetaDatas.size()__                        }__                        @Override_                        public Tuple<String, AliasMetaData> next() {_                            IndexMetaData indexMetaData = referenceIndexMetaDatas.get(index++)__                            return new Tuple<>(indexMetaData.getIndex().getName(), indexMetaData.getAliases().get(aliasName))__                        }__                        @Override_                        public void remove() {_                            throw new UnsupportedOperationException()__                        }__                    }__                }_            }__        };returns,the,unique,alias,metadata,per,concrete,index,note,that,although,alias,can,point,to,the,same,concrete,indices,each,alias,reference,may,have,its,own,routing,and,filters;public,iterable,tuple,string,alias,meta,data,get,concrete,index,and,alias,meta,datas,return,new,iterable,tuple,string,alias,meta,data,override,public,iterator,tuple,string,alias,meta,data,iterator,return,new,iterator,tuple,string,alias,meta,data,int,index,0,override,public,boolean,has,next,return,index,reference,index,meta,datas,size,override,public,tuple,string,alias,meta,data,next,index,meta,data,index,meta,data,reference,index,meta,datas,get,index,return,new,tuple,index,meta,data,get,index,get,name,index,meta,data,get,aliases,get,alias,name,override,public,void,remove,throw,new,unsupported,operation,exception
AliasOrIndex -> Alias -> public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas();1529082965;Returns the unique alias metadata per concrete index.__(note that although alias can point to the same concrete indices, each alias reference may have its own routing_and filters);public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas() {_            return new Iterable<Tuple<String, AliasMetaData>>() {_                @Override_                public Iterator<Tuple<String, AliasMetaData>> iterator() {_                    return new Iterator<Tuple<String,AliasMetaData>>() {__                        int index = 0___                        @Override_                        public boolean hasNext() {_                            return index < referenceIndexMetaDatas.size()__                        }__                        @Override_                        public Tuple<String, AliasMetaData> next() {_                            IndexMetaData indexMetaData = referenceIndexMetaDatas.get(index++)__                            return new Tuple<>(indexMetaData.getIndex().getName(), indexMetaData.getAliases().get(aliasName))__                        }__                        @Override_                        public void remove() {_                            throw new UnsupportedOperationException()__                        }__                    }__                }_            }__        };returns,the,unique,alias,metadata,per,concrete,index,note,that,although,alias,can,point,to,the,same,concrete,indices,each,alias,reference,may,have,its,own,routing,and,filters;public,iterable,tuple,string,alias,meta,data,get,concrete,index,and,alias,meta,datas,return,new,iterable,tuple,string,alias,meta,data,override,public,iterator,tuple,string,alias,meta,data,iterator,return,new,iterator,tuple,string,alias,meta,data,int,index,0,override,public,boolean,has,next,return,index,reference,index,meta,datas,size,override,public,tuple,string,alias,meta,data,next,index,meta,data,index,meta,data,reference,index,meta,datas,get,index,return,new,tuple,index,meta,data,get,index,get,name,index,meta,data,get,aliases,get,alias,name,override,public,void,remove,throw,new,unsupported,operation,exception
AliasOrIndex -> Alias -> public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas();1531179852;Returns the unique alias metadata per concrete index.__(note that although alias can point to the same concrete indices, each alias reference may have its own routing_and filters);public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas() {_            return new Iterable<Tuple<String, AliasMetaData>>() {_                @Override_                public Iterator<Tuple<String, AliasMetaData>> iterator() {_                    return new Iterator<Tuple<String,AliasMetaData>>() {__                        int index = 0___                        @Override_                        public boolean hasNext() {_                            return index < referenceIndexMetaDatas.size()__                        }__                        @Override_                        public Tuple<String, AliasMetaData> next() {_                            IndexMetaData indexMetaData = referenceIndexMetaDatas.get(index++)__                            return new Tuple<>(indexMetaData.getIndex().getName(), indexMetaData.getAliases().get(aliasName))__                        }__                        @Override_                        public void remove() {_                            throw new UnsupportedOperationException()__                        }__                    }__                }_            }__        };returns,the,unique,alias,metadata,per,concrete,index,note,that,although,alias,can,point,to,the,same,concrete,indices,each,alias,reference,may,have,its,own,routing,and,filters;public,iterable,tuple,string,alias,meta,data,get,concrete,index,and,alias,meta,datas,return,new,iterable,tuple,string,alias,meta,data,override,public,iterator,tuple,string,alias,meta,data,iterator,return,new,iterator,tuple,string,alias,meta,data,int,index,0,override,public,boolean,has,next,return,index,reference,index,meta,datas,size,override,public,tuple,string,alias,meta,data,next,index,meta,data,index,meta,data,reference,index,meta,datas,get,index,return,new,tuple,index,meta,data,get,index,get,name,index,meta,data,get,aliases,get,alias,name,override,public,void,remove,throw,new,unsupported,operation,exception
AliasOrIndex -> Alias -> public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas();1540847035;Returns the unique alias metadata per concrete index.__(note that although alias can point to the same concrete indices, each alias reference may have its own routing_and filters);public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas() {_            return new Iterable<Tuple<String, AliasMetaData>>() {_                @Override_                public Iterator<Tuple<String, AliasMetaData>> iterator() {_                    return new Iterator<Tuple<String,AliasMetaData>>() {__                        int index = 0___                        @Override_                        public boolean hasNext() {_                            return index < referenceIndexMetaDatas.size()__                        }__                        @Override_                        public Tuple<String, AliasMetaData> next() {_                            IndexMetaData indexMetaData = referenceIndexMetaDatas.get(index++)__                            return new Tuple<>(indexMetaData.getIndex().getName(), indexMetaData.getAliases().get(aliasName))__                        }__                        @Override_                        public void remove() {_                            throw new UnsupportedOperationException()__                        }__                    }__                }_            }__        };returns,the,unique,alias,metadata,per,concrete,index,note,that,although,alias,can,point,to,the,same,concrete,indices,each,alias,reference,may,have,its,own,routing,and,filters;public,iterable,tuple,string,alias,meta,data,get,concrete,index,and,alias,meta,datas,return,new,iterable,tuple,string,alias,meta,data,override,public,iterator,tuple,string,alias,meta,data,iterator,return,new,iterator,tuple,string,alias,meta,data,int,index,0,override,public,boolean,has,next,return,index,reference,index,meta,datas,size,override,public,tuple,string,alias,meta,data,next,index,meta,data,index,meta,data,reference,index,meta,datas,get,index,return,new,tuple,index,meta,data,get,index,get,name,index,meta,data,get,aliases,get,alias,name,override,public,void,remove,throw,new,unsupported,operation,exception
AliasOrIndex -> Alias -> public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas();1544702062;Returns the unique alias metadata per concrete index.__(note that although alias can point to the same concrete indices, each alias reference may have its own routing_and filters);public Iterable<Tuple<String, AliasMetaData>> getConcreteIndexAndAliasMetaDatas() {_            return () -> new Iterator<Tuple<String,AliasMetaData>>() {__                int index = 0___                @Override_                public boolean hasNext() {_                    return index < referenceIndexMetaDatas.size()__                }__                @Override_                public Tuple<String, AliasMetaData> next() {_                    IndexMetaData indexMetaData = referenceIndexMetaDatas.get(index++)__                    return new Tuple<>(indexMetaData.getIndex().getName(), indexMetaData.getAliases().get(aliasName))__                }_            }__        };returns,the,unique,alias,metadata,per,concrete,index,note,that,although,alias,can,point,to,the,same,concrete,indices,each,alias,reference,may,have,its,own,routing,and,filters;public,iterable,tuple,string,alias,meta,data,get,concrete,index,and,alias,meta,datas,return,new,iterator,tuple,string,alias,meta,data,int,index,0,override,public,boolean,has,next,return,index,reference,index,meta,datas,size,override,public,tuple,string,alias,meta,data,next,index,meta,data,index,meta,data,reference,index,meta,datas,get,index,return,new,tuple,index,meta,data,get,index,get,name,index,meta,data,get,aliases,get,alias,name
AliasOrIndex -> List<IndexMetaData> getIndices()_;1524684173;@return All {@link IndexMetaData} of all concrete indices this alias is referring to or if this is a concrete index its {@link IndexMetaData};List<IndexMetaData> getIndices()_;return,all,link,index,meta,data,of,all,concrete,indices,this,alias,is,referring,to,or,if,this,is,a,concrete,index,its,link,index,meta,data;list,index,meta,data,get,indices
AliasOrIndex -> List<IndexMetaData> getIndices()_;1529082965;@return All {@link IndexMetaData} of all concrete indices this alias is referring to or if this is a concrete index its {@link IndexMetaData};List<IndexMetaData> getIndices()_;return,all,link,index,meta,data,of,all,concrete,indices,this,alias,is,referring,to,or,if,this,is,a,concrete,index,its,link,index,meta,data;list,index,meta,data,get,indices
AliasOrIndex -> List<IndexMetaData> getIndices()_;1531179852;@return All {@link IndexMetaData} of all concrete indices this alias is referring to or if this is a concrete index its {@link IndexMetaData};List<IndexMetaData> getIndices()_;return,all,link,index,meta,data,of,all,concrete,indices,this,alias,is,referring,to,or,if,this,is,a,concrete,index,its,link,index,meta,data;list,index,meta,data,get,indices
AliasOrIndex -> List<IndexMetaData> getIndices()_;1540847035;@return All {@link IndexMetaData} of all concrete indices this alias is referring to_or if this is a concrete index its {@link IndexMetaData};List<IndexMetaData> getIndices()_;return,all,link,index,meta,data,of,all,concrete,indices,this,alias,is,referring,to,or,if,this,is,a,concrete,index,its,link,index,meta,data;list,index,meta,data,get,indices
AliasOrIndex -> List<IndexMetaData> getIndices()_;1544702062;@return All {@link IndexMetaData} of all concrete indices this alias is referring to_or if this is a concrete index its {@link IndexMetaData};List<IndexMetaData> getIndices()_;return,all,link,index,meta,data,of,all,concrete,indices,this,alias,is,referring,to,or,if,this,is,a,concrete,index,its,link,index,meta,data;list,index,meta,data,get,indices
