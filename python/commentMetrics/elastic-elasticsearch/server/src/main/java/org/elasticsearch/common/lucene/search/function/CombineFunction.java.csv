commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) (queryScore * Math.min(funcScore, maxBoost)). }
false;public;3;10;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation boostExpl = Explanation.match(maxBoost, "maxBoost").     Explanation minExpl = Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, boostExpl).     return Explanation.match(queryExpl.getValue().floatValue() * minExpl.getValue().floatValue(), "function score, product of:", queryExpl, minExpl). }
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) (Math.min(funcScore, maxBoost)). }
false;public;3;8;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation boostExpl = Explanation.match(maxBoost, "maxBoost").     return Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, boostExpl). }
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) (queryScore + Math.min(funcScore, maxBoost)). }
false;public;3;7;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation minExpl = Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, Explanation.match(maxBoost, "maxBoost")).     return Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost) + queryExpl.getValue().floatValue(), "sum of", queryExpl, minExpl). }
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) ((Math.min(funcScore, maxBoost) + queryScore) / 2.0). }
false;public;3;8;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation minExpl = Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, Explanation.match(maxBoost, "maxBoost")).     return Explanation.match((float) ((Math.min(funcExpl.getValue().floatValue(), maxBoost) + queryExpl.getValue().floatValue()) / 2.0), "avg of", queryExpl, minExpl). }
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) (Math.min(queryScore, Math.min(funcScore, maxBoost))). }
false;public;3;9;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation innerMinExpl = Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, Explanation.match(maxBoost, "maxBoost")).     return Explanation.match(Math.min(Math.min(funcExpl.getValue().floatValue(), maxBoost), queryExpl.getValue().floatValue()), "min of", queryExpl, innerMinExpl). }
false;public;3;4;;@Override public float combine(double queryScore, double funcScore, double maxBoost) {     return (float) (Math.max(queryScore, Math.min(funcScore, maxBoost))). }
false;public;3;9;;@Override public Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost) {     Explanation innerMinExpl = Explanation.match(Math.min(funcExpl.getValue().floatValue(), maxBoost), "min of:", funcExpl, Explanation.match(maxBoost, "maxBoost")).     return Explanation.match(Math.max(Math.min(funcExpl.getValue().floatValue(), maxBoost), queryExpl.getValue().floatValue()), "max of:", queryExpl, innerMinExpl). }
false;public,abstract;3;1;;public abstract float combine(double queryScore, double funcScore, double maxBoost).
false;public,abstract;3;1;;public abstract Explanation explain(Explanation queryExpl, Explanation funcExpl, float maxBoost).
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public,static;1;3;;public static CombineFunction readFromStream(StreamInput in) throws IOException {     return in.readEnum(CombineFunction.class). }
false;public,static;1;3;;public static CombineFunction fromString(String combineFunction) {     return valueOf(combineFunction.toUpperCase(Locale.ROOT)). }
