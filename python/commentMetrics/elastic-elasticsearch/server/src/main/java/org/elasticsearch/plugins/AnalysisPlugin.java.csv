commented;modifiers;parameterAmount;loc;comment;code
true;default;0;3;/**  * Override to add additional {@link CharFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ ;/**  * Override to add additional {@link CharFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ default Map<String, AnalysisProvider<CharFilterFactory>> getCharFilters() {     return emptyMap(). }
true;default;0;3;/**  * Override to add additional {@link TokenFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ ;/**  * Override to add additional {@link TokenFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ default Map<String, AnalysisProvider<TokenFilterFactory>> getTokenFilters() {     return emptyMap(). }
true;default;0;3;/**  * Override to add additional {@link Tokenizer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ ;/**  * Override to add additional {@link Tokenizer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ default Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {     return emptyMap(). }
true;default;0;3;/**  * Override to add additional {@link Analyzer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ ;/**  * Override to add additional {@link Analyzer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}  * how to on get the configuration from the index.  */ default Map<String, AnalysisProvider<AnalyzerProvider<? extends Analyzer>>> getAnalyzers() {     return emptyMap(). }
true;default;0;3;/**  * Override to add additional pre-configured {@link Analyzer}s.  */ ;/**  * Override to add additional pre-configured {@link Analyzer}s.  */ default List<PreBuiltAnalyzerProviderFactory> getPreBuiltAnalyzerProviderFactories() {     return emptyList(). }
true;default;0;3;/**  * Override to add additional pre-configured {@link CharFilter}s.  */ ;/**  * Override to add additional pre-configured {@link CharFilter}s.  */ default List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {     return emptyList(). }
true;default;0;3;/**  * Override to add additional pre-configured {@link TokenFilter}s.  */ ;/**  * Override to add additional pre-configured {@link TokenFilter}s.  */ default List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {     return emptyList(). }
true;default;0;3;/**  * Override to add additional pre-configured {@link Tokenizer}.  */ ;/**  * Override to add additional pre-configured {@link Tokenizer}.  */ default List<PreConfiguredTokenizer> getPreConfiguredTokenizers() {     return emptyList(). }
true;default;0;3;/**  * Override to add additional hunspell {@link org.apache.lucene.analysis.hunspell.Dictionary}s.  */ ;/**  * Override to add additional hunspell {@link org.apache.lucene.analysis.hunspell.Dictionary}s.  */ default Map<String, org.apache.lucene.analysis.hunspell.Dictionary> getHunspellDictionaries() {     return emptyMap(). }
false;public;4;4;;@Override public T get(IndexSettings indexSettings, Environment environment, String name, Settings settings) throws IOException {     return provider.get(indexSettings, environment, name, settings). }
false;public;0;4;;@Override public boolean requiresAnalysisSettings() {     return true. }
true;static;1;13;/**  * Mark an {@link AnalysisProvider} as requiring the index's settings.  */ ;/**  * Mark an {@link AnalysisProvider} as requiring the index's settings.  */ static <T> AnalysisProvider<T> requiresAnalysisSettings(AnalysisProvider<T> provider) {     return new AnalysisProvider<T>() {          @Override         public T get(IndexSettings indexSettings, Environment environment, String name, Settings settings) throws IOException {             return provider.get(indexSettings, environment, name, settings).         }          @Override         public boolean requiresAnalysisSettings() {             return true.         }     }. }
