commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     shardInfo = ReplicationResponse.ShardInfo.readShardInfo(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     shardInfo.writeTo(out). }
false;public;0;3;;public ShardInfo getShardInfo() {     return shardInfo. }
false;public;1;3;;public void setShardInfo(ShardInfo shardInfo) {     this.shardInfo = shardInfo. }
true;public;0;3;/**  * @return the total number of shards the write should go to (replicas and primaries). This includes relocating shards, so this  *         number can be higher than the number of shards.  */ ;/**  * @return the total number of shards the write should go to (replicas and primaries). This includes relocating shards, so this  *         number can be higher than the number of shards.  */ public int getTotal() {     return total. }
true;public;0;3;/**  * @return the total number of shards the write succeeded on (replicas and primaries). This includes relocating shards, so this  *         number can be higher than the number of shards.  */ ;/**  * @return the total number of shards the write succeeded on (replicas and primaries). This includes relocating shards, so this  *         number can be higher than the number of shards.  */ public int getSuccessful() {     return successful. }
true;public;0;3;/**  * @return The total number of replication failures.  */ ;/**  * @return The total number of replication failures.  */ public int getFailed() {     return failures.length. }
true;public;0;3;/**  * @return The replication failures that have been captured in the case writes have failed on replica shards.  */ ;/**  * @return The replication failures that have been captured in the case writes have failed on replica shards.  */ public Failure[] getFailures() {     return failures. }
false;public;0;9;;public RestStatus status() {     RestStatus status = RestStatus.OK.     for (Failure failure : failures) {         if (failure.primary() && failure.status().getStatus() > status.getStatus()) {             status = failure.status().         }     }     return status. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     total = in.readVInt().     successful = in.readVInt().     int size = in.readVInt().     failures = new Failure[size].     for (int i = 0. i < size. i++) {         Failure failure = new Failure().         failure.readFrom(in).         failures[i] = failure.     } }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(total).     out.writeVInt(successful).     out.writeVInt(failures.length).     for (Failure failure : failures) {         failure.writeTo(out).     } }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(TOTAL, total).     builder.field(SUCCESSFUL, successful).     builder.field(FAILED, getFailed()).     if (failures.length > 0) {         builder.startArray(FAILURES).         for (Failure failure : failures) {             failure.toXContent(builder, params).         }         builder.endArray().     }     builder.endObject().     return builder. }
false;public,static;1;37;;public static ShardInfo fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).     int total = 0, successful = 0.     List<Failure> failuresList = null.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (TOTAL.equals(currentFieldName)) {                 total = parser.intValue().             } else if (SUCCESSFUL.equals(currentFieldName)) {                 successful = parser.intValue().             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_ARRAY) {             if (FAILURES.equals(currentFieldName)) {                 failuresList = new ArrayList<>().                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     failuresList.add(Failure.fromXContent(parser)).                 }             } else {                 // skip potential inner arrays for forward compatibility                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_OBJECT) {             // skip potential inner arrays for forward compatibility             parser.skipChildren().         }     }     Failure[] failures = EMPTY.     if (failuresList != null) {         failures = failuresList.toArray(new Failure[failuresList.size()]).     }     return new ShardInfo(total, successful, failures). }
false;public;0;8;;@Override public String toString() {     return "ShardInfo{" + "total=" + total + ", successful=" + successful + ", failures=" + Arrays.toString(failures) + '}'. }
false;static;1;5;;static ShardInfo readShardInfo(StreamInput in) throws IOException {     ShardInfo shardInfo = new ShardInfo().     shardInfo.readFrom(in).     return shardInfo. }
false;public;0;3;;public ShardId fullShardId() {     return shardId. }
true;public;0;4;/**  * @return On what node the failure occurred.  */ ;/**  * @return On what node the failure occurred.  */ @Nullable public String nodeId() {     return nodeId. }
true;public;0;3;/**  * @return Whether this failure occurred on a primary shard.  * (this only reports true for delete by query)  */ ;/**  * @return Whether this failure occurred on a primary shard.  * (this only reports true for delete by query)  */ public boolean primary() {     return primary. }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     shardId = ShardId.readShardId(in).     super.shardId = shardId.getId().     index = shardId.getIndexName().     nodeId = in.readOptionalString().     cause = in.readException().     status = RestStatus.readFrom(in).     primary = in.readBoolean(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     shardId.writeTo(out).     out.writeOptionalString(nodeId).     out.writeException(cause).     RestStatus.writeTo(out, status).     out.writeBoolean(primary). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(_INDEX, shardId.getIndexName()).     builder.field(_SHARD, shardId.id()).     builder.field(_NODE, nodeId).     builder.field(REASON).     builder.startObject().     ElasticsearchException.generateThrowableXContent(builder, params, cause).     builder.endObject().     builder.field(STATUS, status).     builder.field(PRIMARY, primary).     builder.endObject().     return builder. }
false;public,static;1;38;;public static Failure fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation).     String shardIndex = null, nodeId = null.     int shardId = -1.     boolean primary = false.     RestStatus status = null.     ElasticsearchException reason = null.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (_INDEX.equals(currentFieldName)) {                 shardIndex = parser.text().             } else if (_SHARD.equals(currentFieldName)) {                 shardId = parser.intValue().             } else if (_NODE.equals(currentFieldName)) {                 nodeId = parser.text().             } else if (STATUS.equals(currentFieldName)) {                 status = RestStatus.valueOf(parser.text()).             } else if (PRIMARY.equals(currentFieldName)) {                 primary = parser.booleanValue().             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (REASON.equals(currentFieldName)) {                 reason = ElasticsearchException.fromXContent(parser).             } else {                 // skip potential inner objects for forward compatibility                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_ARRAY) {             // skip potential inner arrays for forward compatibility             parser.skipChildren().         }     }     return new Failure(new ShardId(shardIndex, IndexMetaData.INDEX_UUID_NA_VALUE, shardId), nodeId, reason, status, primary). }
