commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "get_repositories_action". }
false;public;2;11;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final String[] repositories = request.paramAsStringArray("repository", Strings.EMPTY_ARRAY).     GetRepositoriesRequest getRepositoriesRequest = getRepositoryRequest(repositories).     getRepositoriesRequest.masterNodeTimeout(request.paramAsTime("master_timeout", getRepositoriesRequest.masterNodeTimeout())).     getRepositoriesRequest.local(request.paramAsBoolean("local", getRepositoriesRequest.local())).     settingsFilter.addFilterSettingParams(request).     return channel -> client.admin().cluster().getRepositories(getRepositoriesRequest, new RestToXContentListener<>(channel)). }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return Settings.FORMAT_PARAMS. }
