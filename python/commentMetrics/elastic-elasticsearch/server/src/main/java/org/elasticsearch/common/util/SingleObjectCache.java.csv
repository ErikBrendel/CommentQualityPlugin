commented;modifiers;parameterAmount;loc;comment;code
true;public;0;17;/**  * Returns the currently cached object and potentially refreshes the cache before returning.  */ ;/**  * Returns the currently cached object and potentially refreshes the cache before returning.  */ public T getOrRefresh() {     if (needsRefresh()) {         if (refreshLock.tryLock()) {             try {                 if (needsRefresh()) {                     // check again!                     cached = refresh().                     assert cached != null.                     lastRefreshTimestamp = System.currentTimeMillis().                 }             } finally {                 refreshLock.unlock().             }         }     }     assert cached != null.     return cached. }
true;protected,final;0;3;/**  * Return the potentially stale cached entry.  */ ;/**  * Return the potentially stale cached entry.  */ protected final T getNoRefresh() {     return cached. }
true;protected,abstract;0;1;/**  * Returns a new instance to cache  */ ;/**  * Returns a new instance to cache  */ protected abstract T refresh().
true;protected;0;7;/**  * Returns <code>true</code> iff the cache needs to be refreshed.  */ ;/**  * Returns <code>true</code> iff the cache needs to be refreshed.  */ protected boolean needsRefresh() {     if (refreshInterval.millis() == 0) {         return true.     }     final long currentTime = System.currentTimeMillis().     return (currentTime - lastRefreshTimestamp) > refreshInterval.millis(). }
