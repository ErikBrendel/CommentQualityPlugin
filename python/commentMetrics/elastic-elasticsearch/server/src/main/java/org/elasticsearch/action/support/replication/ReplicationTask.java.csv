commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the current phase of the task.  */ ;/**  * Set the current phase of the task.  */ public void setPhase(String phase) {     this.phase = phase. }
true;public;0;3;/**  * Get the current phase of the task.  */ ;/**  * Get the current phase of the task.  */ public String getPhase() {     return phase. }
false;public;0;4;;@Override public Status getStatus() {     return new Status(phase). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("phase", phase).     builder.endObject().     return builder. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(phase). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
true;public;1;8;// Implements equals and hashcode for testing ;// Implements equals and hashcode for testing @Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != ReplicationTask.Status.class) {         return false.     }     ReplicationTask.Status other = (Status) obj.     return phase.equals(other.phase). }
false;public;0;4;;@Override public int hashCode() {     return phase.hashCode(). }
