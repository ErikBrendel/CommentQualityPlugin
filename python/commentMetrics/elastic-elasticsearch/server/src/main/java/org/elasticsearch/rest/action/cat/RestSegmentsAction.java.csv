commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_segments_action". }
false;public;1;6;;@Override public RestResponse buildResponse(final IndicesSegmentResponse indicesSegmentResponse) throws Exception {     final Map<String, IndexSegments> indicesSegments = indicesSegmentResponse.getIndices().     Table tab = buildTable(request, clusterStateResponse, indicesSegments).     return RestTable.buildResponse(tab, channel). }
false;public;1;13;;@Override public void processResponse(final ClusterStateResponse clusterStateResponse) {     final IndicesSegmentsRequest indicesSegmentsRequest = new IndicesSegmentsRequest().     indicesSegmentsRequest.indices(indices).     client.admin().indices().segments(indicesSegmentsRequest, new RestResponseListener<IndicesSegmentResponse>(channel) {          @Override         public RestResponse buildResponse(final IndicesSegmentResponse indicesSegmentResponse) throws Exception {             final Map<String, IndexSegments> indicesSegments = indicesSegmentResponse.getIndices().             Table tab = buildTable(request, clusterStateResponse, indicesSegments).             return RestTable.buildResponse(tab, channel).         }     }). }
false;protected;2;25;;@Override protected RestChannelConsumer doCatRequest(final RestRequest request, final NodeClient client) {     final String[] indices = Strings.splitStringByCommaToArray(request.param("index")).     final ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local())).     clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout())).     clusterStateRequest.clear().nodes(true).routingTable(true).indices(indices).     return channel -> client.admin().cluster().state(clusterStateRequest, new RestActionListener<ClusterStateResponse>(channel) {          @Override         public void processResponse(final ClusterStateResponse clusterStateResponse) {             final IndicesSegmentsRequest indicesSegmentsRequest = new IndicesSegmentsRequest().             indicesSegmentsRequest.indices(indices).             client.admin().indices().segments(indicesSegmentsRequest, new RestResponseListener<IndicesSegmentResponse>(channel) {                  @Override                 public RestResponse buildResponse(final IndicesSegmentResponse indicesSegmentResponse) throws Exception {                     final Map<String, IndexSegments> indicesSegments = indicesSegmentResponse.getIndices().                     Table tab = buildTable(request, clusterStateResponse, indicesSegments).                     return RestTable.buildResponse(tab, channel).                 }             }).         }     }). }
false;protected;1;5;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/segments\n").     sb.append("/_cat/segments/{index}\n"). }
false;protected;1;22;;@Override protected Table getTableWithHeader(RestRequest request) {     Table table = new Table().     table.startHeaders().     table.addCell("index", "default:true.alias:i,idx.desc:index name").     table.addCell("shard", "default:true.alias:s,sh.desc:shard name").     table.addCell("prirep", "alias:p,pr,primaryOrReplica.default:true.desc:primary or replica").     table.addCell("ip", "default:true.desc:ip of node where it lives").     table.addCell("id", "default:false.desc:unique id of node where it lives").     table.addCell("segment", "default:true.alias:seg.desc:segment name").     table.addCell("generation", "default:true.alias:g,gen.text-align:right.desc:segment generation").     table.addCell("docs.count", "default:true.alias:dc,docsCount.text-align:right.desc:number of docs in segment").     table.addCell("docs.deleted", "default:true.alias:dd,docsDeleted.text-align:right.desc:number of deleted docs in segment").     table.addCell("size", "default:true.alias:si.text-align:right.desc:segment size in bytes").     table.addCell("size.memory", "default:true.alias:sm,sizeMemory.text-align:right.desc:segment memory in bytes").     table.addCell("committed", "default:true.alias:ic,isCommitted.desc:is segment committed").     table.addCell("searchable", "default:true.alias:is,isSearchable.desc:is segment searched").     table.addCell("version", "default:true.alias:v,ver.desc:version").     table.addCell("compound", "default:true.alias:ico,isCompound.desc:is segment compound").     table.endHeaders().     return table. }
false;private;3;43;;private Table buildTable(final RestRequest request, ClusterStateResponse state, Map<String, IndexSegments> indicesSegments) {     Table table = getTableWithHeader(request).     DiscoveryNodes nodes = state.getState().nodes().     for (IndexSegments indexSegments : indicesSegments.values()) {         Map<Integer, IndexShardSegments> shards = indexSegments.getShards().         for (IndexShardSegments indexShardSegments : shards.values()) {             ShardSegments[] shardSegments = indexShardSegments.getShards().             for (ShardSegments shardSegment : shardSegments) {                 List<Segment> segments = shardSegment.getSegments().                 for (Segment segment : segments) {                     table.startRow().                     table.addCell(shardSegment.getShardRouting().getIndexName()).                     table.addCell(shardSegment.getShardRouting().getId()).                     table.addCell(shardSegment.getShardRouting().primary() ? "p" : "r").                     table.addCell(nodes.get(shardSegment.getShardRouting().currentNodeId()).getHostAddress()).                     table.addCell(shardSegment.getShardRouting().currentNodeId()).                     table.addCell(segment.getName()).                     table.addCell(segment.getGeneration()).                     table.addCell(segment.getNumDocs()).                     table.addCell(segment.getDeletedDocs()).                     table.addCell(segment.getSize()).                     table.addCell(segment.getMemoryInBytes()).                     table.addCell(segment.isCommitted()).                     table.addCell(segment.isSearch()).                     table.addCell(segment.getVersion()).                     table.addCell(segment.isCompound()).                     table.endRow().                 }             }         }     }     return table. }
