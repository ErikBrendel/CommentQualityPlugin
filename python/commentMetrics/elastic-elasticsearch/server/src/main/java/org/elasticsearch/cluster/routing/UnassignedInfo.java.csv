# id;timestamp;commentText;codeText;commentWords;codeWords
UnassignedInfo -> public int getNumFailedAllocations();1524684173;Returns the number of previously failed allocations of this shard.;public int getNumFailedAllocations() {_        return failedAllocations__    };returns,the,number,of,previously,failed,allocations,of,this,shard;public,int,get,num,failed,allocations,return,failed,allocations
UnassignedInfo -> public int getNumFailedAllocations();1533319589;Returns the number of previously failed allocations of this shard.;public int getNumFailedAllocations() {_        return failedAllocations__    };returns,the,number,of,previously,failed,allocations,of,this,shard;public,int,get,num,failed,allocations,return,failed,allocations
UnassignedInfo -> public int getNumFailedAllocations();1536964057;Returns the number of previously failed allocations of this shard.;public int getNumFailedAllocations() {_        return failedAllocations__    };returns,the,number,of,previously,failed,allocations,of,this,shard;public,int,get,num,failed,allocations,return,failed,allocations
UnassignedInfo -> public int getNumFailedAllocations();1548236405;Returns the number of previously failed allocations of this shard.;public int getNumFailedAllocations() {_        return failedAllocations__    };returns,the,number,of,previously,failed,allocations,of,this,shard;public,int,get,num,failed,allocations,return,failed,allocations
UnassignedInfo -> public int getNumFailedAllocations();1549912434;Returns the number of previously failed allocations of this shard.;public int getNumFailedAllocations() {_        return failedAllocations__    };returns,the,number,of,previously,failed,allocations,of,this,shard;public,int,get,num,failed,allocations,return,failed,allocations
UnassignedInfo -> public Reason getReason();1524684173;The reason why the shard is unassigned.;public Reason getReason() {_        return this.reason__    };the,reason,why,the,shard,is,unassigned;public,reason,get,reason,return,this,reason
UnassignedInfo -> public Reason getReason();1533319589;The reason why the shard is unassigned.;public Reason getReason() {_        return this.reason__    };the,reason,why,the,shard,is,unassigned;public,reason,get,reason,return,this,reason
UnassignedInfo -> public Reason getReason();1536964057;The reason why the shard is unassigned.;public Reason getReason() {_        return this.reason__    };the,reason,why,the,shard,is,unassigned;public,reason,get,reason,return,this,reason
UnassignedInfo -> public Reason getReason();1548236405;The reason why the shard is unassigned.;public Reason getReason() {_        return this.reason__    };the,reason,why,the,shard,is,unassigned;public,reason,get,reason,return,this,reason
UnassignedInfo -> public Reason getReason();1549912434;The reason why the shard is unassigned.;public Reason getReason() {_        return this.reason__    };the,reason,why,the,shard,is,unassigned;public,reason,get,reason,return,this,reason
UnassignedInfo -> public static int getNumberOfDelayedUnassigned(ClusterState state);1524684173;Returns the number of shards that are unassigned and currently being delayed.;public static int getNumberOfDelayedUnassigned(ClusterState state) {_        int count = 0__        for (ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {_            if (shard.unassignedInfo().isDelayed()) {_                count++__            }_        }_        return count__    };returns,the,number,of,shards,that,are,unassigned,and,currently,being,delayed;public,static,int,get,number,of,delayed,unassigned,cluster,state,state,int,count,0,for,shard,routing,shard,state,routing,table,shards,with,state,shard,routing,state,unassigned,if,shard,unassigned,info,is,delayed,count,return,count
UnassignedInfo -> public static int getNumberOfDelayedUnassigned(ClusterState state);1533319589;Returns the number of shards that are unassigned and currently being delayed.;public static int getNumberOfDelayedUnassigned(ClusterState state) {_        int count = 0__        for (ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {_            if (shard.unassignedInfo().isDelayed()) {_                count++__            }_        }_        return count__    };returns,the,number,of,shards,that,are,unassigned,and,currently,being,delayed;public,static,int,get,number,of,delayed,unassigned,cluster,state,state,int,count,0,for,shard,routing,shard,state,routing,table,shards,with,state,shard,routing,state,unassigned,if,shard,unassigned,info,is,delayed,count,return,count
UnassignedInfo -> public static int getNumberOfDelayedUnassigned(ClusterState state);1536964057;Returns the number of shards that are unassigned and currently being delayed.;public static int getNumberOfDelayedUnassigned(ClusterState state) {_        int count = 0__        for (ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {_            if (shard.unassignedInfo().isDelayed()) {_                count++__            }_        }_        return count__    };returns,the,number,of,shards,that,are,unassigned,and,currently,being,delayed;public,static,int,get,number,of,delayed,unassigned,cluster,state,state,int,count,0,for,shard,routing,shard,state,routing,table,shards,with,state,shard,routing,state,unassigned,if,shard,unassigned,info,is,delayed,count,return,count
UnassignedInfo -> public static int getNumberOfDelayedUnassigned(ClusterState state);1548236405;Returns the number of shards that are unassigned and currently being delayed.;public static int getNumberOfDelayedUnassigned(ClusterState state) {_        int count = 0__        for (ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {_            if (shard.unassignedInfo().isDelayed()) {_                count++__            }_        }_        return count__    };returns,the,number,of,shards,that,are,unassigned,and,currently,being,delayed;public,static,int,get,number,of,delayed,unassigned,cluster,state,state,int,count,0,for,shard,routing,shard,state,routing,table,shards,with,state,shard,routing,state,unassigned,if,shard,unassigned,info,is,delayed,count,return,count
UnassignedInfo -> public static int getNumberOfDelayedUnassigned(ClusterState state);1549912434;Returns the number of shards that are unassigned and currently being delayed.;public static int getNumberOfDelayedUnassigned(ClusterState state) {_        int count = 0__        for (ShardRouting shard : state.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED)) {_            if (shard.unassignedInfo().isDelayed()) {_                count++__            }_        }_        return count__    };returns,the,number,of,shards,that,are,unassigned,and,currently,being,delayed;public,static,int,get,number,of,delayed,unassigned,cluster,state,state,int,count,0,for,shard,routing,shard,state,routing,table,shards,with,state,shard,routing,state,unassigned,if,shard,unassigned,info,is,delayed,count,return,count
UnassignedInfo -> public long getUnassignedTimeInNanos();1524684173;The timestamp in nanoseconds when the shard became unassigned, based on System.nanoTime()._Used to calculate the delay for delayed shard allocation._ONLY EXPOSED FOR TESTS!;public long getUnassignedTimeInNanos() {_        return this.unassignedTimeNanos__    };the,timestamp,in,nanoseconds,when,the,shard,became,unassigned,based,on,system,nano,time,used,to,calculate,the,delay,for,delayed,shard,allocation,only,exposed,for,tests;public,long,get,unassigned,time,in,nanos,return,this,unassigned,time,nanos
UnassignedInfo -> public long getUnassignedTimeInNanos();1533319589;The timestamp in nanoseconds when the shard became unassigned, based on System.nanoTime()._Used to calculate the delay for delayed shard allocation._ONLY EXPOSED FOR TESTS!;public long getUnassignedTimeInNanos() {_        return this.unassignedTimeNanos__    };the,timestamp,in,nanoseconds,when,the,shard,became,unassigned,based,on,system,nano,time,used,to,calculate,the,delay,for,delayed,shard,allocation,only,exposed,for,tests;public,long,get,unassigned,time,in,nanos,return,this,unassigned,time,nanos
UnassignedInfo -> public long getUnassignedTimeInNanos();1536964057;The timestamp in nanoseconds when the shard became unassigned, based on System.nanoTime()._Used to calculate the delay for delayed shard allocation._ONLY EXPOSED FOR TESTS!;public long getUnassignedTimeInNanos() {_        return this.unassignedTimeNanos__    };the,timestamp,in,nanoseconds,when,the,shard,became,unassigned,based,on,system,nano,time,used,to,calculate,the,delay,for,delayed,shard,allocation,only,exposed,for,tests;public,long,get,unassigned,time,in,nanos,return,this,unassigned,time,nanos
UnassignedInfo -> public long getUnassignedTimeInNanos();1548236405;The timestamp in nanoseconds when the shard became unassigned, based on System.nanoTime()._Used to calculate the delay for delayed shard allocation._ONLY EXPOSED FOR TESTS!;public long getUnassignedTimeInNanos() {_        return this.unassignedTimeNanos__    };the,timestamp,in,nanoseconds,when,the,shard,became,unassigned,based,on,system,nano,time,used,to,calculate,the,delay,for,delayed,shard,allocation,only,exposed,for,tests;public,long,get,unassigned,time,in,nanos,return,this,unassigned,time,nanos
UnassignedInfo -> public long getUnassignedTimeInNanos();1549912434;The timestamp in nanoseconds when the shard became unassigned, based on System.nanoTime()._Used to calculate the delay for delayed shard allocation._ONLY EXPOSED FOR TESTS!;public long getUnassignedTimeInNanos() {_        return this.unassignedTimeNanos__    };the,timestamp,in,nanoseconds,when,the,shard,became,unassigned,based,on,system,nano,time,used,to,calculate,the,delay,for,delayed,shard,allocation,only,exposed,for,tests;public,long,get,unassigned,time,in,nanos,return,this,unassigned,time,nanos
UnassignedInfo -> public long getUnassignedTimeInMillis();1524684173;The timestamp in milliseconds when the shard became unassigned, based on System.currentTimeMillis()._Note, we use timestamp here since we want to make sure its preserved across node serializations.;public long getUnassignedTimeInMillis() {_        return this.unassignedTimeMillis__    };the,timestamp,in,milliseconds,when,the,shard,became,unassigned,based,on,system,current,time,millis,note,we,use,timestamp,here,since,we,want,to,make,sure,its,preserved,across,node,serializations;public,long,get,unassigned,time,in,millis,return,this,unassigned,time,millis
UnassignedInfo -> public long getUnassignedTimeInMillis();1533319589;The timestamp in milliseconds when the shard became unassigned, based on System.currentTimeMillis()._Note, we use timestamp here since we want to make sure its preserved across node serializations.;public long getUnassignedTimeInMillis() {_        return this.unassignedTimeMillis__    };the,timestamp,in,milliseconds,when,the,shard,became,unassigned,based,on,system,current,time,millis,note,we,use,timestamp,here,since,we,want,to,make,sure,its,preserved,across,node,serializations;public,long,get,unassigned,time,in,millis,return,this,unassigned,time,millis
UnassignedInfo -> public long getUnassignedTimeInMillis();1536964057;The timestamp in milliseconds when the shard became unassigned, based on System.currentTimeMillis()._Note, we use timestamp here since we want to make sure its preserved across node serializations.;public long getUnassignedTimeInMillis() {_        return this.unassignedTimeMillis__    };the,timestamp,in,milliseconds,when,the,shard,became,unassigned,based,on,system,current,time,millis,note,we,use,timestamp,here,since,we,want,to,make,sure,its,preserved,across,node,serializations;public,long,get,unassigned,time,in,millis,return,this,unassigned,time,millis
UnassignedInfo -> public long getUnassignedTimeInMillis();1548236405;The timestamp in milliseconds when the shard became unassigned, based on System.currentTimeMillis()._Note, we use timestamp here since we want to make sure its preserved across node serializations.;public long getUnassignedTimeInMillis() {_        return this.unassignedTimeMillis__    };the,timestamp,in,milliseconds,when,the,shard,became,unassigned,based,on,system,current,time,millis,note,we,use,timestamp,here,since,we,want,to,make,sure,its,preserved,across,node,serializations;public,long,get,unassigned,time,in,millis,return,this,unassigned,time,millis
UnassignedInfo -> public long getUnassignedTimeInMillis();1549912434;The timestamp in milliseconds when the shard became unassigned, based on System.currentTimeMillis()._Note, we use timestamp here since we want to make sure its preserved across node serializations.;public long getUnassignedTimeInMillis() {_        return this.unassignedTimeMillis__    };the,timestamp,in,milliseconds,when,the,shard,became,unassigned,based,on,system,current,time,millis,note,we,use,timestamp,here,since,we,want,to,make,sure,its,preserved,across,node,serializations;public,long,get,unassigned,time,in,millis,return,this,unassigned,time,millis
UnassignedInfo -> public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,                           long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);1524684173;@param reason               the cause for making this shard unassigned. See {@link Reason} for more information._@param message              more information about cause._@param failure              the shard level failure that caused this shard to be unassigned, if exists._@param unassignedTimeNanos  the time to use as the base for any delayed re-assignment calculation_@param unassignedTimeMillis the time of unassignment used to display to in our reporting._@param delayed              if allocation of this shard is delayed due to INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING._@param lastAllocationStatus the result of the last allocation attempt for this shard;public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,_                          long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus) {_        this.reason = Objects.requireNonNull(reason)__        this.unassignedTimeMillis = unassignedTimeMillis__        this.unassignedTimeNanos = unassignedTimeNanos__        this.delayed = delayed__        this.message = message__        this.failure = failure__        this.failedAllocations = failedAllocations__        this.lastAllocationStatus = Objects.requireNonNull(lastAllocationStatus)__        assert (failedAllocations > 0) == (reason == Reason.ALLOCATION_FAILED) :_            "failedAllocations: " + failedAllocations + " for reason " + reason__        assert !(message == null && failure != null) : "provide a message if a failure exception is provided"__        assert !(delayed && reason != Reason.NODE_LEFT) : "shard can only be delayed if it is unassigned due to a node leaving"__    };param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause,param,failure,the,shard,level,failure,that,caused,this,shard,to,be,unassigned,if,exists,param,unassigned,time,nanos,the,time,to,use,as,the,base,for,any,delayed,re,assignment,calculation,param,unassigned,time,millis,the,time,of,unassignment,used,to,display,to,in,our,reporting,param,delayed,if,allocation,of,this,shard,is,delayed,due,to,param,last,allocation,status,the,result,of,the,last,allocation,attempt,for,this,shard;public,unassigned,info,reason,reason,nullable,string,message,nullable,exception,failure,int,failed,allocations,long,unassigned,time,nanos,long,unassigned,time,millis,boolean,delayed,allocation,status,last,allocation,status,this,reason,objects,require,non,null,reason,this,unassigned,time,millis,unassigned,time,millis,this,unassigned,time,nanos,unassigned,time,nanos,this,delayed,delayed,this,message,message,this,failure,failure,this,failed,allocations,failed,allocations,this,last,allocation,status,objects,require,non,null,last,allocation,status,assert,failed,allocations,0,reason,reason,failed,allocations,failed,allocations,for,reason,reason,assert,message,null,failure,null,provide,a,message,if,a,failure,exception,is,provided,assert,delayed,reason,reason,shard,can,only,be,delayed,if,it,is,unassigned,due,to,a,node,leaving
UnassignedInfo -> public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,                           long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);1533319589;@param reason               the cause for making this shard unassigned. See {@link Reason} for more information._@param message              more information about cause._@param failure              the shard level failure that caused this shard to be unassigned, if exists._@param unassignedTimeNanos  the time to use as the base for any delayed re-assignment calculation_@param unassignedTimeMillis the time of unassignment used to display to in our reporting._@param delayed              if allocation of this shard is delayed due to INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING._@param lastAllocationStatus the result of the last allocation attempt for this shard;public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,_                          long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus) {_        this.reason = Objects.requireNonNull(reason)__        this.unassignedTimeMillis = unassignedTimeMillis__        this.unassignedTimeNanos = unassignedTimeNanos__        this.delayed = delayed__        this.message = message__        this.failure = failure__        this.failedAllocations = failedAllocations__        this.lastAllocationStatus = Objects.requireNonNull(lastAllocationStatus)__        assert (failedAllocations > 0) == (reason == Reason.ALLOCATION_FAILED) :_            "failedAllocations: " + failedAllocations + " for reason " + reason__        assert !(message == null && failure != null) : "provide a message if a failure exception is provided"__        assert !(delayed && reason != Reason.NODE_LEFT) : "shard can only be delayed if it is unassigned due to a node leaving"__    };param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause,param,failure,the,shard,level,failure,that,caused,this,shard,to,be,unassigned,if,exists,param,unassigned,time,nanos,the,time,to,use,as,the,base,for,any,delayed,re,assignment,calculation,param,unassigned,time,millis,the,time,of,unassignment,used,to,display,to,in,our,reporting,param,delayed,if,allocation,of,this,shard,is,delayed,due,to,param,last,allocation,status,the,result,of,the,last,allocation,attempt,for,this,shard;public,unassigned,info,reason,reason,nullable,string,message,nullable,exception,failure,int,failed,allocations,long,unassigned,time,nanos,long,unassigned,time,millis,boolean,delayed,allocation,status,last,allocation,status,this,reason,objects,require,non,null,reason,this,unassigned,time,millis,unassigned,time,millis,this,unassigned,time,nanos,unassigned,time,nanos,this,delayed,delayed,this,message,message,this,failure,failure,this,failed,allocations,failed,allocations,this,last,allocation,status,objects,require,non,null,last,allocation,status,assert,failed,allocations,0,reason,reason,failed,allocations,failed,allocations,for,reason,reason,assert,message,null,failure,null,provide,a,message,if,a,failure,exception,is,provided,assert,delayed,reason,reason,shard,can,only,be,delayed,if,it,is,unassigned,due,to,a,node,leaving
UnassignedInfo -> public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,                           long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);1536964057;@param reason               the cause for making this shard unassigned. See {@link Reason} for more information._@param message              more information about cause._@param failure              the shard level failure that caused this shard to be unassigned, if exists._@param unassignedTimeNanos  the time to use as the base for any delayed re-assignment calculation_@param unassignedTimeMillis the time of unassignment used to display to in our reporting._@param delayed              if allocation of this shard is delayed due to INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING._@param lastAllocationStatus the result of the last allocation attempt for this shard;public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,_                          long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus) {_        this.reason = Objects.requireNonNull(reason)__        this.unassignedTimeMillis = unassignedTimeMillis__        this.unassignedTimeNanos = unassignedTimeNanos__        this.delayed = delayed__        this.message = message__        this.failure = failure__        this.failedAllocations = failedAllocations__        this.lastAllocationStatus = Objects.requireNonNull(lastAllocationStatus)__        assert (failedAllocations > 0) == (reason == Reason.ALLOCATION_FAILED) :_            "failedAllocations: " + failedAllocations + " for reason " + reason__        assert !(message == null && failure != null) : "provide a message if a failure exception is provided"__        assert !(delayed && reason != Reason.NODE_LEFT) : "shard can only be delayed if it is unassigned due to a node leaving"__    };param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause,param,failure,the,shard,level,failure,that,caused,this,shard,to,be,unassigned,if,exists,param,unassigned,time,nanos,the,time,to,use,as,the,base,for,any,delayed,re,assignment,calculation,param,unassigned,time,millis,the,time,of,unassignment,used,to,display,to,in,our,reporting,param,delayed,if,allocation,of,this,shard,is,delayed,due,to,param,last,allocation,status,the,result,of,the,last,allocation,attempt,for,this,shard;public,unassigned,info,reason,reason,nullable,string,message,nullable,exception,failure,int,failed,allocations,long,unassigned,time,nanos,long,unassigned,time,millis,boolean,delayed,allocation,status,last,allocation,status,this,reason,objects,require,non,null,reason,this,unassigned,time,millis,unassigned,time,millis,this,unassigned,time,nanos,unassigned,time,nanos,this,delayed,delayed,this,message,message,this,failure,failure,this,failed,allocations,failed,allocations,this,last,allocation,status,objects,require,non,null,last,allocation,status,assert,failed,allocations,0,reason,reason,failed,allocations,failed,allocations,for,reason,reason,assert,message,null,failure,null,provide,a,message,if,a,failure,exception,is,provided,assert,delayed,reason,reason,shard,can,only,be,delayed,if,it,is,unassigned,due,to,a,node,leaving
UnassignedInfo -> public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,                           long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);1548236405;@param reason               the cause for making this shard unassigned. See {@link Reason} for more information._@param message              more information about cause._@param failure              the shard level failure that caused this shard to be unassigned, if exists._@param unassignedTimeNanos  the time to use as the base for any delayed re-assignment calculation_@param unassignedTimeMillis the time of unassignment used to display to in our reporting._@param delayed              if allocation of this shard is delayed due to INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING._@param lastAllocationStatus the result of the last allocation attempt for this shard;public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,_                          long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus) {_        this.reason = Objects.requireNonNull(reason)__        this.unassignedTimeMillis = unassignedTimeMillis__        this.unassignedTimeNanos = unassignedTimeNanos__        this.delayed = delayed__        this.message = message__        this.failure = failure__        this.failedAllocations = failedAllocations__        this.lastAllocationStatus = Objects.requireNonNull(lastAllocationStatus)__        assert (failedAllocations > 0) == (reason == Reason.ALLOCATION_FAILED) :_            "failedAllocations: " + failedAllocations + " for reason " + reason__        assert !(message == null && failure != null) : "provide a message if a failure exception is provided"__        assert !(delayed && reason != Reason.NODE_LEFT) : "shard can only be delayed if it is unassigned due to a node leaving"__    };param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause,param,failure,the,shard,level,failure,that,caused,this,shard,to,be,unassigned,if,exists,param,unassigned,time,nanos,the,time,to,use,as,the,base,for,any,delayed,re,assignment,calculation,param,unassigned,time,millis,the,time,of,unassignment,used,to,display,to,in,our,reporting,param,delayed,if,allocation,of,this,shard,is,delayed,due,to,param,last,allocation,status,the,result,of,the,last,allocation,attempt,for,this,shard;public,unassigned,info,reason,reason,nullable,string,message,nullable,exception,failure,int,failed,allocations,long,unassigned,time,nanos,long,unassigned,time,millis,boolean,delayed,allocation,status,last,allocation,status,this,reason,objects,require,non,null,reason,this,unassigned,time,millis,unassigned,time,millis,this,unassigned,time,nanos,unassigned,time,nanos,this,delayed,delayed,this,message,message,this,failure,failure,this,failed,allocations,failed,allocations,this,last,allocation,status,objects,require,non,null,last,allocation,status,assert,failed,allocations,0,reason,reason,failed,allocations,failed,allocations,for,reason,reason,assert,message,null,failure,null,provide,a,message,if,a,failure,exception,is,provided,assert,delayed,reason,reason,shard,can,only,be,delayed,if,it,is,unassigned,due,to,a,node,leaving
UnassignedInfo -> public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,                           long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);1549912434;@param reason               the cause for making this shard unassigned. See {@link Reason} for more information._@param message              more information about cause._@param failure              the shard level failure that caused this shard to be unassigned, if exists._@param unassignedTimeNanos  the time to use as the base for any delayed re-assignment calculation_@param unassignedTimeMillis the time of unassignment used to display to in our reporting._@param delayed              if allocation of this shard is delayed due to INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING._@param lastAllocationStatus the result of the last allocation attempt for this shard;public UnassignedInfo(Reason reason, @Nullable String message, @Nullable Exception failure, int failedAllocations,_                          long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus) {_        this.reason = Objects.requireNonNull(reason)__        this.unassignedTimeMillis = unassignedTimeMillis__        this.unassignedTimeNanos = unassignedTimeNanos__        this.delayed = delayed__        this.message = message__        this.failure = failure__        this.failedAllocations = failedAllocations__        this.lastAllocationStatus = Objects.requireNonNull(lastAllocationStatus)__        assert (failedAllocations > 0) == (reason == Reason.ALLOCATION_FAILED) :_            "failedAllocations: " + failedAllocations + " for reason " + reason__        assert !(message == null && failure != null) : "provide a message if a failure exception is provided"__        assert !(delayed && reason != Reason.NODE_LEFT) : "shard can only be delayed if it is unassigned due to a node leaving"__    };param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause,param,failure,the,shard,level,failure,that,caused,this,shard,to,be,unassigned,if,exists,param,unassigned,time,nanos,the,time,to,use,as,the,base,for,any,delayed,re,assignment,calculation,param,unassigned,time,millis,the,time,of,unassignment,used,to,display,to,in,our,reporting,param,delayed,if,allocation,of,this,shard,is,delayed,due,to,param,last,allocation,status,the,result,of,the,last,allocation,attempt,for,this,shard;public,unassigned,info,reason,reason,nullable,string,message,nullable,exception,failure,int,failed,allocations,long,unassigned,time,nanos,long,unassigned,time,millis,boolean,delayed,allocation,status,last,allocation,status,this,reason,objects,require,non,null,reason,this,unassigned,time,millis,unassigned,time,millis,this,unassigned,time,nanos,unassigned,time,nanos,this,delayed,delayed,this,message,message,this,failure,failure,this,failed,allocations,failed,allocations,this,last,allocation,status,objects,require,non,null,last,allocation,status,assert,failed,allocations,0,reason,reason,failed,allocations,failed,allocations,for,reason,reason,assert,message,null,failure,null,provide,a,message,if,a,failure,exception,is,provided,assert,delayed,reason,reason,shard,can,only,be,delayed,if,it,is,unassigned,due,to,a,node,leaving
UnassignedInfo -> public boolean isDelayed();1524684173;Returns true if allocation of this shard is delayed due to {@link #INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING};public boolean isDelayed() {_        return delayed__    };returns,true,if,allocation,of,this,shard,is,delayed,due,to,link;public,boolean,is,delayed,return,delayed
UnassignedInfo -> public boolean isDelayed();1533319589;Returns true if allocation of this shard is delayed due to {@link #INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING};public boolean isDelayed() {_        return delayed__    };returns,true,if,allocation,of,this,shard,is,delayed,due,to,link;public,boolean,is,delayed,return,delayed
UnassignedInfo -> public boolean isDelayed();1536964057;Returns true if allocation of this shard is delayed due to {@link #INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING};public boolean isDelayed() {_        return delayed__    };returns,true,if,allocation,of,this,shard,is,delayed,due,to,link;public,boolean,is,delayed,return,delayed
UnassignedInfo -> public boolean isDelayed();1548236405;Returns true if allocation of this shard is delayed due to {@link #INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING};public boolean isDelayed() {_        return delayed__    };returns,true,if,allocation,of,this,shard,is,delayed,due,to,link;public,boolean,is,delayed,return,delayed
UnassignedInfo -> public boolean isDelayed();1549912434;Returns true if allocation of this shard is delayed due to {@link #INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING};public boolean isDelayed() {_        return delayed__    };returns,true,if,allocation,of,this,shard,is,delayed,due,to,link;public,boolean,is,delayed,return,delayed
UnassignedInfo -> @Nullable     public String getMessage();1524684173;Returns optional details explaining the reasons.;@Nullable_    public String getMessage() {_        return this.message__    };returns,optional,details,explaining,the,reasons;nullable,public,string,get,message,return,this,message
UnassignedInfo -> @Nullable     public String getMessage();1533319589;Returns optional details explaining the reasons.;@Nullable_    public String getMessage() {_        return this.message__    };returns,optional,details,explaining,the,reasons;nullable,public,string,get,message,return,this,message
UnassignedInfo -> @Nullable     public String getMessage();1536964057;Returns optional details explaining the reasons.;@Nullable_    public String getMessage() {_        return this.message__    };returns,optional,details,explaining,the,reasons;nullable,public,string,get,message,return,this,message
UnassignedInfo -> @Nullable     public String getMessage();1548236405;Returns optional details explaining the reasons.;@Nullable_    public String getMessage() {_        return this.message__    };returns,optional,details,explaining,the,reasons;nullable,public,string,get,message,return,this,message
UnassignedInfo -> @Nullable     public String getMessage();1549912434;Returns optional details explaining the reasons.;@Nullable_    public String getMessage() {_        return this.message__    };returns,optional,details,explaining,the,reasons;nullable,public,string,get,message,return,this,message
UnassignedInfo -> @Nullable     public String getDetails();1524684173;Builds a string representation of the message and the failure if exists.;@Nullable_    public String getDetails() {_        if (message == null) {_            return null__        }_        return message + (failure == null ? "" : ", failure " + ExceptionsHelper.detailedMessage(failure))__    };builds,a,string,representation,of,the,message,and,the,failure,if,exists;nullable,public,string,get,details,if,message,null,return,null,return,message,failure,null,failure,exceptions,helper,detailed,message,failure
UnassignedInfo -> @Nullable     public String getDetails();1533319589;Builds a string representation of the message and the failure if exists.;@Nullable_    public String getDetails() {_        if (message == null) {_            return null__        }_        return message + (failure == null ? "" : ", failure " + ExceptionsHelper.detailedMessage(failure))__    };builds,a,string,representation,of,the,message,and,the,failure,if,exists;nullable,public,string,get,details,if,message,null,return,null,return,message,failure,null,failure,exceptions,helper,detailed,message,failure
UnassignedInfo -> @Nullable     public String getDetails();1536964057;Builds a string representation of the message and the failure if exists.;@Nullable_    public String getDetails() {_        if (message == null) {_            return null__        }_        return message + (failure == null ? "" : ", failure " + ExceptionsHelper.detailedMessage(failure))__    };builds,a,string,representation,of,the,message,and,the,failure,if,exists;nullable,public,string,get,details,if,message,null,return,null,return,message,failure,null,failure,exceptions,helper,detailed,message,failure
UnassignedInfo -> @Nullable     public String getDetails();1548236405;Builds a string representation of the message and the failure if exists.;@Nullable_    public String getDetails() {_        if (message == null) {_            return null__        }_        return message + (failure == null ? "" : ", failure " + ExceptionsHelper.detailedMessage(failure))__    };builds,a,string,representation,of,the,message,and,the,failure,if,exists;nullable,public,string,get,details,if,message,null,return,null,return,message,failure,null,failure,exceptions,helper,detailed,message,failure
UnassignedInfo -> @Nullable     public String getDetails();1549912434;Builds a string representation of the message and the failure if exists.;@Nullable_    public String getDetails() {_        if (message == null) {_            return null__        }_        return message + (failure == null ? "" : ", failure " + ExceptionsHelper.detailedMessage(failure))__    };builds,a,string,representation,of,the,message,and,the,failure,if,exists;nullable,public,string,get,details,if,message,null,return,null,return,message,failure,null,failure,exceptions,helper,detailed,message,failure
UnassignedInfo -> public UnassignedInfo(Reason reason, String message);1524684173;creates an UnassignedInfo object based on **current** time__@param reason  the cause for making this shard unassigned. See {@link Reason} for more information._@param message more information about cause.;public UnassignedInfo(Reason reason, String message) {_        this(reason, message, null, reason == Reason.ALLOCATION_FAILED ? 1 : 0, System.nanoTime(), System.currentTimeMillis(), false,_             AllocationStatus.NO_ATTEMPT)__    };creates,an,unassigned,info,object,based,on,current,time,param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause;public,unassigned,info,reason,reason,string,message,this,reason,message,null,reason,reason,1,0,system,nano,time,system,current,time,millis,false,allocation,status
UnassignedInfo -> public UnassignedInfo(Reason reason, String message);1533319589;creates an UnassignedInfo object based on **current** time__@param reason  the cause for making this shard unassigned. See {@link Reason} for more information._@param message more information about cause.;public UnassignedInfo(Reason reason, String message) {_        this(reason, message, null, reason == Reason.ALLOCATION_FAILED ? 1 : 0, System.nanoTime(), System.currentTimeMillis(), false,_             AllocationStatus.NO_ATTEMPT)__    };creates,an,unassigned,info,object,based,on,current,time,param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause;public,unassigned,info,reason,reason,string,message,this,reason,message,null,reason,reason,1,0,system,nano,time,system,current,time,millis,false,allocation,status
UnassignedInfo -> public UnassignedInfo(Reason reason, String message);1536964057;creates an UnassignedInfo object based on **current** time__@param reason  the cause for making this shard unassigned. See {@link Reason} for more information._@param message more information about cause.;public UnassignedInfo(Reason reason, String message) {_        this(reason, message, null, reason == Reason.ALLOCATION_FAILED ? 1 : 0, System.nanoTime(), System.currentTimeMillis(), false,_             AllocationStatus.NO_ATTEMPT)__    };creates,an,unassigned,info,object,based,on,current,time,param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause;public,unassigned,info,reason,reason,string,message,this,reason,message,null,reason,reason,1,0,system,nano,time,system,current,time,millis,false,allocation,status
UnassignedInfo -> public UnassignedInfo(Reason reason, String message);1548236405;creates an UnassignedInfo object based on **current** time__@param reason  the cause for making this shard unassigned. See {@link Reason} for more information._@param message more information about cause.;public UnassignedInfo(Reason reason, String message) {_        this(reason, message, null, reason == Reason.ALLOCATION_FAILED ? 1 : 0, System.nanoTime(), System.currentTimeMillis(), false,_             AllocationStatus.NO_ATTEMPT)__    };creates,an,unassigned,info,object,based,on,current,time,param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause;public,unassigned,info,reason,reason,string,message,this,reason,message,null,reason,reason,1,0,system,nano,time,system,current,time,millis,false,allocation,status
UnassignedInfo -> public UnassignedInfo(Reason reason, String message);1549912434;creates an UnassignedInfo object based on **current** time__@param reason  the cause for making this shard unassigned. See {@link Reason} for more information._@param message more information about cause.;public UnassignedInfo(Reason reason, String message) {_        this(reason, message, null, reason == Reason.ALLOCATION_FAILED ? 1 : 0, System.nanoTime(), System.currentTimeMillis(), false,_             AllocationStatus.NO_ATTEMPT)__    };creates,an,unassigned,info,object,based,on,current,time,param,reason,the,cause,for,making,this,shard,unassigned,see,link,reason,for,more,information,param,message,more,information,about,cause;public,unassigned,info,reason,reason,string,message,this,reason,message,null,reason,reason,1,0,system,nano,time,system,current,time,millis,false,allocation,status
UnassignedInfo -> public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings);1524684173;Calculates the delay left based on current time (in nanoseconds) and the delay defined by the index settings._Only relevant if shard is effectively delayed (see {@link #isDelayed()})_Returns 0 if delay is negative__@return calculated delay in nanoseconds;public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings) {_        long delayTimeoutNanos = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings).nanos()__        assert nanoTimeNow >= unassignedTimeNanos__        return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos))__    };calculates,the,delay,left,based,on,current,time,in,nanoseconds,and,the,delay,defined,by,the,index,settings,only,relevant,if,shard,is,effectively,delayed,see,link,is,delayed,returns,0,if,delay,is,negative,return,calculated,delay,in,nanoseconds;public,long,get,remaining,delay,final,long,nano,time,now,final,settings,index,settings,long,delay,timeout,nanos,get,index,settings,nanos,assert,nano,time,now,unassigned,time,nanos,return,math,max,0l,delay,timeout,nanos,nano,time,now,unassigned,time,nanos
UnassignedInfo -> public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings);1533319589;Calculates the delay left based on current time (in nanoseconds) and the delay defined by the index settings._Only relevant if shard is effectively delayed (see {@link #isDelayed()})_Returns 0 if delay is negative__@return calculated delay in nanoseconds;public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings) {_        long delayTimeoutNanos = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings).nanos()__        assert nanoTimeNow >= unassignedTimeNanos__        return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos))__    };calculates,the,delay,left,based,on,current,time,in,nanoseconds,and,the,delay,defined,by,the,index,settings,only,relevant,if,shard,is,effectively,delayed,see,link,is,delayed,returns,0,if,delay,is,negative,return,calculated,delay,in,nanoseconds;public,long,get,remaining,delay,final,long,nano,time,now,final,settings,index,settings,long,delay,timeout,nanos,get,index,settings,nanos,assert,nano,time,now,unassigned,time,nanos,return,math,max,0l,delay,timeout,nanos,nano,time,now,unassigned,time,nanos
UnassignedInfo -> public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings);1536964057;Calculates the delay left based on current time (in nanoseconds) and the delay defined by the index settings._Only relevant if shard is effectively delayed (see {@link #isDelayed()})_Returns 0 if delay is negative__@return calculated delay in nanoseconds;public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings) {_        long delayTimeoutNanos = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings).nanos()__        assert nanoTimeNow >= unassignedTimeNanos__        return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos))__    };calculates,the,delay,left,based,on,current,time,in,nanoseconds,and,the,delay,defined,by,the,index,settings,only,relevant,if,shard,is,effectively,delayed,see,link,is,delayed,returns,0,if,delay,is,negative,return,calculated,delay,in,nanoseconds;public,long,get,remaining,delay,final,long,nano,time,now,final,settings,index,settings,long,delay,timeout,nanos,get,index,settings,nanos,assert,nano,time,now,unassigned,time,nanos,return,math,max,0l,delay,timeout,nanos,nano,time,now,unassigned,time,nanos
UnassignedInfo -> public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings);1548236405;Calculates the delay left based on current time (in nanoseconds) and the delay defined by the index settings._Only relevant if shard is effectively delayed (see {@link #isDelayed()})_Returns 0 if delay is negative__@return calculated delay in nanoseconds;public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings) {_        long delayTimeoutNanos = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings).nanos()__        assert nanoTimeNow >= unassignedTimeNanos__        return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos))__    };calculates,the,delay,left,based,on,current,time,in,nanoseconds,and,the,delay,defined,by,the,index,settings,only,relevant,if,shard,is,effectively,delayed,see,link,is,delayed,returns,0,if,delay,is,negative,return,calculated,delay,in,nanoseconds;public,long,get,remaining,delay,final,long,nano,time,now,final,settings,index,settings,long,delay,timeout,nanos,get,index,settings,nanos,assert,nano,time,now,unassigned,time,nanos,return,math,max,0l,delay,timeout,nanos,nano,time,now,unassigned,time,nanos
UnassignedInfo -> public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings);1549912434;Calculates the delay left based on current time (in nanoseconds) and the delay defined by the index settings._Only relevant if shard is effectively delayed (see {@link #isDelayed()})_Returns 0 if delay is negative__@return calculated delay in nanoseconds;public long getRemainingDelay(final long nanoTimeNow, final Settings indexSettings) {_        long delayTimeoutNanos = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings).nanos()__        assert nanoTimeNow >= unassignedTimeNanos__        return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos))__    };calculates,the,delay,left,based,on,current,time,in,nanoseconds,and,the,delay,defined,by,the,index,settings,only,relevant,if,shard,is,effectively,delayed,see,link,is,delayed,returns,0,if,delay,is,negative,return,calculated,delay,in,nanoseconds;public,long,get,remaining,delay,final,long,nano,time,now,final,settings,index,settings,long,delay,timeout,nanos,get,index,settings,nanos,assert,nano,time,now,unassigned,time,nanos,return,math,max,0l,delay,timeout,nanos,nano,time,now,unassigned,time,nanos
UnassignedInfo -> public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state);1524684173;Finds the next (closest) delay expiration of an delayed shard in nanoseconds based on current time._Returns 0 if delay is negative._Returns -1 if no delayed shard is found.;public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state) {_        MetaData metaData = state.metaData()__        RoutingTable routingTable = state.routingTable()__        long nextDelayNanos = Long.MAX_VALUE__        for (ShardRouting shard : routingTable.shardsWithState(ShardRoutingState.UNASSIGNED)) {_            UnassignedInfo unassignedInfo = shard.unassignedInfo()__            if (unassignedInfo.isDelayed()) {_                Settings indexSettings = metaData.index(shard.index()).getSettings()__                _                final long newComputedLeftDelayNanos = unassignedInfo.getRemainingDelay(currentNanoTime, indexSettings)__                if (newComputedLeftDelayNanos < nextDelayNanos) {_                    nextDelayNanos = newComputedLeftDelayNanos__                }_            }_        }_        return nextDelayNanos == Long.MAX_VALUE ? -1L : nextDelayNanos__    };finds,the,next,closest,delay,expiration,of,an,delayed,shard,in,nanoseconds,based,on,current,time,returns,0,if,delay,is,negative,returns,1,if,no,delayed,shard,is,found;public,static,long,find,next,delayed,allocation,long,current,nano,time,cluster,state,state,meta,data,meta,data,state,meta,data,routing,table,routing,table,state,routing,table,long,next,delay,nanos,long,for,shard,routing,shard,routing,table,shards,with,state,shard,routing,state,unassigned,unassigned,info,unassigned,info,shard,unassigned,info,if,unassigned,info,is,delayed,settings,index,settings,meta,data,index,shard,index,get,settings,final,long,new,computed,left,delay,nanos,unassigned,info,get,remaining,delay,current,nano,time,index,settings,if,new,computed,left,delay,nanos,next,delay,nanos,next,delay,nanos,new,computed,left,delay,nanos,return,next,delay,nanos,long,1l,next,delay,nanos
UnassignedInfo -> public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state);1533319589;Finds the next (closest) delay expiration of an delayed shard in nanoseconds based on current time._Returns 0 if delay is negative._Returns -1 if no delayed shard is found.;public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state) {_        MetaData metaData = state.metaData()__        RoutingTable routingTable = state.routingTable()__        long nextDelayNanos = Long.MAX_VALUE__        for (ShardRouting shard : routingTable.shardsWithState(ShardRoutingState.UNASSIGNED)) {_            UnassignedInfo unassignedInfo = shard.unassignedInfo()__            if (unassignedInfo.isDelayed()) {_                Settings indexSettings = metaData.index(shard.index()).getSettings()__                _                final long newComputedLeftDelayNanos = unassignedInfo.getRemainingDelay(currentNanoTime, indexSettings)__                if (newComputedLeftDelayNanos < nextDelayNanos) {_                    nextDelayNanos = newComputedLeftDelayNanos__                }_            }_        }_        return nextDelayNanos == Long.MAX_VALUE ? -1L : nextDelayNanos__    };finds,the,next,closest,delay,expiration,of,an,delayed,shard,in,nanoseconds,based,on,current,time,returns,0,if,delay,is,negative,returns,1,if,no,delayed,shard,is,found;public,static,long,find,next,delayed,allocation,long,current,nano,time,cluster,state,state,meta,data,meta,data,state,meta,data,routing,table,routing,table,state,routing,table,long,next,delay,nanos,long,for,shard,routing,shard,routing,table,shards,with,state,shard,routing,state,unassigned,unassigned,info,unassigned,info,shard,unassigned,info,if,unassigned,info,is,delayed,settings,index,settings,meta,data,index,shard,index,get,settings,final,long,new,computed,left,delay,nanos,unassigned,info,get,remaining,delay,current,nano,time,index,settings,if,new,computed,left,delay,nanos,next,delay,nanos,next,delay,nanos,new,computed,left,delay,nanos,return,next,delay,nanos,long,1l,next,delay,nanos
UnassignedInfo -> public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state);1536964057;Finds the next (closest) delay expiration of an delayed shard in nanoseconds based on current time._Returns 0 if delay is negative._Returns -1 if no delayed shard is found.;public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state) {_        MetaData metaData = state.metaData()__        RoutingTable routingTable = state.routingTable()__        long nextDelayNanos = Long.MAX_VALUE__        for (ShardRouting shard : routingTable.shardsWithState(ShardRoutingState.UNASSIGNED)) {_            UnassignedInfo unassignedInfo = shard.unassignedInfo()__            if (unassignedInfo.isDelayed()) {_                Settings indexSettings = metaData.index(shard.index()).getSettings()__                _                final long newComputedLeftDelayNanos = unassignedInfo.getRemainingDelay(currentNanoTime, indexSettings)__                if (newComputedLeftDelayNanos < nextDelayNanos) {_                    nextDelayNanos = newComputedLeftDelayNanos__                }_            }_        }_        return nextDelayNanos == Long.MAX_VALUE ? -1L : nextDelayNanos__    };finds,the,next,closest,delay,expiration,of,an,delayed,shard,in,nanoseconds,based,on,current,time,returns,0,if,delay,is,negative,returns,1,if,no,delayed,shard,is,found;public,static,long,find,next,delayed,allocation,long,current,nano,time,cluster,state,state,meta,data,meta,data,state,meta,data,routing,table,routing,table,state,routing,table,long,next,delay,nanos,long,for,shard,routing,shard,routing,table,shards,with,state,shard,routing,state,unassigned,unassigned,info,unassigned,info,shard,unassigned,info,if,unassigned,info,is,delayed,settings,index,settings,meta,data,index,shard,index,get,settings,final,long,new,computed,left,delay,nanos,unassigned,info,get,remaining,delay,current,nano,time,index,settings,if,new,computed,left,delay,nanos,next,delay,nanos,next,delay,nanos,new,computed,left,delay,nanos,return,next,delay,nanos,long,1l,next,delay,nanos
UnassignedInfo -> public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state);1548236405;Finds the next (closest) delay expiration of an delayed shard in nanoseconds based on current time._Returns 0 if delay is negative._Returns -1 if no delayed shard is found.;public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state) {_        MetaData metaData = state.metaData()__        RoutingTable routingTable = state.routingTable()__        long nextDelayNanos = Long.MAX_VALUE__        for (ShardRouting shard : routingTable.shardsWithState(ShardRoutingState.UNASSIGNED)) {_            UnassignedInfo unassignedInfo = shard.unassignedInfo()__            if (unassignedInfo.isDelayed()) {_                Settings indexSettings = metaData.index(shard.index()).getSettings()__                _                final long newComputedLeftDelayNanos = unassignedInfo.getRemainingDelay(currentNanoTime, indexSettings)__                if (newComputedLeftDelayNanos < nextDelayNanos) {_                    nextDelayNanos = newComputedLeftDelayNanos__                }_            }_        }_        return nextDelayNanos == Long.MAX_VALUE ? -1L : nextDelayNanos__    };finds,the,next,closest,delay,expiration,of,an,delayed,shard,in,nanoseconds,based,on,current,time,returns,0,if,delay,is,negative,returns,1,if,no,delayed,shard,is,found;public,static,long,find,next,delayed,allocation,long,current,nano,time,cluster,state,state,meta,data,meta,data,state,meta,data,routing,table,routing,table,state,routing,table,long,next,delay,nanos,long,for,shard,routing,shard,routing,table,shards,with,state,shard,routing,state,unassigned,unassigned,info,unassigned,info,shard,unassigned,info,if,unassigned,info,is,delayed,settings,index,settings,meta,data,index,shard,index,get,settings,final,long,new,computed,left,delay,nanos,unassigned,info,get,remaining,delay,current,nano,time,index,settings,if,new,computed,left,delay,nanos,next,delay,nanos,next,delay,nanos,new,computed,left,delay,nanos,return,next,delay,nanos,long,1l,next,delay,nanos
UnassignedInfo -> public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state);1549912434;Finds the next (closest) delay expiration of an delayed shard in nanoseconds based on current time._Returns 0 if delay is negative._Returns -1 if no delayed shard is found.;public static long findNextDelayedAllocation(long currentNanoTime, ClusterState state) {_        MetaData metaData = state.metaData()__        RoutingTable routingTable = state.routingTable()__        long nextDelayNanos = Long.MAX_VALUE__        for (ShardRouting shard : routingTable.shardsWithState(ShardRoutingState.UNASSIGNED)) {_            UnassignedInfo unassignedInfo = shard.unassignedInfo()__            if (unassignedInfo.isDelayed()) {_                Settings indexSettings = metaData.index(shard.index()).getSettings()__                _                final long newComputedLeftDelayNanos = unassignedInfo.getRemainingDelay(currentNanoTime, indexSettings)__                if (newComputedLeftDelayNanos < nextDelayNanos) {_                    nextDelayNanos = newComputedLeftDelayNanos__                }_            }_        }_        return nextDelayNanos == Long.MAX_VALUE ? -1L : nextDelayNanos__    };finds,the,next,closest,delay,expiration,of,an,delayed,shard,in,nanoseconds,based,on,current,time,returns,0,if,delay,is,negative,returns,1,if,no,delayed,shard,is,found;public,static,long,find,next,delayed,allocation,long,current,nano,time,cluster,state,state,meta,data,meta,data,state,meta,data,routing,table,routing,table,state,routing,table,long,next,delay,nanos,long,for,shard,routing,shard,routing,table,shards,with,state,shard,routing,state,unassigned,unassigned,info,unassigned,info,shard,unassigned,info,if,unassigned,info,is,delayed,settings,index,settings,meta,data,index,shard,index,get,settings,final,long,new,computed,left,delay,nanos,unassigned,info,get,remaining,delay,current,nano,time,index,settings,if,new,computed,left,delay,nanos,next,delay,nanos,next,delay,nanos,new,computed,left,delay,nanos,return,next,delay,nanos,long,1l,next,delay,nanos
UnassignedInfo -> @Nullable     public Exception getFailure();1524684173;Returns additional failure exception details if exists.;@Nullable_    public Exception getFailure() {_        return failure__    };returns,additional,failure,exception,details,if,exists;nullable,public,exception,get,failure,return,failure
UnassignedInfo -> @Nullable     public Exception getFailure();1533319589;Returns additional failure exception details if exists.;@Nullable_    public Exception getFailure() {_        return failure__    };returns,additional,failure,exception,details,if,exists;nullable,public,exception,get,failure,return,failure
UnassignedInfo -> @Nullable     public Exception getFailure();1536964057;Returns additional failure exception details if exists.;@Nullable_    public Exception getFailure() {_        return failure__    };returns,additional,failure,exception,details,if,exists;nullable,public,exception,get,failure,return,failure
UnassignedInfo -> @Nullable     public Exception getFailure();1548236405;Returns additional failure exception details if exists.;@Nullable_    public Exception getFailure() {_        return failure__    };returns,additional,failure,exception,details,if,exists;nullable,public,exception,get,failure,return,failure
UnassignedInfo -> @Nullable     public Exception getFailure();1549912434;Returns additional failure exception details if exists.;@Nullable_    public Exception getFailure() {_        return failure__    };returns,additional,failure,exception,details,if,exists;nullable,public,exception,get,failure,return,failure
UnassignedInfo -> public AllocationStatus getLastAllocationStatus();1524684173;Get the status for the last allocation attempt for this shard.;public AllocationStatus getLastAllocationStatus() {_        return lastAllocationStatus__    };get,the,status,for,the,last,allocation,attempt,for,this,shard;public,allocation,status,get,last,allocation,status,return,last,allocation,status
UnassignedInfo -> public AllocationStatus getLastAllocationStatus();1533319589;Get the status for the last allocation attempt for this shard.;public AllocationStatus getLastAllocationStatus() {_        return lastAllocationStatus__    };get,the,status,for,the,last,allocation,attempt,for,this,shard;public,allocation,status,get,last,allocation,status,return,last,allocation,status
UnassignedInfo -> public AllocationStatus getLastAllocationStatus();1536964057;Get the status for the last allocation attempt for this shard.;public AllocationStatus getLastAllocationStatus() {_        return lastAllocationStatus__    };get,the,status,for,the,last,allocation,attempt,for,this,shard;public,allocation,status,get,last,allocation,status,return,last,allocation,status
UnassignedInfo -> public AllocationStatus getLastAllocationStatus();1548236405;Get the status for the last allocation attempt for this shard.;public AllocationStatus getLastAllocationStatus() {_        return lastAllocationStatus__    };get,the,status,for,the,last,allocation,attempt,for,this,shard;public,allocation,status,get,last,allocation,status,return,last,allocation,status
UnassignedInfo -> public AllocationStatus getLastAllocationStatus();1549912434;Get the status for the last allocation attempt for this shard.;public AllocationStatus getLastAllocationStatus() {_        return lastAllocationStatus__    };get,the,status,for,the,last,allocation,attempt,for,this,shard;public,allocation,status,get,last,allocation,status,return,last,allocation,status
