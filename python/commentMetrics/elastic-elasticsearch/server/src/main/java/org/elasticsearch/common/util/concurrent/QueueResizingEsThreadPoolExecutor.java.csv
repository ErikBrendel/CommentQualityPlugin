# id;timestamp;commentText;codeText;commentWords;codeWords
QueueResizingEsThreadPoolExecutor -> public int getCurrentQueueSize();1524684173;Returns the current queue size (operations that are queued);public int getCurrentQueueSize() {_        return workQueue.size()__    };returns,the,current,queue,size,operations,that,are,queued;public,int,get,current,queue,size,return,work,queue,size
QueueResizingEsThreadPoolExecutor -> public int getCurrentQueueSize();1528762805;Returns the current queue size (operations that are queued);public int getCurrentQueueSize() {_        return workQueue.size()__    };returns,the,current,queue,size,operations,that,are,queued;public,int,get,current,queue,size,return,work,queue,size
QueueResizingEsThreadPoolExecutor -> public int getCurrentQueueSize();1539615817;Returns the current queue size (operations that are queued);public int getCurrentQueueSize() {_        return workQueue.size()__    };returns,the,current,queue,size,operations,that,are,queued;public,int,get,current,queue,size,return,work,queue,size
QueueResizingEsThreadPoolExecutor -> public int getCurrentQueueSize();1547743595;Returns the current queue size (operations that are queued);public int getCurrentQueueSize() {_        return workQueue.size()__    };returns,the,current,queue,size,operations,that,are,queued;public,int,get,current,queue,size,return,work,queue,size
QueueResizingEsThreadPoolExecutor -> static int calculateL(final double lambda, final long targetedResponseTimeNanos);1524684173;Calculate Little's Law (L), which is the "optimal" queue size for a particular task rate (lambda) and targeted response time.__@param lambda the arrival rate of tasks in nanoseconds_@param targetedResponseTimeNanos nanoseconds for the average targeted response rate of requests_@return the optimal queue size for the give task rate and targeted response time;static int calculateL(final double lambda, final long targetedResponseTimeNanos) {_        assert targetedResponseTimeNanos > 0 : "cannot calculate for instantaneous requests"__        _        return Math.toIntExact((long)(lambda * targetedResponseTimeNanos))__    };calculate,little,s,law,l,which,is,the,optimal,queue,size,for,a,particular,task,rate,lambda,and,targeted,response,time,param,lambda,the,arrival,rate,of,tasks,in,nanoseconds,param,targeted,response,time,nanos,nanoseconds,for,the,average,targeted,response,rate,of,requests,return,the,optimal,queue,size,for,the,give,task,rate,and,targeted,response,time;static,int,calculate,l,final,double,lambda,final,long,targeted,response,time,nanos,assert,targeted,response,time,nanos,0,cannot,calculate,for,instantaneous,requests,return,math,to,int,exact,long,lambda,targeted,response,time,nanos
QueueResizingEsThreadPoolExecutor -> static int calculateL(final double lambda, final long targetedResponseTimeNanos);1528762805;Calculate Little's Law (L), which is the "optimal" queue size for a particular task rate (lambda) and targeted response time.__@param lambda the arrival rate of tasks in nanoseconds_@param targetedResponseTimeNanos nanoseconds for the average targeted response rate of requests_@return the optimal queue size for the give task rate and targeted response time;static int calculateL(final double lambda, final long targetedResponseTimeNanos) {_        assert targetedResponseTimeNanos > 0 : "cannot calculate for instantaneous requests"__        _        return Math.toIntExact((long)(lambda * targetedResponseTimeNanos))__    };calculate,little,s,law,l,which,is,the,optimal,queue,size,for,a,particular,task,rate,lambda,and,targeted,response,time,param,lambda,the,arrival,rate,of,tasks,in,nanoseconds,param,targeted,response,time,nanos,nanoseconds,for,the,average,targeted,response,rate,of,requests,return,the,optimal,queue,size,for,the,give,task,rate,and,targeted,response,time;static,int,calculate,l,final,double,lambda,final,long,targeted,response,time,nanos,assert,targeted,response,time,nanos,0,cannot,calculate,for,instantaneous,requests,return,math,to,int,exact,long,lambda,targeted,response,time,nanos
QueueResizingEsThreadPoolExecutor -> static int calculateL(final double lambda, final long targetedResponseTimeNanos);1539615817;Calculate Little's Law (L), which is the "optimal" queue size for a particular task rate (lambda) and targeted response time.__@param lambda the arrival rate of tasks in nanoseconds_@param targetedResponseTimeNanos nanoseconds for the average targeted response rate of requests_@return the optimal queue size for the give task rate and targeted response time;static int calculateL(final double lambda, final long targetedResponseTimeNanos) {_        assert targetedResponseTimeNanos > 0 : "cannot calculate for instantaneous requests"__        _        return Math.toIntExact((long)(lambda * targetedResponseTimeNanos))__    };calculate,little,s,law,l,which,is,the,optimal,queue,size,for,a,particular,task,rate,lambda,and,targeted,response,time,param,lambda,the,arrival,rate,of,tasks,in,nanoseconds,param,targeted,response,time,nanos,nanoseconds,for,the,average,targeted,response,rate,of,requests,return,the,optimal,queue,size,for,the,give,task,rate,and,targeted,response,time;static,int,calculate,l,final,double,lambda,final,long,targeted,response,time,nanos,assert,targeted,response,time,nanos,0,cannot,calculate,for,instantaneous,requests,return,math,to,int,exact,long,lambda,targeted,response,time,nanos
QueueResizingEsThreadPoolExecutor -> static int calculateL(final double lambda, final long targetedResponseTimeNanos);1547743595;Calculate Little's Law (L), which is the "optimal" queue size for a particular task rate (lambda) and targeted response time.__@param lambda the arrival rate of tasks in nanoseconds_@param targetedResponseTimeNanos nanoseconds for the average targeted response rate of requests_@return the optimal queue size for the give task rate and targeted response time;static int calculateL(final double lambda, final long targetedResponseTimeNanos) {_        assert targetedResponseTimeNanos > 0 : "cannot calculate for instantaneous requests"__        _        return Math.toIntExact((long)(lambda * targetedResponseTimeNanos))__    };calculate,little,s,law,l,which,is,the,optimal,queue,size,for,a,particular,task,rate,lambda,and,targeted,response,time,param,lambda,the,arrival,rate,of,tasks,in,nanoseconds,param,targeted,response,time,nanos,nanoseconds,for,the,average,targeted,response,rate,of,requests,return,the,optimal,queue,size,for,the,give,task,rate,and,targeted,response,time;static,int,calculate,l,final,double,lambda,final,long,targeted,response,time,nanos,assert,targeted,response,time,nanos,0,cannot,calculate,for,instantaneous,requests,return,math,to,int,exact,long,lambda,targeted,response,time,nanos
QueueResizingEsThreadPoolExecutor -> public int getCurrentCapacity();1524684173;Returns the current queue capacity;public int getCurrentCapacity() {_        return workQueue.capacity()__    };returns,the,current,queue,capacity;public,int,get,current,capacity,return,work,queue,capacity
QueueResizingEsThreadPoolExecutor -> public int getCurrentCapacity();1528762805;Returns the current queue capacity;public int getCurrentCapacity() {_        return workQueue.capacity()__    };returns,the,current,queue,capacity;public,int,get,current,capacity,return,work,queue,capacity
QueueResizingEsThreadPoolExecutor -> public int getCurrentCapacity();1539615817;Returns the current queue capacity;public int getCurrentCapacity() {_        return workQueue.capacity()__    };returns,the,current,queue,capacity;public,int,get,current,capacity,return,work,queue,capacity
QueueResizingEsThreadPoolExecutor -> public int getCurrentCapacity();1547743595;Returns the current queue capacity;public int getCurrentCapacity() {_        return workQueue.capacity()__    };returns,the,current,queue,capacity;public,int,get,current,capacity,return,work,queue,capacity
QueueResizingEsThreadPoolExecutor -> static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos);1524684173;Calculate task rate (λ), for a fixed number of tasks and time it took those tasks to be measured__@param totalNumberOfTasks total number of tasks that were measured_@param totalFrameTaskNanos nanoseconds during which the tasks were received_@return the rate of tasks in the system;static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos) {_        assert totalFrameTaskNanos > 0 : "cannot calculate for instantaneous tasks, got: " + totalFrameTaskNanos__        assert totalNumberOfTasks > 0 : "cannot calculate for no tasks, got: " + totalNumberOfTasks__        _        _        _        __        _        return (double) totalNumberOfTasks / totalFrameTaskNanos__    };calculate,task,rate,for,a,fixed,number,of,tasks,and,time,it,took,those,tasks,to,be,measured,param,total,number,of,tasks,total,number,of,tasks,that,were,measured,param,total,frame,task,nanos,nanoseconds,during,which,the,tasks,were,received,return,the,rate,of,tasks,in,the,system;static,double,calculate,lambda,final,int,total,number,of,tasks,final,long,total,frame,task,nanos,assert,total,frame,task,nanos,0,cannot,calculate,for,instantaneous,tasks,got,total,frame,task,nanos,assert,total,number,of,tasks,0,cannot,calculate,for,no,tasks,got,total,number,of,tasks,return,double,total,number,of,tasks,total,frame,task,nanos
QueueResizingEsThreadPoolExecutor -> static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos);1528762805;Calculate task rate (λ), for a fixed number of tasks and time it took those tasks to be measured__@param totalNumberOfTasks total number of tasks that were measured_@param totalFrameTaskNanos nanoseconds during which the tasks were received_@return the rate of tasks in the system;static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos) {_        assert totalFrameTaskNanos > 0 : "cannot calculate for instantaneous tasks, got: " + totalFrameTaskNanos__        assert totalNumberOfTasks > 0 : "cannot calculate for no tasks, got: " + totalNumberOfTasks__        _        _        _        __        _        return (double) totalNumberOfTasks / totalFrameTaskNanos__    };calculate,task,rate,for,a,fixed,number,of,tasks,and,time,it,took,those,tasks,to,be,measured,param,total,number,of,tasks,total,number,of,tasks,that,were,measured,param,total,frame,task,nanos,nanoseconds,during,which,the,tasks,were,received,return,the,rate,of,tasks,in,the,system;static,double,calculate,lambda,final,int,total,number,of,tasks,final,long,total,frame,task,nanos,assert,total,frame,task,nanos,0,cannot,calculate,for,instantaneous,tasks,got,total,frame,task,nanos,assert,total,number,of,tasks,0,cannot,calculate,for,no,tasks,got,total,number,of,tasks,return,double,total,number,of,tasks,total,frame,task,nanos
QueueResizingEsThreadPoolExecutor -> static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos);1539615817;Calculate task rate (λ), for a fixed number of tasks and time it took those tasks to be measured__@param totalNumberOfTasks total number of tasks that were measured_@param totalFrameTaskNanos nanoseconds during which the tasks were received_@return the rate of tasks in the system;static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos) {_        assert totalFrameTaskNanos > 0 : "cannot calculate for instantaneous tasks, got: " + totalFrameTaskNanos__        assert totalNumberOfTasks > 0 : "cannot calculate for no tasks, got: " + totalNumberOfTasks__        _        _        _        __        _        return (double) totalNumberOfTasks / totalFrameTaskNanos__    };calculate,task,rate,for,a,fixed,number,of,tasks,and,time,it,took,those,tasks,to,be,measured,param,total,number,of,tasks,total,number,of,tasks,that,were,measured,param,total,frame,task,nanos,nanoseconds,during,which,the,tasks,were,received,return,the,rate,of,tasks,in,the,system;static,double,calculate,lambda,final,int,total,number,of,tasks,final,long,total,frame,task,nanos,assert,total,frame,task,nanos,0,cannot,calculate,for,instantaneous,tasks,got,total,frame,task,nanos,assert,total,number,of,tasks,0,cannot,calculate,for,no,tasks,got,total,number,of,tasks,return,double,total,number,of,tasks,total,frame,task,nanos
QueueResizingEsThreadPoolExecutor -> static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos);1547743595;Calculate task rate (λ), for a fixed number of tasks and time it took those tasks to be measured__@param totalNumberOfTasks total number of tasks that were measured_@param totalFrameTaskNanos nanoseconds during which the tasks were received_@return the rate of tasks in the system;static double calculateLambda(final int totalNumberOfTasks, final long totalFrameTaskNanos) {_        assert totalFrameTaskNanos > 0 : "cannot calculate for instantaneous tasks, got: " + totalFrameTaskNanos__        assert totalNumberOfTasks > 0 : "cannot calculate for no tasks, got: " + totalNumberOfTasks__        _        _        _        __        _        return (double) totalNumberOfTasks / totalFrameTaskNanos__    };calculate,task,rate,for,a,fixed,number,of,tasks,and,time,it,took,those,tasks,to,be,measured,param,total,number,of,tasks,total,number,of,tasks,that,were,measured,param,total,frame,task,nanos,nanoseconds,during,which,the,tasks,were,received,return,the,rate,of,tasks,in,the,system;static,double,calculate,lambda,final,int,total,number,of,tasks,final,long,total,frame,task,nanos,assert,total,frame,task,nanos,0,cannot,calculate,for,instantaneous,tasks,got,total,frame,task,nanos,assert,total,number,of,tasks,0,cannot,calculate,for,no,tasks,got,total,number,of,tasks,return,double,total,number,of,tasks,total,frame,task,nanos
QueueResizingEsThreadPoolExecutor -> public double getTaskExecutionEWMA();1524684173;Returns the exponentially weighted moving average of the task execution time;public double getTaskExecutionEWMA() {_        return executionEWMA.getAverage()__    };returns,the,exponentially,weighted,moving,average,of,the,task,execution,time;public,double,get,task,execution,ewma,return,execution,ewma,get,average
QueueResizingEsThreadPoolExecutor -> public double getTaskExecutionEWMA();1528762805;Returns the exponentially weighted moving average of the task execution time;public double getTaskExecutionEWMA() {_        return executionEWMA.getAverage()__    };returns,the,exponentially,weighted,moving,average,of,the,task,execution,time;public,double,get,task,execution,ewma,return,execution,ewma,get,average
QueueResizingEsThreadPoolExecutor -> public double getTaskExecutionEWMA();1539615817;Returns the exponentially weighted moving average of the task execution time;public double getTaskExecutionEWMA() {_        return executionEWMA.getAverage()__    };returns,the,exponentially,weighted,moving,average,of,the,task,execution,time;public,double,get,task,execution,ewma,return,execution,ewma,get,average
QueueResizingEsThreadPoolExecutor -> public double getTaskExecutionEWMA();1547743595;Returns the exponentially weighted moving average of the task execution time;public double getTaskExecutionEWMA() {_        return executionEWMA.getAverage()__    };returns,the,exponentially,weighted,moving,average,of,the,task,execution,time;public,double,get,task,execution,ewma,return,execution,ewma,get,average
