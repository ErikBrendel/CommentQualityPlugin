commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_node_attrs_action". }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/nodeattrs\n"). }
false;public;1;4;;@Override public RestResponse buildResponse(NodesInfoResponse nodesInfoResponse) throws Exception {     return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel). }
false;public;1;11;;@Override public void processResponse(final ClusterStateResponse clusterStateResponse) {     NodesInfoRequest nodesInfoRequest = new NodesInfoRequest().     nodesInfoRequest.clear().jvm(false).os(false).process(true).     client.admin().cluster().nodesInfo(nodesInfoRequest, new RestResponseListener<NodesInfoResponse>(channel) {          @Override         public RestResponse buildResponse(NodesInfoResponse nodesInfoResponse) throws Exception {             return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel).         }     }). }
false;public;2;21;;@Override public RestChannelConsumer doCatRequest(final RestRequest request, final NodeClient client) {     final ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.clear().nodes(true).     clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local())).     clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().state(clusterStateRequest, new RestActionListener<ClusterStateResponse>(channel) {          @Override         public void processResponse(final ClusterStateResponse clusterStateResponse) {             NodesInfoRequest nodesInfoRequest = new NodesInfoRequest().             nodesInfoRequest.clear().jvm(false).os(false).process(true).             client.admin().cluster().nodesInfo(nodesInfoRequest, new RestResponseListener<NodesInfoResponse>(channel) {                  @Override                 public RestResponse buildResponse(NodesInfoResponse nodesInfoResponse) throws Exception {                     return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel).                 }             }).         }     }). }
false;protected;1;15;;@Override protected Table getTableWithHeader(final RestRequest request) {     Table table = new Table().     table.startHeaders().     table.addCell("node", "default:true.alias:name.desc:node name").     table.addCell("id", "default:false.alias:id,nodeId.desc:unique node id").     table.addCell("pid", "default:false.alias:p.desc:process id").     table.addCell("host", "alias:h.desc:host name").     table.addCell("ip", "alias:i.desc:ip address").     table.addCell("port", "default:false.alias:po.desc:bound transport port").     table.addCell("attr", "default:true.alias:attr.name.desc:attribute description").     table.addCell("value", "default:true.alias:attr.value.desc:attribute value").     table.endHeaders().     return table. }
false;private;3;23;;private Table buildTable(RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo) {     boolean fullId = req.paramAsBoolean("full_id", false).     DiscoveryNodes nodes = state.getState().nodes().     Table table = getTableWithHeader(req).     for (DiscoveryNode node : nodes) {         NodeInfo info = nodesInfo.getNodesMap().get(node.getId()).         for (Map.Entry<String, String> attrEntry : node.getAttributes().entrySet()) {             table.startRow().             table.addCell(node.getName()).             table.addCell(fullId ? node.getId() : Strings.substring(node.getId(), 0, 4)).             table.addCell(info == null ? null : info.getProcess().getId()).             table.addCell(node.getHostName()).             table.addCell(node.getHostAddress()).             table.addCell(node.getAddress().address().getPort()).             table.addCell(attrEntry.getKey()).             table.addCell(attrEntry.getValue()).             table.endRow().         }     }     return table. }
