# id;timestamp;commentText;codeText;commentWords;codeWords
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1524684173;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1525248068;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1525334055;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1528904315;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1531179852;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1535046779;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1535383145;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536137328;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536177418;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536218260;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536611444;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536828374;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1536964057;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1539951844;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1544081506;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> AffixSetting -> public Set<String> getNamespaces(Settings settings);1546877578;Returns distinct namespaces for the given settings;public Set<String> getNamespaces(Settings settings) {_            return settings.keySet().stream().filter(this::match).map(key::getNamespace).collect(Collectors.toSet())__        };returns,distinct,namespaces,for,the,given,settings;public,set,string,get,namespaces,settings,settings,return,settings,key,set,stream,filter,this,match,map,key,get,namespace,collect,collectors,to,set
Setting -> boolean isGroupSetting();1524684173;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like <tt>cluster.store.</tt> that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,tt,cluster,store,tt,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1525248068;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like <tt>cluster.store.</tt> that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,tt,cluster,store,tt,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1525334055;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1528904315;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1531179852;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1535046779;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1535383145;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536137328;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536177418;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536218260;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536611444;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536828374;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1536964057;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1539951844;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1544081506;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> boolean isGroupSetting();1546877578;Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value._The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like {@code cluster.store.} that matches all settings_with this prefix.;boolean isGroupSetting() {_        return false__    };returns,code,true,code,iff,this,setting,is,a,group,setting,group,settings,represent,a,set,of,settings,rather,than,a,single,value,the,key,see,link,get,key,in,contrast,to,non,group,settings,is,a,prefix,like,code,cluster,store,that,matches,all,settings,with,this,prefix;boolean,is,group,setting,return,false
Setting -> AffixKey -> String getNamespace(String key);1524684173;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1525248068;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1525334055;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1528904315;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1531179852;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1535046779;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1535383145;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536137328;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536177418;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536218260;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536611444;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536828374;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1536964057;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1539951844;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1544081506;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> AffixKey -> String getNamespace(String key);1546877578;Returns a string representation of the concrete setting key;String getNamespace(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(2)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,namespace,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,2
Setting -> public boolean isDeprecated();1524684173;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1525248068;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1525334055;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1528904315;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1531179852;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1535046779;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1535383145;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536137328;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536177418;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536218260;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536611444;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536828374;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1536964057;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1539951844;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1544081506;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public boolean isDeprecated();1546877578;Returns <code>true</code> if this setting is deprecated, otherwise <code>false</code>;public boolean isDeprecated() {_        return properties.contains(Property.Deprecated)__    };returns,code,true,code,if,this,setting,is,deprecated,otherwise,code,false,code;public,boolean,is,deprecated,return,properties,contains,property,deprecated
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1524684173;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1525248068;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1525334055;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1528904315;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1531179852;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1535046779;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1535383145;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536137328;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536177418;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536218260;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536611444;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536828374;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1536964057;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1539951844;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1544081506;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,                                                       AffixSetting... dependencies);1546877578;This setting type allows to validate settings that have the same type and a common prefix and suffix. For instance_storage.${backend}.enable=[true|false] can easily be added with this setting. Yet, affix key settings don't support updaters_out of the box unless {@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> affixKeySetting(String prefix, String suffix, Function<String, Setting<T>> delegateFactory,_                                                      AffixSetting... dependencies) {_        return affixKeySetting(new AffixKey(prefix, suffix), delegateFactory, dependencies)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,and,suffix,for,instance,storage,backend,enable,true,false,can,easily,be,added,with,this,setting,yet,affix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,affix,key,setting,string,prefix,string,suffix,function,string,setting,t,delegate,factory,affix,setting,dependencies,return,affix,key,setting,new,affix,key,prefix,suffix,delegate,factory,dependencies
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1524684173;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1525248068;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1525334055;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1528904315;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1531179852;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1535046779;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1535383145;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536137328;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536177418;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536218260;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536611444;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536828374;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1536964057;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1539951844;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1544081506;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory);1546877578;This setting type allows to validate settings that have the same type and a common prefix. For instance feature.${type}=[true|false]_can easily be added with this setting. Yet, prefix key settings don't support updaters out of the box unless_{@link #getConcreteSetting(String)} is used to pull the updater.;public static <T> AffixSetting<T> prefixKeySetting(String prefix, Function<String, Setting<T>> delegateFactory) {_        return affixKeySetting(new AffixKey(prefix), delegateFactory)__    };this,setting,type,allows,to,validate,settings,that,have,the,same,type,and,a,common,prefix,for,instance,feature,type,true,false,can,easily,be,added,with,this,setting,yet,prefix,key,settings,don,t,support,updaters,out,of,the,box,unless,link,get,concrete,setting,string,is,used,to,pull,the,updater;public,static,t,affix,setting,t,prefix,key,setting,string,prefix,function,string,setting,t,delegate,factory,return,affix,key,setting,new,affix,key,prefix,delegate,factory
Setting -> public boolean hasNodeScope();1524684173;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1525248068;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1525334055;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1528904315;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1531179852;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1535046779;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1535383145;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536137328;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536177418;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536218260;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536611444;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536828374;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1536964057;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1539951844;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1544081506;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> public boolean hasNodeScope();1546877578;Returns <code>true</code> if this setting has a node scope, otherwise <code>false</code>;public boolean hasNodeScope() {_        return properties.contains(Property.NodeScope)__    };returns,code,true,code,if,this,setting,has,a,node,scope,otherwise,code,false,code;public,boolean,has,node,scope,return,properties,contains,property,node,scope
Setting -> AffixKey -> String getConcreteString(String key);1524684173;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1525248068;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1525334055;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1528904315;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1531179852;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1535046779;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1535383145;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536137328;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536177418;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536218260;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536611444;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536828374;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1536964057;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1539951844;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1544081506;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> AffixKey -> String getConcreteString(String key);1546877578;Returns a string representation of the concrete setting key;String getConcreteString(String key) {_            Matcher matcher = pattern.matcher(key)__            if (matcher.matches() == false) {_                throw new IllegalStateException("can't get concrete string for key " + key + " key doesn't match")__            }_            return matcher.group(1)__        };returns,a,string,representation,of,the,concrete,setting,key;string,get,concrete,string,string,key,matcher,matcher,pattern,matcher,key,if,matcher,matches,false,throw,new,illegal,state,exception,can,t,get,concrete,string,for,key,key,key,doesn,t,match,return,matcher,group,1
Setting -> public final String getRaw(final Settings settings);1536177418;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1536218260;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1536611444;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1536828374;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1536964057;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1539951844;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1544081506;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> public final String getRaw(final Settings settings);1546877578;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public final String getRaw(final Settings settings) {_        checkDeprecation(settings)__        return innerGetRaw(settings)__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,final,string,get,raw,final,settings,settings,check,deprecation,settings,return,inner,get,raw,settings
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1524684173;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1525248068;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1525334055;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1528904315;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1531179852;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1535046779;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1535383145;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536137328;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536177418;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536218260;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536611444;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536828374;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1536964057;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1539951844;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1544081506;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> AffixSetting -> public Setting<T> getConcreteSettingForNamespace(String namespace);1546877578;Get a setting with the given namespace filled in for prefix and suffix.;public Setting<T> getConcreteSettingForNamespace(String namespace) {_            String fullKey = key.toConcreteKey(namespace).toString()__            return getConcreteSetting(fullKey)__        };get,a,setting,with,the,given,namespace,filled,in,for,prefix,and,suffix;public,setting,t,get,concrete,setting,for,namespace,string,namespace,string,full,key,key,to,concrete,key,namespace,to,string,return,get,concrete,setting,full,key
Setting -> public boolean exists(Settings settings);1524684173;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1525248068;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1525334055;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1528904315;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1531179852;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1535046779;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1535383145;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1536137328;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1536177418;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(Settings settings);1536218260;Returns <code>true</code> iff this setting is present in the given settings object. Otherwise <code>false</code>;public boolean exists(Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,code,true,code,iff,this,setting,is,present,in,the,given,settings,object,otherwise,code,false,code;public,boolean,exists,settings,settings,return,settings,key,set,contains,get,key
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1524684173;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1525248068;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1525334055;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1528904315;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1531179852;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1535046779;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1535383145;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536137328;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536177418;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536218260;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536611444;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536828374;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1536964057;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1539951844;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1544081506;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> AffixSetting -> public Map<String, T> getAsMap(Settings settings);1546877578;Returns a map of all namespaces to it's values give the provided settings;public Map<String, T> getAsMap(Settings settings) {_            Map<String, T> map = new HashMap<>()__            matchStream(settings).distinct().forEach(key -> {_                Setting<T> concreteSetting = getConcreteSetting(key)__                map.put(getNamespace(concreteSetting), concreteSetting.get(settings))__            })__            return Collections.unmodifiableMap(map)__        };returns,a,map,of,all,namespaces,to,it,s,values,give,the,provided,settings;public,map,string,t,get,as,map,settings,settings,map,string,t,map,new,hash,map,match,stream,settings,distinct,for,each,key,setting,t,concrete,setting,get,concrete,setting,key,map,put,get,namespace,concrete,setting,concrete,setting,get,settings,return,collections,unmodifiable,map,map
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1524684173;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1525248068;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1525334055;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1528904315;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1531179852;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1535046779;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1535383145;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536137328;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536177418;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536218260;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536611444;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536828374;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536964057;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1539951844;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1544081506;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1546877578;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,new,simple,key,key,default,value,parser,properties
Setting -> public final String getKey();1524684173;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1525248068;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1525334055;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1528904315;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1531179852;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1535046779;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1535383145;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536137328;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536177418;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536218260;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536611444;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536828374;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1536964057;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1539951844;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1544081506;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public final String getKey();1546877578;Returns the settings key or a prefix if this setting is a group setting._<b>Note: this method should not be used to retrieve a value from a {@link Settings} object._Use {@link #get(Settings)} instead</b>__@see #isGroupSetting();public final String getKey() {_        return key.toString()__    };returns,the,settings,key,or,a,prefix,if,this,setting,is,a,group,setting,b,note,this,method,should,not,be,used,to,retrieve,a,value,from,a,link,settings,object,use,link,get,settings,instead,b,see,is,group,setting;public,final,string,get,key,return,key,to,string
Setting -> public T get(Settings settings);1524684173;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1525248068;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1525334055;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1528904315;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1531179852;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1535046779;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1535383145;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536137328;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536177418;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536218260;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536611444;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536828374;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1536964057;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1539951844;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1544081506;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> public T get(Settings settings);1546877578;Returns the settings value. If the setting is not present in the given settings object the default value is returned_instead.;public T get(Settings settings) {_        return get(settings, true)__    };returns,the,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead;public,t,get,settings,settings,return,get,settings,true
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1524684173;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1525248068;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1525334055;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1528904315;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1531179852;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1535046779;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1535383145;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536137328;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536177418;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536218260;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536611444;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536828374;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1536964057;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1539951844;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1544081506;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> AffixSetting -> public Stream<Setting<T>> getAllConcreteSettings(Settings settings);1546877578;Returns a stream of all concrete setting instances for the given settings. AffixSetting is only a specification, concrete_settings depend on an actual set of setting keys.;public Stream<Setting<T>> getAllConcreteSettings(Settings settings) {_            return matchStream(settings).distinct().map(this::getConcreteSetting)__        };returns,a,stream,of,all,concrete,setting,instances,for,the,given,settings,affix,setting,is,only,a,specification,concrete,settings,depend,on,an,actual,set,of,setting,keys;public,stream,setting,t,get,all,concrete,settings,settings,settings,return,match,stream,settings,distinct,map,this,get,concrete,setting
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1536611444;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1536828374;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1536964057;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1539951844;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1544081506;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<Setting<?>> getSettingsDependencies(String key);1546877578;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<Setting<?>> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,setting,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1524684173;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1525248068;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1525334055;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1528904315;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1531179852;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1535046779;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1535383145;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536137328;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536177418;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536218260;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536611444;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536828374;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1536964057;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1539951844;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1544081506;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties);1546877578;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultPercentage the default value of this setting as a percentage of the heap memory_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, String defaultPercentage, Property... properties) {_        return new Setting<>(key, (s) -> defaultPercentage, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,percentage,the,default,value,of,this,setting,as,a,percentage,of,the,heap,memory,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,string,default,percentage,property,properties,return,new,setting,key,s,default,percentage,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public final boolean isDynamic();1524684173;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1525248068;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1525334055;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1528904315;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1531179852;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1535046779;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1535383145;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536137328;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536177418;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536218260;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536611444;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536828374;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1536964057;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1539951844;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1544081506;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> public final boolean isDynamic();1546877578;Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>;public final boolean isDynamic() {_        return properties.contains(Property.Dynamic)__    };returns,code,true,code,if,this,setting,is,dynamically,updateable,otherwise,code,false,code;public,final,boolean,is,dynamic,return,properties,contains,property,dynamic
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1524684173;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1525248068;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1525334055;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1528904315;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1531179852;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1535046779;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1535383145;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536137328;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536177418;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536218260;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536611444;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536828374;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1536964057;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1539951844;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1544081506;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger);1546877578;Build a new updater with a noop validator.;final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger) {_        return newUpdater(consumer, logger, (s) -> {})__    };build,a,new,updater,with,a,noop,validator;final,abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,return,new,updater,consumer,logger,s
Setting -> public EnumSet<Property> getProperties();1524684173;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1525248068;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1525334055;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1528904315;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1531179852;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1535046779;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1535383145;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536137328;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536177418;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536218260;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536611444;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536828374;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1536964057;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1539951844;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1544081506;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public EnumSet<Property> getProperties();1546877578;Returns the setting properties_@see Property;public EnumSet<Property> getProperties() {_        return properties__    };returns,the,setting,properties,see,property;public,enum,set,property,get,properties,return,properties
Setting -> public boolean hasIndexScope();1524684173;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1525248068;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1525334055;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1528904315;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1531179852;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1535046779;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1535383145;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536137328;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536177418;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536218260;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536611444;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536828374;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1536964057;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1539951844;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1544081506;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public boolean hasIndexScope();1546877578;Returns <code>true</code> if this setting has an index scope, otherwise <code>false</code>;public boolean hasIndexScope() {_        return properties.contains(Property.IndexScope)__    };returns,code,true,code,if,this,setting,has,an,index,scope,otherwise,code,false,code;public,boolean,has,index,scope,return,properties,contains,property,index,scope
Setting -> public String getRaw(Settings settings);1524684173;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1525248068;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1525334055;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1528904315;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1531179852;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1535046779;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1535383145;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public String getRaw(Settings settings);1536137328;Returns the raw (string) settings value. If the setting is not present in the given settings object the default value is returned_instead. This is useful if the value can't be parsed due to an invalid value to access the actual value.;public String getRaw(Settings settings) {_        checkDeprecation(settings)__        return settings.get(getKey(), defaultValue.apply(settings))__    };returns,the,raw,string,settings,value,if,the,setting,is,not,present,in,the,given,settings,object,the,default,value,is,returned,instead,this,is,useful,if,the,value,can,t,be,parsed,due,to,an,invalid,value,to,access,the,actual,value;public,string,get,raw,settings,settings,check,deprecation,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1524684173;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1525248068;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1525334055;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1528904315;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1531179852;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1535046779;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1535383145;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536137328;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536177418;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536218260;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536611444;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536828374;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536964057;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1539951844;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1544081506;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1546877578;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(String key, String defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(new SimpleKey(key), s -> defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,string,key,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,new,simple,key,key,s,default,value,parser,validator,properties
Setting -> public String getDefaultRaw(Settings settings);1524684173;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1525248068;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1525334055;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1528904315;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1531179852;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1535046779;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1535383145;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536137328;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536177418;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536218260;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536611444;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536828374;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1536964057;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1539951844;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1544081506;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public String getDefaultRaw(Settings settings);1546877578;Returns the default value string representation for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public String getDefaultRaw(Settings settings) {_        return defaultValue.apply(settings)__    };returns,the,default,value,string,representation,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,string,get,default,raw,settings,settings,return,default,value,apply,settings
Setting -> public Set<String> getSettingsDependencies(String key);1524684173;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1525248068;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1525334055;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1528904315;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1531179852;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1535046779;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1535383145;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1536137328;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1536177418;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Set<String> getSettingsDependencies(String key);1536218260;Returns a set of settings that are required at validation time. Unless all of the dependencies are present in the settings_object validation of setting must fail.;public Set<String> getSettingsDependencies(String key) {_        return Collections.emptySet()__    };returns,a,set,of,settings,that,are,required,at,validation,time,unless,all,of,the,dependencies,are,present,in,the,settings,object,validation,of,setting,must,fail;public,set,string,get,settings,dependencies,string,key,return,collections,empty,set
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1524684173;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1525248068;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1525334055;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1528904315;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1531179852;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1535046779;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1535383145;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536137328;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536177418;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536218260;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536611444;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536828374;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1536964057;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1539951844;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1544081506;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, (v, s) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,s,properties
Setting -> public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties);1546877578;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value function that returns the default values string representation._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Property... properties) {_        this(key, defaultValue, parser, v -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,returns,the,default,values,string,representation,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,property,properties,this,key,default,value,parser,v,properties
Setting -> public boolean exists(final Settings settings);1536611444;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(final Settings settings);1536828374;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(final Settings settings);1536964057;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(final Settings settings);1539951844;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(final Settings settings);1544081506;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public boolean exists(final Settings settings);1546877578;Returns true if and only if this setting is present in the given settings instance. Note that fallback settings are excluded.__@param settings the settings_@return true if the setting is present in the given settings instance, otherwise false;public boolean exists(final Settings settings) {_        return settings.keySet().contains(getKey())__    };returns,true,if,and,only,if,this,setting,is,present,in,the,given,settings,instance,note,that,fallback,settings,are,excluded,param,settings,the,settings,return,true,if,the,setting,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,final,settings,settings,return,settings,key,set,contains,get,key
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1524684173;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1525248068;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1525334055;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1528904315;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1531179852;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1535046779;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1535383145;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536137328;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536177418;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536218260;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536611444;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536828374;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1536964057;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1539951844;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1544081506;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, (v, m) -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,m,properties
Setting -> public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties);1546877578;Creates a new Setting instance_@param key the settings key for this setting._@param fallbackSetting a setting who's value to fallback on if this setting is not defined_@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(Key key, Setting<T> fallbackSetting, Function<String, T> parser, Property... properties) {_        this(key, fallbackSetting, fallbackSetting::getRaw, parser, v -> {}, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fallback,setting,a,setting,who,s,value,to,fallback,on,if,this,setting,is,not,defined,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,key,key,setting,t,fallback,setting,function,string,t,parser,property,properties,this,key,fallback,setting,fallback,setting,get,raw,parser,v,properties
Setting -> Validator -> default Iterator<Setting<T>> settings();1524684173;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1525248068;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1525334055;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1528904315;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1531179852;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1535046779;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1535383145;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536137328;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536177418;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536218260;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536611444;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536828374;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1536964057;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1539951844;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1544081506;The settings needed by this validator.__@return the settings needed to validate_ these can be used for cross-settings validation;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,needed,by,this,validator,return,the,settings,needed,to,validate,these,can,be,used,for,cross,settings,validation;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> Validator -> default Iterator<Setting<T>> settings();1546877578;The settings on which the validity of this setting depends. The values of the specified settings are passed to_{@link #validate(Object, Map)}. By default this returns an empty iterator, indicating that this setting does not depend on any_other settings.__@return the settings on which the validity of this setting depends.;default Iterator<Setting<T>> settings() {_            return Collections.emptyIterator()__        };the,settings,on,which,the,validity,of,this,setting,depends,the,values,of,the,specified,settings,are,passed,to,link,validate,object,map,by,default,this,returns,an,empty,iterator,indicating,that,this,setting,does,not,depend,on,any,other,settings,return,the,settings,on,which,the,validity,of,this,setting,depends;default,iterator,setting,t,settings,return,collections,empty,iterator
Setting -> public final Key getRawKey();1524684173;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1525248068;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1525334055;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1528904315;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1531179852;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1535046779;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1535383145;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536137328;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536177418;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536218260;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536611444;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536828374;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1536964057;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1539951844;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1544081506;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> public final Key getRawKey();1546877578;Returns the original representation of a setting key.;public final Key getRawKey() {_        return key__    };returns,the,original,representation,of,a,setting,key;public,final,key,get,raw,key,return,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1524684173;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: <tt>search.</tt> and suffix: <tt>username</tt>_will return <tt>remote</tt> as a namespace for the setting <tt>search.remote.username</tt>;public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,tt,search,tt,and,suffix,tt,username,tt,will,return,tt,remote,tt,as,a,namespace,for,the,setting,tt,search,remote,username,tt;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1525248068;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: <tt>search.</tt> and suffix: <tt>username</tt>_will return <tt>remote</tt> as a namespace for the setting <tt>search.remote.username</tt>;public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,tt,search,tt,and,suffix,tt,username,tt,will,return,tt,remote,tt,as,a,namespace,for,the,setting,tt,search,remote,username,tt;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1525334055;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1528904315;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1531179852;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1535046779;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1535383145;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536137328;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536177418;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code search.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,search,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536218260;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536611444;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536828374;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1536964057;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1539951844;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1544081506;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> AffixSetting -> public String getNamespace(Setting<T> concreteSetting);1546877578;Returns the namespace for a concrete setting. Ie. an affix setting with prefix: {@code search.} and suffix: {@code username}_will return {@code remote} as a namespace for the setting {@code cluster.remote.username};public String getNamespace(Setting<T> concreteSetting) {_            return key.getNamespace(concreteSetting.getKey())__        };returns,the,namespace,for,a,concrete,setting,ie,an,affix,setting,with,prefix,code,search,and,suffix,code,username,will,return,code,remote,as,a,namespace,for,the,setting,code,cluster,remote,username;public,string,get,namespace,setting,t,concrete,setting,return,key,get,namespace,concrete,setting,get,key
Setting -> String innerGetRaw(final Settings settings);1536177418;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1536218260;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1536611444;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1536828374;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings), isListSetting())__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings,is,list,setting
Setting -> String innerGetRaw(final Settings settings);1536964057;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1539951844;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1544081506;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> String innerGetRaw(final Settings settings);1546877578;The underlying implementation for {@link #getRaw(Settings)}. Setting specializations can override this as needed to convert the_actual settings value to raw strings.__@param settings the settings instance_@return the raw string representation of the setting value;String innerGetRaw(final Settings settings) {_        return settings.get(getKey(), defaultValue.apply(settings))__    };the,underlying,implementation,for,link,get,raw,settings,setting,specializations,can,override,this,as,needed,to,convert,the,actual,settings,value,to,raw,strings,param,settings,the,settings,instance,return,the,raw,string,representation,of,the,setting,value;string,inner,get,raw,final,settings,settings,return,settings,get,get,key,default,value,apply,settings
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1524684173;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1525248068;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1525334055;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1528904315;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1531179852;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1535046779;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1535383145;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536137328;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536177418;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536218260;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536611444;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536828374;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1536964057;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1539951844;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1544081506;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,             final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger);1546877578;Updates settings that depend on each other._See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)} and its usage for details.;static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,_            final BiConsumer<A, B> validator, final Setting<A> aSetting, final Setting<B> bSetting, Logger logger) {_        final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater = aSetting.newUpdater(null, logger)__        final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater = bSetting.newUpdater(null, logger)__        return new AbstractScopedSettings.SettingUpdater<Tuple<A, B>>() {_            @Override_            public boolean hasChanged(Settings current, Settings previous) {_                return aSettingUpdater.hasChanged(current, previous) || bSettingUpdater.hasChanged(current, previous)__            }__            @Override_            public Tuple<A, B> getValue(Settings current, Settings previous) {_                A valueA = aSettingUpdater.getValue(current, previous)__                B valueB = bSettingUpdater.getValue(current, previous)__                validator.accept(valueA, valueB)__                return new Tuple<>(valueA, valueB)__            }__            @Override_            public void apply(Tuple<A, B> value, Settings current, Settings previous) {_                if (aSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(aSetting, current, previous, logger)__                }_                if (bSettingUpdater.hasChanged(current, previous)) {_                    logSettingUpdate(bSetting, current, previous, logger)__                }_                consumer.accept(value.v1(), value.v2())__            }__            @Override_            public String toString() {_                return "CompoundUpdater for: " + aSettingUpdater + " and " + bSettingUpdater__            }_        }__    };updates,settings,that,depend,on,each,other,see,link,abstract,scoped,settings,add,settings,update,consumer,setting,setting,bi,consumer,and,its,usage,for,details;static,a,b,abstract,scoped,settings,setting,updater,tuple,a,b,compound,updater,final,bi,consumer,a,b,consumer,final,bi,consumer,a,b,validator,final,setting,a,a,setting,final,setting,b,b,setting,logger,logger,final,abstract,scoped,settings,setting,updater,a,a,setting,updater,a,setting,new,updater,null,logger,final,abstract,scoped,settings,setting,updater,b,b,setting,updater,b,setting,new,updater,null,logger,return,new,abstract,scoped,settings,setting,updater,tuple,a,b,override,public,boolean,has,changed,settings,current,settings,previous,return,a,setting,updater,has,changed,current,previous,b,setting,updater,has,changed,current,previous,override,public,tuple,a,b,get,value,settings,current,settings,previous,a,value,a,a,setting,updater,get,value,current,previous,b,value,b,b,setting,updater,get,value,current,previous,validator,accept,value,a,value,b,return,new,tuple,value,a,value,b,override,public,void,apply,tuple,a,b,value,settings,current,settings,previous,if,a,setting,updater,has,changed,current,previous,log,setting,update,a,setting,current,previous,logger,if,b,setting,updater,has,changed,current,previous,log,setting,update,b,setting,current,previous,logger,consumer,accept,value,v1,value,v2,override,public,string,to,string,return,compound,updater,for,a,setting,updater,and,b,setting,updater
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1524684173;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1525248068;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1525334055;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1528904315;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1531179852;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1535046779;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1535383145;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536137328;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536177418;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536218260;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536611444;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536828374;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1536964057;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1539951844;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1544081506;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties);1546877578;Creates a new Setting instance_@param key the settings key for this setting._@param fallBackSetting a setting to fall back to if the current setting is not set._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, Property... properties) {_        this(new SimpleKey(key), fallBackSetting, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,fall,back,setting,a,setting,to,fall,back,to,if,the,current,setting,is,not,set,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,setting,t,fall,back,setting,function,string,t,parser,property,properties,this,new,simple,key,key,fall,back,setting,parser,properties
Setting -> public final boolean match(String toTest);1524684173;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1525248068;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1525334055;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1528904315;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1531179852;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1535046779;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1535383145;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536137328;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536177418;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536218260;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536611444;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536828374;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1536964057;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1539951844;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1544081506;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public final boolean match(String toTest);1546877578;Returns <code>true</code> iff the given key matches the settings key or if this setting is a group setting if the_given key is part of the settings group._@see #isGroupSetting();public final boolean match(String toTest) {_        return key.match(toTest)__    };returns,code,true,code,iff,the,given,key,matches,the,settings,key,or,if,this,setting,is,a,group,setting,if,the,given,key,is,part,of,the,settings,group,see,is,group,setting;public,final,boolean,match,string,to,test,return,key,match,to,test
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1524684173;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1525248068;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1525334055;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1528904315;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1531179852;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1535046779;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1535383145;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536137328;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536177418;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536218260;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536611444;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536828374;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1536964057;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1539951844;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1544081506;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties);1546877578;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue a function that supplies the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, Function<Settings, String> defaultValue, Property... properties) {_        return new Setting<>(key, defaultValue, (s) -> MemorySizeValue.parseBytesSizeValueOrHeapRatio(s, key), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,a,function,that,supplies,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,function,settings,string,default,value,property,properties,return,new,setting,key,default,value,s,memory,size,value,parse,bytes,size,value,or,heap,ratio,s,key,properties
Setting -> void checkDeprecation(Settings settings);1524684173;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1525248068;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1525334055;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1528904315;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1531179852;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1535046779;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1535383145;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536137328;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536177418;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536218260;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536611444;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536828374;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1536964057;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1539951844;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1544081506;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> void checkDeprecation(Settings settings);1546877578;Logs a deprecation warning if the setting is deprecated and used.;void checkDeprecation(Settings settings) {_        _        if (this.isDeprecated() && this.exists(settings)) {_            _            final String key = getKey()__            Settings.DeprecationLoggerHolder.deprecationLogger.deprecatedAndMaybeLog(_                    key,_                    "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! "_                            + "See the breaking changes documentation for the next major version.",_                    key)__        }_    };logs,a,deprecation,warning,if,the,setting,is,deprecated,and,used;void,check,deprecation,settings,settings,if,this,is,deprecated,this,exists,settings,final,string,key,get,key,settings,deprecation,logger,holder,deprecation,logger,deprecated,and,maybe,log,key,setting,was,deprecated,in,elasticsearch,and,will,be,removed,in,a,future,release,see,the,breaking,changes,documentation,for,the,next,major,version,key
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1524684173;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1525248068;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1525334055;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1528904315;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1531179852;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1535046779;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1535383145;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536137328;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536177418;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536218260;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536611444;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536828374;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1536964057;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1539951844;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1544081506;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties);1546877578;Creates a setting which specifies a memory size. This can either be_specified as an absolute bytes value or as a percentage of the heap_memory.__@param key the key for the setting_@param defaultValue the default value for this setting_@param properties properties properties for this setting like scope, filtering..._@return the setting object;public static Setting<ByteSizeValue> memorySizeSetting(String key, ByteSizeValue defaultValue, Property... properties) {_        return memorySizeSetting(key, (s) -> defaultValue.toString(), properties)__    };creates,a,setting,which,specifies,a,memory,size,this,can,either,be,specified,as,an,absolute,bytes,value,or,as,a,percentage,of,the,heap,memory,param,key,the,key,for,the,setting,param,default,value,the,default,value,for,this,setting,param,properties,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,byte,size,value,memory,size,setting,string,key,byte,size,value,default,value,property,properties,return,memory,size,setting,key,s,default,value,to,string,properties
Setting -> public final boolean isFinal();1524684173;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1525248068;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1525334055;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1528904315;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1531179852;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1535046779;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1535383145;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536137328;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536177418;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536218260;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536611444;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536828374;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1536964057;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1539951844;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1544081506;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public final boolean isFinal();1546877578;Returns <code>true</code> if this setting is final, otherwise <code>false</code>;public final boolean isFinal() {_        return properties.contains(Property.Final)__    };returns,code,true,code,if,this,setting,is,final,otherwise,code,false,code;public,final,boolean,is,final,return,properties,contains,property,final
Setting -> public T getDefault(Settings settings);1524684173;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1525248068;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1525334055;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1528904315;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1531179852;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1535046779;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1535383145;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536137328;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536177418;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536218260;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536611444;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536828374;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1536964057;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1539951844;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1544081506;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public T getDefault(Settings settings);1546877578;Returns the default value for this setting._@param settings a settings object for settings that has a default value depending on another setting if available;public T getDefault(Settings settings) {_        return parser.apply(getDefaultRaw(settings))__    };returns,the,default,value,for,this,setting,param,settings,a,settings,object,for,settings,that,has,a,default,value,depending,on,another,setting,if,available;public,t,get,default,settings,settings,return,parser,apply,get,default,raw,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1524684173;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1525248068;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1525334055;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1528904315;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1531179852;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1535046779;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1535383145;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536137328;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536177418;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536218260;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536611444;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536828374;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1536964057;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1539951844;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1544081506;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public void diff(Settings.Builder builder, Settings source, Settings defaultSettings);1546877578;Add this setting to the builder if it doesn't exists in the source settings._The value added to the builder is taken from the given default settings object._@param builder the settings builder to fill the diff into_@param source the source settings object to diff_@param defaultSettings the default settings object to diff against;public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) {_        if (exists(source) == false) {_            builder.put(getKey(), getRaw(defaultSettings))__        }_    };add,this,setting,to,the,builder,if,it,doesn,t,exists,in,the,source,settings,the,value,added,to,the,builder,is,taken,from,the,given,default,settings,object,param,builder,the,settings,builder,to,fill,the,diff,into,param,source,the,source,settings,object,to,diff,param,default,settings,the,default,settings,object,to,diff,against;public,void,diff,settings,builder,builder,settings,source,settings,default,settings,if,exists,source,false,builder,put,get,key,get,raw,default,settings
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1524684173;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1525248068;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1525334055;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1528904315;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1531179852;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1535046779;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1535383145;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536137328;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536177418;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536218260;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536611444;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536828374;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1536964057;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1539951844;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1544081506;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties);1546877578;Creates a new Setting instance_@param key the settings key for this setting._@param defaultValue a default value._@param parser a parser that parses the string rep into a complex datatype._@param properties properties for this setting like scope, filtering...;public Setting(String key, String defaultValue, Function<String, T> parser, Property... properties) {_        this(key, s -> defaultValue, parser, properties)__    };creates,a,new,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,param,parser,a,parser,that,parses,the,string,rep,into,a,complex,datatype,param,properties,properties,for,this,setting,like,scope,filtering;public,setting,string,key,string,default,value,function,string,t,parser,property,properties,this,key,s,default,value,parser,properties
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1524684173;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1525248068;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1525334055;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1528904315;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1531179852;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1535046779;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1535383145;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536137328;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536177418;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536218260;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536611444;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536828374;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1536964057;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1539951844;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1544081506;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator);1546877578;Build the updater responsible for validating new values, logging the new_value, and eventually setting the value where it belongs.;AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, Logger logger, Consumer<T> validator) {_        if (isDynamic()) {_            return new Updater(consumer, logger, validator)__        } else {_            throw new IllegalStateException("setting [" + getKey() + "] is not dynamic")__        }_    };build,the,updater,responsible,for,validating,new,values,logging,the,new,value,and,eventually,setting,the,value,where,it,belongs;abstract,scoped,settings,setting,updater,t,new,updater,consumer,t,consumer,logger,logger,consumer,t,validator,if,is,dynamic,return,new,updater,consumer,logger,validator,else,throw,new,illegal,state,exception,setting,get,key,is,not,dynamic
Setting -> public boolean isFiltered();1524684173;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1525248068;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1525334055;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1528904315;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1531179852;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1535046779;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1535383145;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536137328;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536177418;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536218260;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536611444;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536828374;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1536964057;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1539951844;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1544081506;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean isFiltered();1546877578;Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>;public boolean isFiltered() {_        return properties.contains(Property.Filtered)__    };returns,code,true,code,if,this,setting,must,be,filtered,otherwise,code,false,code;public,boolean,is,filtered,return,properties,contains,property,filtered
Setting -> public boolean existsOrFallbackExists(final Settings settings);1536611444;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public boolean existsOrFallbackExists(final Settings settings);1536828374;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public boolean existsOrFallbackExists(final Settings settings);1536964057;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public boolean existsOrFallbackExists(final Settings settings);1539951844;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public boolean existsOrFallbackExists(final Settings settings);1544081506;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public boolean existsOrFallbackExists(final Settings settings);1546877578;Returns true if and only if this setting including fallback settings is present in the given settings instance.__@param settings the settings_@return true if the setting including fallback settings is present in the given settings instance, otherwise false;public boolean existsOrFallbackExists(final Settings settings) {_        return settings.keySet().contains(getKey()) || (fallbackSetting != null && fallbackSetting.existsOrFallbackExists(settings))__    };returns,true,if,and,only,if,this,setting,including,fallback,settings,is,present,in,the,given,settings,instance,param,settings,the,settings,return,true,if,the,setting,including,fallback,settings,is,present,in,the,given,settings,instance,otherwise,false;public,boolean,exists,or,fallback,exists,final,settings,settings,return,settings,key,set,contains,get,key,fallback,setting,null,fallback,setting,exists,or,fallback,exists,settings
Setting -> public final T get(Settings primary, Settings secondary);1524684173;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1525248068;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1525334055;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1528904315;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1531179852;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1535046779;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1535383145;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536137328;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536177418;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536218260;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536611444;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536828374;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1536964057;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1539951844;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1544081506;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public final T get(Settings primary, Settings secondary);1546877578;Returns the value for this setting but falls back to the second provided settings object;public final T get(Settings primary, Settings secondary) {_        if (exists(primary)) {_            return get(primary)__        }_        if (exists(secondary)) {_            return get(secondary)__        }_        if (fallbackSetting == null) {_            return get(primary)__        }_        if (fallbackSetting.exists(primary)) {_            return fallbackSetting.get(primary)__        }_        return fallbackSetting.get(secondary)__    };returns,the,value,for,this,setting,but,falls,back,to,the,second,provided,settings,object;public,final,t,get,settings,primary,settings,secondary,if,exists,primary,return,get,primary,if,exists,secondary,return,get,secondary,if,fallback,setting,null,return,get,primary,if,fallback,setting,exists,primary,return,fallback,setting,get,primary,return,fallback,setting,get,secondary
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1531179852;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1535046779;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1535383145;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536137328;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536177418;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536218260;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536611444;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536828374;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1536964057;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1539951844;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1544081506;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public static Setting<String> simpleString(String key, String defaultValue, Property... properties);1546877578;Creates a new Setting instance with a String value__@param key          the settings key for this setting._@param defaultValue the default String value._@param properties   properties for this setting like scope, filtering..._@return the Setting Object;public static Setting<String> simpleString(String key, String defaultValue, Property... properties) {_        return new Setting<>(key, s -> defaultValue, Function.identity(), properties)__    };creates,a,new,setting,instance,with,a,string,value,param,key,the,settings,key,for,this,setting,param,default,value,the,default,string,value,param,properties,properties,for,this,setting,like,scope,filtering,return,the,setting,object;public,static,setting,string,simple,string,string,key,string,default,value,property,properties,return,new,setting,key,s,default,value,function,identity,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1524684173;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1525248068;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1525334055;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1528904315;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1531179852;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1535046779;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1535383145;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536137328;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536177418;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536218260;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536611444;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536828374;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1536964057;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1539951844;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1544081506;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> public Setting(             Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties);1546877578;Creates a new {@code Setting} instance.__@param key          the settings key for this setting_@param defaultValue a default value function that results a string representation of the default value_@param parser       a parser that parses a string representation into the concrete type for this setting_@param validator    a {@link Validator} for validating this setting_@param properties   properties for this setting;public Setting(_            Key key, Function<Settings, String> defaultValue, Function<String, T> parser, Validator<T> validator, Property... properties) {_        this(key, null, defaultValue, parser, validator, properties)__    };creates,a,new,code,setting,instance,param,key,the,settings,key,for,this,setting,param,default,value,a,default,value,function,that,results,a,string,representation,of,the,default,value,param,parser,a,parser,that,parses,a,string,representation,into,the,concrete,type,for,this,setting,param,validator,a,link,validator,for,validating,this,setting,param,properties,properties,for,this,setting;public,setting,key,key,function,settings,string,default,value,function,string,t,parser,validator,t,validator,property,properties,this,key,null,default,value,parser,validator,properties
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1524684173;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1525248068;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1525334055;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1528904315;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1531179852;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1535046779;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1535383145;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536137328;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536177418;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536218260;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536611444;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536828374;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1536964057;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1539951844;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
Setting -> Validator -> void validate(T value, Map<Setting<T>, T> settings)_;1544081506;The validation routine for this validator.__@param value    the value of this setting_@param settings a map from the settings specified by {@link #settings()}} to their values;void validate(T value, Map<Setting<T>, T> settings)_;the,validation,routine,for,this,validator,param,value,the,value,of,this,setting,param,settings,a,map,from,the,settings,specified,by,link,settings,to,their,values;void,validate,t,value,map,setting,t,t,settings
