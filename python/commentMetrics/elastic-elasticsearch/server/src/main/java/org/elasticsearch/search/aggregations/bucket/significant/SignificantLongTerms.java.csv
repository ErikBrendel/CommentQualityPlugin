commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(subsetDf).     out.writeVLong(supersetDf).     out.writeLong(term).     out.writeDouble(getSignificanceScore()).     aggregations.writeTo(out). }
false;public;0;4;;@Override public Object getKey() {     return term. }
false;public;0;4;;@Override public String getKeyAsString() {     return format.format(term).toString(). }
false;public;0;4;;@Override public Number getKeyAsNumber() {     return term. }
false;;5;4;;@Override Bucket newBucket(long subsetDf, long subsetSize, long supersetDf, long supersetSize, InternalAggregations aggregations) {     return new Bucket(subsetDf, subsetSize, supersetDf, supersetSize, term, aggregations, format). }
false;protected;1;8;;@Override protected XContentBuilder keyToXContent(XContentBuilder builder) throws IOException {     builder.field(CommonFields.KEY.getPreferredName(), term).     if (format != DocValueFormat.RAW) {         builder.field(CommonFields.KEY_AS_STRING.getPreferredName(), format.format(term)).     }     return builder. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return super.equals(obj) && Objects.equals(term, ((Bucket) obj).term). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), term). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;5;;@Override public SignificantLongTerms create(List<SignificantLongTerms.Bucket> buckets) {     return new SignificantLongTerms(name, requiredSize, minDocCount, pipelineAggregators(), metaData, format, subsetSize, supersetSize, significanceHeuristic, buckets). }
false;public;2;5;;@Override public Bucket createBucket(InternalAggregations aggregations, SignificantLongTerms.Bucket prototype) {     return new Bucket(prototype.subsetDf, prototype.subsetSize, prototype.supersetDf, prototype.supersetSize, prototype.term, aggregations, prototype.format). }
false;protected;3;5;;@Override protected SignificantLongTerms create(long subsetSize, long supersetSize, List<Bucket> buckets) {     return new SignificantLongTerms(getName(), requiredSize, minDocCount, pipelineAggregators(), getMetaData(), format, subsetSize, supersetSize, significanceHeuristic, buckets). }
false;protected;1;4;;@Override protected Bucket[] createBucketsArray(int size) {     return new Bucket[size]. }
