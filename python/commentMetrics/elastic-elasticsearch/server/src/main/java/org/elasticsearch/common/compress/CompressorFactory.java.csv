commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static boolean isCompressed(BytesReference bytes) {     return compressor(bytes) != null. }
false;public,static;1;20;;@Nullable public static Compressor compressor(BytesReference bytes) {     if (COMPRESSOR.isCompressed(bytes)) {         // as a xcontent, we have a problem         assert XContentHelper.xContentType(bytes) == null.         return COMPRESSOR.     }     XContentType contentType = XContentHelper.xContentType(bytes).     if (contentType == null) {         if (isAncient(bytes)) {             throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?").         }         throw new NotXContentException("Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes").     }     return null. }
true;private,static;1;6;/**  * true if the bytes were compressed with LZF: only used before elasticsearch 2.0  */ ;/**  * true if the bytes were compressed with LZF: only used before elasticsearch 2.0  */ private static boolean isAncient(BytesReference bytes) {     return bytes.length() >= 3 && bytes.get(0) == 'Z' && bytes.get(1) == 'V' && (bytes.get(2) == 0 || bytes.get(2) == 1). }
true;public,static;1;11;/**  * Uncompress the provided data, data can be detected as compressed using {@link #isCompressed(BytesReference)}.  * @throws NullPointerException a NullPointerException will be thrown when bytes is null  */ ;/**  * Uncompress the provided data, data can be detected as compressed using {@link #isCompressed(BytesReference)}.  * @throws NullPointerException a NullPointerException will be thrown when bytes is null  */ public static BytesReference uncompressIfNeeded(BytesReference bytes) throws IOException {     Compressor compressor = compressor(Objects.requireNonNull(bytes, "the BytesReference must not be null")).     BytesReference uncompressed.     if (compressor != null) {         uncompressed = uncompress(bytes, compressor).     } else {         uncompressed = bytes.     }     return uncompressed. }
true;public,static;1;7;/**  * Decompress the provided {@link BytesReference}.  */ ;/**  * Decompress the provided {@link BytesReference}.  */ public static BytesReference uncompress(BytesReference bytes) throws IOException {     Compressor compressor = compressor(bytes).     if (compressor == null) {         throw new NotCompressedException().     }     return uncompress(bytes, compressor). }
false;private,static;2;7;;private static BytesReference uncompress(BytesReference bytes, Compressor compressor) throws IOException {     StreamInput compressed = compressor.streamInput(bytes.streamInput()).     BytesStreamOutput bStream = new BytesStreamOutput().     Streams.copy(compressed, bStream).     compressed.close().     return bStream.bytes(). }
