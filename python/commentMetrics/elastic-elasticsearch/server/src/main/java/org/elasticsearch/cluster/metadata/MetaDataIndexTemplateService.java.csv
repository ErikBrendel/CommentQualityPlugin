# id;timestamp;commentText;codeText;commentWords;codeWords
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1524684173;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1535666657;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1536137328;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1541092382;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1542402632;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
MetaDataIndexTemplateService -> public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName);1544702062;Finds index templates whose index pattern matched with the given index name._The result is sorted by {@link IndexTemplateMetaData#order} descending.;public static List<IndexTemplateMetaData> findTemplates(MetaData metaData, String indexName) {_        final List<IndexTemplateMetaData> matchedTemplates = new ArrayList<>()__        for (ObjectCursor<IndexTemplateMetaData> cursor : metaData.templates().values()) {_            final IndexTemplateMetaData template = cursor.value__            final boolean matched = template.patterns().stream().anyMatch(pattern -> Regex.simpleMatch(pattern, indexName))__            if (matched) {_                matchedTemplates.add(template)__            }_        }_        CollectionUtil.timSort(matchedTemplates, Comparator.comparingInt(IndexTemplateMetaData::order).reversed())__        return matchedTemplates__    };finds,index,templates,whose,index,pattern,matched,with,the,given,index,name,the,result,is,sorted,by,link,index,template,meta,data,order,descending;public,static,list,index,template,meta,data,find,templates,meta,data,meta,data,string,index,name,final,list,index,template,meta,data,matched,templates,new,array,list,for,object,cursor,index,template,meta,data,cursor,meta,data,templates,values,final,index,template,meta,data,template,cursor,value,final,boolean,matched,template,patterns,stream,any,match,pattern,regex,simple,match,pattern,index,name,if,matched,matched,templates,add,template,collection,util,tim,sort,matched,templates,comparator,comparing,int,index,template,meta,data,order,reversed,return,matched,templates
