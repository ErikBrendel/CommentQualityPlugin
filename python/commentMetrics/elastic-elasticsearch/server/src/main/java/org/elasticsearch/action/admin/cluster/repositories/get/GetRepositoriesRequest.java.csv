commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(repositories). }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (repositories == null) {         validationException = addValidationError("repositories is null", validationException).     }     return validationException. }
true;public;0;3;/**  * The names of the repositories.  *  * @return list of repositories  */ ;/**  * The names of the repositories.  *  * @return list of repositories  */ public String[] repositories() {     return this.repositories. }
true;public;1;4;/**  * Sets the list or repositories.  * <p>  * If the list of repositories is empty or it contains a single element "_all", all registered repositories  * are returned.  *  * @param repositories list of repositories  * @return this request  */ ;/**  * Sets the list or repositories.  * <p>  * If the list of repositories is empty or it contains a single element "_all", all registered repositories  * are returned.  *  * @param repositories list of repositories  * @return this request  */ public GetRepositoriesRequest repositories(String[] repositories) {     this.repositories = repositories.     return this. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
