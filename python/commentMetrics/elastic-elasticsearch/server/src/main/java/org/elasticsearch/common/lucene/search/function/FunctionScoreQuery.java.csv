# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1524684173;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1528977744;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1536314350;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1539815831;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1541097522;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost);1542884928;Creates a FunctionScoreQuery without function._@param subQuery The query to match._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[0], CombineFunction.MULTIPLY, minScore, maxBoost)__    };creates,a,function,score,query,without,function,param,sub,query,the,query,to,match,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,0,combine,function,multiply,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1524684173;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1528977744;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1536314350;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1539815831;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1541097522;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function);1542884928;Creates a FunctionScoreQuery with a single {@link ScoreFunction}_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply.;public FunctionScoreQuery(Query subQuery, ScoreFunction function) {_        this(subQuery, function, CombineFunction.MULTIPLY, null, DEFAULT_MAX_BOOST)__    };creates,a,function,score,query,with,a,single,link,score,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply;public,function,score,query,query,sub,query,score,function,function,this,sub,query,function,combine,function,multiply,null
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1524684173;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1528977744;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1536314350;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1539815831;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1541097522;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,                               CombineFunction combineFunction, Float minScore, float maxBoost);1542884928;Creates a FunctionScoreQuery with multiple score functions_@param subQuery The query to match._@param scoreMode Defines how the different score functions should be combined._@param functions The {@link ScoreFunction}s to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions,_                              CombineFunction combineFunction, Float minScore, float maxBoost) {_        if (Arrays.stream(functions).anyMatch(func -> func == null)) {_            throw new IllegalArgumentException("Score function should not be null")__        }_        this.subQuery = subQuery__        this.scoreMode = scoreMode__        this.functions = functions__        this.maxBoost = maxBoost__        this.combineFunction = combineFunction__        this.minScore = minScore__    };creates,a,function,score,query,with,multiple,score,functions,param,sub,query,the,query,to,match,param,score,mode,defines,how,the,different,score,functions,should,be,combined,param,functions,the,link,score,function,s,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,mode,score,mode,score,function,functions,combine,function,combine,function,float,min,score,float,max,boost,if,arrays,stream,functions,any,match,func,func,null,throw,new,illegal,argument,exception,score,function,should,not,be,null,this,sub,query,sub,query,this,score,mode,score,mode,this,functions,functions,this,max,boost,max,boost,this,combine,function,combine,function,this,min,score,min,score
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1524684173;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1528977744;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1536314350;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1539815831;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1541097522;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
FunctionScoreQuery -> public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);1542884928;Creates a FunctionScoreQuery with a single function_@param subQuery The query to match._@param function The {@link ScoreFunction} to apply._@param combineFunction Defines how the query and function score should be applied._@param minScore The minimum score to consider a document._@param maxBoost The maximum applicable boost.;public FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost) {_        this(subQuery, ScoreMode.FIRST, new ScoreFunction[] { function }, combineFunction, minScore, maxBoost)__    };creates,a,function,score,query,with,a,single,function,param,sub,query,the,query,to,match,param,function,the,link,score,function,to,apply,param,combine,function,defines,how,the,query,and,function,score,should,be,applied,param,min,score,the,minimum,score,to,consider,a,document,param,max,boost,the,maximum,applicable,boost;public,function,score,query,query,sub,query,score,function,function,combine,function,combine,function,float,min,score,float,max,boost,this,sub,query,score,mode,first,new,score,function,function,combine,function,min,score,max,boost
