commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeList(plugins).     out.writeList(modules). }
true;public;0;5;/**  * Returns an ordered list based on plugins name  */ ;/**  * Returns an ordered list based on plugins name  */ public List<PluginInfo> getPluginInfos() {     List<PluginInfo> plugins = new ArrayList<>(this.plugins).     Collections.sort(plugins, Comparator.comparing(PluginInfo::getName)).     return plugins. }
true;public;0;5;/**  * Returns an ordered list based on modules name  */ ;/**  * Returns an ordered list based on modules name  */ public List<PluginInfo> getModuleInfos() {     List<PluginInfo> modules = new ArrayList<>(this.modules).     Collections.sort(modules, Comparator.comparing(PluginInfo::getName)).     return modules. }
false;public;1;3;;public void addPlugin(PluginInfo info) {     plugins.add(info). }
false;public;1;3;;public void addModule(PluginInfo info) {     modules.add(info). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startArray("plugins").     for (PluginInfo pluginInfo : getPluginInfos()) {         pluginInfo.toXContent(builder, params).     }     builder.endArray().     // TODO: not ideal, make a better api for this (e.g. with jar metadata, and so on)     builder.startArray("modules").     for (PluginInfo moduleInfo : getModuleInfos()) {         moduleInfo.toXContent(builder, params).     }     builder.endArray().     return builder. }
