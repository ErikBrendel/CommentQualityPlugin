commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add a REST handler to this service.  *  * @param handler  *            the {@link BaseRestHandler} to add to the usage service.  */ ;/**  * Add a REST handler to this service.  *  * @param handler  *            the {@link BaseRestHandler} to add to the usage service.  */ public void addRestHandler(BaseRestHandler handler) {     handlers.add(handler). }
true;public;2;15;/**  * Get the current usage statistics for this node.  *  * @param localNode  *            the {@link DiscoveryNode} for this node  * @param restActions  *            whether to include rest action usage in the returned  *            statistics  * @return the {@link NodeUsage} representing the usage statistics for this  *         node  */ ;/**  * Get the current usage statistics for this node.  *  * @param localNode  *            the {@link DiscoveryNode} for this node  * @param restActions  *            whether to include rest action usage in the returned  *            statistics  * @return the {@link NodeUsage} representing the usage statistics for this  *         node  */ public NodeUsage getUsageStats(DiscoveryNode localNode, boolean restActions) {     Map<String, Long> restUsageMap.     if (restActions) {         restUsageMap = new HashMap<>().         handlers.forEach(handler -> {             long usageCount = handler.getUsageCount().             if (usageCount > 0) {                 restUsageMap.put(handler.getName(), usageCount).             }         }).     } else {         restUsageMap = null.     }     return new NodeUsage(localNode, System.currentTimeMillis(), sinceTime, restUsageMap). }
