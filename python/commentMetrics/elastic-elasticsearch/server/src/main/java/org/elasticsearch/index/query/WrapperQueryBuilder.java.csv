commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeByteArray(this.source). }
false;public;0;3;;public byte[] source() {     return this.source. }
false;public;0;4;;@Override public String getName() {     return NAME. }
false;protected;2;6;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(QUERY_FIELD.getPreferredName(), source).     builder.endObject(). }
false;public,static;1;20;;public static WrapperQueryBuilder fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.nextToken().     if (token != XContentParser.Token.FIELD_NAME) {         throw new ParsingException(parser.getTokenLocation(), "[wrapper] query malformed").     }     String fieldName = parser.currentName().     if (!QUERY_FIELD.match(fieldName, parser.getDeprecationHandler())) {         throw new ParsingException(parser.getTokenLocation(), "[wrapper] query malformed, expected `query` but was " + fieldName).     }     parser.nextToken().     byte[] source = parser.binaryValue().     parser.nextToken().     if (source == null) {         throw new ParsingException(parser.getTokenLocation(), "wrapper query has no [query] specified").     }     return new WrapperQueryBuilder(source). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;4;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     throw new UnsupportedOperationException("this query must be rewritten first"). }
false;protected;0;4;;@Override protected int doHashCode() {     return Arrays.hashCode(source). }
false;protected;1;4;;@Override protected boolean doEquals(WrapperQueryBuilder other) {     // otherwise we compare pointers     return Arrays.equals(source, other.source). }
false;protected;1;14;;@Override protected QueryBuilder doRewrite(QueryRewriteContext context) throws IOException {     try (XContentParser qSourceParser = XContentFactory.xContent(source).createParser(context.getXContentRegistry(), LoggingDeprecationHandler.INSTANCE, source)) {         final QueryBuilder queryBuilder = parseInnerQueryBuilder(qSourceParser).rewrite(context).         if (boost() != DEFAULT_BOOST || queryName() != null) {             final BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder().             boolQueryBuilder.must(queryBuilder).             return boolQueryBuilder.         }         return queryBuilder.     } }
