commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the results request ID that is used to reference the search context on the executing  * node  */ ;/**  * Returns the results request ID that is used to reference the search context on the executing  * node  */ public long getRequestId() {     return requestId. }
true;public;0;4;/**  * Returns the shard index in the context of the currently executing search request that is  * used for accounting on the coordinating node  */ ;/**  * Returns the shard index in the context of the currently executing search request that is  * used for accounting on the coordinating node  */ public int getShardIndex() {     assert shardIndex != -1 : "shardIndex is not set".     return shardIndex. }
false;public;0;3;;public SearchShardTarget getSearchShardTarget() {     return searchShardTarget. }
false;public;1;3;;public void setSearchShardTarget(SearchShardTarget shardTarget) {     this.searchShardTarget = shardTarget. }
false;public;1;4;;public void setShardIndex(int shardIndex) {     assert shardIndex >= 0 : "shardIndex must be >= 0 but was: " + shardIndex.     this.shardIndex = shardIndex. }
true;public;0;3;/**  * Returns the query result iff it's included in this response otherwise <code>null</code>  */ ;/**  * Returns the query result iff it's included in this response otherwise <code>null</code>  */ public QuerySearchResult queryResult() {     return null. }
true;public;0;1;/**  * Returns the fetch result iff it's included in this response otherwise <code>null</code>  */ ;/**  * Returns the fetch result iff it's included in this response otherwise <code>null</code>  */ public FetchSearchResult fetchResult() {     return null. }
