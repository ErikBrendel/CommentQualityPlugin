commented;modifiers;parameterAmount;loc;comment;code
true;default;4;5;/**  * This is called for each handler that is registered via  * {@link TransportService#registerRequestHandler(String, Supplier, String, boolean, boolean, TransportRequestHandler)} or  * {@link TransportService#registerRequestHandler(String, Supplier, String, TransportRequestHandler)}. The returned handler is  * used instead of the passed in handler. By default the provided handler is returned.  */ ;/**  * This is called for each handler that is registered via  * {@link TransportService#registerRequestHandler(String, Supplier, String, boolean, boolean, TransportRequestHandler)} or  * {@link TransportService#registerRequestHandler(String, Supplier, String, TransportRequestHandler)}. The returned handler is  * used instead of the passed in handler. By default the provided handler is returned.  */ default <T extends TransportRequest> TransportRequestHandler<T> interceptHandler(String action, String executor, boolean forceExecution, TransportRequestHandler<T> actualHandler) {     return actualHandler. }
true;default;1;3;/**  * This is called up-front providing the actual low level {@link AsyncSender} that performs the low level send request.  * The returned sender is used to send all requests that come in via  * {@link TransportService#sendRequest(DiscoveryNode, String, TransportRequest, TransportResponseHandler)} or  * {@link TransportService#sendRequest(DiscoveryNode, String, TransportRequest, TransportRequestOptions, TransportResponseHandler)}.  * This allows plugins to perform actions on each send request including modifying the request context etc.  */ ;/**  * This is called up-front providing the actual low level {@link AsyncSender} that performs the low level send request.  * The returned sender is used to send all requests that come in via  * {@link TransportService#sendRequest(DiscoveryNode, String, TransportRequest, TransportResponseHandler)} or  * {@link TransportService#sendRequest(DiscoveryNode, String, TransportRequest, TransportRequestOptions, TransportResponseHandler)}.  * This allows plugins to perform actions on each send request including modifying the request context etc.  */ default AsyncSender interceptSender(AsyncSender sender) {     return sender. }
false;;5;3;;<T extends TransportResponse> void sendRequest(Transport.Connection connection, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler).
