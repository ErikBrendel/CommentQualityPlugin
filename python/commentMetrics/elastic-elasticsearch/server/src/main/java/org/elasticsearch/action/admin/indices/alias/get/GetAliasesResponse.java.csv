commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ImmutableOpenMap<String, List<AliasMetaData>> getAliases() {     return aliases. }
false;public;1;16;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliasesBuilder = ImmutableOpenMap.builder().     for (int i = 0. i < size. i++) {         String key = in.readString().         int valueSize = in.readVInt().         List<AliasMetaData> value = new ArrayList<>(valueSize).         for (int j = 0. j < valueSize. j++) {             value.add(new AliasMetaData(in)).         }         aliasesBuilder.put(key, Collections.unmodifiableList(value)).     }     aliases = aliasesBuilder.build(). }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(aliases.size()).     for (ObjectObjectCursor<String, List<AliasMetaData>> entry : aliases) {         out.writeString(entry.key).         out.writeVInt(entry.value.size()).         for (AliasMetaData aliasMetaData : entry.value) {             aliasMetaData.writeTo(out).         }     } }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     GetAliasesResponse that = (GetAliasesResponse) o.     return Objects.equals(aliases, that.aliases). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(aliases). }
