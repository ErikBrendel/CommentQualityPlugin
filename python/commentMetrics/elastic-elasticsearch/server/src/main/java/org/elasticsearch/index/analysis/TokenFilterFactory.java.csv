commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;String name().
false;;1;1;;TokenStream create(TokenStream tokenStream).
true;default;1;3;/**  * Normalize a tokenStream for use in multi-term queries  *  * The default implementation is a no-op  */ ;/**  * Normalize a tokenStream for use in multi-term queries  *  * The default implementation is a no-op  */ default TokenStream normalize(TokenStream tokenStream) {     return tokenStream. }
true;default;0;3;/**  * Does this analyzer mess up the {@link OffsetAttribute}s in such as way as to break the  * {@link FastVectorHighlighter}? If this is {@code true} then the  * {@linkplain FastVectorHighlighter} will attempt to work around the broken offsets.  */ ;/**  * Does this analyzer mess up the {@link OffsetAttribute}s in such as way as to break the  * {@link FastVectorHighlighter}? If this is {@code true} then the  * {@linkplain FastVectorHighlighter} will attempt to work around the broken offsets.  */ default boolean breaksFastVectorHighlighter() {     return false. }
true;default;4;5;/**  * Rewrite the TokenFilterFactory to take into account the preceding analysis chain, or refer  * to other TokenFilterFactories  * @param tokenizer             the TokenizerFactory for the preceding chain  * @param charFilters           any CharFilterFactories for the preceding chain  * @param previousTokenFilters  a list of TokenFilterFactories in the preceding chain  * @param allFilters            access to previously defined TokenFilterFactories  */ ;/**  * Rewrite the TokenFilterFactory to take into account the preceding analysis chain, or refer  * to other TokenFilterFactories  * @param tokenizer             the TokenizerFactory for the preceding chain  * @param charFilters           any CharFilterFactories for the preceding chain  * @param previousTokenFilters  a list of TokenFilterFactories in the preceding chain  * @param allFilters            access to previously defined TokenFilterFactories  */ default TokenFilterFactory getChainAwareTokenFilterFactory(TokenizerFactory tokenizer, List<CharFilterFactory> charFilters, List<TokenFilterFactory> previousTokenFilters, Function<String, TokenFilterFactory> allFilters) {     return this. }
true;default;0;3;/**  * Return a version of this TokenFilterFactory appropriate for synonym parsing  *  * Filters that should not be applied to synonyms (for example, those that produce  * multiple tokens) should throw an exception  */ ;/**  * Return a version of this TokenFilterFactory appropriate for synonym parsing  *  * Filters that should not be applied to synonyms (for example, those that produce  * multiple tokens) should throw an exception  */ default TokenFilterFactory getSynonymFilter() {     return this. }
false;public;0;4;;@Override public String name() {     return "identity". }
false;public;1;4;;@Override public TokenStream create(TokenStream tokenStream) {     return tokenStream. }
