commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;5;;@Override public final AB subAggregations(Builder subFactories) {     throw new AggregationInitializationException("Aggregator [" + name + "] of type [" + getType() + "] cannot accept sub-aggregations"). }
true;private;1;16;/**  * Read from a stream.  */ ;/**  * Read from a stream.  */ private void read(StreamInput in) throws IOException {     field = in.readOptionalString().     if (in.readBoolean()) {         script = new Script(in).     }     if (in.readBoolean()) {         valueType = ValueType.readFromStream(in).     }     format = in.readOptionalString().     missing = in.readGenericValue().     if (in.getVersion().before(Version.V_7_0_0)) {         timeZone = DateUtils.dateTimeZoneToZoneId(in.readOptionalTimeZone()).     } else {         timeZone = in.readOptionalZoneId().     } }
false;protected,final;1;25;;@Override protected final void doWriteTo(StreamOutput out) throws IOException {     if (serializeTargetValueType()) {         out.writeOptionalWriteable(targetValueType).     }     out.writeOptionalString(field).     boolean hasScript = script != null.     out.writeBoolean(hasScript).     if (hasScript) {         script.writeTo(out).     }     boolean hasValueType = valueType != null.     out.writeBoolean(hasValueType).     if (hasValueType) {         valueType.writeTo(out).     }     out.writeOptionalString(format).     out.writeGenericValue(missing).     if (out.getVersion().before(Version.V_7_0_0)) {         out.writeOptionalTimeZone(DateUtils.zoneIdToDateTimeZone(timeZone)).     } else {         out.writeOptionalZoneId(timeZone).     }     innerWriteTo(out). }
true;protected,abstract;1;1;/**  * Write subclass's state to the stream.  */ ;/**  * Write subclass's state to the stream.  */ protected abstract void innerWriteTo(StreamOutput out) throws IOException.
true;protected;0;3;/**  * Should this builder serialize its targetValueType? Defaults to false. All subclasses that override this to true should use the three  * argument read constructor rather than the four argument version.  */ ;/**  * Should this builder serialize its targetValueType? Defaults to false. All subclasses that override this to true should use the three  * argument read constructor rather than the four argument version.  */ protected boolean serializeTargetValueType() {     return false. }
true;public;1;8;/**  * Sets the field to use for this aggregation.  */ ;/**  * Sets the field to use for this aggregation.  */ @SuppressWarnings("unchecked") public AB field(String field) {     if (field == null) {         throw new IllegalArgumentException("[field] must not be null: [" + name + "]").     }     this.field = field.     return (AB) this. }
true;public;0;3;/**  * Gets the field to use for this aggregation.  */ ;/**  * Gets the field to use for this aggregation.  */ public String field() {     return field. }
true;public;1;8;/**  * Sets the script to use for this aggregation.  */ ;/**  * Sets the script to use for this aggregation.  */ @SuppressWarnings("unchecked") public AB script(Script script) {     if (script == null) {         throw new IllegalArgumentException("[script] must not be null: [" + name + "]").     }     this.script = script.     return (AB) this. }
true;public;0;3;/**  * Gets the script to use for this aggregation.  */ ;/**  * Gets the script to use for this aggregation.  */ public Script script() {     return script. }
true;public;1;8;/**  * Sets the {@link ValueType} for the value produced by this aggregation  */ ;/**  * Sets the {@link ValueType} for the value produced by this aggregation  */ @SuppressWarnings("unchecked") public AB valueType(ValueType valueType) {     if (valueType == null) {         throw new IllegalArgumentException("[valueType] must not be null: [" + name + "]").     }     this.valueType = valueType.     return (AB) this. }
true;public;0;3;/**  * Gets the {@link ValueType} for the value produced by this aggregation  */ ;/**  * Gets the {@link ValueType} for the value produced by this aggregation  */ public ValueType valueType() {     return valueType. }
true;public;1;8;/**  * Sets the format to use for the output of the aggregation.  */ ;/**  * Sets the format to use for the output of the aggregation.  */ @SuppressWarnings("unchecked") public AB format(String format) {     if (format == null) {         throw new IllegalArgumentException("[format] must not be null: [" + name + "]").     }     this.format = format.     return (AB) this. }
true;public;0;3;/**  * Gets the format to use for the output of the aggregation.  */ ;/**  * Gets the format to use for the output of the aggregation.  */ public String format() {     return format. }
true;public;1;8;/**  * Sets the value to use when the aggregation finds a missing value in a  * document  */ ;/**  * Sets the value to use when the aggregation finds a missing value in a  * document  */ @SuppressWarnings("unchecked") public AB missing(Object missing) {     if (missing == null) {         throw new IllegalArgumentException("[missing] must not be null: [" + name + "]").     }     this.missing = missing.     return (AB) this. }
true;public;0;3;/**  * Gets the value to use when the aggregation finds a missing value in a  * document  */ ;/**  * Gets the value to use when the aggregation finds a missing value in a  * document  */ public Object missing() {     return missing. }
true;public;1;8;/**  * Sets the time zone to use for this aggregation  */ ;/**  * Sets the time zone to use for this aggregation  */ @SuppressWarnings("unchecked") public AB timeZone(ZoneId timeZone) {     if (timeZone == null) {         throw new IllegalArgumentException("[timeZone] must not be null: [" + name + "]").     }     this.timeZone = timeZone.     return (AB) this. }
true;public;0;3;/**  * Gets the time zone to use for this aggregation  */ ;/**  * Gets the time zone to use for this aggregation  */ public ZoneId timeZone() {     return timeZone. }
false;protected,final;3;7;;@Override protected final ValuesSourceAggregatorFactory<VS, ?> doBuild(SearchContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactoriesBuilder) throws IOException {     ValuesSourceConfig<VS> config = resolveConfig(context).     ValuesSourceAggregatorFactory<VS, ?> factory = innerBuild(context, config, parent, subFactoriesBuilder).     return factory. }
false;protected;1;5;;protected ValuesSourceConfig<VS> resolveConfig(SearchContext context) {     ValueType valueType = this.valueType != null ? this.valueType : targetValueType.     return ValuesSourceConfig.resolve(context.getQueryShardContext(), valueType, field, script, missing, timeZone, format). }
false;protected,abstract;4;2;;protected abstract ValuesSourceAggregatorFactory<VS, ?> innerBuild(SearchContext context, ValuesSourceConfig<VS> config, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactoriesBuilder) throws IOException.
false;public,final;2;25;;@Override public final XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (field != null) {         builder.field("field", field).     }     if (script != null) {         builder.field("script", script).     }     if (missing != null) {         builder.field("missing", missing).     }     if (format != null) {         builder.field("format", format).     }     if (timeZone != null) {         builder.field("time_zone", timeZone.toString()).     }     if (valueType != null) {         builder.field("value_type", valueType.getPreferredName()).     }     doXContentBody(builder, params).     builder.endObject().     return builder. }
false;protected,abstract;2;1;;protected abstract XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException.
false;protected,final;0;5;;@Override protected final int doHashCode() {     return Objects.hash(field, format, missing, script, targetValueType, timeZone, valueType, valuesSourceType, innerHashCode()). }
false;protected,abstract;0;1;;protected abstract int innerHashCode().
false;protected,final;1;21;;@Override protected final boolean doEquals(Object obj) {     ValuesSourceAggregationBuilder<?, ?> other = (ValuesSourceAggregationBuilder<?, ?>) obj.     if (!Objects.equals(field, other.field))         return false.     if (!Objects.equals(format, other.format))         return false.     if (!Objects.equals(missing, other.missing))         return false.     if (!Objects.equals(script, other.script))         return false.     if (!Objects.equals(targetValueType, other.targetValueType))         return false.     if (!Objects.equals(timeZone, other.timeZone))         return false.     if (!Objects.equals(valueType, other.valueType))         return false.     if (!Objects.equals(valuesSourceType, other.valuesSourceType))         return false.     return innerEquals(obj). }
false;protected,abstract;1;1;;protected abstract boolean innerEquals(Object obj).
