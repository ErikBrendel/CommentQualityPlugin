# id;timestamp;commentText;codeText;commentWords;codeWords
FsRepository -> public FsRepository(RepositoryMetaData metadata, Environment environment,                         NamedXContentRegistry namedXContentRegistry);1531729807;Constructs a shared file system repository.;public FsRepository(RepositoryMetaData metadata, Environment environment,_                        NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)__        this.environment = environment__        String location = REPOSITORIES_LOCATION_SETTING.get(metadata.settings())__        if (location.isEmpty()) {_            logger.warn("the repository location is missing, it should point to a shared file system location"_                + " that is available on all master and data nodes")__            throw new RepositoryException(metadata.name(), "missing location")__        }_        Path locationFile = environment.resolveRepoFile(location)__        if (locationFile == null) {_            if (environment.repoFiles().length > 0) {_                logger.warn("The specified location [{}] doesn't start with any "_                    + "repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles())__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo")__            } else {_                logger.warn("The specified location [{}] should start with a repository path specified by"_                    + " the path.repo setting, but the path.repo setting was not set on this node", location)__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo because this setting is empty")__            }_        }__        if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {_            this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        } else {_            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(settings)__        }_        this.compress = COMPRESS_SETTING.exists(metadata.settings())_            ? COMPRESS_SETTING.get(metadata.settings()) : REPOSITORIES_COMPRESS_SETTING.get(settings)__        this.basePath = BlobPath.cleanPath()__    };constructs,a,shared,file,system,repository;public,fs,repository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,this,environment,environment,string,location,get,metadata,settings,if,location,is,empty,logger,warn,the,repository,location,is,missing,it,should,point,to,a,shared,file,system,location,that,is,available,on,all,master,and,data,nodes,throw,new,repository,exception,metadata,name,missing,location,path,location,file,environment,resolve,repo,file,location,if,location,file,null,if,environment,repo,files,length,0,logger,warn,the,specified,location,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,location,environment,repo,files,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,else,logger,warn,the,specified,location,should,start,with,a,repository,path,specified,by,the,path,repo,setting,but,the,path,repo,setting,was,not,set,on,this,node,location,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,because,this,setting,is,empty,if,exists,metadata,settings,this,chunk,size,get,metadata,settings,else,this,chunk,size,get,settings,this,compress,exists,metadata,settings,get,metadata,settings,get,settings,this,base,path,blob,path,clean,path
FsRepository -> public FsRepository(RepositoryMetaData metadata, Environment environment,                         NamedXContentRegistry namedXContentRegistry);1541008027;Constructs a shared file system repository.;public FsRepository(RepositoryMetaData metadata, Environment environment,_                        NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)__        this.environment = environment__        String location = REPOSITORIES_LOCATION_SETTING.get(metadata.settings())__        if (location.isEmpty()) {_            logger.warn("the repository location is missing, it should point to a shared file system location"_                + " that is available on all master and data nodes")__            throw new RepositoryException(metadata.name(), "missing location")__        }_        Path locationFile = environment.resolveRepoFile(location)__        if (locationFile == null) {_            if (environment.repoFiles().length > 0) {_                logger.warn("The specified location [{}] doesn't start with any "_                    + "repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles())__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo")__            } else {_                logger.warn("The specified location [{}] should start with a repository path specified by"_                    + " the path.repo setting, but the path.repo setting was not set on this node", location)__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo because this setting is empty")__            }_        }__        if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {_            this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        } else {_            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(environment.settings())__        }_        this.compress = COMPRESS_SETTING.exists(metadata.settings())_            ? COMPRESS_SETTING.get(metadata.settings()) : REPOSITORIES_COMPRESS_SETTING.get(environment.settings())__        this.basePath = BlobPath.cleanPath()__    };constructs,a,shared,file,system,repository;public,fs,repository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,this,environment,environment,string,location,get,metadata,settings,if,location,is,empty,logger,warn,the,repository,location,is,missing,it,should,point,to,a,shared,file,system,location,that,is,available,on,all,master,and,data,nodes,throw,new,repository,exception,metadata,name,missing,location,path,location,file,environment,resolve,repo,file,location,if,location,file,null,if,environment,repo,files,length,0,logger,warn,the,specified,location,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,location,environment,repo,files,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,else,logger,warn,the,specified,location,should,start,with,a,repository,path,specified,by,the,path,repo,setting,but,the,path,repo,setting,was,not,set,on,this,node,location,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,because,this,setting,is,empty,if,exists,metadata,settings,this,chunk,size,get,metadata,settings,else,this,chunk,size,get,environment,settings,this,compress,exists,metadata,settings,get,metadata,settings,get,environment,settings,this,base,path,blob,path,clean,path
FsRepository -> public FsRepository(RepositoryMetaData metadata, Environment environment,                         NamedXContentRegistry namedXContentRegistry);1542646292;Constructs a shared file system repository.;public FsRepository(RepositoryMetaData metadata, Environment environment,_                        NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)__        this.environment = environment__        String location = REPOSITORIES_LOCATION_SETTING.get(metadata.settings())__        if (location.isEmpty()) {_            logger.warn("the repository location is missing, it should point to a shared file system location"_                + " that is available on all master and data nodes")__            throw new RepositoryException(metadata.name(), "missing location")__        }_        Path locationFile = environment.resolveRepoFile(location)__        if (locationFile == null) {_            if (environment.repoFiles().length > 0) {_                logger.warn("The specified location [{}] doesn't start with any "_                    + "repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles())__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo")__            } else {_                logger.warn("The specified location [{}] should start with a repository path specified by"_                    + " the path.repo setting, but the path.repo setting was not set on this node", location)__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo because this setting is empty")__            }_        }__        if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {_            this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        } else {_            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(environment.settings())__        }_        this.compress = COMPRESS_SETTING.exists(metadata.settings())_            ? COMPRESS_SETTING.get(metadata.settings()) : REPOSITORIES_COMPRESS_SETTING.get(environment.settings())__        this.basePath = BlobPath.cleanPath()__    };constructs,a,shared,file,system,repository;public,fs,repository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,this,environment,environment,string,location,get,metadata,settings,if,location,is,empty,logger,warn,the,repository,location,is,missing,it,should,point,to,a,shared,file,system,location,that,is,available,on,all,master,and,data,nodes,throw,new,repository,exception,metadata,name,missing,location,path,location,file,environment,resolve,repo,file,location,if,location,file,null,if,environment,repo,files,length,0,logger,warn,the,specified,location,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,location,environment,repo,files,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,else,logger,warn,the,specified,location,should,start,with,a,repository,path,specified,by,the,path,repo,setting,but,the,path,repo,setting,was,not,set,on,this,node,location,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,because,this,setting,is,empty,if,exists,metadata,settings,this,chunk,size,get,metadata,settings,else,this,chunk,size,get,environment,settings,this,compress,exists,metadata,settings,get,metadata,settings,get,environment,settings,this,base,path,blob,path,clean,path
FsRepository -> public FsRepository(RepositoryMetaData metadata, Environment environment,                         NamedXContentRegistry namedXContentRegistry);1546974294;Constructs a shared file system repository.;public FsRepository(RepositoryMetaData metadata, Environment environment,_                        NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), namedXContentRegistry)__        this.environment = environment__        String location = REPOSITORIES_LOCATION_SETTING.get(metadata.settings())__        if (location.isEmpty()) {_            logger.warn("the repository location is missing, it should point to a shared file system location"_                + " that is available on all master and data nodes")__            throw new RepositoryException(metadata.name(), "missing location")__        }_        Path locationFile = environment.resolveRepoFile(location)__        if (locationFile == null) {_            if (environment.repoFiles().length > 0) {_                logger.warn("The specified location [{}] doesn't start with any "_                    + "repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles())__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo")__            } else {_                logger.warn("The specified location [{}] should start with a repository path specified by"_                    + " the path.repo setting, but the path.repo setting was not set on this node", location)__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo because this setting is empty")__            }_        }__        if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {_            this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        } else {_            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(environment.settings())__        }_        this.compress = COMPRESS_SETTING.exists(metadata.settings())_            ? COMPRESS_SETTING.get(metadata.settings()) : REPOSITORIES_COMPRESS_SETTING.get(environment.settings())__        this.basePath = BlobPath.cleanPath()__    };constructs,a,shared,file,system,repository;public,fs,repository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,named,xcontent,registry,this,environment,environment,string,location,get,metadata,settings,if,location,is,empty,logger,warn,the,repository,location,is,missing,it,should,point,to,a,shared,file,system,location,that,is,available,on,all,master,and,data,nodes,throw,new,repository,exception,metadata,name,missing,location,path,location,file,environment,resolve,repo,file,location,if,location,file,null,if,environment,repo,files,length,0,logger,warn,the,specified,location,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,location,environment,repo,files,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,else,logger,warn,the,specified,location,should,start,with,a,repository,path,specified,by,the,path,repo,setting,but,the,path,repo,setting,was,not,set,on,this,node,location,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,because,this,setting,is,empty,if,exists,metadata,settings,this,chunk,size,get,metadata,settings,else,this,chunk,size,get,environment,settings,this,compress,exists,metadata,settings,get,metadata,settings,get,environment,settings,this,base,path,blob,path,clean,path
FsRepository -> public FsRepository(RepositoryMetaData metadata, Environment environment,                         NamedXContentRegistry namedXContentRegistry);1550647627;Constructs a shared file system repository.;public FsRepository(RepositoryMetaData metadata, Environment environment,_                        NamedXContentRegistry namedXContentRegistry) {_        super(metadata, environment.settings(), calculateCompress(metadata, environment), namedXContentRegistry)__        this.environment = environment__        String location = REPOSITORIES_LOCATION_SETTING.get(metadata.settings())__        if (location.isEmpty()) {_            logger.warn("the repository location is missing, it should point to a shared file system location"_                + " that is available on all master and data nodes")__            throw new RepositoryException(metadata.name(), "missing location")__        }_        Path locationFile = environment.resolveRepoFile(location)__        if (locationFile == null) {_            if (environment.repoFiles().length > 0) {_                logger.warn("The specified location [{}] doesn't start with any "_                    + "repository paths specified by the path.repo setting: [{}] ", location, environment.repoFiles())__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo")__            } else {_                logger.warn("The specified location [{}] should start with a repository path specified by"_                    + " the path.repo setting, but the path.repo setting was not set on this node", location)__                throw new RepositoryException(metadata.name(), "location [" + location_                    + "] doesn't match any of the locations specified by path.repo because this setting is empty")__            }_        }__        if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {_            this.chunkSize = CHUNK_SIZE_SETTING.get(metadata.settings())__        } else {_            this.chunkSize = REPOSITORIES_CHUNK_SIZE_SETTING.get(environment.settings())__        }_        this.basePath = BlobPath.cleanPath()__    };constructs,a,shared,file,system,repository;public,fs,repository,repository,meta,data,metadata,environment,environment,named,xcontent,registry,named,xcontent,registry,super,metadata,environment,settings,calculate,compress,metadata,environment,named,xcontent,registry,this,environment,environment,string,location,get,metadata,settings,if,location,is,empty,logger,warn,the,repository,location,is,missing,it,should,point,to,a,shared,file,system,location,that,is,available,on,all,master,and,data,nodes,throw,new,repository,exception,metadata,name,missing,location,path,location,file,environment,resolve,repo,file,location,if,location,file,null,if,environment,repo,files,length,0,logger,warn,the,specified,location,doesn,t,start,with,any,repository,paths,specified,by,the,path,repo,setting,location,environment,repo,files,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,else,logger,warn,the,specified,location,should,start,with,a,repository,path,specified,by,the,path,repo,setting,but,the,path,repo,setting,was,not,set,on,this,node,location,throw,new,repository,exception,metadata,name,location,location,doesn,t,match,any,of,the,locations,specified,by,path,repo,because,this,setting,is,empty,if,exists,metadata,settings,this,chunk,size,get,metadata,settings,else,this,chunk,size,get,environment,settings,this,base,path,blob,path,clean,path
