# id;timestamp;commentText;codeText;commentWords;codeWords
NetworkModule -> public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,                          BigArrays bigArrays,                          PageCacheRecycler pageCacheRecycler,                          CircuitBreakerService circuitBreakerService,                          NamedWriteableRegistry namedWriteableRegistry,                          NamedXContentRegistry xContentRegistry,                          NetworkService networkService, HttpServerTransport.Dispatcher dispatcher);1524684173;Creates a network module that custom networking classes can be plugged into._@param settings The settings for the node_@param transportClient True if only transport classes should be allowed to be registered, false otherwise.;public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,_                         BigArrays bigArrays,_                         PageCacheRecycler pageCacheRecycler,_                         CircuitBreakerService circuitBreakerService,_                         NamedWriteableRegistry namedWriteableRegistry,_                         NamedXContentRegistry xContentRegistry,_                         NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {_        this.settings = settings__        this.transportClient = transportClient__        for (NetworkPlugin plugin : plugins) {_            if (transportClient == false && HTTP_ENABLED.get(settings)) {_                Map<String, Supplier<HttpServerTransport>> httpTransportFactory = plugin.getHttpTransports(settings, threadPool, bigArrays,_                    circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, dispatcher)__                for (Map.Entry<String, Supplier<HttpServerTransport>> entry : httpTransportFactory.entrySet()) {_                    registerHttpTransport(entry.getKey(), entry.getValue())__                }_            }_            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,_                circuitBreakerService, namedWriteableRegistry, networkService)__            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {_                registerTransport(entry.getKey(), entry.getValue())__            }_            List<TransportInterceptor> transportInterceptors = plugin.getTransportInterceptors(namedWriteableRegistry,_                threadPool.getThreadContext())__            for (TransportInterceptor interceptor : transportInterceptors) {_                registerTransportInterceptor(interceptor)__            }_        }_    };creates,a,network,module,that,custom,networking,classes,can,be,plugged,into,param,settings,the,settings,for,the,node,param,transport,client,true,if,only,transport,classes,should,be,allowed,to,be,registered,false,otherwise;public,network,module,settings,settings,boolean,transport,client,list,network,plugin,plugins,thread,pool,thread,pool,big,arrays,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,named,writeable,registry,named,writeable,registry,named,xcontent,registry,x,content,registry,network,service,network,service,http,server,transport,dispatcher,dispatcher,this,settings,settings,this,transport,client,transport,client,for,network,plugin,plugin,plugins,if,transport,client,false,get,settings,map,string,supplier,http,server,transport,http,transport,factory,plugin,get,http,transports,settings,thread,pool,big,arrays,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,dispatcher,for,map,entry,string,supplier,http,server,transport,entry,http,transport,factory,entry,set,register,http,transport,entry,get,key,entry,get,value,map,string,supplier,transport,transport,factory,plugin,get,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,network,service,for,map,entry,string,supplier,transport,entry,transport,factory,entry,set,register,transport,entry,get,key,entry,get,value,list,transport,interceptor,transport,interceptors,plugin,get,transport,interceptors,named,writeable,registry,thread,pool,get,thread,context,for,transport,interceptor,interceptor,transport,interceptors,register,transport,interceptor,interceptor
NetworkModule -> public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,                          BigArrays bigArrays,                          PageCacheRecycler pageCacheRecycler,                          CircuitBreakerService circuitBreakerService,                          NamedWriteableRegistry namedWriteableRegistry,                          NamedXContentRegistry xContentRegistry,                          NetworkService networkService, HttpServerTransport.Dispatcher dispatcher);1525334055;Creates a network module that custom networking classes can be plugged into._@param settings The settings for the node_@param transportClient True if only transport classes should be allowed to be registered, false otherwise.;public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,_                         BigArrays bigArrays,_                         PageCacheRecycler pageCacheRecycler,_                         CircuitBreakerService circuitBreakerService,_                         NamedWriteableRegistry namedWriteableRegistry,_                         NamedXContentRegistry xContentRegistry,_                         NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {_        this.settings = settings__        this.transportClient = transportClient__        for (NetworkPlugin plugin : plugins) {_            Map<String, Supplier<HttpServerTransport>> httpTransportFactory = plugin.getHttpTransports(settings, threadPool, bigArrays,_                circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, dispatcher)__            if (transportClient == false) {_                for (Map.Entry<String, Supplier<HttpServerTransport>> entry : httpTransportFactory.entrySet()) {_                    registerHttpTransport(entry.getKey(), entry.getValue())__                }_            }_            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,_                circuitBreakerService, namedWriteableRegistry, networkService)__            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {_                registerTransport(entry.getKey(), entry.getValue())__            }_            List<TransportInterceptor> transportInterceptors = plugin.getTransportInterceptors(namedWriteableRegistry,_                threadPool.getThreadContext())__            for (TransportInterceptor interceptor : transportInterceptors) {_                registerTransportInterceptor(interceptor)__            }_        }_    };creates,a,network,module,that,custom,networking,classes,can,be,plugged,into,param,settings,the,settings,for,the,node,param,transport,client,true,if,only,transport,classes,should,be,allowed,to,be,registered,false,otherwise;public,network,module,settings,settings,boolean,transport,client,list,network,plugin,plugins,thread,pool,thread,pool,big,arrays,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,named,writeable,registry,named,writeable,registry,named,xcontent,registry,x,content,registry,network,service,network,service,http,server,transport,dispatcher,dispatcher,this,settings,settings,this,transport,client,transport,client,for,network,plugin,plugin,plugins,map,string,supplier,http,server,transport,http,transport,factory,plugin,get,http,transports,settings,thread,pool,big,arrays,circuit,breaker,service,named,writeable,registry,x,content,registry,network,service,dispatcher,if,transport,client,false,for,map,entry,string,supplier,http,server,transport,entry,http,transport,factory,entry,set,register,http,transport,entry,get,key,entry,get,value,map,string,supplier,transport,transport,factory,plugin,get,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,network,service,for,map,entry,string,supplier,transport,entry,transport,factory,entry,set,register,transport,entry,get,key,entry,get,value,list,transport,interceptor,transport,interceptors,plugin,get,transport,interceptors,named,writeable,registry,thread,pool,get,thread,context,for,transport,interceptor,interceptor,transport,interceptors,register,transport,interceptor,interceptor
NetworkModule -> public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,                          BigArrays bigArrays,                          PageCacheRecycler pageCacheRecycler,                          CircuitBreakerService circuitBreakerService,                          NamedWriteableRegistry namedWriteableRegistry,                          NamedXContentRegistry xContentRegistry,                          NetworkService networkService, HttpServerTransport.Dispatcher dispatcher);1529341607;Creates a network module that custom networking classes can be plugged into._@param settings The settings for the node_@param transportClient True if only transport classes should be allowed to be registered, false otherwise.;public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,_                         BigArrays bigArrays,_                         PageCacheRecycler pageCacheRecycler,_                         CircuitBreakerService circuitBreakerService,_                         NamedWriteableRegistry namedWriteableRegistry,_                         NamedXContentRegistry xContentRegistry,_                         NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {_        this.settings = settings__        this.transportClient = transportClient__        for (NetworkPlugin plugin : plugins) {_            Map<String, Supplier<HttpServerTransport>> httpTransportFactory = plugin.getHttpTransports(settings, threadPool, bigArrays,_                pageCacheRecycler, circuitBreakerService, xContentRegistry, networkService, dispatcher)__            if (transportClient == false) {_                for (Map.Entry<String, Supplier<HttpServerTransport>> entry : httpTransportFactory.entrySet()) {_                    registerHttpTransport(entry.getKey(), entry.getValue())__                }_            }_            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, bigArrays, pageCacheRecycler,_                circuitBreakerService, namedWriteableRegistry, networkService)__            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {_                registerTransport(entry.getKey(), entry.getValue())__            }_            List<TransportInterceptor> transportInterceptors = plugin.getTransportInterceptors(namedWriteableRegistry,_                threadPool.getThreadContext())__            for (TransportInterceptor interceptor : transportInterceptors) {_                registerTransportInterceptor(interceptor)__            }_        }_    };creates,a,network,module,that,custom,networking,classes,can,be,plugged,into,param,settings,the,settings,for,the,node,param,transport,client,true,if,only,transport,classes,should,be,allowed,to,be,registered,false,otherwise;public,network,module,settings,settings,boolean,transport,client,list,network,plugin,plugins,thread,pool,thread,pool,big,arrays,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,named,writeable,registry,named,writeable,registry,named,xcontent,registry,x,content,registry,network,service,network,service,http,server,transport,dispatcher,dispatcher,this,settings,settings,this,transport,client,transport,client,for,network,plugin,plugin,plugins,map,string,supplier,http,server,transport,http,transport,factory,plugin,get,http,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,x,content,registry,network,service,dispatcher,if,transport,client,false,for,map,entry,string,supplier,http,server,transport,entry,http,transport,factory,entry,set,register,http,transport,entry,get,key,entry,get,value,map,string,supplier,transport,transport,factory,plugin,get,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,named,writeable,registry,network,service,for,map,entry,string,supplier,transport,entry,transport,factory,entry,set,register,transport,entry,get,key,entry,get,value,list,transport,interceptor,transport,interceptors,plugin,get,transport,interceptors,named,writeable,registry,thread,pool,get,thread,context,for,transport,interceptor,interceptor,transport,interceptors,register,transport,interceptor,interceptor
NetworkModule -> public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,                          BigArrays bigArrays,                          PageCacheRecycler pageCacheRecycler,                          CircuitBreakerService circuitBreakerService,                          NamedWriteableRegistry namedWriteableRegistry,                          NamedXContentRegistry xContentRegistry,                          NetworkService networkService, HttpServerTransport.Dispatcher dispatcher);1544554541;Creates a network module that custom networking classes can be plugged into._@param settings The settings for the node_@param transportClient True if only transport classes should be allowed to be registered, false otherwise.;public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,_                         BigArrays bigArrays,_                         PageCacheRecycler pageCacheRecycler,_                         CircuitBreakerService circuitBreakerService,_                         NamedWriteableRegistry namedWriteableRegistry,_                         NamedXContentRegistry xContentRegistry,_                         NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {_        this.settings = settings__        this.transportClient = transportClient__        for (NetworkPlugin plugin : plugins) {_            Map<String, Supplier<HttpServerTransport>> httpTransportFactory = plugin.getHttpTransports(settings, threadPool, bigArrays,_                pageCacheRecycler, circuitBreakerService, xContentRegistry, networkService, dispatcher)__            if (transportClient == false) {_                for (Map.Entry<String, Supplier<HttpServerTransport>> entry : httpTransportFactory.entrySet()) {_                    registerHttpTransport(entry.getKey(), entry.getValue())__                }_            }_            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, pageCacheRecycler,_                circuitBreakerService, namedWriteableRegistry, networkService)__            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {_                registerTransport(entry.getKey(), entry.getValue())__            }_            List<TransportInterceptor> transportInterceptors = plugin.getTransportInterceptors(namedWriteableRegistry,_                threadPool.getThreadContext())__            for (TransportInterceptor interceptor : transportInterceptors) {_                registerTransportInterceptor(interceptor)__            }_        }_    };creates,a,network,module,that,custom,networking,classes,can,be,plugged,into,param,settings,the,settings,for,the,node,param,transport,client,true,if,only,transport,classes,should,be,allowed,to,be,registered,false,otherwise;public,network,module,settings,settings,boolean,transport,client,list,network,plugin,plugins,thread,pool,thread,pool,big,arrays,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,named,writeable,registry,named,writeable,registry,named,xcontent,registry,x,content,registry,network,service,network,service,http,server,transport,dispatcher,dispatcher,this,settings,settings,this,transport,client,transport,client,for,network,plugin,plugin,plugins,map,string,supplier,http,server,transport,http,transport,factory,plugin,get,http,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,x,content,registry,network,service,dispatcher,if,transport,client,false,for,map,entry,string,supplier,http,server,transport,entry,http,transport,factory,entry,set,register,http,transport,entry,get,key,entry,get,value,map,string,supplier,transport,transport,factory,plugin,get,transports,settings,thread,pool,page,cache,recycler,circuit,breaker,service,named,writeable,registry,network,service,for,map,entry,string,supplier,transport,entry,transport,factory,entry,set,register,transport,entry,get,key,entry,get,value,list,transport,interceptor,transport,interceptors,plugin,get,transport,interceptors,named,writeable,registry,thread,pool,get,thread,context,for,transport,interceptor,interceptor,transport,interceptors,register,transport,interceptor,interceptor
NetworkModule -> public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,                          BigArrays bigArrays,                          PageCacheRecycler pageCacheRecycler,                          CircuitBreakerService circuitBreakerService,                          NamedWriteableRegistry namedWriteableRegistry,                          NamedXContentRegistry xContentRegistry,                          NetworkService networkService, HttpServerTransport.Dispatcher dispatcher);1544789769;Creates a network module that custom networking classes can be plugged into._@param settings The settings for the node_@param transportClient True if only transport classes should be allowed to be registered, false otherwise.;public NetworkModule(Settings settings, boolean transportClient, List<NetworkPlugin> plugins, ThreadPool threadPool,_                         BigArrays bigArrays,_                         PageCacheRecycler pageCacheRecycler,_                         CircuitBreakerService circuitBreakerService,_                         NamedWriteableRegistry namedWriteableRegistry,_                         NamedXContentRegistry xContentRegistry,_                         NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {_        this.settings = settings__        this.transportClient = transportClient__        for (NetworkPlugin plugin : plugins) {_            Map<String, Supplier<HttpServerTransport>> httpTransportFactory = plugin.getHttpTransports(settings, threadPool, bigArrays,_                pageCacheRecycler, circuitBreakerService, xContentRegistry, networkService, dispatcher)__            if (transportClient == false) {_                for (Map.Entry<String, Supplier<HttpServerTransport>> entry : httpTransportFactory.entrySet()) {_                    registerHttpTransport(entry.getKey(), entry.getValue())__                }_            }_            Map<String, Supplier<Transport>> transportFactory = plugin.getTransports(settings, threadPool, pageCacheRecycler,_                circuitBreakerService, namedWriteableRegistry, networkService)__            for (Map.Entry<String, Supplier<Transport>> entry : transportFactory.entrySet()) {_                registerTransport(entry.getKey(), entry.getValue())__            }_            List<TransportInterceptor> transportInterceptors = plugin.getTransportInterceptors(namedWriteableRegistry,_                threadPool.getThreadContext())__            for (TransportInterceptor interceptor : transportInterceptors) {_                registerTransportInterceptor(interceptor)__            }_        }_    };creates,a,network,module,that,custom,networking,classes,can,be,plugged,into,param,settings,the,settings,for,the,node,param,transport,client,true,if,only,transport,classes,should,be,allowed,to,be,registered,false,otherwise;public,network,module,settings,settings,boolean,transport,client,list,network,plugin,plugins,thread,pool,thread,pool,big,arrays,big,arrays,page,cache,recycler,page,cache,recycler,circuit,breaker,service,circuit,breaker,service,named,writeable,registry,named,writeable,registry,named,xcontent,registry,x,content,registry,network,service,network,service,http,server,transport,dispatcher,dispatcher,this,settings,settings,this,transport,client,transport,client,for,network,plugin,plugin,plugins,map,string,supplier,http,server,transport,http,transport,factory,plugin,get,http,transports,settings,thread,pool,big,arrays,page,cache,recycler,circuit,breaker,service,x,content,registry,network,service,dispatcher,if,transport,client,false,for,map,entry,string,supplier,http,server,transport,entry,http,transport,factory,entry,set,register,http,transport,entry,get,key,entry,get,value,map,string,supplier,transport,transport,factory,plugin,get,transports,settings,thread,pool,page,cache,recycler,circuit,breaker,service,named,writeable,registry,network,service,for,map,entry,string,supplier,transport,entry,transport,factory,entry,set,register,transport,entry,get,key,entry,get,value,list,transport,interceptor,transport,interceptors,plugin,get,transport,interceptors,named,writeable,registry,thread,pool,get,thread,context,for,transport,interceptor,interceptor,transport,interceptors,register,transport,interceptor,interceptor
NetworkModule -> private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,             CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName);1524684173;Register an allocation command._<p>_This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered._</p>_@param reader the reader to read it from a stream_@param parser the parser to read it from XContent_@param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because_it is the name under which the command's reader is registered.;private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,_            CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName) {_        namedXContents.add(new NamedXContentRegistry.Entry(AllocationCommand.class, commandName, parser))__        namedWriteables.add(new NamedWriteableRegistry.Entry(AllocationCommand.class, commandName.getPreferredName(), reader))__    };register,an,allocation,command,p,this,lives,here,instead,of,the,more,aptly,named,cluster,module,because,the,transport,client,needs,these,to,be,registered,p,param,reader,the,reader,to,read,it,from,a,stream,param,parser,the,parser,to,read,it,from,xcontent,param,command,name,the,names,under,which,the,command,should,be,parsed,the,link,parse,field,get,preferred,name,is,special,because,it,is,the,name,under,which,the,command,s,reader,is,registered;private,static,t,extends,allocation,command,void,register,allocation,command,writeable,reader,t,reader,checked,function,xcontent,parser,t,ioexception,parser,parse,field,command,name,named,xcontents,add,new,named,xcontent,registry,entry,allocation,command,class,command,name,parser,named,writeables,add,new,named,writeable,registry,entry,allocation,command,class,command,name,get,preferred,name,reader
NetworkModule -> private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,             CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName);1525334055;Register an allocation command._<p>_This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered._</p>_@param reader the reader to read it from a stream_@param parser the parser to read it from XContent_@param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because_it is the name under which the command's reader is registered.;private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,_            CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName) {_        namedXContents.add(new NamedXContentRegistry.Entry(AllocationCommand.class, commandName, parser))__        namedWriteables.add(new NamedWriteableRegistry.Entry(AllocationCommand.class, commandName.getPreferredName(), reader))__    };register,an,allocation,command,p,this,lives,here,instead,of,the,more,aptly,named,cluster,module,because,the,transport,client,needs,these,to,be,registered,p,param,reader,the,reader,to,read,it,from,a,stream,param,parser,the,parser,to,read,it,from,xcontent,param,command,name,the,names,under,which,the,command,should,be,parsed,the,link,parse,field,get,preferred,name,is,special,because,it,is,the,name,under,which,the,command,s,reader,is,registered;private,static,t,extends,allocation,command,void,register,allocation,command,writeable,reader,t,reader,checked,function,xcontent,parser,t,ioexception,parser,parse,field,command,name,named,xcontents,add,new,named,xcontent,registry,entry,allocation,command,class,command,name,parser,named,writeables,add,new,named,writeable,registry,entry,allocation,command,class,command,name,get,preferred,name,reader
NetworkModule -> private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,             CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName);1529341607;Register an allocation command._<p>_This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered._</p>_@param reader the reader to read it from a stream_@param parser the parser to read it from XContent_@param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because_it is the name under which the command's reader is registered.;private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,_            CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName) {_        namedXContents.add(new NamedXContentRegistry.Entry(AllocationCommand.class, commandName, parser))__        namedWriteables.add(new NamedWriteableRegistry.Entry(AllocationCommand.class, commandName.getPreferredName(), reader))__    };register,an,allocation,command,p,this,lives,here,instead,of,the,more,aptly,named,cluster,module,because,the,transport,client,needs,these,to,be,registered,p,param,reader,the,reader,to,read,it,from,a,stream,param,parser,the,parser,to,read,it,from,xcontent,param,command,name,the,names,under,which,the,command,should,be,parsed,the,link,parse,field,get,preferred,name,is,special,because,it,is,the,name,under,which,the,command,s,reader,is,registered;private,static,t,extends,allocation,command,void,register,allocation,command,writeable,reader,t,reader,checked,function,xcontent,parser,t,ioexception,parser,parse,field,command,name,named,xcontents,add,new,named,xcontent,registry,entry,allocation,command,class,command,name,parser,named,writeables,add,new,named,writeable,registry,entry,allocation,command,class,command,name,get,preferred,name,reader
NetworkModule -> private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,             CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName);1544554541;Register an allocation command._<p>_This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered._</p>_@param reader the reader to read it from a stream_@param parser the parser to read it from XContent_@param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because_it is the name under which the command's reader is registered.;private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,_            CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName) {_        namedXContents.add(new NamedXContentRegistry.Entry(AllocationCommand.class, commandName, parser))__        namedWriteables.add(new NamedWriteableRegistry.Entry(AllocationCommand.class, commandName.getPreferredName(), reader))__    };register,an,allocation,command,p,this,lives,here,instead,of,the,more,aptly,named,cluster,module,because,the,transport,client,needs,these,to,be,registered,p,param,reader,the,reader,to,read,it,from,a,stream,param,parser,the,parser,to,read,it,from,xcontent,param,command,name,the,names,under,which,the,command,should,be,parsed,the,link,parse,field,get,preferred,name,is,special,because,it,is,the,name,under,which,the,command,s,reader,is,registered;private,static,t,extends,allocation,command,void,register,allocation,command,writeable,reader,t,reader,checked,function,xcontent,parser,t,ioexception,parser,parse,field,command,name,named,xcontents,add,new,named,xcontent,registry,entry,allocation,command,class,command,name,parser,named,writeables,add,new,named,writeable,registry,entry,allocation,command,class,command,name,get,preferred,name,reader
NetworkModule -> private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,             CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName);1544789769;Register an allocation command._<p>_This lives here instead of the more aptly named ClusterModule because the Transport client needs these to be registered._</p>_@param reader the reader to read it from a stream_@param parser the parser to read it from XContent_@param commandName the names under which the command should be parsed. The {@link ParseField#getPreferredName()} is special because_it is the name under which the command's reader is registered.;private static <T extends AllocationCommand> void registerAllocationCommand(Writeable.Reader<T> reader,_            CheckedFunction<XContentParser, T, IOException> parser, ParseField commandName) {_        namedXContents.add(new NamedXContentRegistry.Entry(AllocationCommand.class, commandName, parser))__        namedWriteables.add(new NamedWriteableRegistry.Entry(AllocationCommand.class, commandName.getPreferredName(), reader))__    };register,an,allocation,command,p,this,lives,here,instead,of,the,more,aptly,named,cluster,module,because,the,transport,client,needs,these,to,be,registered,p,param,reader,the,reader,to,read,it,from,a,stream,param,parser,the,parser,to,read,it,from,xcontent,param,command,name,the,names,under,which,the,command,should,be,parsed,the,link,parse,field,get,preferred,name,is,special,because,it,is,the,name,under,which,the,command,s,reader,is,registered;private,static,t,extends,allocation,command,void,register,allocation,command,writeable,reader,t,reader,checked,function,xcontent,parser,t,ioexception,parser,parse,field,command,name,named,xcontents,add,new,named,xcontent,registry,entry,allocation,command,class,command,name,parser,named,writeables,add,new,named,writeable,registry,entry,allocation,command,class,command,name,get,preferred,name,reader
NetworkModule -> private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory);1524684173;Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}.;private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory) {_        if (transportClient) {_            throw new IllegalArgumentException("Cannot register http transport " + key + " for transport client")__        }_        if (transportHttpFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,an,http,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,http,transport,string,key,supplier,http,server,transport,factory,if,transport,client,throw,new,illegal,argument,exception,cannot,register,http,transport,key,for,transport,client,if,transport,http,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory);1525334055;Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}.;private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory) {_        if (transportClient) {_            throw new IllegalArgumentException("Cannot register http transport " + key + " for transport client")__        }_        if (transportHttpFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,an,http,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,http,transport,string,key,supplier,http,server,transport,factory,if,transport,client,throw,new,illegal,argument,exception,cannot,register,http,transport,key,for,transport,client,if,transport,http,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory);1529341607;Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}.;private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory) {_        if (transportClient) {_            throw new IllegalArgumentException("Cannot register http transport " + key + " for transport client")__        }_        if (transportHttpFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,an,http,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,http,transport,string,key,supplier,http,server,transport,factory,if,transport,client,throw,new,illegal,argument,exception,cannot,register,http,transport,key,for,transport,client,if,transport,http,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory);1544554541;Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}.;private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory) {_        if (transportClient) {_            throw new IllegalArgumentException("Cannot register http transport " + key + " for transport client")__        }_        if (transportHttpFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,an,http,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,http,transport,string,key,supplier,http,server,transport,factory,if,transport,client,throw,new,illegal,argument,exception,cannot,register,http,transport,key,for,transport,client,if,transport,http,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory);1544789769;Adds an http transport implementation that can be selected by setting {@link #HTTP_TYPE_KEY}.;private void registerHttpTransport(String key, Supplier<HttpServerTransport> factory) {_        if (transportClient) {_            throw new IllegalArgumentException("Cannot register http transport " + key + " for transport client")__        }_        if (transportHttpFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,an,http,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,http,transport,string,key,supplier,http,server,transport,factory,if,transport,client,throw,new,illegal,argument,exception,cannot,register,http,transport,key,for,transport,client,if,transport,http,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransport(String key, Supplier<Transport> factory);1524684173;Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}.;private void registerTransport(String key, Supplier<Transport> factory) {_        if (transportFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,a,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,transport,string,key,supplier,transport,factory,if,transport,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransport(String key, Supplier<Transport> factory);1525334055;Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}.;private void registerTransport(String key, Supplier<Transport> factory) {_        if (transportFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,a,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,transport,string,key,supplier,transport,factory,if,transport,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransport(String key, Supplier<Transport> factory);1529341607;Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}.;private void registerTransport(String key, Supplier<Transport> factory) {_        if (transportFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,a,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,transport,string,key,supplier,transport,factory,if,transport,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransport(String key, Supplier<Transport> factory);1544554541;Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}.;private void registerTransport(String key, Supplier<Transport> factory) {_        if (transportFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,a,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,transport,string,key,supplier,transport,factory,if,transport,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransport(String key, Supplier<Transport> factory);1544789769;Adds a transport implementation that can be selected by setting {@link #TRANSPORT_TYPE_KEY}.;private void registerTransport(String key, Supplier<Transport> factory) {_        if (transportFactories.putIfAbsent(key, factory) != null) {_            throw new IllegalArgumentException("transport for name: " + key + " is already registered")__        }_    };adds,a,transport,implementation,that,can,be,selected,by,setting,link;private,void,register,transport,string,key,supplier,transport,factory,if,transport,factories,put,if,absent,key,factory,null,throw,new,illegal,argument,exception,transport,for,name,key,is,already,registered
NetworkModule -> private void registerTransportInterceptor(TransportInterceptor interceptor);1524684173;Registers a new {@link TransportInterceptor};private void registerTransportInterceptor(TransportInterceptor interceptor) {_        this.transportIntercetors.add(Objects.requireNonNull(interceptor, "interceptor must not be null"))__    };registers,a,new,link,transport,interceptor;private,void,register,transport,interceptor,transport,interceptor,interceptor,this,transport,intercetors,add,objects,require,non,null,interceptor,interceptor,must,not,be,null
NetworkModule -> private void registerTransportInterceptor(TransportInterceptor interceptor);1525334055;Registers a new {@link TransportInterceptor};private void registerTransportInterceptor(TransportInterceptor interceptor) {_        this.transportIntercetors.add(Objects.requireNonNull(interceptor, "interceptor must not be null"))__    };registers,a,new,link,transport,interceptor;private,void,register,transport,interceptor,transport,interceptor,interceptor,this,transport,intercetors,add,objects,require,non,null,interceptor,interceptor,must,not,be,null
NetworkModule -> private void registerTransportInterceptor(TransportInterceptor interceptor);1529341607;Registers a new {@link TransportInterceptor};private void registerTransportInterceptor(TransportInterceptor interceptor) {_        this.transportIntercetors.add(Objects.requireNonNull(interceptor, "interceptor must not be null"))__    };registers,a,new,link,transport,interceptor;private,void,register,transport,interceptor,transport,interceptor,interceptor,this,transport,intercetors,add,objects,require,non,null,interceptor,interceptor,must,not,be,null
NetworkModule -> private void registerTransportInterceptor(TransportInterceptor interceptor);1544554541;Registers a new {@link TransportInterceptor};private void registerTransportInterceptor(TransportInterceptor interceptor) {_        this.transportIntercetors.add(Objects.requireNonNull(interceptor, "interceptor must not be null"))__    };registers,a,new,link,transport,interceptor;private,void,register,transport,interceptor,transport,interceptor,interceptor,this,transport,intercetors,add,objects,require,non,null,interceptor,interceptor,must,not,be,null
NetworkModule -> private void registerTransportInterceptor(TransportInterceptor interceptor);1544789769;Registers a new {@link TransportInterceptor};private void registerTransportInterceptor(TransportInterceptor interceptor) {_        this.transportIntercetors.add(Objects.requireNonNull(interceptor, "interceptor must not be null"))__    };registers,a,new,link,transport,interceptor;private,void,register,transport,interceptor,transport,interceptor,interceptor,this,transport,intercetors,add,objects,require,non,null,interceptor,interceptor,must,not,be,null
NetworkModule -> public TransportInterceptor getTransportInterceptor();1524684173;Returns a composite {@link TransportInterceptor} containing all registered interceptors_@see #registerTransportInterceptor(TransportInterceptor);public TransportInterceptor getTransportInterceptor() {_        return new CompositeTransportInterceptor(this.transportIntercetors)__    };returns,a,composite,link,transport,interceptor,containing,all,registered,interceptors,see,register,transport,interceptor,transport,interceptor;public,transport,interceptor,get,transport,interceptor,return,new,composite,transport,interceptor,this,transport,intercetors
NetworkModule -> public TransportInterceptor getTransportInterceptor();1525334055;Returns a composite {@link TransportInterceptor} containing all registered interceptors_@see #registerTransportInterceptor(TransportInterceptor);public TransportInterceptor getTransportInterceptor() {_        return new CompositeTransportInterceptor(this.transportIntercetors)__    };returns,a,composite,link,transport,interceptor,containing,all,registered,interceptors,see,register,transport,interceptor,transport,interceptor;public,transport,interceptor,get,transport,interceptor,return,new,composite,transport,interceptor,this,transport,intercetors
NetworkModule -> public TransportInterceptor getTransportInterceptor();1529341607;Returns a composite {@link TransportInterceptor} containing all registered interceptors_@see #registerTransportInterceptor(TransportInterceptor);public TransportInterceptor getTransportInterceptor() {_        return new CompositeTransportInterceptor(this.transportIntercetors)__    };returns,a,composite,link,transport,interceptor,containing,all,registered,interceptors,see,register,transport,interceptor,transport,interceptor;public,transport,interceptor,get,transport,interceptor,return,new,composite,transport,interceptor,this,transport,intercetors
NetworkModule -> public TransportInterceptor getTransportInterceptor();1544554541;Returns a composite {@link TransportInterceptor} containing all registered interceptors_@see #registerTransportInterceptor(TransportInterceptor);public TransportInterceptor getTransportInterceptor() {_        return new CompositeTransportInterceptor(this.transportIntercetors)__    };returns,a,composite,link,transport,interceptor,containing,all,registered,interceptors,see,register,transport,interceptor,transport,interceptor;public,transport,interceptor,get,transport,interceptor,return,new,composite,transport,interceptor,this,transport,intercetors
NetworkModule -> public TransportInterceptor getTransportInterceptor();1544789769;Returns a composite {@link TransportInterceptor} containing all registered interceptors_@see #registerTransportInterceptor(TransportInterceptor);public TransportInterceptor getTransportInterceptor() {_        return new CompositeTransportInterceptor(this.transportIntercetors)__    };returns,a,composite,link,transport,interceptor,containing,all,registered,interceptors,see,register,transport,interceptor,transport,interceptor;public,transport,interceptor,get,transport,interceptor,return,new,composite,transport,interceptor,this,transport,intercetors
