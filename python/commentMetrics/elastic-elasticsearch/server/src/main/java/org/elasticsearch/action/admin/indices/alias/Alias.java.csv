commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the alias name  */ ;/**  * Returns the alias name  */ public String name() {     return name. }
true;public;0;3;/**  * Returns the filter associated with the alias  */ ;/**  * Returns the filter associated with the alias  */ public String filter() {     return filter. }
true;public;1;4;/**  * Associates a filter to the alias  */ ;/**  * Associates a filter to the alias  */ public Alias filter(String filter) {     this.filter = filter.     return this. }
true;public;1;14;/**  * Associates a filter to the alias  */ ;/**  * Associates a filter to the alias  */ public Alias filter(Map<String, Object> filter) {     if (filter == null || filter.isEmpty()) {         this.filter = null.         return this.     }     try {         XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON).         builder.map(filter).         this.filter = Strings.toString(builder).         return this.     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to generate [" + filter + "]", e).     } }
true;public;1;15;/**  * Associates a filter to the alias  */ ;/**  * Associates a filter to the alias  */ public Alias filter(QueryBuilder filterBuilder) {     if (filterBuilder == null) {         this.filter = null.         return this.     }     try {         XContentBuilder builder = XContentFactory.jsonBuilder().         filterBuilder.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.close().         this.filter = Strings.toString(builder).         return this.     } catch (IOException e) {         throw new ElasticsearchGenerationException("Failed to build json for alias request", e).     } }
true;public;1;5;/**  * Associates a routing value to the alias  */ ;/**  * Associates a routing value to the alias  */ public Alias routing(String routing) {     this.indexRouting = routing.     this.searchRouting = routing.     return this. }
true;public;0;3;/**  * Returns the index routing value associated with the alias  */ ;/**  * Returns the index routing value associated with the alias  */ public String indexRouting() {     return indexRouting. }
true;public;1;4;/**  * Associates an index routing value to the alias  */ ;/**  * Associates an index routing value to the alias  */ public Alias indexRouting(String indexRouting) {     this.indexRouting = indexRouting.     return this. }
true;public;0;3;/**  * Returns the search routing value associated with the alias  */ ;/**  * Returns the search routing value associated with the alias  */ public String searchRouting() {     return searchRouting. }
true;public;1;4;/**  * Associates a search routing value to the alias  */ ;/**  * Associates a search routing value to the alias  */ public Alias searchRouting(String searchRouting) {     this.searchRouting = searchRouting.     return this. }
true;public;0;3;/**  * @return the write index flag for the alias  */ ;/**  * @return the write index flag for the alias  */ public Boolean writeIndex() {     return writeIndex. }
true;public;1;4;/**  *  Sets whether an alias is pointing to a write-index  */ ;/**  *  Sets whether an alias is pointing to a write-index  */ public Alias writeIndex(@Nullable Boolean writeIndex) {     this.writeIndex = writeIndex.     return this. }
true;public,static;1;5;/**  * Allows to read an alias from the provided input stream  */ ;/**  * Allows to read an alias from the provided input stream  */ public static Alias read(StreamInput in) throws IOException {     Alias alias = new Alias().     alias.readFrom(in).     return alias. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     name = in.readString().     filter = in.readOptionalString().     indexRouting = in.readOptionalString().     searchRouting = in.readOptionalString().     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         writeIndex = in.readOptionalBoolean().     } else {         writeIndex = null.     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeOptionalString(filter).     out.writeOptionalString(indexRouting).     out.writeOptionalString(searchRouting).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalBoolean(writeIndex).     } }
true;public,static;1;32;/**  * Parses an alias and returns its parsed representation  */ ;/**  * Parses an alias and returns its parsed representation  */ public static Alias fromXContent(XContentParser parser) throws IOException {     Alias alias = new Alias(parser.currentName()).     String currentFieldName = null.     XContentParser.Token token = parser.nextToken().     if (token == null) {         throw new IllegalArgumentException("No alias is specified").     }     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {                 Map<String, Object> filter = parser.mapOrdered().                 alias.filter(filter).             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {                 alias.routing(parser.text()).             } else if (INDEX_ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {                 alias.indexRouting(parser.text()).             } else if (SEARCH_ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {                 alias.searchRouting(parser.text()).             }         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {             if (IS_WRITE_INDEX.match(currentFieldName, parser.getDeprecationHandler())) {                 alias.writeIndex(parser.booleanValue()).             }         }     }     return alias. }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(name).     if (filter != null) {         try (InputStream stream = new BytesArray(filter).streamInput()) {             builder.rawField(FILTER.getPreferredName(), stream, XContentType.JSON).         }     }     if (indexRouting != null && indexRouting.equals(searchRouting)) {         builder.field(ROUTING.getPreferredName(), indexRouting).     } else {         if (indexRouting != null) {             builder.field(INDEX_ROUTING.getPreferredName(), indexRouting).         }         if (searchRouting != null) {             builder.field(SEARCH_ROUTING.getPreferredName(), searchRouting).         }     }     builder.field(IS_WRITE_INDEX.getPreferredName(), writeIndex).     builder.endObject().     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Alias alias = (Alias) o.     if (name != null ? !name.equals(alias.name) : alias.name != null)         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return name != null ? name.hashCode() : 0. }
