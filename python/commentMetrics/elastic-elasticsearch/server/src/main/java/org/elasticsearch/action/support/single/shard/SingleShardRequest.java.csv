commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;7;/**  * @return a validation exception if the index property hasn't been set  */ ;/**  * @return a validation exception if the index property hasn't been set  */ protected ActionRequestValidationException validateNonNullIndex() {     ActionRequestValidationException validationException = null.     if (index == null) {         validationException = ValidateActions.addValidationError("index is missing", validationException).     }     return validationException. }
true;public;0;4;/**  * @return The concrete index this request is targeted for or <code>null</code> if index is optional.  *         Whether index property is optional depends on the concrete implementation. If index property  *         is required the concrete implementation should use {@link #validateNonNullIndex()} to check  *         if the index property has been set  */ ;/**  * @return The concrete index this request is targeted for or <code>null</code> if index is optional.  *         Whether index property is optional depends on the concrete implementation. If index property  *         is required the concrete implementation should use {@link #validateNonNullIndex()} to check  *         if the index property has been set  */ @Nullable public String index() {     return index. }
true;public,final;1;5;/**  * Sets the index.  */ ;/**  * Sets the index.  */ @SuppressWarnings("unchecked") public final Request index(String index) {     this.index = index.     return (Request) this. }
false;public;0;4;;@Override public String[] indices() {     return new String[] { index }. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return INDICES_OPTIONS. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.readBoolean()) {         internalShardId = ShardId.readShardId(in).     }     index = in.readOptionalString(). // no need to pass threading over the network, they are always false when coming throw a thread pool }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalStreamable(internalShardId).     out.writeOptionalString(index). }
