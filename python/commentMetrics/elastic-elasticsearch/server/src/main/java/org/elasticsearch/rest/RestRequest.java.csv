# id;timestamp;commentText;codeText;commentWords;codeWords
RestRequest -> @Nullable     public final XContentType getXContentType();1524684173;The {@link XContentType} that was parsed from the {@code Content-Type} header. This value will be {@code null} in the case of_a request without a valid {@code Content-Type} header, a request without content ({@link #hasContent()}, or a plain text request;@Nullable_    public final XContentType getXContentType() {_        return xContentType.get()__    };the,link,xcontent,type,that,was,parsed,from,the,code,content,type,header,this,value,will,be,code,null,in,the,case,of,a,request,without,a,valid,code,content,type,header,a,request,without,content,link,has,content,or,a,plain,text,request;nullable,public,final,xcontent,type,get,xcontent,type,return,x,content,type,get
RestRequest -> @Nullable     public final XContentType getXContentType();1528103657;The {@link XContentType} that was parsed from the {@code Content-Type} header. This value will be {@code null} in the case of_a request without a valid {@code Content-Type} header, a request without content ({@link #hasContent()}, or a plain text request;@Nullable_    public final XContentType getXContentType() {_        return xContentType.get()__    };the,link,xcontent,type,that,was,parsed,from,the,code,content,type,header,this,value,will,be,code,null,in,the,case,of,a,request,without,a,valid,code,content,type,header,a,request,without,content,link,has,content,or,a,plain,text,request;nullable,public,final,xcontent,type,get,xcontent,type,return,x,content,type,get
RestRequest -> @Nullable     public final XContentType getXContentType();1529015561;The {@link XContentType} that was parsed from the {@code Content-Type} header. This value will be {@code null} in the case of_a request without a valid {@code Content-Type} header, a request without content ({@link #hasContent()}, or a plain text request;@Nullable_    public final XContentType getXContentType() {_        return xContentType.get()__    };the,link,xcontent,type,that,was,parsed,from,the,code,content,type,header,this,value,will,be,code,null,in,the,case,of,a,request,without,a,valid,code,content,type,header,a,request,without,content,link,has,content,or,a,plain,text,request;nullable,public,final,xcontent,type,get,xcontent,type,return,x,content,type,get
RestRequest -> @Nullable     public final XContentType getXContentType();1547641765;The {@link XContentType} that was parsed from the {@code Content-Type} header. This value will be {@code null} in the case of_a request without a valid {@code Content-Type} header, a request without content ({@link #hasContent()}, or a plain text request;@Nullable_    public final XContentType getXContentType() {_        return xContentType.get()__    };the,link,xcontent,type,that,was,parsed,from,the,code,content,type,header,this,value,will,be,code,null,in,the,case,of,a,request,without,a,valid,code,content,type,header,a,request,without,content,link,has,content,or,a,plain,text,request;nullable,public,final,xcontent,type,get,xcontent,type,return,x,content,type,get
RestRequest -> public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException;1524684173;Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}_parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception_back to the user when there isn't request content.;public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException {_        if (hasContentOrSourceParam()) {_            Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__            BytesReference content = tuple.v2()__            XContentType xContentType = tuple.v1()__            try (InputStream stream = content.streamInput()__                 XContentParser parser = xContentType.xContent()_                     .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {_                withParser.accept(parser)__            }_        } else {_            withParser.accept(null)__        }_    };call,a,consumer,with,the,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,with,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,with,code,null,use,link,content,or,source,param,parser,if,you,should,throw,an,exception,back,to,the,user,when,there,isn,t,request,content;public,final,void,with,content,or,source,param,parser,or,null,checked,consumer,xcontent,parser,ioexception,with,parser,throws,ioexception,if,has,content,or,source,param,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,bytes,reference,content,tuple,v2,xcontent,type,x,content,type,tuple,v1,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,stream,with,parser,accept,parser,else,with,parser,accept,null
RestRequest -> public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException;1528103657;Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}_parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception_back to the user when there isn't request content.;public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException {_        if (hasContentOrSourceParam()) {_            Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__            BytesReference content = tuple.v2()__            XContentType xContentType = tuple.v1()__            try (InputStream stream = content.streamInput()__                 XContentParser parser = xContentType.xContent()_                     .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {_                withParser.accept(parser)__            }_        } else {_            withParser.accept(null)__        }_    };call,a,consumer,with,the,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,with,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,with,code,null,use,link,content,or,source,param,parser,if,you,should,throw,an,exception,back,to,the,user,when,there,isn,t,request,content;public,final,void,with,content,or,source,param,parser,or,null,checked,consumer,xcontent,parser,ioexception,with,parser,throws,ioexception,if,has,content,or,source,param,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,bytes,reference,content,tuple,v2,xcontent,type,x,content,type,tuple,v1,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,stream,with,parser,accept,parser,else,with,parser,accept,null
RestRequest -> public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException;1529015561;Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}_parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception_back to the user when there isn't request content.;public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException {_        if (hasContentOrSourceParam()) {_            Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__            BytesReference content = tuple.v2()__            XContentType xContentType = tuple.v1()__            try (InputStream stream = content.streamInput()__                 XContentParser parser = xContentType.xContent()_                     .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {_                withParser.accept(parser)__            }_        } else {_            withParser.accept(null)__        }_    };call,a,consumer,with,the,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,with,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,with,code,null,use,link,content,or,source,param,parser,if,you,should,throw,an,exception,back,to,the,user,when,there,isn,t,request,content;public,final,void,with,content,or,source,param,parser,or,null,checked,consumer,xcontent,parser,ioexception,with,parser,throws,ioexception,if,has,content,or,source,param,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,bytes,reference,content,tuple,v2,xcontent,type,x,content,type,tuple,v1,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,stream,with,parser,accept,parser,else,with,parser,accept,null
RestRequest -> public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException;1547641765;Call a consumer with the parser for the contents of this request if it has contents, otherwise with a parser for the {@code source}_parameter if there is one, otherwise with {@code null}. Use {@link #contentOrSourceParamParser()} if you should throw an exception_back to the user when there isn't request content.;public final void withContentOrSourceParamParserOrNull(CheckedConsumer<XContentParser, IOException> withParser) throws IOException {_        if (hasContentOrSourceParam()) {_            Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__            BytesReference content = tuple.v2()__            XContentType xContentType = tuple.v1()__            try (InputStream stream = content.streamInput()__                 XContentParser parser = xContentType.xContent()_                     .createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, stream)) {_                withParser.accept(parser)__            }_        } else {_            withParser.accept(null)__        }_    };call,a,consumer,with,the,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,with,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,with,code,null,use,link,content,or,source,param,parser,if,you,should,throw,an,exception,back,to,the,user,when,there,isn,t,request,content;public,final,void,with,content,or,source,param,parser,or,null,checked,consumer,xcontent,parser,ioexception,with,parser,throws,ioexception,if,has,content,or,source,param,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,bytes,reference,content,tuple,v2,xcontent,type,x,content,type,tuple,v1,try,input,stream,stream,content,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,stream,with,parser,accept,parser,else,with,parser,accept,null
RestRequest -> public RestRequest(             final NamedXContentRegistry xContentRegistry,             final Map<String, String> params,             final String path,             final Map<String, List<String>> headers);1524684173;Creates a new REST request. In contrast to_{@link RestRequest#RestRequest(NamedXContentRegistry, Map, String, Map)}, the path is not decoded so this constructor will not throw_a {@link BadParameterException}.__@param xContentRegistry the content registry_@param params           the request parameters_@param path             the raw path (which is not parsed)_@param headers          a map of the header_ this map should implement a case-insensitive lookup_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public RestRequest(_            final NamedXContentRegistry xContentRegistry,_            final Map<String, String> params,_            final String path,_            final Map<String, List<String>> headers) {_        final XContentType xContentType__        try {_            xContentType = parseContentType(headers.get("Content-Type"))__        } catch (final IllegalArgumentException e) {_            throw new ContentTypeHeaderException(e)__        }_        if (xContentType != null) {_            this.xContentType.set(xContentType)__        }_        this.xContentRegistry = xContentRegistry__        this.params = params__        this.rawPath = path__        this.headers = Collections.unmodifiableMap(headers)__    };creates,a,new,rest,request,in,contrast,to,link,rest,request,rest,request,named,xcontent,registry,map,string,map,the,path,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,params,the,request,parameters,param,path,the,raw,path,which,is,not,parsed,param,headers,a,map,of,the,header,this,map,should,implement,a,case,insensitive,lookup,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,rest,request,final,named,xcontent,registry,x,content,registry,final,map,string,string,params,final,string,path,final,map,string,list,string,headers,final,xcontent,type,x,content,type,try,x,content,type,parse,content,type,headers,get,content,type,catch,final,illegal,argument,exception,e,throw,new,content,type,header,exception,e,if,x,content,type,null,this,x,content,type,set,x,content,type,this,x,content,registry,x,content,registry,this,params,params,this,raw,path,path,this,headers,collections,unmodifiable,map,headers
RestRequest -> public RestRequest(             final NamedXContentRegistry xContentRegistry,             final Map<String, String> params,             final String path,             final Map<String, List<String>> headers);1528103657;Creates a new REST request. In contrast to_{@link RestRequest#RestRequest(NamedXContentRegistry, Map, String, Map)}, the path is not decoded so this constructor will not throw_a {@link BadParameterException}.__@param xContentRegistry the content registry_@param params           the request parameters_@param path             the raw path (which is not parsed)_@param headers          a map of the header_ this map should implement a case-insensitive lookup_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public RestRequest(_            final NamedXContentRegistry xContentRegistry,_            final Map<String, String> params,_            final String path,_            final Map<String, List<String>> headers) {_        final XContentType xContentType__        try {_            xContentType = parseContentType(headers.get("Content-Type"))__        } catch (final IllegalArgumentException e) {_            throw new ContentTypeHeaderException(e)__        }_        if (xContentType != null) {_            this.xContentType.set(xContentType)__        }_        this.xContentRegistry = xContentRegistry__        this.params = params__        this.rawPath = path__        this.headers = Collections.unmodifiableMap(headers)__    };creates,a,new,rest,request,in,contrast,to,link,rest,request,rest,request,named,xcontent,registry,map,string,map,the,path,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,params,the,request,parameters,param,path,the,raw,path,which,is,not,parsed,param,headers,a,map,of,the,header,this,map,should,implement,a,case,insensitive,lookup,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,rest,request,final,named,xcontent,registry,x,content,registry,final,map,string,string,params,final,string,path,final,map,string,list,string,headers,final,xcontent,type,x,content,type,try,x,content,type,parse,content,type,headers,get,content,type,catch,final,illegal,argument,exception,e,throw,new,content,type,header,exception,e,if,x,content,type,null,this,x,content,type,set,x,content,type,this,x,content,registry,x,content,registry,this,params,params,this,raw,path,path,this,headers,collections,unmodifiable,map,headers
RestRequest -> public final Tuple<XContentType, BytesReference> contentOrSourceParam();1524684173;Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing._Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser.;public final Tuple<XContentType, BytesReference> contentOrSourceParam() {_        if (hasContentOrSourceParam() == false) {_            throw new ElasticsearchParseException("request body or source parameter is required")__        } else if (hasContent()) {_            return new Tuple<>(xContentType.get(), requiredContent())__        }_        String source = param("source")__        String typeParam = param("source_content_type")__        if (source == null || typeParam == null) {_            throw new IllegalStateException("source and source_content_type parameters are required")__        }_        BytesArray bytes = new BytesArray(source)__        final XContentType xContentType = parseContentType(Collections.singletonList(typeParam))__        if (xContentType == null) {_            throw new IllegalStateException("Unknown value for source_content_type [" + typeParam + "]")__        }_        return new Tuple<>(xContentType, bytes)__    };get,the,content,of,the,request,or,the,contents,of,the,code,source,param,or,throw,an,exception,if,both,are,missing,prefer,link,content,or,source,param,parser,or,link,with,content,or,source,param,parser,or,null,checked,consumer,if,you,need,a,parser;public,final,tuple,xcontent,type,bytes,reference,content,or,source,param,if,has,content,or,source,param,false,throw,new,elasticsearch,parse,exception,request,body,or,source,parameter,is,required,else,if,has,content,return,new,tuple,x,content,type,get,required,content,string,source,param,source,string,type,param,param,if,source,null,type,param,null,throw,new,illegal,state,exception,source,and,parameters,are,required,bytes,array,bytes,new,bytes,array,source,final,xcontent,type,x,content,type,parse,content,type,collections,singleton,list,type,param,if,x,content,type,null,throw,new,illegal,state,exception,unknown,value,for,type,param,return,new,tuple,x,content,type,bytes
RestRequest -> public final Tuple<XContentType, BytesReference> contentOrSourceParam();1528103657;Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing._Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser.;public final Tuple<XContentType, BytesReference> contentOrSourceParam() {_        if (hasContentOrSourceParam() == false) {_            throw new ElasticsearchParseException("request body or source parameter is required")__        } else if (hasContent()) {_            return new Tuple<>(xContentType.get(), requiredContent())__        }_        String source = param("source")__        String typeParam = param("source_content_type")__        if (source == null || typeParam == null) {_            throw new IllegalStateException("source and source_content_type parameters are required")__        }_        BytesArray bytes = new BytesArray(source)__        final XContentType xContentType = parseContentType(Collections.singletonList(typeParam))__        if (xContentType == null) {_            throw new IllegalStateException("Unknown value for source_content_type [" + typeParam + "]")__        }_        return new Tuple<>(xContentType, bytes)__    };get,the,content,of,the,request,or,the,contents,of,the,code,source,param,or,throw,an,exception,if,both,are,missing,prefer,link,content,or,source,param,parser,or,link,with,content,or,source,param,parser,or,null,checked,consumer,if,you,need,a,parser;public,final,tuple,xcontent,type,bytes,reference,content,or,source,param,if,has,content,or,source,param,false,throw,new,elasticsearch,parse,exception,request,body,or,source,parameter,is,required,else,if,has,content,return,new,tuple,x,content,type,get,required,content,string,source,param,source,string,type,param,param,if,source,null,type,param,null,throw,new,illegal,state,exception,source,and,parameters,are,required,bytes,array,bytes,new,bytes,array,source,final,xcontent,type,x,content,type,parse,content,type,collections,singleton,list,type,param,if,x,content,type,null,throw,new,illegal,state,exception,unknown,value,for,type,param,return,new,tuple,x,content,type,bytes
RestRequest -> public final Tuple<XContentType, BytesReference> contentOrSourceParam();1529015561;Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing._Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser.;public final Tuple<XContentType, BytesReference> contentOrSourceParam() {_        if (hasContentOrSourceParam() == false) {_            throw new ElasticsearchParseException("request body or source parameter is required")__        } else if (hasContent()) {_            return new Tuple<>(xContentType.get(), requiredContent())__        }_        String source = param("source")__        String typeParam = param("source_content_type")__        if (source == null || typeParam == null) {_            throw new IllegalStateException("source and source_content_type parameters are required")__        }_        BytesArray bytes = new BytesArray(source)__        final XContentType xContentType = parseContentType(Collections.singletonList(typeParam))__        if (xContentType == null) {_            throw new IllegalStateException("Unknown value for source_content_type [" + typeParam + "]")__        }_        return new Tuple<>(xContentType, bytes)__    };get,the,content,of,the,request,or,the,contents,of,the,code,source,param,or,throw,an,exception,if,both,are,missing,prefer,link,content,or,source,param,parser,or,link,with,content,or,source,param,parser,or,null,checked,consumer,if,you,need,a,parser;public,final,tuple,xcontent,type,bytes,reference,content,or,source,param,if,has,content,or,source,param,false,throw,new,elasticsearch,parse,exception,request,body,or,source,parameter,is,required,else,if,has,content,return,new,tuple,x,content,type,get,required,content,string,source,param,source,string,type,param,param,if,source,null,type,param,null,throw,new,illegal,state,exception,source,and,parameters,are,required,bytes,array,bytes,new,bytes,array,source,final,xcontent,type,x,content,type,parse,content,type,collections,singleton,list,type,param,if,x,content,type,null,throw,new,illegal,state,exception,unknown,value,for,type,param,return,new,tuple,x,content,type,bytes
RestRequest -> public final Tuple<XContentType, BytesReference> contentOrSourceParam();1547641765;Get the content of the request or the contents of the {@code source} param or throw an exception if both are missing._Prefer {@link #contentOrSourceParamParser()} or {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} if you need a parser.;public final Tuple<XContentType, BytesReference> contentOrSourceParam() {_        if (hasContentOrSourceParam() == false) {_            throw new ElasticsearchParseException("request body or source parameter is required")__        } else if (hasContent()) {_            return new Tuple<>(xContentType.get(), requiredContent())__        }_        String source = param("source")__        String typeParam = param("source_content_type")__        if (source == null || typeParam == null) {_            throw new IllegalStateException("source and source_content_type parameters are required")__        }_        BytesArray bytes = new BytesArray(source)__        final XContentType xContentType = parseContentType(Collections.singletonList(typeParam))__        if (xContentType == null) {_            throw new IllegalStateException("Unknown value for source_content_type [" + typeParam + "]")__        }_        return new Tuple<>(xContentType, bytes)__    };get,the,content,of,the,request,or,the,contents,of,the,code,source,param,or,throw,an,exception,if,both,are,missing,prefer,link,content,or,source,param,parser,or,link,with,content,or,source,param,parser,or,null,checked,consumer,if,you,need,a,parser;public,final,tuple,xcontent,type,bytes,reference,content,or,source,param,if,has,content,or,source,param,false,throw,new,elasticsearch,parse,exception,request,body,or,source,parameter,is,required,else,if,has,content,return,new,tuple,x,content,type,get,required,content,string,source,param,source,string,type,param,param,if,source,null,type,param,null,throw,new,illegal,state,exception,source,and,parameters,are,required,bytes,array,bytes,new,bytes,array,source,final,xcontent,type,x,content,type,parse,content,type,collections,singleton,list,type,param,if,x,content,type,null,throw,new,illegal,state,exception,unknown,value,for,type,param,return,new,tuple,x,content,type,bytes
RestRequest -> public final Map<String, List<String>> getHeaders();1524684173;Get all of the headers and values associated with the headers. Modifications of this map are not supported.;public final Map<String, List<String>> getHeaders() {_        return headers__    };get,all,of,the,headers,and,values,associated,with,the,headers,modifications,of,this,map,are,not,supported;public,final,map,string,list,string,get,headers,return,headers
RestRequest -> public final Map<String, List<String>> getHeaders();1528103657;Get all of the headers and values associated with the headers. Modifications of this map are not supported.;public final Map<String, List<String>> getHeaders() {_        return headers__    };get,all,of,the,headers,and,values,associated,with,the,headers,modifications,of,this,map,are,not,supported;public,final,map,string,list,string,get,headers,return,headers
RestRequest -> public final Map<String, List<String>> getHeaders();1529015561;Get all of the headers and values associated with the headers. Modifications of this map are not supported.;public final Map<String, List<String>> getHeaders() {_        return headers__    };get,all,of,the,headers,and,values,associated,with,the,headers,modifications,of,this,map,are,not,supported;public,final,map,string,list,string,get,headers,return,headers
RestRequest -> public final Map<String, List<String>> getHeaders();1547641765;Get all of the headers and values associated with the headers. Modifications of this map are not supported.;public final Map<String, List<String>> getHeaders() {_        return headers__    };get,all,of,the,headers,and,values,associated,with,the,headers,modifications,of,this,map,are,not,supported;public,final,map,string,list,string,get,headers,return,headers
RestRequest -> List<String> consumedParams();1524684173;Returns a list of parameters that have been consumed. This method returns a copy, callers_are free to modify the returned list.__@return the list of currently consumed parameters.;List<String> consumedParams() {_        return consumedParams.stream().collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,consumed,parameters;list,string,consumed,params,return,consumed,params,stream,collect,collectors,to,list
RestRequest -> List<String> consumedParams();1528103657;Returns a list of parameters that have been consumed. This method returns a copy, callers_are free to modify the returned list.__@return the list of currently consumed parameters.;List<String> consumedParams() {_        return consumedParams.stream().collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,consumed,parameters;list,string,consumed,params,return,consumed,params,stream,collect,collectors,to,list
RestRequest -> List<String> consumedParams();1529015561;Returns a list of parameters that have been consumed. This method returns a copy, callers_are free to modify the returned list.__@return the list of currently consumed parameters.;List<String> consumedParams() {_        return consumedParams.stream().collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,consumed,parameters;list,string,consumed,params,return,consumed,params,stream,collect,collectors,to,list
RestRequest -> List<String> consumedParams();1547641765;Returns a list of parameters that have been consumed. This method returns a copy, callers_are free to modify the returned list.__@return the list of currently consumed parameters.;List<String> consumedParams() {_        return consumedParams.stream().collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,consumed,parameters;list,string,consumed,params,return,consumed,params,stream,collect,collectors,to,list
RestRequest -> public final String header(String name);1524684173;Get the value of the header or {@code null} if not found. This method only retrieves the first header value if multiple values are_sent. Use of {@link #getAllHeaderValues(String)} should be preferred;public final String header(String name) {_        List<String> values = headers.get(name)__        if (values != null && values.isEmpty() == false) {_            return values.get(0)__        }_        return null__    };get,the,value,of,the,header,or,code,null,if,not,found,this,method,only,retrieves,the,first,header,value,if,multiple,values,are,sent,use,of,link,get,all,header,values,string,should,be,preferred;public,final,string,header,string,name,list,string,values,headers,get,name,if,values,null,values,is,empty,false,return,values,get,0,return,null
RestRequest -> public final String header(String name);1528103657;Get the value of the header or {@code null} if not found. This method only retrieves the first header value if multiple values are_sent. Use of {@link #getAllHeaderValues(String)} should be preferred;public final String header(String name) {_        List<String> values = headers.get(name)__        if (values != null && values.isEmpty() == false) {_            return values.get(0)__        }_        return null__    };get,the,value,of,the,header,or,code,null,if,not,found,this,method,only,retrieves,the,first,header,value,if,multiple,values,are,sent,use,of,link,get,all,header,values,string,should,be,preferred;public,final,string,header,string,name,list,string,values,headers,get,name,if,values,null,values,is,empty,false,return,values,get,0,return,null
RestRequest -> public final String header(String name);1529015561;Get the value of the header or {@code null} if not found. This method only retrieves the first header value if multiple values are_sent. Use of {@link #getAllHeaderValues(String)} should be preferred;public final String header(String name) {_        List<String> values = headers.get(name)__        if (values != null && values.isEmpty() == false) {_            return values.get(0)__        }_        return null__    };get,the,value,of,the,header,or,code,null,if,not,found,this,method,only,retrieves,the,first,header,value,if,multiple,values,are,sent,use,of,link,get,all,header,values,string,should,be,preferred;public,final,string,header,string,name,list,string,values,headers,get,name,if,values,null,values,is,empty,false,return,values,get,0,return,null
RestRequest -> public final String header(String name);1547641765;Get the value of the header or {@code null} if not found. This method only retrieves the first header value if multiple values are_sent. Use of {@link #getAllHeaderValues(String)} should be preferred;public final String header(String name) {_        List<String> values = headers.get(name)__        if (values != null && values.isEmpty() == false) {_            return values.get(0)__        }_        return null__    };get,the,value,of,the,header,or,code,null,if,not,found,this,method,only,retrieves,the,first,header,value,if,multiple,values,are,sent,use,of,link,get,all,header,values,string,should,be,preferred;public,final,string,header,string,name,list,string,values,headers,get,name,if,values,null,values,is,empty,false,return,values,get,0,return,null
RestRequest -> public static RestRequest request(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest, HttpChannel httpChannel);1529015561;Creates a new REST request. This method will throw {@link BadParameterException} if the path cannot be_decoded__@param xContentRegistry the content registry_@param httpRequest      the http request_@param httpChannel      the http channel_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public static RestRequest request(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest, HttpChannel httpChannel) {_        Map<String, String> params = params(httpRequest.uri())__        String path = path(httpRequest.uri())__        return new RestRequest(xContentRegistry, params, path, httpRequest.getHeaders(), httpRequest, httpChannel)__    };creates,a,new,rest,request,this,method,will,throw,link,bad,parameter,exception,if,the,path,cannot,be,decoded,param,x,content,registry,the,content,registry,param,http,request,the,http,request,param,http,channel,the,http,channel,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,static,rest,request,request,named,xcontent,registry,x,content,registry,http,request,http,request,http,channel,http,channel,map,string,string,params,params,http,request,uri,string,path,path,http,request,uri,return,new,rest,request,x,content,registry,params,path,http,request,get,headers,http,request,http,channel
RestRequest -> public static RestRequest request(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest, HttpChannel httpChannel);1547641765;Creates a new REST request. This method will throw {@link BadParameterException} if the path cannot be_decoded__@param xContentRegistry the content registry_@param httpRequest      the http request_@param httpChannel      the http channel_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public static RestRequest request(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest, HttpChannel httpChannel) {_        Map<String, String> params = params(httpRequest.uri())__        String path = path(httpRequest.uri())__        return new RestRequest(xContentRegistry, params, path, httpRequest.getHeaders(), httpRequest, httpChannel)__    };creates,a,new,rest,request,this,method,will,throw,link,bad,parameter,exception,if,the,path,cannot,be,decoded,param,x,content,registry,the,content,registry,param,http,request,the,http,request,param,http,channel,the,http,channel,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,static,rest,request,request,named,xcontent,registry,x,content,registry,http,request,http,request,http,channel,http,channel,map,string,string,params,params,http,request,uri,string,path,path,http,request,uri,return,new,rest,request,x,content,registry,params,path,http,request,get,headers,http,request,http,channel
RestRequest -> public final String path();1524684173;The path part of the URI (without the query string), decoded.;public final String path() {_        return RestUtils.decodeComponent(rawPath())__    };the,path,part,of,the,uri,without,the,query,string,decoded;public,final,string,path,return,rest,utils,decode,component,raw,path
RestRequest -> public final String path();1528103657;The path part of the URI (without the query string), decoded.;public final String path() {_        return RestUtils.decodeComponent(rawPath())__    };the,path,part,of,the,uri,without,the,query,string,decoded;public,final,string,path,return,rest,utils,decode,component,raw,path
RestRequest -> public final String path();1529015561;The path part of the URI (without the query string), decoded.;public final String path() {_        return RestUtils.decodeComponent(rawPath())__    };the,path,part,of,the,uri,without,the,query,string,decoded;public,final,string,path,return,rest,utils,decode,component,raw,path
RestRequest -> public final String path();1547641765;The path part of the URI (without the query string), decoded.;public final String path() {_        return RestUtils.decodeComponent(rawPath())__    };the,path,part,of,the,uri,without,the,query,string,decoded;public,final,string,path,return,rest,utils,decode,component,raw,path
RestRequest -> List<String> unconsumedParams();1524684173;Returns a list of parameters that have not yet been consumed. This method returns a copy,_callers are free to modify the returned list.__@return the list of currently unconsumed parameters.;List<String> unconsumedParams() {_        return params_            .keySet()_            .stream()_            .filter(p -> !consumedParams.contains(p))_            .collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,not,yet,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,unconsumed,parameters;list,string,unconsumed,params,return,params,key,set,stream,filter,p,consumed,params,contains,p,collect,collectors,to,list
RestRequest -> List<String> unconsumedParams();1528103657;Returns a list of parameters that have not yet been consumed. This method returns a copy,_callers are free to modify the returned list.__@return the list of currently unconsumed parameters.;List<String> unconsumedParams() {_        return params_            .keySet()_            .stream()_            .filter(p -> !consumedParams.contains(p))_            .collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,not,yet,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,unconsumed,parameters;list,string,unconsumed,params,return,params,key,set,stream,filter,p,consumed,params,contains,p,collect,collectors,to,list
RestRequest -> List<String> unconsumedParams();1529015561;Returns a list of parameters that have not yet been consumed. This method returns a copy,_callers are free to modify the returned list.__@return the list of currently unconsumed parameters.;List<String> unconsumedParams() {_        return params_            .keySet()_            .stream()_            .filter(p -> !consumedParams.contains(p))_            .collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,not,yet,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,unconsumed,parameters;list,string,unconsumed,params,return,params,key,set,stream,filter,p,consumed,params,contains,p,collect,collectors,to,list
RestRequest -> List<String> unconsumedParams();1547641765;Returns a list of parameters that have not yet been consumed. This method returns a copy,_callers are free to modify the returned list.__@return the list of currently unconsumed parameters.;List<String> unconsumedParams() {_        return params_            .keySet()_            .stream()_            .filter(p -> !consumedParams.contains(p))_            .collect(Collectors.toList())__    };returns,a,list,of,parameters,that,have,not,yet,been,consumed,this,method,returns,a,copy,callers,are,free,to,modify,the,returned,list,return,the,list,of,currently,unconsumed,parameters;list,string,unconsumed,params,return,params,key,set,stream,filter,p,consumed,params,contains,p,collect,collectors,to,list
RestRequest -> public String rawPath();1524684173;The non decoded, raw path provided.;public String rawPath() {_        return rawPath__    };the,non,decoded,raw,path,provided;public,string,raw,path,return,raw,path
RestRequest -> public String rawPath();1528103657;The non decoded, raw path provided.;public String rawPath() {_        return rawPath__    };the,non,decoded,raw,path,provided;public,string,raw,path,return,raw,path
RestRequest -> public String rawPath();1529015561;The non decoded, raw path provided.;public String rawPath() {_        return rawPath__    };the,non,decoded,raw,path,provided;public,string,raw,path,return,raw,path
RestRequest -> public String rawPath();1547641765;The non decoded, raw path provided.;public String rawPath() {_        return rawPath__    };the,non,decoded,raw,path,provided;public,string,raw,path,return,raw,path
RestRequest -> public abstract String uri()_;1524684173;The uri of the rest request, with the query string.;public abstract String uri()_;the,uri,of,the,rest,request,with,the,query,string;public,abstract,string,uri
RestRequest -> public abstract String uri()_;1528103657;The uri of the rest request, with the query string.;public abstract String uri()_;the,uri,of,the,rest,request,with,the,query,string;public,abstract,string,uri
RestRequest -> public static XContentType parseContentType(List<String> header);1524684173;Parses the given content type string for the media type. This method currently ignores parameters.;public static XContentType parseContentType(List<String> header) {_        if (header == null || header.isEmpty()) {_            return null__        } else if (header.size() > 1) {_            throw new IllegalArgumentException("only one Content-Type header should be provided")__        }__        String rawContentType = header.get(0)__        final String[] elements = rawContentType.split("[ \t]*_")__        if (elements.length > 0) {_            final String[] splitMediaType = elements[0].split("/")__            if (splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0]).matches()_                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) {_                return XContentType.fromMediaType(elements[0])__            } else {_                throw new IllegalArgumentException("invalid Content-Type header [" + rawContentType + "]")__            }_        }_        throw new IllegalArgumentException("empty Content-Type header")__    };parses,the,given,content,type,string,for,the,media,type,this,method,currently,ignores,parameters;public,static,xcontent,type,parse,content,type,list,string,header,if,header,null,header,is,empty,return,null,else,if,header,size,1,throw,new,illegal,argument,exception,only,one,content,type,header,should,be,provided,string,raw,content,type,header,get,0,final,string,elements,raw,content,type,split,t,if,elements,length,0,final,string,split,media,type,elements,0,split,if,split,media,type,length,2,matcher,split,media,type,0,matches,matcher,split,media,type,1,trim,matches,return,xcontent,type,from,media,type,elements,0,else,throw,new,illegal,argument,exception,invalid,content,type,header,raw,content,type,throw,new,illegal,argument,exception,empty,content,type,header
RestRequest -> public static XContentType parseContentType(List<String> header);1528103657;Parses the given content type string for the media type. This method currently ignores parameters.;public static XContentType parseContentType(List<String> header) {_        if (header == null || header.isEmpty()) {_            return null__        } else if (header.size() > 1) {_            throw new IllegalArgumentException("only one Content-Type header should be provided")__        }__        String rawContentType = header.get(0)__        final String[] elements = rawContentType.split("[ \t]*_")__        if (elements.length > 0) {_            final String[] splitMediaType = elements[0].split("/")__            if (splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0]).matches()_                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) {_                return XContentType.fromMediaType(elements[0])__            } else {_                throw new IllegalArgumentException("invalid Content-Type header [" + rawContentType + "]")__            }_        }_        throw new IllegalArgumentException("empty Content-Type header")__    };parses,the,given,content,type,string,for,the,media,type,this,method,currently,ignores,parameters;public,static,xcontent,type,parse,content,type,list,string,header,if,header,null,header,is,empty,return,null,else,if,header,size,1,throw,new,illegal,argument,exception,only,one,content,type,header,should,be,provided,string,raw,content,type,header,get,0,final,string,elements,raw,content,type,split,t,if,elements,length,0,final,string,split,media,type,elements,0,split,if,split,media,type,length,2,matcher,split,media,type,0,matches,matcher,split,media,type,1,trim,matches,return,xcontent,type,from,media,type,elements,0,else,throw,new,illegal,argument,exception,invalid,content,type,header,raw,content,type,throw,new,illegal,argument,exception,empty,content,type,header
RestRequest -> public static XContentType parseContentType(List<String> header);1529015561;Parses the given content type string for the media type. This method currently ignores parameters.;public static XContentType parseContentType(List<String> header) {_        if (header == null || header.isEmpty()) {_            return null__        } else if (header.size() > 1) {_            throw new IllegalArgumentException("only one Content-Type header should be provided")__        }__        String rawContentType = header.get(0)__        final String[] elements = rawContentType.split("[ \t]*_")__        if (elements.length > 0) {_            final String[] splitMediaType = elements[0].split("/")__            if (splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0]).matches()_                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) {_                return XContentType.fromMediaType(elements[0])__            } else {_                throw new IllegalArgumentException("invalid Content-Type header [" + rawContentType + "]")__            }_        }_        throw new IllegalArgumentException("empty Content-Type header")__    };parses,the,given,content,type,string,for,the,media,type,this,method,currently,ignores,parameters;public,static,xcontent,type,parse,content,type,list,string,header,if,header,null,header,is,empty,return,null,else,if,header,size,1,throw,new,illegal,argument,exception,only,one,content,type,header,should,be,provided,string,raw,content,type,header,get,0,final,string,elements,raw,content,type,split,t,if,elements,length,0,final,string,split,media,type,elements,0,split,if,split,media,type,length,2,matcher,split,media,type,0,matches,matcher,split,media,type,1,trim,matches,return,xcontent,type,from,media,type,elements,0,else,throw,new,illegal,argument,exception,invalid,content,type,header,raw,content,type,throw,new,illegal,argument,exception,empty,content,type,header
RestRequest -> public static XContentType parseContentType(List<String> header);1547641765;Parses the given content type string for the media type. This method currently ignores parameters.;public static XContentType parseContentType(List<String> header) {_        if (header == null || header.isEmpty()) {_            return null__        } else if (header.size() > 1) {_            throw new IllegalArgumentException("only one Content-Type header should be provided")__        }__        String rawContentType = header.get(0)__        final String[] elements = rawContentType.split("[ \t]*_")__        if (elements.length > 0) {_            final String[] splitMediaType = elements[0].split("/")__            if (splitMediaType.length == 2 && TCHAR_PATTERN.matcher(splitMediaType[0]).matches()_                && TCHAR_PATTERN.matcher(splitMediaType[1].trim()).matches()) {_                return XContentType.fromMediaType(elements[0])__            } else {_                throw new IllegalArgumentException("invalid Content-Type header [" + rawContentType + "]")__            }_        }_        throw new IllegalArgumentException("empty Content-Type header")__    };parses,the,given,content,type,string,for,the,media,type,this,method,currently,ignores,parameters;public,static,xcontent,type,parse,content,type,list,string,header,if,header,null,header,is,empty,return,null,else,if,header,size,1,throw,new,illegal,argument,exception,only,one,content,type,header,should,be,provided,string,raw,content,type,header,get,0,final,string,elements,raw,content,type,split,t,if,elements,length,0,final,string,split,media,type,elements,0,split,if,split,media,type,length,2,matcher,split,media,type,0,matches,matcher,split,media,type,1,trim,matches,return,xcontent,type,from,media,type,elements,0,else,throw,new,illegal,argument,exception,invalid,content,type,header,raw,content,type,throw,new,illegal,argument,exception,empty,content,type,header
RestRequest -> public String uri();1529015561;The uri of the rest request, with the query string.;public String uri() {_        return httpRequest.uri()__    };the,uri,of,the,rest,request,with,the,query,string;public,string,uri,return,http,request,uri
RestRequest -> public String uri();1547641765;The uri of the rest request, with the query string.;public String uri() {_        return httpRequest.uri()__    };the,uri,of,the,rest,request,with,the,query,string;public,string,uri,return,http,request,uri
RestRequest -> public final List<String> getAllHeaderValues(String name);1524684173;Get all values for the header or {@code null} if the header was not found;public final List<String> getAllHeaderValues(String name) {_        List<String> values = headers.get(name)__        if (values != null) {_            return Collections.unmodifiableList(values)__        }_        return null__    };get,all,values,for,the,header,or,code,null,if,the,header,was,not,found;public,final,list,string,get,all,header,values,string,name,list,string,values,headers,get,name,if,values,null,return,collections,unmodifiable,list,values,return,null
RestRequest -> public final List<String> getAllHeaderValues(String name);1528103657;Get all values for the header or {@code null} if the header was not found;public final List<String> getAllHeaderValues(String name) {_        List<String> values = headers.get(name)__        if (values != null) {_            return Collections.unmodifiableList(values)__        }_        return null__    };get,all,values,for,the,header,or,code,null,if,the,header,was,not,found;public,final,list,string,get,all,header,values,string,name,list,string,values,headers,get,name,if,values,null,return,collections,unmodifiable,list,values,return,null
RestRequest -> public final List<String> getAllHeaderValues(String name);1529015561;Get all values for the header or {@code null} if the header was not found;public final List<String> getAllHeaderValues(String name) {_        List<String> values = headers.get(name)__        if (values != null) {_            return Collections.unmodifiableList(values)__        }_        return null__    };get,all,values,for,the,header,or,code,null,if,the,header,was,not,found;public,final,list,string,get,all,header,values,string,name,list,string,values,headers,get,name,if,values,null,return,collections,unmodifiable,list,values,return,null
RestRequest -> public final List<String> getAllHeaderValues(String name);1547641765;Get all values for the header or {@code null} if the header was not found;public final List<String> getAllHeaderValues(String name) {_        List<String> values = headers.get(name)__        if (values != null) {_            return Collections.unmodifiableList(values)__        }_        return null__    };get,all,values,for,the,header,or,code,null,if,the,header,was,not,found;public,final,list,string,get,all,header,values,string,name,list,string,values,headers,get,name,if,values,null,return,collections,unmodifiable,list,values,return,null
RestRequest -> public NamedXContentRegistry getXContentRegistry();1524684173;Get the {@link NamedXContentRegistry} that should be used to create parsers from this request.;public NamedXContentRegistry getXContentRegistry() {_        return xContentRegistry__    };get,the,link,named,xcontent,registry,that,should,be,used,to,create,parsers,from,this,request;public,named,xcontent,registry,get,xcontent,registry,return,x,content,registry
RestRequest -> public NamedXContentRegistry getXContentRegistry();1528103657;Get the {@link NamedXContentRegistry} that should be used to create parsers from this request.;public NamedXContentRegistry getXContentRegistry() {_        return xContentRegistry__    };get,the,link,named,xcontent,registry,that,should,be,used,to,create,parsers,from,this,request;public,named,xcontent,registry,get,xcontent,registry,return,x,content,registry
RestRequest -> public NamedXContentRegistry getXContentRegistry();1529015561;Get the {@link NamedXContentRegistry} that should be used to create parsers from this request.;public NamedXContentRegistry getXContentRegistry() {_        return xContentRegistry__    };get,the,link,named,xcontent,registry,that,should,be,used,to,create,parsers,from,this,request;public,named,xcontent,registry,get,xcontent,registry,return,x,content,registry
RestRequest -> public NamedXContentRegistry getXContentRegistry();1547641765;Get the {@link NamedXContentRegistry} that should be used to create parsers from this request.;public NamedXContentRegistry getXContentRegistry() {_        return xContentRegistry__    };get,the,link,named,xcontent,registry,that,should,be,used,to,create,parsers,from,this,request;public,named,xcontent,registry,get,xcontent,registry,return,x,content,registry
RestRequest -> public static RestRequest requestWithoutParameters(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest,                                                        HttpChannel httpChannel);1529015561;Creates a new REST request. The path is not decoded so this constructor will not throw a_{@link BadParameterException}.__@param xContentRegistry the content registry_@param httpRequest      the http request_@param httpChannel      the http channel_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public static RestRequest requestWithoutParameters(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest,_                                                       HttpChannel httpChannel) {_        Map<String, String> params = Collections.emptyMap()__        return new RestRequest(xContentRegistry, params, httpRequest.uri(), httpRequest.getHeaders(), httpRequest, httpChannel)__    };creates,a,new,rest,request,the,path,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,http,request,the,http,request,param,http,channel,the,http,channel,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,static,rest,request,request,without,parameters,named,xcontent,registry,x,content,registry,http,request,http,request,http,channel,http,channel,map,string,string,params,collections,empty,map,return,new,rest,request,x,content,registry,params,http,request,uri,http,request,get,headers,http,request,http,channel
RestRequest -> public static RestRequest requestWithoutParameters(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest,                                                        HttpChannel httpChannel);1547641765;Creates a new REST request. The path is not decoded so this constructor will not throw a_{@link BadParameterException}.__@param xContentRegistry the content registry_@param httpRequest      the http request_@param httpChannel      the http channel_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public static RestRequest requestWithoutParameters(NamedXContentRegistry xContentRegistry, HttpRequest httpRequest,_                                                       HttpChannel httpChannel) {_        Map<String, String> params = Collections.emptyMap()__        return new RestRequest(xContentRegistry, params, httpRequest.uri(), httpRequest.getHeaders(), httpRequest, httpChannel)__    };creates,a,new,rest,request,the,path,is,not,decoded,so,this,constructor,will,not,throw,a,link,bad,parameter,exception,param,x,content,registry,the,content,registry,param,http,request,the,http,request,param,http,channel,the,http,channel,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,static,rest,request,request,without,parameters,named,xcontent,registry,x,content,registry,http,request,http,request,http,channel,http,channel,map,string,string,params,collections,empty,map,return,new,rest,request,x,content,registry,params,http,request,uri,http,request,get,headers,http,request,http,channel
RestRequest -> public final XContentParser contentParser() throws IOException;1524684173;A parser for the contents of this request if there is a body, otherwise throws an {@link ElasticsearchParseException}. Use_{@link #applyContentParser(CheckedConsumer)} if you want to gracefully handle when the request doesn't have any contents. Use_{@link #contentOrSourceParamParser()} for requests that support specifying the request body in the {@code source} param.;public final XContentParser contentParser() throws IOException {_        BytesReference content = requiredContent()_ _        return xContentType.get().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, content.streamInput())__    };a,parser,for,the,contents,of,this,request,if,there,is,a,body,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,apply,content,parser,checked,consumer,if,you,want,to,gracefully,handle,when,the,request,doesn,t,have,any,contents,use,link,content,or,source,param,parser,for,requests,that,support,specifying,the,request,body,in,the,code,source,param;public,final,xcontent,parser,content,parser,throws,ioexception,bytes,reference,content,required,content,return,x,content,type,get,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,content,stream,input
RestRequest -> public final XContentParser contentParser() throws IOException;1528103657;A parser for the contents of this request if there is a body, otherwise throws an {@link ElasticsearchParseException}. Use_{@link #applyContentParser(CheckedConsumer)} if you want to gracefully handle when the request doesn't have any contents. Use_{@link #contentOrSourceParamParser()} for requests that support specifying the request body in the {@code source} param.;public final XContentParser contentParser() throws IOException {_        BytesReference content = requiredContent()_ _        return xContentType.get().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, content.streamInput())__    };a,parser,for,the,contents,of,this,request,if,there,is,a,body,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,apply,content,parser,checked,consumer,if,you,want,to,gracefully,handle,when,the,request,doesn,t,have,any,contents,use,link,content,or,source,param,parser,for,requests,that,support,specifying,the,request,body,in,the,code,source,param;public,final,xcontent,parser,content,parser,throws,ioexception,bytes,reference,content,required,content,return,x,content,type,get,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,content,stream,input
RestRequest -> public final XContentParser contentParser() throws IOException;1529015561;A parser for the contents of this request if there is a body, otherwise throws an {@link ElasticsearchParseException}. Use_{@link #applyContentParser(CheckedConsumer)} if you want to gracefully handle when the request doesn't have any contents. Use_{@link #contentOrSourceParamParser()} for requests that support specifying the request body in the {@code source} param.;public final XContentParser contentParser() throws IOException {_        BytesReference content = requiredContent()_ _        return xContentType.get().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, content.streamInput())__    };a,parser,for,the,contents,of,this,request,if,there,is,a,body,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,apply,content,parser,checked,consumer,if,you,want,to,gracefully,handle,when,the,request,doesn,t,have,any,contents,use,link,content,or,source,param,parser,for,requests,that,support,specifying,the,request,body,in,the,code,source,param;public,final,xcontent,parser,content,parser,throws,ioexception,bytes,reference,content,required,content,return,x,content,type,get,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,content,stream,input
RestRequest -> public final XContentParser contentParser() throws IOException;1547641765;A parser for the contents of this request if there is a body, otherwise throws an {@link ElasticsearchParseException}. Use_{@link #applyContentParser(CheckedConsumer)} if you want to gracefully handle when the request doesn't have any contents. Use_{@link #contentOrSourceParamParser()} for requests that support specifying the request body in the {@code source} param.;public final XContentParser contentParser() throws IOException {_        BytesReference content = requiredContent()_ _        return xContentType.get().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, content.streamInput())__    };a,parser,for,the,contents,of,this,request,if,there,is,a,body,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,apply,content,parser,checked,consumer,if,you,want,to,gracefully,handle,when,the,request,doesn,t,have,any,contents,use,link,content,or,source,param,parser,for,requests,that,support,specifying,the,request,body,in,the,code,source,param;public,final,xcontent,parser,content,parser,throws,ioexception,bytes,reference,content,required,content,return,x,content,type,get,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,content,stream,input
RestRequest -> final void setXContentType(XContentType xContentType);1524684173;Sets the {@link XContentType};final void setXContentType(XContentType xContentType) {_        this.xContentType.set(xContentType)__    };sets,the,link,xcontent,type;final,void,set,xcontent,type,xcontent,type,x,content,type,this,x,content,type,set,x,content,type
RestRequest -> final void setXContentType(XContentType xContentType);1528103657;Sets the {@link XContentType};final void setXContentType(XContentType xContentType) {_        this.xContentType.set(xContentType)__    };sets,the,link,xcontent,type;final,void,set,xcontent,type,xcontent,type,x,content,type,this,x,content,type,set,x,content,type
RestRequest -> final void setXContentType(XContentType xContentType);1529015561;Sets the {@link XContentType};final void setXContentType(XContentType xContentType) {_        this.xContentType.set(xContentType)__    };sets,the,link,xcontent,type;final,void,set,xcontent,type,xcontent,type,x,content,type,this,x,content,type,set,x,content,type
RestRequest -> final void setXContentType(XContentType xContentType);1547641765;Sets the {@link XContentType};final void setXContentType(XContentType xContentType) {_        this.xContentType.set(xContentType)__    };sets,the,link,xcontent,type;final,void,set,xcontent,type,xcontent,type,x,content,type,this,x,content,type,set,x,content,type
RestRequest -> public final BytesReference requiredContent();1524684173;@return content of the request body or throw an exception if the body or content type is missing;public final BytesReference requiredContent() {_        if (hasContent() == false) {_            throw new ElasticsearchParseException("request body is required")__        } else if (xContentType.get() == null) {_            throw new IllegalStateException("unknown content type")__        }_        return content()__    };return,content,of,the,request,body,or,throw,an,exception,if,the,body,or,content,type,is,missing;public,final,bytes,reference,required,content,if,has,content,false,throw,new,elasticsearch,parse,exception,request,body,is,required,else,if,x,content,type,get,null,throw,new,illegal,state,exception,unknown,content,type,return,content
RestRequest -> public final BytesReference requiredContent();1528103657;@return content of the request body or throw an exception if the body or content type is missing;public final BytesReference requiredContent() {_        if (hasContent() == false) {_            throw new ElasticsearchParseException("request body is required")__        } else if (xContentType.get() == null) {_            throw new IllegalStateException("unknown content type")__        }_        return content()__    };return,content,of,the,request,body,or,throw,an,exception,if,the,body,or,content,type,is,missing;public,final,bytes,reference,required,content,if,has,content,false,throw,new,elasticsearch,parse,exception,request,body,is,required,else,if,x,content,type,get,null,throw,new,illegal,state,exception,unknown,content,type,return,content
RestRequest -> public final BytesReference requiredContent();1529015561;@return content of the request body or throw an exception if the body or content type is missing;public final BytesReference requiredContent() {_        if (hasContent() == false) {_            throw new ElasticsearchParseException("request body is required")__        } else if (xContentType.get() == null) {_            throw new IllegalStateException("unknown content type")__        }_        return content()__    };return,content,of,the,request,body,or,throw,an,exception,if,the,body,or,content,type,is,missing;public,final,bytes,reference,required,content,if,has,content,false,throw,new,elasticsearch,parse,exception,request,body,is,required,else,if,x,content,type,get,null,throw,new,illegal,state,exception,unknown,content,type,return,content
RestRequest -> public final BytesReference requiredContent();1547641765;@return content of the request body or throw an exception if the body or content type is missing;public final BytesReference requiredContent() {_        if (hasContent() == false) {_            throw new ElasticsearchParseException("request body is required")__        } else if (xContentType.get() == null) {_            throw new IllegalStateException("unknown content type")__        }_        return content()__    };return,content,of,the,request,body,or,throw,an,exception,if,the,body,or,content,type,is,missing;public,final,bytes,reference,required,content,if,has,content,false,throw,new,elasticsearch,parse,exception,request,body,is,required,else,if,x,content,type,get,null,throw,new,illegal,state,exception,unknown,content,type,return,content
RestRequest -> public final XContentParser contentOrSourceParamParser() throws IOException;1524684173;A parser for the contents of this request if it has contents, otherwise a parser for the {@code source} parameter if there is one,_otherwise throws an {@link ElasticsearchParseException}. Use {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} instead_if you need to handle the absence request content gracefully.;public final XContentParser contentOrSourceParamParser() throws IOException {_        Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__        return tuple.v1().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, tuple.v2().streamInput())__    };a,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,with,content,or,source,param,parser,or,null,checked,consumer,instead,if,you,need,to,handle,the,absence,request,content,gracefully;public,final,xcontent,parser,content,or,source,param,parser,throws,ioexception,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,return,tuple,v1,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,tuple,v2,stream,input
RestRequest -> public final XContentParser contentOrSourceParamParser() throws IOException;1528103657;A parser for the contents of this request if it has contents, otherwise a parser for the {@code source} parameter if there is one,_otherwise throws an {@link ElasticsearchParseException}. Use {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} instead_if you need to handle the absence request content gracefully.;public final XContentParser contentOrSourceParamParser() throws IOException {_        Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__        return tuple.v1().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, tuple.v2().streamInput())__    };a,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,with,content,or,source,param,parser,or,null,checked,consumer,instead,if,you,need,to,handle,the,absence,request,content,gracefully;public,final,xcontent,parser,content,or,source,param,parser,throws,ioexception,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,return,tuple,v1,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,tuple,v2,stream,input
RestRequest -> public final XContentParser contentOrSourceParamParser() throws IOException;1529015561;A parser for the contents of this request if it has contents, otherwise a parser for the {@code source} parameter if there is one,_otherwise throws an {@link ElasticsearchParseException}. Use {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} instead_if you need to handle the absence request content gracefully.;public final XContentParser contentOrSourceParamParser() throws IOException {_        Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__        return tuple.v1().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, tuple.v2().streamInput())__    };a,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,with,content,or,source,param,parser,or,null,checked,consumer,instead,if,you,need,to,handle,the,absence,request,content,gracefully;public,final,xcontent,parser,content,or,source,param,parser,throws,ioexception,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,return,tuple,v1,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,tuple,v2,stream,input
RestRequest -> public final XContentParser contentOrSourceParamParser() throws IOException;1547641765;A parser for the contents of this request if it has contents, otherwise a parser for the {@code source} parameter if there is one,_otherwise throws an {@link ElasticsearchParseException}. Use {@link #withContentOrSourceParamParserOrNull(CheckedConsumer)} instead_if you need to handle the absence request content gracefully.;public final XContentParser contentOrSourceParamParser() throws IOException {_        Tuple<XContentType, BytesReference> tuple = contentOrSourceParam()__        return tuple.v1().xContent().createParser(xContentRegistry, LoggingDeprecationHandler.INSTANCE, tuple.v2().streamInput())__    };a,parser,for,the,contents,of,this,request,if,it,has,contents,otherwise,a,parser,for,the,code,source,parameter,if,there,is,one,otherwise,throws,an,link,elasticsearch,parse,exception,use,link,with,content,or,source,param,parser,or,null,checked,consumer,instead,if,you,need,to,handle,the,absence,request,content,gracefully;public,final,xcontent,parser,content,or,source,param,parser,throws,ioexception,tuple,xcontent,type,bytes,reference,tuple,content,or,source,param,return,tuple,v1,x,content,create,parser,x,content,registry,logging,deprecation,handler,instance,tuple,v2,stream,input
RestRequest -> public RestRequest(final NamedXContentRegistry xContentRegistry, final String uri, final Map<String, List<String>> headers);1524684173;Creates a new REST request.__@param xContentRegistry the content registry_@param uri              the raw URI that will be parsed into the path and the parameters_@param headers          a map of the header_ this map should implement a case-insensitive lookup_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public RestRequest(final NamedXContentRegistry xContentRegistry, final String uri, final Map<String, List<String>> headers) {_        this(xContentRegistry, params(uri), path(uri), headers)__    };creates,a,new,rest,request,param,x,content,registry,the,content,registry,param,uri,the,raw,uri,that,will,be,parsed,into,the,path,and,the,parameters,param,headers,a,map,of,the,header,this,map,should,implement,a,case,insensitive,lookup,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,rest,request,final,named,xcontent,registry,x,content,registry,final,string,uri,final,map,string,list,string,headers,this,x,content,registry,params,uri,path,uri,headers
RestRequest -> public RestRequest(final NamedXContentRegistry xContentRegistry, final String uri, final Map<String, List<String>> headers);1528103657;Creates a new REST request.__@param xContentRegistry the content registry_@param uri              the raw URI that will be parsed into the path and the parameters_@param headers          a map of the header_ this map should implement a case-insensitive lookup_@throws BadParameterException      if the parameters can not be decoded_@throws ContentTypeHeaderException if the Content-Type header can not be parsed;public RestRequest(final NamedXContentRegistry xContentRegistry, final String uri, final Map<String, List<String>> headers) {_        this(xContentRegistry, params(uri), path(uri), headers)__    };creates,a,new,rest,request,param,x,content,registry,the,content,registry,param,uri,the,raw,uri,that,will,be,parsed,into,the,path,and,the,parameters,param,headers,a,map,of,the,header,this,map,should,implement,a,case,insensitive,lookup,throws,bad,parameter,exception,if,the,parameters,can,not,be,decoded,throws,content,type,header,exception,if,the,content,type,header,can,not,be,parsed;public,rest,request,final,named,xcontent,registry,x,content,registry,final,string,uri,final,map,string,list,string,headers,this,x,content,registry,params,uri,path,uri,headers
RestRequest -> public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException;1524684173;If there is any content then call {@code applyParser} with the parser, otherwise do nothing.;public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException {_        if (hasContent()) {_            try (XContentParser parser = contentParser()) {_                applyParser.accept(parser)__            }_        }_    };if,there,is,any,content,then,call,code,apply,parser,with,the,parser,otherwise,do,nothing;public,final,void,apply,content,parser,checked,consumer,xcontent,parser,ioexception,apply,parser,throws,ioexception,if,has,content,try,xcontent,parser,parser,content,parser,apply,parser,accept,parser
RestRequest -> public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException;1528103657;If there is any content then call {@code applyParser} with the parser, otherwise do nothing.;public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException {_        if (hasContent()) {_            try (XContentParser parser = contentParser()) {_                applyParser.accept(parser)__            }_        }_    };if,there,is,any,content,then,call,code,apply,parser,with,the,parser,otherwise,do,nothing;public,final,void,apply,content,parser,checked,consumer,xcontent,parser,ioexception,apply,parser,throws,ioexception,if,has,content,try,xcontent,parser,parser,content,parser,apply,parser,accept,parser
RestRequest -> public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException;1529015561;If there is any content then call {@code applyParser} with the parser, otherwise do nothing.;public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException {_        if (hasContent()) {_            try (XContentParser parser = contentParser()) {_                applyParser.accept(parser)__            }_        }_    };if,there,is,any,content,then,call,code,apply,parser,with,the,parser,otherwise,do,nothing;public,final,void,apply,content,parser,checked,consumer,xcontent,parser,ioexception,apply,parser,throws,ioexception,if,has,content,try,xcontent,parser,parser,content,parser,apply,parser,accept,parser
RestRequest -> public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException;1547641765;If there is any content then call {@code applyParser} with the parser, otherwise do nothing.;public final void applyContentParser(CheckedConsumer<XContentParser, IOException> applyParser) throws IOException {_        if (hasContent()) {_            try (XContentParser parser = contentParser()) {_                applyParser.accept(parser)__            }_        }_    };if,there,is,any,content,then,call,code,apply,parser,with,the,parser,otherwise,do,nothing;public,final,void,apply,content,parser,checked,consumer,xcontent,parser,ioexception,apply,parser,throws,ioexception,if,has,content,try,xcontent,parser,parser,content,parser,apply,parser,accept,parser
RestRequest -> public final boolean hasContentOrSourceParam();1524684173;Does this request have content or a {@code source} parameter? Use this instead of {@link #hasContent()} if this_{@linkplain RestHandler} treats the {@code source} parameter like the body content.;public final boolean hasContentOrSourceParam() {_        return hasContent() || hasParam("source")__    };does,this,request,have,content,or,a,code,source,parameter,use,this,instead,of,link,has,content,if,this,linkplain,rest,handler,treats,the,code,source,parameter,like,the,body,content;public,final,boolean,has,content,or,source,param,return,has,content,has,param,source
RestRequest -> public final boolean hasContentOrSourceParam();1528103657;Does this request have content or a {@code source} parameter? Use this instead of {@link #hasContent()} if this_{@linkplain RestHandler} treats the {@code source} parameter like the body content.;public final boolean hasContentOrSourceParam() {_        return hasContent() || hasParam("source")__    };does,this,request,have,content,or,a,code,source,parameter,use,this,instead,of,link,has,content,if,this,linkplain,rest,handler,treats,the,code,source,parameter,like,the,body,content;public,final,boolean,has,content,or,source,param,return,has,content,has,param,source
RestRequest -> public final boolean hasContentOrSourceParam();1529015561;Does this request have content or a {@code source} parameter? Use this instead of {@link #hasContent()} if this_{@linkplain RestHandler} treats the {@code source} parameter like the body content.;public final boolean hasContentOrSourceParam() {_        return hasContent() || hasParam("source")__    };does,this,request,have,content,or,a,code,source,parameter,use,this,instead,of,link,has,content,if,this,linkplain,rest,handler,treats,the,code,source,parameter,like,the,body,content;public,final,boolean,has,content,or,source,param,return,has,content,has,param,source
RestRequest -> public final boolean hasContentOrSourceParam();1547641765;Does this request have content or a {@code source} parameter? Use this instead of {@link #hasContent()} if this_{@linkplain RestHandler} treats the {@code source} parameter like the body content.;public final boolean hasContentOrSourceParam() {_        return hasContent() || hasParam("source")__    };does,this,request,have,content,or,a,code,source,parameter,use,this,instead,of,link,has,content,if,this,linkplain,rest,handler,treats,the,code,source,parameter,like,the,body,content;public,final,boolean,has,content,or,source,param,return,has,content,has,param,source
