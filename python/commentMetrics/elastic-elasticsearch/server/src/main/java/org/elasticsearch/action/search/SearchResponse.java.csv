commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.status(successfulShards, totalShards, shardFailures). }
true;public;0;3;/**  * The search hits.  */ ;/**  * The search hits.  */ public SearchHits getHits() {     return internalResponse.hits(). }
false;public;0;3;;public Aggregations getAggregations() {     return internalResponse.aggregations(). }
false;public;0;3;;public Suggest getSuggest() {     return internalResponse.suggest(). }
true;public;0;3;/**  * Has the search operation timed out.  */ ;/**  * Has the search operation timed out.  */ public boolean isTimedOut() {     return internalResponse.timedOut(). }
true;public;0;3;/**  * Has the search operation terminated early due to reaching  * <code>terminateAfter</code>  */ ;/**  * Has the search operation terminated early due to reaching  * <code>terminateAfter</code>  */ public Boolean isTerminatedEarly() {     return internalResponse.terminatedEarly(). }
true;public;0;3;/**  * Returns the number of reduce phases applied to obtain this search response  */ ;/**  * Returns the number of reduce phases applied to obtain this search response  */ public int getNumReducePhases() {     return internalResponse.getNumReducePhases(). }
true;public;0;3;/**  * How long the search took.  */ ;/**  * How long the search took.  */ public TimeValue getTook() {     return new TimeValue(tookInMillis). }
true;public;0;3;/**  * The total number of shards the search was executed on.  */ ;/**  * The total number of shards the search was executed on.  */ public int getTotalShards() {     return totalShards. }
true;public;0;3;/**  * The successful number of shards the search was executed on.  */ ;/**  * The successful number of shards the search was executed on.  */ public int getSuccessfulShards() {     return successfulShards. }
true;public;0;3;/**  * The number of shards skipped due to pre-filtering  */ ;/**  * The number of shards skipped due to pre-filtering  */ public int getSkippedShards() {     return skippedShards. }
true;public;0;5;/**  * The failed number of shards the search was executed on.  */ ;/**  * The failed number of shards the search was executed on.  */ public int getFailedShards() {     // count it in the successful counter     return shardFailures.length. }
true;public;0;3;/**  * The failures that occurred during the search.  */ ;/**  * The failures that occurred during the search.  */ public ShardSearchFailure[] getShardFailures() {     return this.shardFailures. }
true;public;0;3;/**  * If scrolling was enabled ({@link SearchRequest#scroll(org.elasticsearch.search.Scroll)}, the  * scroll id that can be used to continue scrolling.  */ ;/**  * If scrolling was enabled ({@link SearchRequest#scroll(org.elasticsearch.search.Scroll)}, the  * scroll id that can be used to continue scrolling.  */ public String getScrollId() {     return scrollId. }
false;public;1;3;;public void scrollId(String scrollId) {     this.scrollId = scrollId. }
true;public;0;4;/**  * If profiling was enabled, this returns an object containing the profile results from  * each shard.  If profiling was not enabled, this will return null  *  * @return The profile results or an empty map  */ ;/**  * If profiling was enabled, this returns an object containing the profile results from  * each shard.  If profiling was not enabled, this will return null  *  * @return The profile results or an empty map  */ @Nullable public Map<String, ProfileShardResult> getProfileResults() {     return internalResponse.profile(). }
true;public;0;3;/**  * Returns info about what clusters the search was executed against. Available only in responses obtained  * from a Cross Cluster Search request, otherwise <code>null</code>  * @see Clusters  */ ;/**  * Returns info about what clusters the search was executed against. Available only in responses obtained  * from a Cross Cluster Search request, otherwise <code>null</code>  * @see Clusters  */ public Clusters getClusters() {     return clusters. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     innerToXContent(builder, params).     builder.endObject().     return builder. }
false;public;2;18;;public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     if (scrollId != null) {         builder.field(SCROLL_ID.getPreferredName(), scrollId).     }     builder.field(TOOK.getPreferredName(), tookInMillis).     builder.field(TIMED_OUT.getPreferredName(), isTimedOut()).     if (isTerminatedEarly() != null) {         builder.field(TERMINATED_EARLY.getPreferredName(), isTerminatedEarly()).     }     if (getNumReducePhases() != 1) {         builder.field(NUM_REDUCE_PHASES.getPreferredName(), getNumReducePhases()).     }     RestActions.buildBroadcastShardsHeader(builder, params, getTotalShards(), getSuccessfulShards(), getSkippedShards(), getFailedShards(), getShardFailures()).     clusters.toXContent(builder, params).     internalResponse.toXContent(builder, params).     return builder. }
false;public,static;1;5;;public static SearchResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     parser.nextToken().     return innerFromXContent(parser). }
false;static;1;103;;static SearchResponse innerFromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation).     String currentFieldName = parser.currentName().     SearchHits hits = null.     Aggregations aggs = null.     Suggest suggest = null.     SearchProfileShardResults profile = null.     boolean timedOut = false.     Boolean terminatedEarly = null.     int numReducePhases = 1.     long tookInMillis = -1.     int successfulShards = -1.     int totalShards = -1.     // 0 for BWC     int skippedShards = 0.     String scrollId = null.     List<ShardSearchFailure> failures = new ArrayList<>().     Clusters clusters = Clusters.EMPTY.     for (Token token = parser.nextToken(). token != Token.END_OBJECT. token = parser.nextToken()) {         if (token == Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (SCROLL_ID.match(currentFieldName, parser.getDeprecationHandler())) {                 scrollId = parser.text().             } else if (TOOK.match(currentFieldName, parser.getDeprecationHandler())) {                 tookInMillis = parser.longValue().             } else if (TIMED_OUT.match(currentFieldName, parser.getDeprecationHandler())) {                 timedOut = parser.booleanValue().             } else if (TERMINATED_EARLY.match(currentFieldName, parser.getDeprecationHandler())) {                 terminatedEarly = parser.booleanValue().             } else if (NUM_REDUCE_PHASES.match(currentFieldName, parser.getDeprecationHandler())) {                 numReducePhases = parser.intValue().             } else {                 parser.skipChildren().             }         } else if (token == Token.START_OBJECT) {             if (SearchHits.Fields.HITS.equals(currentFieldName)) {                 hits = SearchHits.fromXContent(parser).             } else if (Aggregations.AGGREGATIONS_FIELD.equals(currentFieldName)) {                 aggs = Aggregations.fromXContent(parser).             } else if (Suggest.NAME.equals(currentFieldName)) {                 suggest = Suggest.fromXContent(parser).             } else if (SearchProfileShardResults.PROFILE_FIELD.equals(currentFieldName)) {                 profile = SearchProfileShardResults.fromXContent(parser).             } else if (RestActions._SHARDS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 while ((token = parser.nextToken()) != Token.END_OBJECT) {                     if (token == Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     } else if (token.isValue()) {                         if (RestActions.FAILED_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             // we don't need it but need to consume it                             parser.intValue().                         } else if (RestActions.SUCCESSFUL_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             successfulShards = parser.intValue().                         } else if (RestActions.TOTAL_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             totalShards = parser.intValue().                         } else if (RestActions.SKIPPED_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             skippedShards = parser.intValue().                         } else {                             parser.skipChildren().                         }                     } else if (token == Token.START_ARRAY) {                         if (RestActions.FAILURES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             while ((token = parser.nextToken()) != Token.END_ARRAY) {                                 failures.add(ShardSearchFailure.fromXContent(parser)).                             }                         } else {                             parser.skipChildren().                         }                     } else {                         parser.skipChildren().                     }                 }             } else if (Clusters._CLUSTERS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 int successful = -1.                 int total = -1.                 int skipped = -1.                 while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                     if (token == XContentParser.Token.FIELD_NAME) {                         currentFieldName = parser.currentName().                     } else if (token.isValue()) {                         if (Clusters.SUCCESSFUL_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             successful = parser.intValue().                         } else if (Clusters.TOTAL_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             total = parser.intValue().                         } else if (Clusters.SKIPPED_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                             skipped = parser.intValue().                         } else {                             parser.skipChildren().                         }                     } else {                         parser.skipChildren().                     }                 }                 clusters = new Clusters(total, successful, skipped).             } else {                 parser.skipChildren().             }         }     }     SearchResponseSections searchResponseSections = new SearchResponseSections(hits, aggs, suggest, timedOut, terminatedEarly, profile, numReducePhases).     return new SearchResponse(searchResponseSections, scrollId, totalShards, successfulShards, skippedShards, tookInMillis, failures.toArray(ShardSearchFailure.EMPTY_ARRAY), clusters). }
false;public;1;24;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     internalResponse = new InternalSearchResponse(in).     totalShards = in.readVInt().     successfulShards = in.readVInt().     int size = in.readVInt().     if (size == 0) {         shardFailures = ShardSearchFailure.EMPTY_ARRAY.     } else {         shardFailures = new ShardSearchFailure[size].         for (int i = 0. i < shardFailures.length. i++) {             shardFailures[i] = readShardSearchFailure(in).         }     }     if (in.getVersion().onOrAfter(Version.V_6_1_0)) {         clusters = new Clusters(in).     } else {         clusters = Clusters.EMPTY.     }     scrollId = in.readOptionalString().     tookInMillis = in.readVLong().     skippedShards = in.readVInt(). }
false;public;1;18;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     internalResponse.writeTo(out).     out.writeVInt(totalShards).     out.writeVInt(successfulShards).     out.writeVInt(shardFailures.length).     for (ShardSearchFailure shardSearchFailure : shardFailures) {         shardSearchFailure.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         clusters.writeTo(out).     }     out.writeOptionalString(scrollId).     out.writeVLong(tookInMillis).     out.writeVInt(skippedShards). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(total).     out.writeVInt(successful).     out.writeVInt(skipped). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (this != EMPTY) {         builder.startObject(_CLUSTERS_FIELD.getPreferredName()).         builder.field(TOTAL_FIELD.getPreferredName(), total).         builder.field(SUCCESSFUL_FIELD.getPreferredName(), successful).         builder.field(SKIPPED_FIELD.getPreferredName(), skipped).         builder.endObject().     }     return builder. }
true;public;0;3;/**  * Returns how many total clusters the search was requested to be executed on  */ ;/**  * Returns how many total clusters the search was requested to be executed on  */ public int getTotal() {     return total. }
true;public;0;3;/**  * Returns how many total clusters the search was executed successfully on  */ ;/**  * Returns how many total clusters the search was executed successfully on  */ public int getSuccessful() {     return successful. }
true;public;0;3;/**  * Returns how many total clusters were during the execution of the search request  */ ;/**  * Returns how many total clusters were during the execution of the search request  */ public int getSkipped() {     return skipped. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Clusters clusters = (Clusters) o.     return total == clusters.total && successful == clusters.successful && skipped == clusters.skipped. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(total, successful, skipped). }
false;public;0;4;;@Override public String toString() {     return "Clusters{total=" + total + ", successful=" + successful + ", skipped=" + skipped + '}'. }
false;static;2;7;;static SearchResponse empty(Supplier<Long> tookInMillisSupplier, Clusters clusters) {     SearchHits searchHits = new SearchHits(new SearchHit[0], new TotalHits(0L, TotalHits.Relation.EQUAL_TO), Float.NaN).     InternalSearchResponse internalSearchResponse = new InternalSearchResponse(searchHits, InternalAggregations.EMPTY, null, null, false, null, 0).     return new SearchResponse(internalSearchResponse, null, 0, 0, 0, tookInMillisSupplier.get(), ShardSearchFailure.EMPTY_ARRAY, clusters). }
