commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getField() {     return field. }
false;public;1;4;;@Override public String toString(String field) {     return "SpanMatchNoDocsQuery(\"" + reason + "\")". }
false;public;1;4;;@Override public boolean equals(Object o) {     return sameClassAs(o). }
false;public;0;4;;@Override public int hashCode() {     return classHash(). }
false;public;1;2;;@Override public void extractTermStates(Map<Term, TermStates> contexts) { }
false;public;2;4;;@Override public Spans getSpans(LeafReaderContext ctx, Postings requiredPostings) {     return null. }
false;public;1;2;;@Override public void extractTerms(Set<Term> terms) { }
false;public;1;4;;@Override public boolean isCacheable(LeafReaderContext ctx) {     return true. }
false;public;3;20;;@Override public SpanWeight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {     return new SpanWeight(this, searcher, Collections.emptyMap(), boost) {          @Override         public void extractTermStates(Map<Term, TermStates> contexts) {         }          @Override         public Spans getSpans(LeafReaderContext ctx, Postings requiredPostings) {             return null.         }          @Override         public void extractTerms(Set<Term> terms) {         }          @Override         public boolean isCacheable(LeafReaderContext ctx) {             return true.         }     }. }
