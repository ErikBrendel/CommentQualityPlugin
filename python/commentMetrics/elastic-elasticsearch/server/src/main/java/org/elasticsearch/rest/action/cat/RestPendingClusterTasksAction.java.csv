commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_pending_cluster_tasks_action". }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/pending_tasks\n"). }
false;public;1;5;;@Override public RestResponse buildResponse(PendingClusterTasksResponse pendingClusterTasks) throws Exception {     Table tab = buildTable(request, pendingClusterTasks).     return RestTable.buildResponse(tab, channel). }
false;public;2;16;;@Override public RestChannelConsumer doCatRequest(final RestRequest request, final NodeClient client) {     PendingClusterTasksRequest pendingClusterTasksRequest = new PendingClusterTasksRequest().     pendingClusterTasksRequest.masterNodeTimeout(request.paramAsTime("master_timeout", pendingClusterTasksRequest.masterNodeTimeout())).     pendingClusterTasksRequest.local(request.paramAsBoolean("local", pendingClusterTasksRequest.local())).     return channel -> client.admin().cluster().pendingClusterTasks(pendingClusterTasksRequest, new RestResponseListener<PendingClusterTasksResponse>(channel) {          @Override         public RestResponse buildResponse(PendingClusterTasksResponse pendingClusterTasks) throws Exception {             Table tab = buildTable(request, pendingClusterTasks).             return RestTable.buildResponse(tab, channel).         }     }). }
false;protected;1;11;;@Override protected Table getTableWithHeader(final RestRequest request) {     Table t = new Table().     t.startHeaders().     t.addCell("insertOrder", "alias:o.text-align:right.desc:task insertion order").     t.addCell("timeInQueue", "alias:t.text-align:right.desc:how long task has been in queue").     t.addCell("priority", "alias:p.desc:task priority").     t.addCell("source", "alias:s.desc:task source").     t.endHeaders().     return t. }
false;private;2;14;;private Table buildTable(RestRequest request, PendingClusterTasksResponse tasks) {     Table t = getTableWithHeader(request).     for (PendingClusterTask task : tasks) {         t.startRow().         t.addCell(task.getInsertOrder()).         t.addCell(task.getTimeInQueue()).         t.addCell(task.getPriority()).         t.addCell(task.getSource()).         t.endRow().     }     return t. }
