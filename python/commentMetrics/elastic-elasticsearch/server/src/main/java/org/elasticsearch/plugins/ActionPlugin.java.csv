commented;modifiers;parameterAmount;loc;comment;code
true;default;0;3;/**  * Actions added by this plugin.  */ ;/**  * Actions added by this plugin.  */ default List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     return Collections.emptyList(). }
true;default;0;3;/**  * Client actions added by this plugin. This defaults to all of the {@linkplain Action} in  * {@linkplain ActionPlugin#getActions()}.  */ ;/**  * Client actions added by this plugin. This defaults to all of the {@linkplain Action} in  * {@linkplain ActionPlugin#getActions()}.  */ default List<Action<? extends ActionResponse>> getClientActions() {     return getActions().stream().map(a -> a.action).collect(Collectors.toList()). }
true;default;0;3;/**  * Action filters added by this plugin.  */ ;/**  * Action filters added by this plugin.  */ default List<ActionFilter> getActionFilters() {     return Collections.emptyList(). }
true;default;7;5;/**  * Rest handlers added by this plugin.  */ ;/**  * Rest handlers added by this plugin.  */ default List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     return Collections.emptyList(). }
true;default;0;3;/**  * Returns headers which should be copied through rest requests on to internal requests.  */ ;/**  * Returns headers which should be copied through rest requests on to internal requests.  */ default Collection<String> getRestHeaders() {     return Collections.emptyList(). }
true;default;0;3;/**  * Returns headers which should be copied from internal requests into tasks.  */ ;/**  * Returns headers which should be copied from internal requests into tasks.  */ default Collection<String> getTaskHeaders() {     return Collections.emptyList(). }
true;default;1;3;/**  * Returns a function used to wrap each rest request before handling the request.  * The returned {@link UnaryOperator} is called for every incoming rest request and receives  * the original rest handler as it's input. This allows adding arbitrary functionality around  * rest request handlers to do for instance logging or authentication.  * A simple example of how to only allow GET request is here:  * <pre>  * {@code  *    UnaryOperator<RestHandler> getRestHandlerWrapper(ThreadContext threadContext) {  *      return originalHandler -> (RestHandler) (request, channel, client) -> {  *        if (request.method() != Method.GET) {  *          throw new IllegalStateException("only GET requests are allowed").  *        }  *        originalHandler.handleRequest(request, channel, client).  *      }.  *    }  * }  * </pre>  *  * Note: Only one installed plugin may implement a rest wrapper.  */ ;/**  * Returns a function used to wrap each rest request before handling the request.  * The returned {@link UnaryOperator} is called for every incoming rest request and receives  * the original rest handler as it's input. This allows adding arbitrary functionality around  * rest request handlers to do for instance logging or authentication.  * A simple example of how to only allow GET request is here:  * <pre>  * {@code  *    UnaryOperator<RestHandler> getRestHandlerWrapper(ThreadContext threadContext) {  *      return originalHandler -> (RestHandler) (request, channel, client) -> {  *        if (request.method() != Method.GET) {  *          throw new IllegalStateException("only GET requests are allowed").  *        }  *        originalHandler.handleRequest(request, channel, client).  *      }.  *    }  * }  * </pre>  *  * Note: Only one installed plugin may implement a rest wrapper.  */ default UnaryOperator<RestHandler> getRestHandlerWrapper(ThreadContext threadContext) {     return null. }
false;public;0;3;;public Action<Response> getAction() {     return action. }
false;public;0;3;;public Class<? extends TransportAction<Request, Response>> getTransportAction() {     return transportAction. }
false;public;0;3;;public Class<?>[] getSupportTransportActions() {     return supportTransportActions. }
false;public;0;8;;@Override public String toString() {     StringBuilder b = new StringBuilder().append(action.name()).append(" is handled by ").append(transportAction.getName()).     if (supportTransportActions.length > 0) {         b.append('[').append(Strings.arrayToCommaDelimitedString(supportTransportActions)).append(']').     }     return b.toString(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != ActionHandler.class) {         return false.     }     ActionHandler<?, ?> other = (ActionHandler<?, ?>) obj.     return Objects.equals(action, other.action) && Objects.equals(transportAction, other.transportAction) && Objects.deepEquals(supportTransportActions, other.supportTransportActions). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(action, transportAction, supportTransportActions). }
true;default;0;3;/**  * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to  * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.  */ ;/**  * Returns a collection of validators that are used by {@link TransportPutMappingAction.RequestValidators} to  * validate a {@link org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest} before the executing it.  */ default Collection<MappingRequestValidator> mappingRequestValidators() {     return Collections.emptyList(). }
