# id;timestamp;commentText;codeText;commentWords;codeWords
IndexFieldData -> XFieldComparatorSource -> Nested -> public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException;1524684173;Get a {@link DocIdSet} that matches the inner documents.;public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException {_                final IndexReaderContext topLevelCtx = ReaderUtil.getTopLevelContext(ctx)__                IndexSearcher indexSearcher = new IndexSearcher(topLevelCtx)__                Weight weight = indexSearcher.createNormalizedWeight(innerQuery, false)__                Scorer s = weight.scorer(ctx)__                return s == null ? null : s.iterator()__            };get,a,link,doc,id,set,that,matches,the,inner,documents;public,doc,id,set,iterator,inner,docs,leaf,reader,context,ctx,throws,ioexception,final,index,reader,context,top,level,ctx,reader,util,get,top,level,context,ctx,index,searcher,index,searcher,new,index,searcher,top,level,ctx,weight,weight,index,searcher,create,normalized,weight,inner,query,false,scorer,s,weight,scorer,ctx,return,s,null,null,s,iterator
IndexFieldData -> XFieldComparatorSource -> Nested -> public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException;1528762805;Get a {@link DocIdSet} that matches the inner documents.;public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException {_                final IndexReaderContext topLevelCtx = ReaderUtil.getTopLevelContext(ctx)__                IndexSearcher indexSearcher = new IndexSearcher(topLevelCtx)__                Weight weight = indexSearcher.createNormalizedWeight(innerQuery, false)__                Scorer s = weight.scorer(ctx)__                return s == null ? null : s.iterator()__            };get,a,link,doc,id,set,that,matches,the,inner,documents;public,doc,id,set,iterator,inner,docs,leaf,reader,context,ctx,throws,ioexception,final,index,reader,context,top,level,ctx,reader,util,get,top,level,context,ctx,index,searcher,index,searcher,new,index,searcher,top,level,ctx,weight,weight,index,searcher,create,normalized,weight,inner,query,false,scorer,s,weight,scorer,ctx,return,s,null,null,s,iterator
IndexFieldData -> XFieldComparatorSource -> Nested -> public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException;1536314350;Get a {@link DocIdSet} that matches the inner documents.;public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException {_                final IndexReaderContext topLevelCtx = ReaderUtil.getTopLevelContext(ctx)__                IndexSearcher indexSearcher = new IndexSearcher(topLevelCtx)__                Weight weight = indexSearcher.createWeight(indexSearcher.rewrite(innerQuery), ScoreMode.COMPLETE_NO_SCORES, 1f)__                Scorer s = weight.scorer(ctx)__                return s == null ? null : s.iterator()__            };get,a,link,doc,id,set,that,matches,the,inner,documents;public,doc,id,set,iterator,inner,docs,leaf,reader,context,ctx,throws,ioexception,final,index,reader,context,top,level,ctx,reader,util,get,top,level,context,ctx,index,searcher,index,searcher,new,index,searcher,top,level,ctx,weight,weight,index,searcher,create,weight,index,searcher,rewrite,inner,query,score,mode,1f,scorer,s,weight,scorer,ctx,return,s,null,null,s,iterator
IndexFieldData -> XFieldComparatorSource -> Nested -> public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException;1539615817;Get a {@link DocIdSet} that matches the inner documents.;public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException {_                final IndexReaderContext topLevelCtx = ReaderUtil.getTopLevelContext(ctx)__                IndexSearcher indexSearcher = new IndexSearcher(topLevelCtx)__                Weight weight = indexSearcher.createWeight(indexSearcher.rewrite(innerQuery), ScoreMode.COMPLETE_NO_SCORES, 1f)__                Scorer s = weight.scorer(ctx)__                return s == null ? null : s.iterator()__            };get,a,link,doc,id,set,that,matches,the,inner,documents;public,doc,id,set,iterator,inner,docs,leaf,reader,context,ctx,throws,ioexception,final,index,reader,context,top,level,ctx,reader,util,get,top,level,context,ctx,index,searcher,index,searcher,new,index,searcher,top,level,ctx,weight,weight,index,searcher,create,weight,index,searcher,rewrite,inner,query,score,mode,1f,scorer,s,weight,scorer,ctx,return,s,null,null,s,iterator
IndexFieldData -> XFieldComparatorSource -> Nested -> public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException;1540583181;Get a {@link DocIdSet} that matches the inner documents.;public DocIdSetIterator innerDocs(LeafReaderContext ctx) throws IOException {_                final IndexReaderContext topLevelCtx = ReaderUtil.getTopLevelContext(ctx)__                IndexSearcher indexSearcher = new IndexSearcher(topLevelCtx)__                Weight weight = indexSearcher.createWeight(indexSearcher.rewrite(innerQuery), ScoreMode.COMPLETE_NO_SCORES, 1f)__                Scorer s = weight.scorer(ctx)__                return s == null ? null : s.iterator()__            };get,a,link,doc,id,set,that,matches,the,inner,documents;public,doc,id,set,iterator,inner,docs,leaf,reader,context,ctx,throws,ioexception,final,index,reader,context,top,level,ctx,reader,util,get,top,level,context,ctx,index,searcher,index,searcher,new,index,searcher,top,level,ctx,weight,weight,index,searcher,create,weight,index,searcher,rewrite,inner,query,score,mode,1f,scorer,s,weight,scorer,ctx,return,s,null,null,s,iterator
IndexFieldData -> void clear()_;1524684173;Clears any resources associated with this field data.;void clear()_;clears,any,resources,associated,with,this,field,data;void,clear
IndexFieldData -> void clear()_;1528762805;Clears any resources associated with this field data.;void clear()_;clears,any,resources,associated,with,this,field,data;void,clear
IndexFieldData -> void clear()_;1536314350;Clears any resources associated with this field data.;void clear()_;clears,any,resources,associated,with,this,field,data;void,clear
IndexFieldData -> void clear()_;1539615817;Clears any resources associated with this field data.;void clear()_;clears,any,resources,associated,with,this,field,data;void,clear
IndexFieldData -> void clear()_;1540583181;Clears any resources associated with this field data.;void clear()_;clears,any,resources,associated,with,this,field,data;void,clear
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingFirst(Object missingValue);1524684173;Whether missing values should be sorted first.;public final boolean sortMissingFirst(Object missingValue) {_            return "_first".equals(missingValue)__        };whether,missing,values,should,be,sorted,first;public,final,boolean,sort,missing,first,object,missing,value,return,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingFirst(Object missingValue);1528762805;Whether missing values should be sorted first.;public final boolean sortMissingFirst(Object missingValue) {_            return "_first".equals(missingValue)__        };whether,missing,values,should,be,sorted,first;public,final,boolean,sort,missing,first,object,missing,value,return,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingFirst(Object missingValue);1536314350;Whether missing values should be sorted first.;public final boolean sortMissingFirst(Object missingValue) {_            return "_first".equals(missingValue)__        };whether,missing,values,should,be,sorted,first;public,final,boolean,sort,missing,first,object,missing,value,return,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingFirst(Object missingValue);1539615817;Whether missing values should be sorted first.;public final boolean sortMissingFirst(Object missingValue) {_            return "_first".equals(missingValue)__        };whether,missing,values,should,be,sorted,first;public,final,boolean,sort,missing,first,object,missing,value,return,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingFirst(Object missingValue);1540583181;Whether missing values should be sorted first.;public final boolean sortMissingFirst(Object missingValue) {_            return "_first".equals(missingValue)__        };whether,missing,values,should,be,sorted,first;public,final,boolean,sort,missing,first,object,missing,value,return,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingLast(Object missingValue);1524684173;Whether missing values should be sorted last, this is the default.;public final boolean sortMissingLast(Object missingValue) {_            return missingValue == null || "_last".equals(missingValue)__        };whether,missing,values,should,be,sorted,last,this,is,the,default;public,final,boolean,sort,missing,last,object,missing,value,return,missing,value,null,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingLast(Object missingValue);1528762805;Whether missing values should be sorted last, this is the default.;public final boolean sortMissingLast(Object missingValue) {_            return missingValue == null || "_last".equals(missingValue)__        };whether,missing,values,should,be,sorted,last,this,is,the,default;public,final,boolean,sort,missing,last,object,missing,value,return,missing,value,null,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingLast(Object missingValue);1536314350;Whether missing values should be sorted last, this is the default.;public final boolean sortMissingLast(Object missingValue) {_            return missingValue == null || "_last".equals(missingValue)__        };whether,missing,values,should,be,sorted,last,this,is,the,default;public,final,boolean,sort,missing,last,object,missing,value,return,missing,value,null,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingLast(Object missingValue);1539615817;Whether missing values should be sorted last, this is the default.;public final boolean sortMissingLast(Object missingValue) {_            return missingValue == null || "_last".equals(missingValue)__        };whether,missing,values,should,be,sorted,last,this,is,the,default;public,final,boolean,sort,missing,last,object,missing,value,return,missing,value,null,equals,missing,value
IndexFieldData -> XFieldComparatorSource -> public final boolean sortMissingLast(Object missingValue);1540583181;Whether missing values should be sorted last, this is the default.;public final boolean sortMissingLast(Object missingValue) {_            return missingValue == null || "_last".equals(missingValue)__        };whether,missing,values,should,be,sorted,last,this,is,the,default;public,final,boolean,sort,missing,last,object,missing,value,return,missing,value,null,equals,missing,value
IndexFieldData -> FD loadDirect(LeafReaderContext context) throws Exception_;1524684173;Loads directly the atomic field data for the reader, ignoring any caching involved.;FD loadDirect(LeafReaderContext context) throws Exception_;loads,directly,the,atomic,field,data,for,the,reader,ignoring,any,caching,involved;fd,load,direct,leaf,reader,context,context,throws,exception
IndexFieldData -> FD loadDirect(LeafReaderContext context) throws Exception_;1528762805;Loads directly the atomic field data for the reader, ignoring any caching involved.;FD loadDirect(LeafReaderContext context) throws Exception_;loads,directly,the,atomic,field,data,for,the,reader,ignoring,any,caching,involved;fd,load,direct,leaf,reader,context,context,throws,exception
IndexFieldData -> FD loadDirect(LeafReaderContext context) throws Exception_;1536314350;Loads directly the atomic field data for the reader, ignoring any caching involved.;FD loadDirect(LeafReaderContext context) throws Exception_;loads,directly,the,atomic,field,data,for,the,reader,ignoring,any,caching,involved;fd,load,direct,leaf,reader,context,context,throws,exception
IndexFieldData -> FD loadDirect(LeafReaderContext context) throws Exception_;1539615817;Loads directly the atomic field data for the reader, ignoring any caching involved.;FD loadDirect(LeafReaderContext context) throws Exception_;loads,directly,the,atomic,field,data,for,the,reader,ignoring,any,caching,involved;fd,load,direct,leaf,reader,context,context,throws,exception
IndexFieldData -> FD loadDirect(LeafReaderContext context) throws Exception_;1540583181;Loads directly the atomic field data for the reader, ignoring any caching involved.;FD loadDirect(LeafReaderContext context) throws Exception_;loads,directly,the,atomic,field,data,for,the,reader,ignoring,any,caching,involved;fd,load,direct,leaf,reader,context,context,throws,exception
IndexFieldData -> SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;1524684173;Returns the {@link SortField} to used for sorting.;SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;returns,the,link,sort,field,to,used,for,sorting;sort,field,sort,field,nullable,object,missing,value,multi,value,mode,sort,mode,nested,nested,boolean,reverse
IndexFieldData -> SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;1528762805;Returns the {@link SortField} to used for sorting.;SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;returns,the,link,sort,field,to,used,for,sorting;sort,field,sort,field,nullable,object,missing,value,multi,value,mode,sort,mode,nested,nested,boolean,reverse
IndexFieldData -> SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;1536314350;Returns the {@link SortField} to used for sorting.;SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;returns,the,link,sort,field,to,used,for,sorting;sort,field,sort,field,nullable,object,missing,value,multi,value,mode,sort,mode,nested,nested,boolean,reverse
IndexFieldData -> SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;1539615817;Returns the {@link SortField} to used for sorting.;SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;returns,the,link,sort,field,to,used,for,sorting;sort,field,sort,field,nullable,object,missing,value,multi,value,mode,sort,mode,nested,nested,boolean,reverse
IndexFieldData -> SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;1540583181;Returns the {@link SortField} to used for sorting.;SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, Nested nested, boolean reverse)_;returns,the,link,sort,field,to,used,for,sorting;sort,field,sort,field,nullable,object,missing,value,multi,value,mode,sort,mode,nested,nested,boolean,reverse
IndexFieldData -> FD load(LeafReaderContext context)_;1524684173;Loads the atomic field data for the reader, possibly cached.;FD load(LeafReaderContext context)_;loads,the,atomic,field,data,for,the,reader,possibly,cached;fd,load,leaf,reader,context,context
IndexFieldData -> FD load(LeafReaderContext context)_;1528762805;Loads the atomic field data for the reader, possibly cached.;FD load(LeafReaderContext context)_;loads,the,atomic,field,data,for,the,reader,possibly,cached;fd,load,leaf,reader,context,context
IndexFieldData -> FD load(LeafReaderContext context)_;1536314350;Loads the atomic field data for the reader, possibly cached.;FD load(LeafReaderContext context)_;loads,the,atomic,field,data,for,the,reader,possibly,cached;fd,load,leaf,reader,context,context
IndexFieldData -> FD load(LeafReaderContext context)_;1539615817;Loads the atomic field data for the reader, possibly cached.;FD load(LeafReaderContext context)_;loads,the,atomic,field,data,for,the,reader,possibly,cached;fd,load,leaf,reader,context,context
IndexFieldData -> FD load(LeafReaderContext context)_;1540583181;Loads the atomic field data for the reader, possibly cached.;FD load(LeafReaderContext context)_;loads,the,atomic,field,data,for,the,reader,possibly,cached;fd,load,leaf,reader,context,context
IndexFieldData -> XFieldComparatorSource -> public final Object missingObject(Object missingValue, boolean reversed);1524684173;Return the missing object value according to the reduced type of the comparator.;public final Object missingObject(Object missingValue, boolean reversed) {_            if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {_                final boolean min = sortMissingFirst(missingValue) ^ reversed__                switch (reducedType()) {_                case INT:_                    return min ? Integer.MIN_VALUE : Integer.MAX_VALUE__                case LONG:_                    return min ? Long.MIN_VALUE : Long.MAX_VALUE__                case FLOAT:_                    return min ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY__                case DOUBLE:_                    return min ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY__                case STRING:_                case STRING_VAL:_                    return null__                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            } else {_                switch (reducedType()) {_                case INT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).intValue()__                    } else {_                        return Integer.parseInt(missingValue.toString())__                    }_                case LONG:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).longValue()__                    } else {_                        return Long.parseLong(missingValue.toString())__                    }_                case FLOAT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).floatValue()__                    } else {_                        return Float.parseFloat(missingValue.toString())__                    }_                case DOUBLE:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).doubleValue()__                    } else {_                        return Double.parseDouble(missingValue.toString())__                    }_                case STRING:_                case STRING_VAL:_                    if (missingValue instanceof BytesRef) {_                        return (BytesRef) missingValue__                    } else if (missingValue instanceof byte[]) {_                        return new BytesRef((byte[]) missingValue)__                    } else {_                        return new BytesRef(missingValue.toString())__                    }_                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            }_        };return,the,missing,object,value,according,to,the,reduced,type,of,the,comparator;public,final,object,missing,object,object,missing,value,boolean,reversed,if,sort,missing,first,missing,value,sort,missing,last,missing,value,final,boolean,min,sort,missing,first,missing,value,reversed,switch,reduced,type,case,int,return,min,integer,integer,case,long,return,min,long,long,case,float,return,min,float,float,case,double,return,min,double,double,case,string,case,return,null,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type,else,switch,reduced,type,case,int,if,missing,value,instanceof,number,return,number,missing,value,int,value,else,return,integer,parse,int,missing,value,to,string,case,long,if,missing,value,instanceof,number,return,number,missing,value,long,value,else,return,long,parse,long,missing,value,to,string,case,float,if,missing,value,instanceof,number,return,number,missing,value,float,value,else,return,float,parse,float,missing,value,to,string,case,double,if,missing,value,instanceof,number,return,number,missing,value,double,value,else,return,double,parse,double,missing,value,to,string,case,string,case,if,missing,value,instanceof,bytes,ref,return,bytes,ref,missing,value,else,if,missing,value,instanceof,byte,return,new,bytes,ref,byte,missing,value,else,return,new,bytes,ref,missing,value,to,string,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type
IndexFieldData -> XFieldComparatorSource -> public final Object missingObject(Object missingValue, boolean reversed);1528762805;Return the missing object value according to the reduced type of the comparator.;public final Object missingObject(Object missingValue, boolean reversed) {_            if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {_                final boolean min = sortMissingFirst(missingValue) ^ reversed__                switch (reducedType()) {_                case INT:_                    return min ? Integer.MIN_VALUE : Integer.MAX_VALUE__                case LONG:_                    return min ? Long.MIN_VALUE : Long.MAX_VALUE__                case FLOAT:_                    return min ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY__                case DOUBLE:_                    return min ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY__                case STRING:_                case STRING_VAL:_                    return null__                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            } else {_                switch (reducedType()) {_                case INT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).intValue()__                    } else {_                        return Integer.parseInt(missingValue.toString())__                    }_                case LONG:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).longValue()__                    } else {_                        return Long.parseLong(missingValue.toString())__                    }_                case FLOAT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).floatValue()__                    } else {_                        return Float.parseFloat(missingValue.toString())__                    }_                case DOUBLE:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).doubleValue()__                    } else {_                        return Double.parseDouble(missingValue.toString())__                    }_                case STRING:_                case STRING_VAL:_                    if (missingValue instanceof BytesRef) {_                        return (BytesRef) missingValue__                    } else if (missingValue instanceof byte[]) {_                        return new BytesRef((byte[]) missingValue)__                    } else {_                        return new BytesRef(missingValue.toString())__                    }_                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            }_        };return,the,missing,object,value,according,to,the,reduced,type,of,the,comparator;public,final,object,missing,object,object,missing,value,boolean,reversed,if,sort,missing,first,missing,value,sort,missing,last,missing,value,final,boolean,min,sort,missing,first,missing,value,reversed,switch,reduced,type,case,int,return,min,integer,integer,case,long,return,min,long,long,case,float,return,min,float,float,case,double,return,min,double,double,case,string,case,return,null,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type,else,switch,reduced,type,case,int,if,missing,value,instanceof,number,return,number,missing,value,int,value,else,return,integer,parse,int,missing,value,to,string,case,long,if,missing,value,instanceof,number,return,number,missing,value,long,value,else,return,long,parse,long,missing,value,to,string,case,float,if,missing,value,instanceof,number,return,number,missing,value,float,value,else,return,float,parse,float,missing,value,to,string,case,double,if,missing,value,instanceof,number,return,number,missing,value,double,value,else,return,double,parse,double,missing,value,to,string,case,string,case,if,missing,value,instanceof,bytes,ref,return,bytes,ref,missing,value,else,if,missing,value,instanceof,byte,return,new,bytes,ref,byte,missing,value,else,return,new,bytes,ref,missing,value,to,string,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type
IndexFieldData -> XFieldComparatorSource -> public final Object missingObject(Object missingValue, boolean reversed);1536314350;Return the missing object value according to the reduced type of the comparator.;public final Object missingObject(Object missingValue, boolean reversed) {_            if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {_                final boolean min = sortMissingFirst(missingValue) ^ reversed__                switch (reducedType()) {_                case INT:_                    return min ? Integer.MIN_VALUE : Integer.MAX_VALUE__                case LONG:_                    return min ? Long.MIN_VALUE : Long.MAX_VALUE__                case FLOAT:_                    return min ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY__                case DOUBLE:_                    return min ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY__                case STRING:_                case STRING_VAL:_                    return null__                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            } else {_                switch (reducedType()) {_                case INT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).intValue()__                    } else {_                        return Integer.parseInt(missingValue.toString())__                    }_                case LONG:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).longValue()__                    } else {_                        return Long.parseLong(missingValue.toString())__                    }_                case FLOAT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).floatValue()__                    } else {_                        return Float.parseFloat(missingValue.toString())__                    }_                case DOUBLE:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).doubleValue()__                    } else {_                        return Double.parseDouble(missingValue.toString())__                    }_                case STRING:_                case STRING_VAL:_                    if (missingValue instanceof BytesRef) {_                        return (BytesRef) missingValue__                    } else if (missingValue instanceof byte[]) {_                        return new BytesRef((byte[]) missingValue)__                    } else {_                        return new BytesRef(missingValue.toString())__                    }_                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            }_        };return,the,missing,object,value,according,to,the,reduced,type,of,the,comparator;public,final,object,missing,object,object,missing,value,boolean,reversed,if,sort,missing,first,missing,value,sort,missing,last,missing,value,final,boolean,min,sort,missing,first,missing,value,reversed,switch,reduced,type,case,int,return,min,integer,integer,case,long,return,min,long,long,case,float,return,min,float,float,case,double,return,min,double,double,case,string,case,return,null,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type,else,switch,reduced,type,case,int,if,missing,value,instanceof,number,return,number,missing,value,int,value,else,return,integer,parse,int,missing,value,to,string,case,long,if,missing,value,instanceof,number,return,number,missing,value,long,value,else,return,long,parse,long,missing,value,to,string,case,float,if,missing,value,instanceof,number,return,number,missing,value,float,value,else,return,float,parse,float,missing,value,to,string,case,double,if,missing,value,instanceof,number,return,number,missing,value,double,value,else,return,double,parse,double,missing,value,to,string,case,string,case,if,missing,value,instanceof,bytes,ref,return,bytes,ref,missing,value,else,if,missing,value,instanceof,byte,return,new,bytes,ref,byte,missing,value,else,return,new,bytes,ref,missing,value,to,string,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type
IndexFieldData -> XFieldComparatorSource -> public final Object missingObject(Object missingValue, boolean reversed);1539615817;Return the missing object value according to the reduced type of the comparator.;public final Object missingObject(Object missingValue, boolean reversed) {_            if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {_                final boolean min = sortMissingFirst(missingValue) ^ reversed__                switch (reducedType()) {_                case INT:_                    return min ? Integer.MIN_VALUE : Integer.MAX_VALUE__                case LONG:_                    return min ? Long.MIN_VALUE : Long.MAX_VALUE__                case FLOAT:_                    return min ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY__                case DOUBLE:_                    return min ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY__                case STRING:_                case STRING_VAL:_                    return null__                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            } else {_                switch (reducedType()) {_                case INT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).intValue()__                    } else {_                        return Integer.parseInt(missingValue.toString())__                    }_                case LONG:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).longValue()__                    } else {_                        return Long.parseLong(missingValue.toString())__                    }_                case FLOAT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).floatValue()__                    } else {_                        return Float.parseFloat(missingValue.toString())__                    }_                case DOUBLE:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).doubleValue()__                    } else {_                        return Double.parseDouble(missingValue.toString())__                    }_                case STRING:_                case STRING_VAL:_                    if (missingValue instanceof BytesRef) {_                        return (BytesRef) missingValue__                    } else if (missingValue instanceof byte[]) {_                        return new BytesRef((byte[]) missingValue)__                    } else {_                        return new BytesRef(missingValue.toString())__                    }_                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            }_        };return,the,missing,object,value,according,to,the,reduced,type,of,the,comparator;public,final,object,missing,object,object,missing,value,boolean,reversed,if,sort,missing,first,missing,value,sort,missing,last,missing,value,final,boolean,min,sort,missing,first,missing,value,reversed,switch,reduced,type,case,int,return,min,integer,integer,case,long,return,min,long,long,case,float,return,min,float,float,case,double,return,min,double,double,case,string,case,return,null,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type,else,switch,reduced,type,case,int,if,missing,value,instanceof,number,return,number,missing,value,int,value,else,return,integer,parse,int,missing,value,to,string,case,long,if,missing,value,instanceof,number,return,number,missing,value,long,value,else,return,long,parse,long,missing,value,to,string,case,float,if,missing,value,instanceof,number,return,number,missing,value,float,value,else,return,float,parse,float,missing,value,to,string,case,double,if,missing,value,instanceof,number,return,number,missing,value,double,value,else,return,double,parse,double,missing,value,to,string,case,string,case,if,missing,value,instanceof,bytes,ref,return,bytes,ref,missing,value,else,if,missing,value,instanceof,byte,return,new,bytes,ref,byte,missing,value,else,return,new,bytes,ref,missing,value,to,string,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type
IndexFieldData -> XFieldComparatorSource -> public final Object missingObject(Object missingValue, boolean reversed);1540583181;Return the missing object value according to the reduced type of the comparator.;public final Object missingObject(Object missingValue, boolean reversed) {_            if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {_                final boolean min = sortMissingFirst(missingValue) ^ reversed__                switch (reducedType()) {_                case INT:_                    return min ? Integer.MIN_VALUE : Integer.MAX_VALUE__                case LONG:_                    return min ? Long.MIN_VALUE : Long.MAX_VALUE__                case FLOAT:_                    return min ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY__                case DOUBLE:_                    return min ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY__                case STRING:_                case STRING_VAL:_                    return null__                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            } else {_                switch (reducedType()) {_                case INT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).intValue()__                    } else {_                        return Integer.parseInt(missingValue.toString())__                    }_                case LONG:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).longValue()__                    } else {_                        return Long.parseLong(missingValue.toString())__                    }_                case FLOAT:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).floatValue()__                    } else {_                        return Float.parseFloat(missingValue.toString())__                    }_                case DOUBLE:_                    if (missingValue instanceof Number) {_                        return ((Number) missingValue).doubleValue()__                    } else {_                        return Double.parseDouble(missingValue.toString())__                    }_                case STRING:_                case STRING_VAL:_                    if (missingValue instanceof BytesRef) {_                        return (BytesRef) missingValue__                    } else if (missingValue instanceof byte[]) {_                        return new BytesRef((byte[]) missingValue)__                    } else {_                        return new BytesRef(missingValue.toString())__                    }_                default:_                    throw new UnsupportedOperationException("Unsupported reduced type: " + reducedType())__                }_            }_        };return,the,missing,object,value,according,to,the,reduced,type,of,the,comparator;public,final,object,missing,object,object,missing,value,boolean,reversed,if,sort,missing,first,missing,value,sort,missing,last,missing,value,final,boolean,min,sort,missing,first,missing,value,reversed,switch,reduced,type,case,int,return,min,integer,integer,case,long,return,min,long,long,case,float,return,min,float,float,case,double,return,min,double,double,case,string,case,return,null,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type,else,switch,reduced,type,case,int,if,missing,value,instanceof,number,return,number,missing,value,int,value,else,return,integer,parse,int,missing,value,to,string,case,long,if,missing,value,instanceof,number,return,number,missing,value,long,value,else,return,long,parse,long,missing,value,to,string,case,float,if,missing,value,instanceof,number,return,number,missing,value,float,value,else,return,float,parse,float,missing,value,to,string,case,double,if,missing,value,instanceof,number,return,number,missing,value,double,value,else,return,double,parse,double,missing,value,to,string,case,string,case,if,missing,value,instanceof,bytes,ref,return,bytes,ref,missing,value,else,if,missing,value,instanceof,byte,return,new,bytes,ref,byte,missing,value,else,return,new,bytes,ref,missing,value,to,string,default,throw,new,unsupported,operation,exception,unsupported,reduced,type,reduced,type
IndexFieldData -> XFieldComparatorSource -> Nested -> public BitSet rootDocs(LeafReaderContext ctx) throws IOException;1524684173;Get a {@link BitDocIdSet} that matches the root documents.;public BitSet rootDocs(LeafReaderContext ctx) throws IOException {_                return rootFilter.getBitSet(ctx)__            };get,a,link,bit,doc,id,set,that,matches,the,root,documents;public,bit,set,root,docs,leaf,reader,context,ctx,throws,ioexception,return,root,filter,get,bit,set,ctx
IndexFieldData -> XFieldComparatorSource -> Nested -> public BitSet rootDocs(LeafReaderContext ctx) throws IOException;1528762805;Get a {@link BitDocIdSet} that matches the root documents.;public BitSet rootDocs(LeafReaderContext ctx) throws IOException {_                return rootFilter.getBitSet(ctx)__            };get,a,link,bit,doc,id,set,that,matches,the,root,documents;public,bit,set,root,docs,leaf,reader,context,ctx,throws,ioexception,return,root,filter,get,bit,set,ctx
IndexFieldData -> XFieldComparatorSource -> Nested -> public BitSet rootDocs(LeafReaderContext ctx) throws IOException;1536314350;Get a {@link BitDocIdSet} that matches the root documents.;public BitSet rootDocs(LeafReaderContext ctx) throws IOException {_                return rootFilter.getBitSet(ctx)__            };get,a,link,bit,doc,id,set,that,matches,the,root,documents;public,bit,set,root,docs,leaf,reader,context,ctx,throws,ioexception,return,root,filter,get,bit,set,ctx
IndexFieldData -> XFieldComparatorSource -> Nested -> public BitSet rootDocs(LeafReaderContext ctx) throws IOException;1539615817;Get a {@link BitDocIdSet} that matches the root documents.;public BitSet rootDocs(LeafReaderContext ctx) throws IOException {_                return rootFilter.getBitSet(ctx)__            };get,a,link,bit,doc,id,set,that,matches,the,root,documents;public,bit,set,root,docs,leaf,reader,context,ctx,throws,ioexception,return,root,filter,get,bit,set,ctx
IndexFieldData -> XFieldComparatorSource -> Nested -> public BitSet rootDocs(LeafReaderContext ctx) throws IOException;1540583181;Get a {@link BitDocIdSet} that matches the root documents.;public BitSet rootDocs(LeafReaderContext ctx) throws IOException {_                return rootFilter.getBitSet(ctx)__            };get,a,link,bit,doc,id,set,that,matches,the,root,documents;public,bit,set,root,docs,leaf,reader,context,ctx,throws,ioexception,return,root,filter,get,bit,set,ctx
IndexFieldData -> String getFieldName()_;1524684173;The field name.;String getFieldName()_;the,field,name;string,get,field,name
IndexFieldData -> String getFieldName()_;1528762805;The field name.;String getFieldName()_;the,field,name;string,get,field,name
IndexFieldData -> String getFieldName()_;1536314350;The field name.;String getFieldName()_;the,field,name;string,get,field,name
IndexFieldData -> String getFieldName()_;1539615817;The field name.;String getFieldName()_;the,field,name;string,get,field,name
IndexFieldData -> String getFieldName()_;1540583181;The field name.;String getFieldName()_;the,field,name;string,get,field,name
IndexFieldData -> XFieldComparatorSource -> public Object missingValue(boolean reversed);1524684173;Return a missing value that is understandable by {@link SortField#setMissingValue(Object)}._Most implementations return null because they already replace the value at the fielddata level._However this can't work in case of strings since there is no such thing as a string which_compares greater than any other string, so in that case we need to return_{@link SortField#STRING_FIRST} or {@link SortField#STRING_LAST} so that the coordinating node_knows how to deal with null values.;public Object missingValue(boolean reversed) {_            return null__        };return,a,missing,value,that,is,understandable,by,link,sort,field,set,missing,value,object,most,implementations,return,null,because,they,already,replace,the,value,at,the,fielddata,level,however,this,can,t,work,in,case,of,strings,since,there,is,no,such,thing,as,a,string,which,compares,greater,than,any,other,string,so,in,that,case,we,need,to,return,link,sort,field,or,link,sort,field,so,that,the,coordinating,node,knows,how,to,deal,with,null,values;public,object,missing,value,boolean,reversed,return,null
IndexFieldData -> XFieldComparatorSource -> public Object missingValue(boolean reversed);1528762805;Return a missing value that is understandable by {@link SortField#setMissingValue(Object)}._Most implementations return null because they already replace the value at the fielddata level._However this can't work in case of strings since there is no such thing as a string which_compares greater than any other string, so in that case we need to return_{@link SortField#STRING_FIRST} or {@link SortField#STRING_LAST} so that the coordinating node_knows how to deal with null values.;public Object missingValue(boolean reversed) {_            return null__        };return,a,missing,value,that,is,understandable,by,link,sort,field,set,missing,value,object,most,implementations,return,null,because,they,already,replace,the,value,at,the,fielddata,level,however,this,can,t,work,in,case,of,strings,since,there,is,no,such,thing,as,a,string,which,compares,greater,than,any,other,string,so,in,that,case,we,need,to,return,link,sort,field,or,link,sort,field,so,that,the,coordinating,node,knows,how,to,deal,with,null,values;public,object,missing,value,boolean,reversed,return,null
IndexFieldData -> XFieldComparatorSource -> public Object missingValue(boolean reversed);1536314350;Return a missing value that is understandable by {@link SortField#setMissingValue(Object)}._Most implementations return null because they already replace the value at the fielddata level._However this can't work in case of strings since there is no such thing as a string which_compares greater than any other string, so in that case we need to return_{@link SortField#STRING_FIRST} or {@link SortField#STRING_LAST} so that the coordinating node_knows how to deal with null values.;public Object missingValue(boolean reversed) {_            return null__        };return,a,missing,value,that,is,understandable,by,link,sort,field,set,missing,value,object,most,implementations,return,null,because,they,already,replace,the,value,at,the,fielddata,level,however,this,can,t,work,in,case,of,strings,since,there,is,no,such,thing,as,a,string,which,compares,greater,than,any,other,string,so,in,that,case,we,need,to,return,link,sort,field,or,link,sort,field,so,that,the,coordinating,node,knows,how,to,deal,with,null,values;public,object,missing,value,boolean,reversed,return,null
IndexFieldData -> XFieldComparatorSource -> public Object missingValue(boolean reversed);1539615817;Return a missing value that is understandable by {@link SortField#setMissingValue(Object)}._Most implementations return null because they already replace the value at the fielddata level._However this can't work in case of strings since there is no such thing as a string which_compares greater than any other string, so in that case we need to return_{@link SortField#STRING_FIRST} or {@link SortField#STRING_LAST} so that the coordinating node_knows how to deal with null values.;public Object missingValue(boolean reversed) {_            return null__        };return,a,missing,value,that,is,understandable,by,link,sort,field,set,missing,value,object,most,implementations,return,null,because,they,already,replace,the,value,at,the,fielddata,level,however,this,can,t,work,in,case,of,strings,since,there,is,no,such,thing,as,a,string,which,compares,greater,than,any,other,string,so,in,that,case,we,need,to,return,link,sort,field,or,link,sort,field,so,that,the,coordinating,node,knows,how,to,deal,with,null,values;public,object,missing,value,boolean,reversed,return,null
IndexFieldData -> XFieldComparatorSource -> public Object missingValue(boolean reversed);1540583181;Return a missing value that is understandable by {@link SortField#setMissingValue(Object)}._Most implementations return null because they already replace the value at the fielddata level._However this can't work in case of strings since there is no such thing as a string which_compares greater than any other string, so in that case we need to return_{@link SortField#STRING_FIRST} or {@link SortField#STRING_LAST} so that the coordinating node_knows how to deal with null values.;public Object missingValue(boolean reversed) {_            return null__        };return,a,missing,value,that,is,understandable,by,link,sort,field,set,missing,value,object,most,implementations,return,null,because,they,already,replace,the,value,at,the,fielddata,level,however,this,can,t,work,in,case,of,strings,since,there,is,no,such,thing,as,a,string,which,compares,greater,than,any,other,string,so,in,that,case,we,need,to,return,link,sort,field,or,link,sort,field,so,that,the,coordinating,node,knows,how,to,deal,with,null,values;public,object,missing,value,boolean,reversed,return,null
