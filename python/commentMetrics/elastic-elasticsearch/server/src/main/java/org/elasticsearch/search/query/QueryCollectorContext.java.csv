commented;modifiers;parameterAmount;loc;comment;code
true;abstract;1;1;/**  * Creates a collector that delegates documents to the provided <code>in</code> collector.  * @param in The delegate collector  */ ;/**  * Creates a collector that delegates documents to the provided <code>in</code> collector.  * @param in The delegate collector  */ abstract Collector create(Collector in) throws IOException.
true;protected;1;4;/**  * Wraps this collector with a profiler  */ ;/**  * Wraps this collector with a profiler  */ protected InternalProfileCollector createWithProfiler(InternalProfileCollector in) throws IOException {     final Collector collector = create(in).     return new InternalProfileCollector(collector, profilerName, in != null ? Collections.singletonList(in) : Collections.emptyList()). }
true;;1;1;/**  * Post-process <code>result</code> after search execution.  *  * @param result The query search result to populate  */ ;/**  * Post-process <code>result</code> after search execution.  *  * @param result The query search result to populate  */ void postProcess(QuerySearchResult result) throws IOException { }
true;static;1;7;/**  * Creates the collector tree from the provided <code>collectors</code>  * @param collectors Ordered list of collector context  */ ;/**  * Creates the collector tree from the provided <code>collectors</code>  * @param collectors Ordered list of collector context  */ static Collector createQueryCollector(List<QueryCollectorContext> collectors) throws IOException {     Collector collector = null.     for (QueryCollectorContext ctx : collectors) {         collector = ctx.create(collector).     }     return collector. }
true;static;1;7;/**  * Creates the collector tree from the provided <code>collectors</code> and wraps each collector with a profiler  * @param collectors Ordered list of collector context  */ ;/**  * Creates the collector tree from the provided <code>collectors</code> and wraps each collector with a profiler  * @param collectors Ordered list of collector context  */ static InternalProfileCollector createQueryCollectorWithProfiler(List<QueryCollectorContext> collectors) throws IOException {     InternalProfileCollector collector = null.     for (QueryCollectorContext ctx : collectors) {         collector = ctx.createWithProfiler(collector).     }     return collector. }
false;;1;4;;@Override Collector create(Collector in) {     return new MinimumScoreCollector(in, minScore). }
true;static;1;8;/**  * Filters documents with a query score greater than <code>minScore</code>  * @param minScore The minimum score filter  */ ;/**  * Filters documents with a query score greater than <code>minScore</code>  * @param minScore The minimum score filter  */ static QueryCollectorContext createMinScoreCollectorContext(float minScore) {     return new QueryCollectorContext(REASON_SEARCH_MIN_SCORE) {          @Override         Collector create(Collector in) {             return new MinimumScoreCollector(in, minScore).         }     }. }
false;;1;5;;@Override Collector create(Collector in) throws IOException {     final Weight filterWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1f).     return new FilteredCollector(in, filterWeight). }
true;static;2;9;/**  * Filters documents based on the provided <code>query</code>  */ ;/**  * Filters documents based on the provided <code>query</code>  */ static QueryCollectorContext createFilteredCollectorContext(IndexSearcher searcher, Query query) {     return new QueryCollectorContext(REASON_SEARCH_POST_FILTER) {          @Override         Collector create(Collector in) throws IOException {             final Weight filterWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1f).             return new FilteredCollector(in, filterWeight).         }     }. }
false;;1;7;;@Override Collector create(Collector in) throws IOException {     List<Collector> subCollectors = new ArrayList<>().     subCollectors.add(in).     subCollectors.addAll(subs).     return MultiCollector.wrap(subCollectors). }
false;protected;1;13;;@Override protected InternalProfileCollector createWithProfiler(InternalProfileCollector in) throws IOException {     final List<InternalProfileCollector> subCollectors = new ArrayList<>().     subCollectors.add(in).     if (subs.stream().anyMatch((col) -> col instanceof InternalProfileCollector == false)) {         throw new IllegalArgumentException("non-profiling collector").     }     for (Collector collector : subs) {         subCollectors.add((InternalProfileCollector) collector).     }     final Collector collector = MultiCollector.wrap(subCollectors).     return new InternalProfileCollector(collector, REASON_SEARCH_MULTI, subCollectors). }
true;static;1;25;/**  * Creates a multi collector from the provided <code>subs</code>  */ ;/**  * Creates a multi collector from the provided <code>subs</code>  */ static QueryCollectorContext createMultiCollectorContext(Collection<Collector> subs) {     return new QueryCollectorContext(REASON_SEARCH_MULTI) {          @Override         Collector create(Collector in) throws IOException {             List<Collector> subCollectors = new ArrayList<>().             subCollectors.add(in).             subCollectors.addAll(subs).             return MultiCollector.wrap(subCollectors).         }          @Override         protected InternalProfileCollector createWithProfiler(InternalProfileCollector in) throws IOException {             final List<InternalProfileCollector> subCollectors = new ArrayList<>().             subCollectors.add(in).             if (subs.stream().anyMatch((col) -> col instanceof InternalProfileCollector == false)) {                 throw new IllegalArgumentException("non-profiling collector").             }             for (Collector collector : subs) {                 subCollectors.add((InternalProfileCollector) collector).             }             final Collector collector = MultiCollector.wrap(subCollectors).             return new InternalProfileCollector(collector, REASON_SEARCH_MULTI, subCollectors).         }     }. }
false;;1;4;;@Override Collector create(Collector in) throws IOException {     return new CancellableCollector(cancelled, in). }
true;static;1;8;/**  * Creates a collector that throws {@link TaskCancelledException} if the search is cancelled  */ ;/**  * Creates a collector that throws {@link TaskCancelledException} if the search is cancelled  */ static QueryCollectorContext createCancellableCollectorContext(BooleanSupplier cancelled) {     return new QueryCollectorContext(REASON_SEARCH_CANCELLED) {          @Override         Collector create(Collector in) throws IOException {             return new CancellableCollector(cancelled, in).         }     }. }
false;;1;6;;@Override Collector create(Collector in) throws IOException {     assert collector == null.     this.collector = new EarlyTerminatingCollector(in, numHits, true).     return collector. }
true;static;1;12;/**  * Creates collector limiting the collection to the first <code>numHits</code> documents  */ ;/**  * Creates collector limiting the collection to the first <code>numHits</code> documents  */ static QueryCollectorContext createEarlyTerminationCollectorContext(int numHits) {     return new QueryCollectorContext(REASON_SEARCH_TERMINATE_AFTER_COUNT) {          private EarlyTerminatingCollector collector.          @Override         Collector create(Collector in) throws IOException {             assert collector == null.             this.collector = new EarlyTerminatingCollector(in, numHits, true).             return collector.         }     }. }
