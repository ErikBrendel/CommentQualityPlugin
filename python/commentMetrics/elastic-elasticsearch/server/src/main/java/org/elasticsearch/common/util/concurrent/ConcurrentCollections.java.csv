commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.  */ ;/**  * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.  */ public static <K, V> ConcurrentMap<K, V> newConcurrentMapWithAggressiveConcurrency() {     return newConcurrentMapWithAggressiveConcurrency(16). }
true;public,static;1;3;/**  * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.  */ ;/**  * Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.  */ public static <K, V> ConcurrentMap<K, V> newConcurrentMapWithAggressiveConcurrency(int initalCapacity) {     return new ConcurrentHashMap<>(initalCapacity, 0.75f, aggressiveConcurrencyLevel). }
false;public,static;0;3;;public static <K, V> ConcurrentMap<K, V> newConcurrentMap() {     return new ConcurrentHashMap<>(). }
true;public,static;0;3;/**  * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps.  */ ;/**  * Creates a new CHM with an aggressive concurrency level, aimed at highly updateable long living maps.  */ public static <V> ConcurrentMapLong<V> newConcurrentMapLongWithAggressiveConcurrency() {     return new ConcurrentHashMapLong<>(ConcurrentCollections.<Long, V>newConcurrentMapWithAggressiveConcurrency()). }
false;public,static;0;3;;public static <V> ConcurrentMapLong<V> newConcurrentMapLong() {     return new ConcurrentHashMapLong<>(ConcurrentCollections.<Long, V>newConcurrentMap()). }
false;public,static;0;3;;public static <V> Set<V> newConcurrentSet() {     return Collections.newSetFromMap(ConcurrentCollections.<V, Boolean>newConcurrentMap()). }
false;public,static;0;3;;public static <T> Queue<T> newQueue() {     return new ConcurrentLinkedQueue<>(). }
false;public,static;0;3;;public static <T> Deque<T> newDeque() {     return new ConcurrentLinkedDeque<>(). }
false;public,static;0;3;;public static <T> BlockingQueue<T> newBlockingQueue() {     return new LinkedTransferQueue<>(). }
