commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;8;/**  * Parse a {@link FieldAndFormat} from some {@link XContent}.  */ ;/**  * Parse a {@link FieldAndFormat} from some {@link XContent}.  */ public static FieldAndFormat fromXContent(XContentParser parser) throws IOException {     Token token = parser.currentToken().     if (token.isValue()) {         return new FieldAndFormat(parser.text(), null).     } else {         return PARSER.apply(parser, null).     } }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(field).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalString(format).     } }
false;public;0;6;;@Override public int hashCode() {     int h = field.hashCode().     h = 31 * h + Objects.hashCode(format).     return h. }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (obj == null || getClass() != obj.getClass()) {         return false.     }     FieldAndFormat other = (FieldAndFormat) obj.     return field.equals(other.field) && Objects.equals(format, other.format). }
true;public;0;3;/**  * Returns the required docvalue fields  */ ;/**  * Returns the required docvalue fields  */ public List<FieldAndFormat> fields() {     return this.fields. }
