# id;timestamp;commentText;codeText;commentWords;codeWords
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1524684173;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1531179852;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1533862840;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1538067637;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1541092382;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1542402632;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1545056533;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1547216635;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1548771485;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1549396415;Prepare the request for upsert, executing the upsert script if present, and returning a {@code Result} containing a new_{@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpsert(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_            if (request.upsertRequest() == null && !request.docAsUpsert()) {_                throw new DocumentMissingException(shardId, request.type(), request.id())__            }_            IndexRequest indexRequest = request.docAsUpsert() ? request.doc() : request.upsertRequest()__            if (request.scriptedUpsert() && request.script() != null) {_                _                IndexRequest upsert = request.upsertRequest()__                Tuple<UpdateOpType, Map<String, Object>> upsertResult = executeScriptedUpsert(upsert, request.script, nowInMillis)__                switch (upsertResult.v1()) {_                    case CREATE:_                        _                        indexRequest.source(upsertResult.v2())__                        break__                    case NONE:_                        UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                                getResult.getVersion(), DocWriteResponse.Result.NOOP)__                        update.setGetResult(getResult)__                        return new Result(update, DocWriteResponse.Result.NOOP, upsertResult.v2(), XContentType.JSON)__                    default:_                        _                        throw new IllegalArgumentException("unknown upsert operation, got: " + upsertResult.v1())__                }_            }__            indexRequest.index(request.index())_                    .type(request.type()).id(request.id()).setRefreshPolicy(request.getRefreshPolicy()).routing(request.routing())_                    .timeout(request.timeout()).waitForActiveShards(request.waitForActiveShards())_                    _                    .create(true)___            if (request.versionType() != VersionType.INTERNAL) {_                _                indexRequest.version(request.version()).versionType(request.versionType())__            }__            return new Result(indexRequest, DocWriteResponse.Result.CREATED, null, null)__    };prepare,the,request,for,upsert,executing,the,upsert,script,if,present,and,returning,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,upsert,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,request,upsert,request,null,request,doc,as,upsert,throw,new,document,missing,exception,shard,id,request,type,request,id,index,request,index,request,request,doc,as,upsert,request,doc,request,upsert,request,if,request,scripted,upsert,request,script,null,index,request,upsert,request,upsert,request,tuple,update,op,type,map,string,object,upsert,result,execute,scripted,upsert,upsert,request,script,now,in,millis,switch,upsert,result,v1,case,create,index,request,source,upsert,result,v2,break,case,none,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,get,result,return,new,result,update,doc,write,response,result,noop,upsert,result,v2,xcontent,type,json,default,throw,new,illegal,argument,exception,unknown,upsert,operation,got,upsert,result,v1,index,request,index,request,index,type,request,type,id,request,id,set,refresh,policy,request,get,refresh,policy,routing,request,routing,timeout,request,timeout,wait,for,active,shards,request,wait,for,active,shards,create,true,if,request,version,type,version,type,internal,index,request,version,request,version,version,type,request,version,type,return,new,result,index,request,doc,write,response,result,created,null,null
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1524684173;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1531179852;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1533862840;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1538067637;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1541092382;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1542402632;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> static long calculateUpdateVersion(UpdateRequest request, GetResult getResult);1545056533;Calculate the version to use for the update request, using either the existing version if internal versioning is used, or the get_result document's version if the version type is "FORCE".;static long calculateUpdateVersion(UpdateRequest request, GetResult getResult) {_        if (request.versionType() != VersionType.INTERNAL) {_            assert request.versionType() == VersionType.FORCE__            return request.version()_ _        } else {_            return getResult.getVersion()__        }_    };calculate,the,version,to,use,for,the,update,request,using,either,the,existing,version,if,internal,versioning,is,used,or,the,get,result,document,s,version,if,the,version,type,is,force;static,long,calculate,update,version,update,request,request,get,result,get,result,if,request,version,type,version,type,internal,assert,request,version,type,version,type,force,return,request,version,else,return,get,result,get,version
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1524684173;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1531179852;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1533862840;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1538067637;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1541092382;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1542402632;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), version, true, sourceFilteredAsBytes, Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1545056533;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), seqNo, primaryTerm, version, true, sourceFilteredAsBytes,_            Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,seq,no,long,primary,term,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,seq,no,primary,term,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1547216635;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), seqNo, primaryTerm, version, true, sourceFilteredAsBytes,_            Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,seq,no,long,primary,term,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,seq,no,primary,term,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1548771485;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), seqNo, primaryTerm, version, true, sourceFilteredAsBytes,_            Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,seq,no,long,primary,term,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,seq,no,primary,term,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,                                              final Map<String, Object> source, XContentType sourceContentType,                                              @Nullable final BytesReference sourceAsBytes);1549396415;Applies {@link UpdateRequest#fetchSource()} to the _source of the updated document to be returned in a update response.;public static GetResult extractGetResult(final UpdateRequest request, String concreteIndex, long seqNo, long primaryTerm, long version,_                                             final Map<String, Object> source, XContentType sourceContentType,_                                             @Nullable final BytesReference sourceAsBytes) {_        if (request.fetchSource() == null || request.fetchSource().fetchSource() == false) {_            return null__        }__        BytesReference sourceFilteredAsBytes = sourceAsBytes__        if (request.fetchSource().includes().length > 0 || request.fetchSource().excludes().length > 0) {_            SourceLookup sourceLookup = new SourceLookup()__            sourceLookup.setSource(source)__            Object value = sourceLookup.filter(request.fetchSource())__            try {_                final int initialCapacity = Math.min(1024, sourceAsBytes.length())__                BytesStreamOutput streamOutput = new BytesStreamOutput(initialCapacity)__                try (XContentBuilder builder = new XContentBuilder(sourceContentType.xContent(), streamOutput)) {_                    builder.value(value)__                    sourceFilteredAsBytes = BytesReference.bytes(builder)__                }_            } catch (IOException e) {_                throw new ElasticsearchException("Error filtering source", e)__            }_        }__        _        return new GetResult(concreteIndex, request.type(), request.id(), seqNo, primaryTerm, version, true, sourceFilteredAsBytes,_            Collections.emptyMap())__    };applies,link,update,request,fetch,source,to,the,of,the,updated,document,to,be,returned,in,a,update,response;public,static,get,result,extract,get,result,final,update,request,request,string,concrete,index,long,seq,no,long,primary,term,long,version,final,map,string,object,source,xcontent,type,source,content,type,nullable,final,bytes,reference,source,as,bytes,if,request,fetch,source,null,request,fetch,source,fetch,source,false,return,null,bytes,reference,source,filtered,as,bytes,source,as,bytes,if,request,fetch,source,includes,length,0,request,fetch,source,excludes,length,0,source,lookup,source,lookup,new,source,lookup,source,lookup,set,source,source,object,value,source,lookup,filter,request,fetch,source,try,final,int,initial,capacity,math,min,1024,source,as,bytes,length,bytes,stream,output,stream,output,new,bytes,stream,output,initial,capacity,try,xcontent,builder,builder,new,xcontent,builder,source,content,type,x,content,stream,output,builder,value,value,source,filtered,as,bytes,bytes,reference,bytes,builder,catch,ioexception,e,throw,new,elasticsearch,exception,error,filtering,source,e,return,new,get,result,concrete,index,request,type,request,id,seq,no,primary,term,version,true,source,filtered,as,bytes,collections,empty,map
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1524684173;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1531179852;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1533862840;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1538067637;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1541092382;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1542402632;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                                updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)___        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1545056533;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .version(updateVersion).versionType(request.versionType()).waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                    getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1547216635;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                    getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1548771485;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                    getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis);1549396415;Prepare the request for updating an existing document using a script. Executes the script and returns a {@code Result} containing_either a new {@code IndexRequest} or {@code DeleteRequest} (depending on the script's returned "op" value) to be executed on the_primary and replicas.;Result prepareUpdateScriptRequest(ShardId shardId, UpdateRequest request, GetResult getResult, LongSupplier nowInMillis) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> sourceAsMap = sourceAndContent.v2()___        Map<String, Object> ctx = new HashMap<>(16)__        ctx.put(ContextFields.OP, UpdateOpType.INDEX.toString())_ _        ctx.put(ContextFields.INDEX, getResult.getIndex())__        ctx.put(ContextFields.TYPE, getResult.getType())__        ctx.put(ContextFields.ID, getResult.getId())__        ctx.put(ContextFields.VERSION, getResult.getVersion())__        ctx.put(ContextFields.ROUTING, routing)__        ctx.put(ContextFields.SOURCE, sourceAsMap)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())___        ctx = executeScript(request.script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, request.script.getIdOrCode())___        @SuppressWarnings("unchecked")_        final Map<String, Object> updatedSourceAsMap = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        switch (operation) {_            case INDEX:_                final IndexRequest indexRequest = Requests.indexRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .source(updatedSourceAsMap, updateSourceContentType)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                        .setRefreshPolicy(request.getRefreshPolicy())__                return new Result(indexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__            case DELETE:_                DeleteRequest deleteRequest = Requests.deleteRequest(request.index())_                        .type(request.type()).id(request.id()).routing(routing)_                        .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                        .waitForActiveShards(request.waitForActiveShards())_                        .timeout(request.timeout()).setRefreshPolicy(request.getRefreshPolicy())__                return new Result(deleteRequest, DocWriteResponse.Result.DELETED, updatedSourceAsMap, updateSourceContentType)__            default:_                _                UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                        getResult.getVersion(), DocWriteResponse.Result.NOOP)__                update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                    getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__                return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,updating,an,existing,document,using,a,script,executes,the,script,and,returns,a,code,result,containing,either,a,new,code,index,request,or,code,delete,request,depending,on,the,script,s,returned,op,value,to,be,executed,on,the,primary,and,replicas;result,prepare,update,script,request,shard,id,shard,id,update,request,request,get,result,get,result,long,supplier,now,in,millis,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,source,as,map,source,and,content,v2,map,string,object,ctx,new,hash,map,16,ctx,put,context,fields,op,update,op,type,index,to,string,ctx,put,context,fields,index,get,result,get,index,ctx,put,context,fields,type,get,result,get,type,ctx,put,context,fields,id,get,result,get,id,ctx,put,context,fields,version,get,result,get,version,ctx,put,context,fields,routing,routing,ctx,put,context,fields,source,source,as,map,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,request,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,request,script,get,id,or,code,suppress,warnings,unchecked,final,map,string,object,updated,source,as,map,map,string,object,ctx,get,context,fields,source,switch,operation,case,index,final,index,request,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type,case,delete,delete,request,delete,request,requests,delete,request,request,index,type,request,type,id,request,id,routing,routing,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,delete,request,doc,write,response,result,deleted,updated,source,as,map,update,source,content,type,default,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1524684173;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        Map newSource = (Map) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,map,new,source,map,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1531179852;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1533862840;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1538067637;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1541092382;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1542402632;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1545056533;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1547216635;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1548771485;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis);1549396415;Execute a scripted upsert, where there is an existing upsert document and a script to be executed. The script is executed and a new_Tuple of operation and updated {@code _source} is returned.;Tuple<UpdateOpType, Map<String, Object>> executeScriptedUpsert(IndexRequest upsert, Script script, LongSupplier nowInMillis) {_        Map<String, Object> upsertDoc = upsert.sourceAsMap()__        Map<String, Object> ctx = new HashMap<>(3)__        _        ctx.put(ContextFields.OP, UpdateOpType.CREATE.toString())__        ctx.put(ContextFields.SOURCE, upsertDoc)__        ctx.put(ContextFields.NOW, nowInMillis.getAsLong())__        ctx = executeScript(script, ctx)___        UpdateOpType operation = UpdateOpType.lenientFromString((String) ctx.get(ContextFields.OP), logger, script.getIdOrCode())__        @SuppressWarnings("unchecked")_        Map<String, Object> newSource = (Map<String, Object>) ctx.get(ContextFields.SOURCE)___        if (operation != UpdateOpType.CREATE && operation != UpdateOpType.NONE) {_            _            logger.warn("Invalid upsert operation [{}] for script [{}], doing nothing...", operation, script.getIdOrCode())__            operation = UpdateOpType.NONE__        }__        return new Tuple<>(operation, newSource)__    };execute,a,scripted,upsert,where,there,is,an,existing,upsert,document,and,a,script,to,be,executed,the,script,is,executed,and,a,new,tuple,of,operation,and,updated,code,is,returned;tuple,update,op,type,map,string,object,execute,scripted,upsert,index,request,upsert,script,script,long,supplier,now,in,millis,map,string,object,upsert,doc,upsert,source,as,map,map,string,object,ctx,new,hash,map,3,ctx,put,context,fields,op,update,op,type,create,to,string,ctx,put,context,fields,source,upsert,doc,ctx,put,context,fields,now,now,in,millis,get,as,long,ctx,execute,script,script,ctx,update,op,type,operation,update,op,type,lenient,from,string,string,ctx,get,context,fields,op,logger,script,get,id,or,code,suppress,warnings,unchecked,map,string,object,new,source,map,string,object,ctx,get,context,fields,source,if,operation,update,op,type,create,operation,update,op,type,none,logger,warn,invalid,upsert,operation,for,script,doing,nothing,operation,script,get,id,or,code,operation,update,op,type,none,return,new,tuple,operation,new,source
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1524684173;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1531179852;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1533862840;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1538067637;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1541092382;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1542402632;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap,_                            updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1545056533;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final long updateVersion = calculateUpdateVersion(request, getResult)__        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType).version(updateVersion).versionType(request.versionType())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,long,update,version,calculate,update,version,request,get,result,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,version,update,version,version,type,request,version,type,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1547216635;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType)_                    .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1548771485;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType)_                    .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop);1549396415;Prepare the request for merging the existing document with a new one, can optionally detect a noop change. Returns a {@code Result}_containing a new {@code IndexRequest} to be executed on the primary and replicas.;Result prepareUpdateIndexRequest(ShardId shardId, UpdateRequest request, GetResult getResult, boolean detectNoop) {_        final IndexRequest currentRequest = request.doc()__        final String routing = calculateRouting(getResult, currentRequest)__        final Tuple<XContentType, Map<String, Object>> sourceAndContent = XContentHelper.convertToMap(getResult.internalSourceRef(), true)__        final XContentType updateSourceContentType = sourceAndContent.v1()__        final Map<String, Object> updatedSourceAsMap = sourceAndContent.v2()___        final boolean noop = !XContentHelper.update(updatedSourceAsMap, currentRequest.sourceAsMap(), detectNoop)___        _        _        if (detectNoop && noop) {_            UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(),_                    getResult.getVersion(), DocWriteResponse.Result.NOOP)__            update.setGetResult(extractGetResult(request, request.index(), getResult.getSeqNo(), getResult.getPrimaryTerm(),_                getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()))__            return new Result(update, DocWriteResponse.Result.NOOP, updatedSourceAsMap, updateSourceContentType)__        } else {_            final IndexRequest finalIndexRequest = Requests.indexRequest(request.index())_                    .type(request.type()).id(request.id()).routing(routing)_                    .source(updatedSourceAsMap, updateSourceContentType)_                    .setIfSeqNo(getResult.getSeqNo()).setIfPrimaryTerm(getResult.getPrimaryTerm())_                    .waitForActiveShards(request.waitForActiveShards()).timeout(request.timeout())_                    .setRefreshPolicy(request.getRefreshPolicy())__            return new Result(finalIndexRequest, DocWriteResponse.Result.UPDATED, updatedSourceAsMap, updateSourceContentType)__        }_    };prepare,the,request,for,merging,the,existing,document,with,a,new,one,can,optionally,detect,a,noop,change,returns,a,code,result,containing,a,new,code,index,request,to,be,executed,on,the,primary,and,replicas;result,prepare,update,index,request,shard,id,shard,id,update,request,request,get,result,get,result,boolean,detect,noop,final,index,request,current,request,request,doc,final,string,routing,calculate,routing,get,result,current,request,final,tuple,xcontent,type,map,string,object,source,and,content,xcontent,helper,convert,to,map,get,result,internal,source,ref,true,final,xcontent,type,update,source,content,type,source,and,content,v1,final,map,string,object,updated,source,as,map,source,and,content,v2,final,boolean,noop,xcontent,helper,update,updated,source,as,map,current,request,source,as,map,detect,noop,if,detect,noop,noop,update,response,update,new,update,response,shard,id,get,result,get,type,get,result,get,id,get,result,get,version,doc,write,response,result,noop,update,set,get,result,extract,get,result,request,request,index,get,result,get,seq,no,get,result,get,primary,term,get,result,get,version,updated,source,as,map,update,source,content,type,get,result,internal,source,ref,return,new,result,update,doc,write,response,result,noop,updated,source,as,map,update,source,content,type,else,final,index,request,final,index,request,requests,index,request,request,index,type,request,type,id,request,id,routing,routing,source,updated,source,as,map,update,source,content,type,set,if,seq,no,get,result,get,seq,no,set,if,primary,term,get,result,get,primary,term,wait,for,active,shards,request,wait,for,active,shards,timeout,request,timeout,set,refresh,policy,request,get,refresh,policy,return,new,result,final,index,request,doc,write,response,result,updated,updated,source,as,map,update,source,content,type
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1524684173;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1531179852;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1533862840;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1538067637;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1541092382;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1542402632;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1545056533;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1547216635;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1548771485;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> @Nullable     static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest);1549396415;Calculate a routing value to be used, either the included index request's routing, or retrieved document's routing when defined.;@Nullable_    static String calculateRouting(GetResult getResult, @Nullable IndexRequest updateIndexRequest) {_        if (updateIndexRequest != null && updateIndexRequest.routing() != null) {_            return updateIndexRequest.routing()__        } else if (getResult.getFields().containsKey(RoutingFieldMapper.NAME)) {_            return getResult.field(RoutingFieldMapper.NAME).getValue().toString()__        } else {_            return null__        }_    };calculate,a,routing,value,to,be,used,either,the,included,index,request,s,routing,or,retrieved,document,s,routing,when,defined;nullable,static,string,calculate,routing,get,result,get,result,nullable,index,request,update,index,request,if,update,index,request,null,update,index,request,routing,null,return,update,index,request,routing,else,if,get,result,get,fields,contains,key,routing,field,mapper,name,return,get,result,field,routing,field,mapper,name,get,value,to,string,else,return,null
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1531179852;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1533862840;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1538067637;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1541092382;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1542402632;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1545056533;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1547216635;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1548771485;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis);1549396415;Prepares an update request by converting it into an index or delete request or an update response (no action, in the event of a_noop).;protected Result prepare(ShardId shardId, UpdateRequest request, final GetResult getResult, LongSupplier nowInMillis) {_        if (getResult.isExists() == false) {_            _            return prepareUpsert(shardId, request, getResult, nowInMillis)__        } else if (getResult.internalSourceRef() == null) {_            _            throw new DocumentSourceMissingException(shardId, request.type(), request.id())__        } else if (request.script() == null && request.doc() != null) {_            _            return prepareUpdateIndexRequest(shardId, request, getResult, request.detectNoop())__        } else {_            _            return prepareUpdateScriptRequest(shardId, request, getResult, nowInMillis)__        }_    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action,in,the,event,of,a,noop;protected,result,prepare,shard,id,shard,id,update,request,request,final,get,result,get,result,long,supplier,now,in,millis,if,get,result,is,exists,false,return,prepare,upsert,shard,id,request,get,result,now,in,millis,else,if,get,result,internal,source,ref,null,throw,new,document,source,missing,exception,shard,id,request,type,request,id,else,if,request,script,null,request,doc,null,return,prepare,update,index,request,shard,id,request,get,result,request,detect,noop,else,return,prepare,update,script,request,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1524684173;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1531179852;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1533862840;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1538067637;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1541092382;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1542402632;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1545056533;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1547216635;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),_            request.versionType())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1548771485;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(_            request.type(), request.id(), request.version(), request.versionType(), request.ifSeqNo(), request.ifPrimaryTerm())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,version,request,version,type,request,if,seq,no,request,if,primary,term,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
UpdateHelper -> public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis);1549396415;Prepares an update request by converting it into an index or delete request or an update response (no action).;public Result prepare(UpdateRequest request, IndexShard indexShard, LongSupplier nowInMillis) {_        final GetResult getResult = indexShard.getService().getForUpdate(_            request.type(), request.id(), request.ifSeqNo(), request.ifPrimaryTerm())__        return prepare(indexShard.shardId(), request, getResult, nowInMillis)__    };prepares,an,update,request,by,converting,it,into,an,index,or,delete,request,or,an,update,response,no,action;public,result,prepare,update,request,request,index,shard,index,shard,long,supplier,now,in,millis,final,get,result,get,result,index,shard,get,service,get,for,update,request,type,request,id,request,if,seq,no,request,if,primary,term,return,prepare,index,shard,shard,id,request,get,result,now,in,millis
