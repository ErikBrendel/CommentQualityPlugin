# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeAggregator -> private void runDeferredCollections() throws IOException;1524684173;Replay the documents that might contain a top bucket and pass top buckets to_the {@link this#deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,this,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1527773340;Replay the documents that might contain a top bucket and pass top buckets to_the {@link this#deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,this,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1528762805;Replay the documents that might contain a top bucket and pass top buckets to_the {@link this#deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,this,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1528977744;Replay the documents that might contain a top bucket and pass top buckets to_the {@link this#deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,this,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1531179852;Replay the documents that might contain a top bucket and pass top buckets to_the {@link #deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1535965276;Replay the documents that might contain a top bucket and pass top buckets to_the {@link #deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createNormalizedWeight(query, true)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,normalized,weight,query,true,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1536314350;Replay the documents that might contain a top bucket and pass top buckets to_the {@link #deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = scoreMode().needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createWeight(context.searcher().rewrite(query), ScoreMode.COMPLETE, 1f)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,score,mode,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,weight,context,searcher,rewrite,query,score,mode,complete,1f,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private void runDeferredCollections() throws IOException;1546505495;Replay the documents that might contain a top bucket and pass top buckets to_the {@link #deferredCollectors}.;private void runDeferredCollections() throws IOException {_        final boolean needsScores = scoreMode().needsScores()__        Weight weight = null__        if (needsScores) {_            Query query = context.query()__            weight = context.searcher().createWeight(context.searcher().rewrite(query), ScoreMode.COMPLETE, 1f)__        }_        deferredCollectors.preCollection()__        for (Entry entry : entries) {_            DocIdSetIterator docIdSetIterator = entry.docIdSet.iterator()__            if (docIdSetIterator == null) {_                continue__            }_            final LeafBucketCollector subCollector = deferredCollectors.getLeafCollector(entry.context)__            final LeafBucketCollector collector = queue.getLeafCollector(entry.context, getSecondPassCollector(subCollector))__            DocIdSetIterator scorerIt = null__            if (needsScores) {_                Scorer scorer = weight.scorer(entry.context)__                if (scorer != null) {_                    scorerIt = scorer.iterator()__                    subCollector.setScorer(scorer)__                }_            }_            int docID__            while ((docID = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {_                if (needsScores) {_                    assert scorerIt != null && scorerIt.docID() < docID__                    scorerIt.advance(docID)__                    _                    assert scorerIt.docID() == docID__                }_                collector.collect(docID)__            }_        }_        deferredCollectors.postCollection()__    };replay,the,documents,that,might,contain,a,top,bucket,and,pass,top,buckets,to,the,link,deferred,collectors;private,void,run,deferred,collections,throws,ioexception,final,boolean,needs,scores,score,mode,needs,scores,weight,weight,null,if,needs,scores,query,query,context,query,weight,context,searcher,create,weight,context,searcher,rewrite,query,score,mode,complete,1f,deferred,collectors,pre,collection,for,entry,entry,entries,doc,id,set,iterator,doc,id,set,iterator,entry,doc,id,set,iterator,if,doc,id,set,iterator,null,continue,final,leaf,bucket,collector,sub,collector,deferred,collectors,get,leaf,collector,entry,context,final,leaf,bucket,collector,collector,queue,get,leaf,collector,entry,context,get,second,pass,collector,sub,collector,doc,id,set,iterator,scorer,it,null,if,needs,scores,scorer,scorer,weight,scorer,entry,context,if,scorer,null,scorer,it,scorer,iterator,sub,collector,set,scorer,scorer,int,doc,id,while,doc,id,doc,id,set,iterator,next,doc,doc,id,set,iterator,if,needs,scores,assert,scorer,it,null,scorer,it,doc,id,doc,id,scorer,it,advance,doc,id,assert,scorer,it,doc,id,doc,id,collector,collect,doc,id,deferred,collectors,post,collection
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1524684173;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1527773340;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1528762805;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1528977744;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1531179852;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1535965276;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1536314350;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder);1546505495;The first pass selects the top composite buckets from all matching documents.;private LeafBucketCollector getFirstPassCollector(RoaringDocIdSet.Builder builder) {_        return new LeafBucketCollector() {_            int lastDoc = -1___            @Override_            public void collect(int doc, long bucket) throws IOException {_                int slot = queue.addIfCompetitive()__                if (slot != -1) {_                    if (builder != null && lastDoc != doc) {_                        builder.add(doc)__                        lastDoc = doc__                    }_                }_            }_        }__    };the,first,pass,selects,the,top,composite,buckets,from,all,matching,documents;private,leaf,bucket,collector,get,first,pass,collector,roaring,doc,id,set,builder,builder,return,new,leaf,bucket,collector,int,last,doc,1,override,public,void,collect,int,doc,long,bucket,throws,ioexception,int,slot,queue,add,if,competitive,if,slot,1,if,builder,null,last,doc,doc,builder,add,doc,last,doc,doc
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1524684173;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1527773340;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1528762805;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1528977744;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1531179852;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1535965276;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1536314350;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
CompositeAggregator -> private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector);1546505495;Replay the top buckets from the matching documents.;private LeafBucketCollector getSecondPassCollector(LeafBucketCollector subCollector) {_        return new LeafBucketCollector() {_            @Override_            public void collect(int doc, long zeroBucket) throws IOException {_                assert zeroBucket == 0__                Integer slot = queue.compareCurrent()__                if (slot != null) {_                    _                    _                    subCollector.collect(doc, slot)__                }_            }_        }__    };replay,the,top,buckets,from,the,matching,documents;private,leaf,bucket,collector,get,second,pass,collector,leaf,bucket,collector,sub,collector,return,new,leaf,bucket,collector,override,public,void,collect,int,doc,long,zero,bucket,throws,ioexception,assert,zero,bucket,0,integer,slot,queue,compare,current,if,slot,null,sub,collector,collect,doc,slot
