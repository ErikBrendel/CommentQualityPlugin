commented;modifiers;parameterAmount;loc;comment;code
false;private;1;3;;private boolean hasDataForBucket(long bucketOrd) {     return bucketOrd < valueSketches.size() && valueSketches.get(bucketOrd) != null. }
false;public;1;8;;@Override public double metric(long owningBucketOrd) {     if (hasDataForBucket(owningBucketOrd)) {         return computeMedianAbsoluteDeviation(valueSketches.get(owningBucketOrd)).     } else {         return Double.NaN.     } }
false;public;0;8;;@Override public ScoreMode scoreMode() {     if (valuesSource != null && valuesSource.needsScores()) {         return ScoreMode.COMPLETE.     } else {         return ScoreMode.COMPLETE_NO_SCORES.     } }
false;public;2;19;;@Override public void collect(int doc, long bucket) throws IOException {     valueSketches = bigArrays.grow(valueSketches, bucket + 1).     TDigestState valueSketch = valueSketches.get(bucket).     if (valueSketch == null) {         valueSketch = new TDigestState(compression).         valueSketches.set(bucket, valueSketch).     }     if (values.advanceExact(doc)) {         final int valueCount = values.docValueCount().         for (int i = 0. i < valueCount. i++) {             final double value = values.nextValue().             valueSketch.add(value).         }     } }
false;protected;2;31;;@Override protected LeafBucketCollector getLeafCollector(LeafReaderContext ctx, LeafBucketCollector sub) throws IOException {     if (valuesSource == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final BigArrays bigArrays = context.bigArrays().     final SortedNumericDoubleValues values = valuesSource.doubleValues(ctx).     return new LeafBucketCollectorBase(sub, values) {          @Override         public void collect(int doc, long bucket) throws IOException {             valueSketches = bigArrays.grow(valueSketches, bucket + 1).             TDigestState valueSketch = valueSketches.get(bucket).             if (valueSketch == null) {                 valueSketch = new TDigestState(compression).                 valueSketches.set(bucket, valueSketch).             }             if (values.advanceExact(doc)) {                 final int valueCount = values.docValueCount().                 for (int i = 0. i < valueCount. i++) {                     final double value = values.nextValue().                     valueSketch.add(value).                 }             }         }     }. }
false;public;1;9;;@Override public InternalAggregation buildAggregation(long bucket) throws IOException {     if (hasDataForBucket(bucket)) {         final TDigestState valueSketch = valueSketches.get(bucket).         return new InternalMedianAbsoluteDeviation(name, pipelineAggregators(), metaData(), format, valueSketch).     } else {         return buildEmptyAggregation().     } }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalMedianAbsoluteDeviation(name, pipelineAggregators(), metaData(), format, new TDigestState(compression)). }
false;public;0;4;;@Override public void doClose() {     Releasables.close(valueSketches). }
