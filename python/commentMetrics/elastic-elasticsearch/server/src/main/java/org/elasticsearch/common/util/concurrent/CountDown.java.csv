commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * Decrements the count-down and returns <code>true</code> iff this call  * reached zero otherwise <code>false</code>  */ ;/**  * Decrements the count-down and returns <code>true</code> iff this call  * reached zero otherwise <code>false</code>  */ public boolean countDown() {     assert originalCount > 0.     for (. . ) {         final int current = countDown.get().         assert current >= 0.         if (current == 0) {             return false.         }         if (countDown.compareAndSet(current, current - 1)) {             return current == 1.         }     } }
true;public;0;5;/**  * Fast forwards the count-down to zero and returns <code>true</code> iff  * the count down reached zero with this fast forward call otherwise  * <code>false</code>  */ ;/**  * Fast forwards the count-down to zero and returns <code>true</code> iff  * the count down reached zero with this fast forward call otherwise  * <code>false</code>  */ public boolean fastForward() {     assert originalCount > 0.     assert countDown.get() >= 0.     return countDown.getAndSet(0) > 0. }
true;public;0;4;/**  * Returns <code>true</code> iff the count-down has reached zero. Otherwise <code>false</code>  */ ;/**  * Returns <code>true</code> iff the count-down has reached zero. Otherwise <code>false</code>  */ public boolean isCountedDown() {     assert countDown.get() >= 0.     return countDown.get() == 0. }
