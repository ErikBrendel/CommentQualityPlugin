# id;timestamp;commentText;codeText;commentWords;codeWords
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1536828374;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory), config.getShardId())__                if (config.getIndexSettings().isSoftDeleteEnabled()) {_                    reader = new SoftDeletesDirectoryReaderWrapper(reader, Lucene.SOFT_DELETES_FIELD)__                }_                reader = readerWrapperFunction.apply(reader)__                this.indexCommit = reader.getIndexCommit()__                this.searcherManager = new SearcherManager(reader,_                    new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService()))__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,reader,elasticsearch,directory,reader,wrap,directory,reader,open,directory,config,get,shard,id,if,config,get,index,settings,is,soft,delete,enabled,reader,new,soft,deletes,directory,reader,wrapper,reader,lucene,reader,reader,wrapper,function,apply,reader,this,index,commit,reader,get,index,commit,this,searcher,manager,new,searcher,manager,reader,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1537371806;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory), config.getShardId())__                if (config.getIndexSettings().isSoftDeleteEnabled()) {_                    reader = new SoftDeletesDirectoryReaderWrapper(reader, Lucene.SOFT_DELETES_FIELD)__                }_                reader = readerWrapperFunction.apply(reader)__                this.indexCommit = reader.getIndexCommit()__                this.searcherManager = new SearcherManager(reader,_                    new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService()))__                this.docsStats = docsStats(reader)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,reader,elasticsearch,directory,reader,wrap,directory,reader,open,directory,config,get,shard,id,if,config,get,index,settings,is,soft,delete,enabled,reader,new,soft,deletes,directory,reader,wrapper,reader,lucene,reader,reader,wrapper,function,apply,reader,this,index,commit,reader,get,index,commit,this,searcher,manager,new,searcher,manager,reader,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,this,docs,stats,docs,stats,reader,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1537806831;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory), config.getShardId())__                if (config.getIndexSettings().isSoftDeleteEnabled()) {_                    reader = new SoftDeletesDirectoryReaderWrapper(reader, Lucene.SOFT_DELETES_FIELD)__                }_                reader = readerWrapperFunction.apply(reader)__                this.indexCommit = reader.getIndexCommit()__                this.searcherManager = new SearcherManager(reader,_                    new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService()))__                this.docsStats = docsStats(reader)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,reader,elasticsearch,directory,reader,wrap,directory,reader,open,directory,config,get,shard,id,if,config,get,index,settings,is,soft,delete,enabled,reader,new,soft,deletes,directory,reader,wrapper,reader,lucene,reader,reader,wrapper,function,apply,reader,this,index,commit,reader,get,index,commit,this,searcher,manager,new,searcher,manager,reader,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,this,docs,stats,docs,stats,reader,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1538067637;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                reader = ElasticsearchDirectoryReader.wrap(open(directory), config.getShardId())__                if (config.getIndexSettings().isSoftDeleteEnabled()) {_                    reader = new SoftDeletesDirectoryReaderWrapper(reader, Lucene.SOFT_DELETES_FIELD)__                }_                reader = readerWrapperFunction.apply(reader)__                this.indexCommit = reader.getIndexCommit()__                this.searcherManager = new SearcherManager(reader,_                    new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService()))__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,reader,elasticsearch,directory,reader,wrap,open,directory,config,get,shard,id,if,config,get,index,settings,is,soft,delete,enabled,reader,new,soft,deletes,directory,reader,wrapper,reader,lucene,reader,reader,wrapper,function,apply,reader,this,index,commit,reader,get,index,commit,this,searcher,manager,new,searcher,manager,reader,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1541618615;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1542697404;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1543047942;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1544545090;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                this.seqNoStats = seqNoStats == null ? buildSeqNoStats(lastCommittedSegmentInfos) : seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,this,seq,no,stats,seq,no,stats,null,build,seq,no,stats,last,committed,segment,infos,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1548145353;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                if (seqNoStats == null) {_                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos)__                    _                    _                    _                    _                    _                    _                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong()__                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO_                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {_                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {_                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint)__                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo()_                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]")__                        }_                    }_                }_                this.seqNoStats = seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,if,seq,no,stats,null,seq,no,stats,build,seq,no,stats,last,committed,segment,infos,final,long,global,checkpoint,engine,config,get,global,checkpoint,supplier,get,as,long,if,global,checkpoint,sequence,numbers,engine,config,get,index,settings,get,index,version,created,on,or,after,version,if,seq,no,stats,get,max,seq,no,global,checkpoint,assert,max,seq,no,equals,to,global,checkpoint,seq,no,stats,get,max,seq,no,global,checkpoint,throw,new,illegal,state,exception,maximum,sequence,number,seq,no,stats,get,max,seq,no,from,last,commit,does,not,match,global,checkpoint,global,checkpoint,this,seq,no,stats,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1549891630;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                if (seqNoStats == null) {_                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos)__                    _                    _                    _                    _                    _                    _                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong()__                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO_                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {_                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {_                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint)__                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo()_                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]")__                        }_                    }_                }_                this.seqNoStats = seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,if,seq,no,stats,null,seq,no,stats,build,seq,no,stats,last,committed,segment,infos,final,long,global,checkpoint,engine,config,get,global,checkpoint,supplier,get,as,long,if,global,checkpoint,sequence,numbers,engine,config,get,index,settings,get,index,version,created,on,or,after,version,if,seq,no,stats,get,max,seq,no,global,checkpoint,assert,max,seq,no,equals,to,global,checkpoint,seq,no,stats,get,max,seq,no,global,checkpoint,throw,new,illegal,state,exception,maximum,sequence,number,seq,no,stats,get,max,seq,no,from,last,commit,does,not,match,global,checkpoint,global,checkpoint,this,seq,no,stats,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1549975032;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                if (seqNoStats == null) {_                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos)__                    _                    _                    _                    _                    _                    _                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong()__                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO_                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {_                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {_                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint)__                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo()_                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]")__                        }_                    }_                }_                this.seqNoStats = seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,if,seq,no,stats,null,seq,no,stats,build,seq,no,stats,last,committed,segment,infos,final,long,global,checkpoint,engine,config,get,global,checkpoint,supplier,get,as,long,if,global,checkpoint,sequence,numbers,engine,config,get,index,settings,get,index,version,created,on,or,after,version,if,seq,no,stats,get,max,seq,no,global,checkpoint,assert,max,seq,no,equals,to,global,checkpoint,seq,no,stats,get,max,seq,no,global,checkpoint,throw,new,illegal,state,exception,maximum,sequence,number,seq,no,stats,get,max,seq,no,from,last,commit,does,not,match,global,checkpoint,global,checkpoint,this,seq,no,stats,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1550762051;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                if (seqNoStats == null) {_                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos)__                    _                    _                    _                    _                    _                    _                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong()__                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO_                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {_                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {_                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint)__                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo()_                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]")__                        }_                    }_                }_                this.seqNoStats = seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,if,seq,no,stats,null,seq,no,stats,build,seq,no,stats,last,committed,segment,infos,final,long,global,checkpoint,engine,config,get,global,checkpoint,supplier,get,as,long,if,global,checkpoint,sequence,numbers,engine,config,get,index,settings,get,index,version,created,on,or,after,version,if,seq,no,stats,get,max,seq,no,global,checkpoint,assert,max,seq,no,equals,to,global,checkpoint,seq,no,stats,get,max,seq,no,global,checkpoint,throw,new,illegal,state,exception,maximum,sequence,number,seq,no,stats,get,max,seq,no,from,last,commit,does,not,match,global,checkpoint,global,checkpoint,this,seq,no,stats,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
ReadOnlyEngine -> public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,                    Function<DirectoryReader, DirectoryReader> readerWrapperFunction);1551110274;Creates a new ReadOnlyEngine. This ctor can also be used to open a read-only engine on top of an already opened_read-write engine. It allows to optionally obtain the writer locks for the shard which would time-out if another_engine is still open.__@param config the engine configuration_@param seqNoStats sequence number statistics for this engine or null if not provided_@param translogStats translog stats for this engine or null if not provided_@param obtainLock if <code>true</code> this engine will try to obtain the {@link IndexWriter#WRITE_LOCK_NAME} lock. Otherwise_the lock won't be obtained_@param readerWrapperFunction allows to wrap the index-reader for this engine.;public ReadOnlyEngine(EngineConfig config, SeqNoStats seqNoStats, TranslogStats translogStats, boolean obtainLock,_                   Function<DirectoryReader, DirectoryReader> readerWrapperFunction) {_        super(config)__        this.searcherFactory = new RamAccountingSearcherFactory(engineConfig.getCircuitBreakerService())__        try {_            Store store = config.getStore()__            store.incRef()__            DirectoryReader reader = null__            Directory directory = store.directory()__            Lock indexWriterLock = null__            boolean success = false__            try {_                _                _                indexWriterLock = obtainLock ? directory.obtainLock(IndexWriter.WRITE_LOCK_NAME) : null__                this.lastCommittedSegmentInfos = Lucene.readSegmentInfos(directory)__                this.translogStats = translogStats == null ? new TranslogStats(0, 0, 0, 0, 0) : translogStats__                if (seqNoStats == null) {_                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos)__                    _                    _                    _                    _                    _                    _                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong()__                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO_                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {_                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {_                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint)__                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo()_                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]")__                        }_                    }_                }_                this.seqNoStats = seqNoStats__                this.indexCommit = Lucene.getIndexCommit(lastCommittedSegmentInfos, directory)__                reader = open(indexCommit)__                reader = wrapReader(reader, readerWrapperFunction)__                searcherManager = new SearcherManager(reader, searcherFactory)__                this.docsStats = docsStats(lastCommittedSegmentInfos)__                this.indexWriterLock = indexWriterLock__                success = true__            } finally {_                if (success == false) {_                    IOUtils.close(reader, indexWriterLock, store::decRef)__                }_            }_        } catch (IOException e) {_            throw new UncheckedIOException(e)_ _        }_    };creates,a,new,read,only,engine,this,ctor,can,also,be,used,to,open,a,read,only,engine,on,top,of,an,already,opened,read,write,engine,it,allows,to,optionally,obtain,the,writer,locks,for,the,shard,which,would,time,out,if,another,engine,is,still,open,param,config,the,engine,configuration,param,seq,no,stats,sequence,number,statistics,for,this,engine,or,null,if,not,provided,param,translog,stats,translog,stats,for,this,engine,or,null,if,not,provided,param,obtain,lock,if,code,true,code,this,engine,will,try,to,obtain,the,link,index,writer,lock,otherwise,the,lock,won,t,be,obtained,param,reader,wrapper,function,allows,to,wrap,the,index,reader,for,this,engine;public,read,only,engine,engine,config,config,seq,no,stats,seq,no,stats,translog,stats,translog,stats,boolean,obtain,lock,function,directory,reader,directory,reader,reader,wrapper,function,super,config,this,searcher,factory,new,ram,accounting,searcher,factory,engine,config,get,circuit,breaker,service,try,store,store,config,get,store,store,inc,ref,directory,reader,reader,null,directory,directory,store,directory,lock,index,writer,lock,null,boolean,success,false,try,index,writer,lock,obtain,lock,directory,obtain,lock,index,writer,null,this,last,committed,segment,infos,lucene,read,segment,infos,directory,this,translog,stats,translog,stats,null,new,translog,stats,0,0,0,0,0,translog,stats,if,seq,no,stats,null,seq,no,stats,build,seq,no,stats,last,committed,segment,infos,final,long,global,checkpoint,engine,config,get,global,checkpoint,supplier,get,as,long,if,global,checkpoint,sequence,numbers,engine,config,get,index,settings,get,index,version,created,on,or,after,version,if,seq,no,stats,get,max,seq,no,global,checkpoint,assert,max,seq,no,equals,to,global,checkpoint,seq,no,stats,get,max,seq,no,global,checkpoint,throw,new,illegal,state,exception,maximum,sequence,number,seq,no,stats,get,max,seq,no,from,last,commit,does,not,match,global,checkpoint,global,checkpoint,this,seq,no,stats,seq,no,stats,this,index,commit,lucene,get,index,commit,last,committed,segment,infos,directory,reader,open,index,commit,reader,wrap,reader,reader,reader,wrapper,function,searcher,manager,new,searcher,manager,reader,searcher,factory,this,docs,stats,docs,stats,last,committed,segment,infos,this,index,writer,lock,index,writer,lock,success,true,finally,if,success,false,ioutils,close,reader,index,writer,lock,store,dec,ref,catch,ioexception,e,throw,new,unchecked,ioexception,e
