commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "put_repository_action". }
false;public;2;11;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     PutRepositoryRequest putRepositoryRequest = putRepositoryRequest(request.param("repository")).     try (XContentParser parser = request.contentParser()) {         putRepositoryRequest.source(parser.mapOrdered()).     }     putRepositoryRequest.verify(request.paramAsBoolean("verify", true)).     putRepositoryRequest.masterNodeTimeout(request.paramAsTime("master_timeout", putRepositoryRequest.masterNodeTimeout())).     putRepositoryRequest.timeout(request.paramAsTime("timeout", putRepositoryRequest.timeout())).     return channel -> client.admin().cluster().putRepository(putRepositoryRequest, new RestToXContentListener<>(channel)). }
