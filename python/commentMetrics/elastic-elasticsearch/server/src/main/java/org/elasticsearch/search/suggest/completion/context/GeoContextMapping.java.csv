# id;timestamp;commentText;codeText;commentWords;codeWords
GeoContextMapping -> @Override     public Set<String> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1542357322;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<String> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<String> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash.toString())__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,string,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,string,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,to,string,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<String> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1544110272;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<String> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<String> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash.toString())__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,string,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,string,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,to,string,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1524684173;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            FieldMapper mapper = parseContext.docMapper().mappers().getMapper(fieldName)__            if (!(mapper instanceof GeoPointFieldMapper)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<CharSequence> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash)__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,char,sequence,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,field,mapper,mapper,parse,context,doc,mapper,mappers,get,mapper,field,name,if,mapper,instanceof,geo,point,field,mapper,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,char,sequence,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1531937412;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<CharSequence> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash)__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,char,sequence,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,char,sequence,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1534539448;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<CharSequence> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash)__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,char,sequence,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,char,sequence,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1540583181;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<CharSequence> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash)__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,char,sequence,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,char,sequence,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> @Override     public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException;1541592065;Parse a set of {@link CharSequence} contexts at index-time._Acceptable formats:__<ul>_<li>Array: <pre>[<i>&lt_GEO POINT&gt_</i>, ..]</pre></li>_<li>String/Object/Array: <pre>&quot_GEO POINT&quot_</pre></li>_</ul>__see {@code GeoPoint(String)} for GEO POINT;@Override_    public Set<CharSequence> parseContext(ParseContext parseContext, XContentParser parser) throws IOException, ElasticsearchParseException {_        if (fieldName != null) {_            MappedFieldType fieldType = parseContext.mapperService().fullName(fieldName)__            if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {_                throw new ElasticsearchParseException("referenced field must be mapped to geo_point")__            }_        }_        final Set<CharSequence> contexts = new HashSet<>()__        Token token = parser.currentToken()__        if (token == Token.START_ARRAY) {_            token = parser.nextToken()__            _            if (token == Token.VALUE_NUMBER) {_                double lon = parser.doubleValue()__                if (parser.nextToken() == Token.VALUE_NUMBER) {_                    double lat = parser.doubleValue()__                    if (parser.nextToken() == Token.END_ARRAY) {_                        contexts.add(stringEncode(lon, lat, precision))__                    } else {_                        throw new ElasticsearchParseException("only two values [lon, lat] expected")__                    }_                } else {_                    throw new ElasticsearchParseException("latitude must be a numeric value")__                }_            } else {_                while (token != Token.END_ARRAY) {_                    GeoPoint point = GeoUtils.parseGeoPoint(parser)__                    contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__                    token = parser.nextToken()__                }_            }_        } else if (token == Token.VALUE_STRING) {_            final String geoHash = parser.text()__            final CharSequence truncatedGeoHash = geoHash.subSequence(0, Math.min(geoHash.length(), precision))__            contexts.add(truncatedGeoHash)__        } else {_            _            GeoPoint point = GeoUtils.parseGeoPoint(parser)__            contexts.add(stringEncode(point.getLon(), point.getLat(), precision))__        }_        return contexts__    };parse,a,set,of,link,char,sequence,contexts,at,index,time,acceptable,formats,ul,li,array,pre,i,lt,geo,point,gt,i,pre,li,li,string,object,array,pre,quot,geo,point,quot,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,set,char,sequence,parse,context,parse,context,parse,context,xcontent,parser,parser,throws,ioexception,elasticsearch,parse,exception,if,field,name,null,mapped,field,type,field,type,parse,context,mapper,service,full,name,field,name,if,field,type,instanceof,geo,point,field,mapper,geo,point,field,type,throw,new,elasticsearch,parse,exception,referenced,field,must,be,mapped,to,final,set,char,sequence,contexts,new,hash,set,token,token,parser,current,token,if,token,token,token,parser,next,token,if,token,token,double,lon,parser,double,value,if,parser,next,token,token,double,lat,parser,double,value,if,parser,next,token,token,contexts,add,string,encode,lon,lat,precision,else,throw,new,elasticsearch,parse,exception,only,two,values,lon,lat,expected,else,throw,new,elasticsearch,parse,exception,latitude,must,be,a,numeric,value,else,while,token,token,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,token,parser,next,token,else,if,token,token,final,string,geo,hash,parser,text,final,char,sequence,truncated,geo,hash,geo,hash,sub,sequence,0,math,min,geo,hash,length,precision,contexts,add,truncated,geo,hash,else,geo,point,point,geo,utils,parse,geo,point,parser,contexts,add,string,encode,point,get,lon,point,get,lat,precision,return,contexts
GeoContextMapping -> Builder -> public Builder precision(String precision);1524684173;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1531937412;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1534539448;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1540583181;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1541592065;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1542357322;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(String precision);1544110272;Set the precision use o make suggestions__@param precision_precision as distance with {@link DistanceUnit}. Default:_meters_@return this;public Builder precision(String precision) {_            return precision(DistanceUnit.parse(precision, DistanceUnit.METERS, DistanceUnit.METERS))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,as,distance,with,link,distance,unit,default,meters,return,this;public,builder,precision,string,precision,return,precision,distance,unit,parse,precision,distance,unit,meters,distance,unit,meters
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1524684173;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1531937412;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1534539448;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1540583181;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1541592065;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1542357322;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double precision, DistanceUnit unit);1544110272;Set the precision use o make suggestions__@param precision_precision value_@param unit_{@link DistanceUnit} to use_@return this;public Builder precision(double precision, DistanceUnit unit) {_            return precision(unit.toMeters(precision))__        };set,the,precision,use,o,make,suggestions,param,precision,precision,value,param,unit,link,distance,unit,to,use,return,this;public,builder,precision,double,precision,distance,unit,unit,return,precision,unit,to,meters,precision
GeoContextMapping -> Builder -> public Builder precision(double meters);1524684173;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1531937412;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1534539448;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1540583181;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1541592065;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1542357322;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(double meters);1544110272;Set the precision use o make suggestions__@param meters_precision as distance in meters_@return this;public Builder precision(double meters) {_            int level = GeoUtils.geoHashLevelsForPrecision(meters)__            _            if (GeoUtils.geoHashCellSize(level) < meters) {_               level = Math.max(1, level - 1)__            }_            return precision(level)__        };set,the,precision,use,o,make,suggestions,param,meters,precision,as,distance,in,meters,return,this;public,builder,precision,double,meters,int,level,geo,utils,geo,hash,levels,for,precision,meters,if,geo,utils,geo,hash,cell,size,level,meters,level,math,max,1,level,1,return,precision,level
GeoContextMapping -> Builder -> public Builder precision(int level);1524684173;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1531937412;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1534539448;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1540583181;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1541592065;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1542357322;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder precision(int level);1544110272;Set the precision use o make suggestions__@param level_maximum length of geohashes_@return this;public Builder precision(int level) {_            this.precision = level__            return this__        };set,the,precision,use,o,make,suggestions,param,level,maximum,length,of,geohashes,return,this;public,builder,precision,int,level,this,precision,level,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1524684173;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1531937412;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1534539448;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1540583181;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1541592065;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1542357322;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> Builder -> public Builder field(String fieldName);1544110272;Set the name of the field containing a geolocation to use_@param fieldName name of the field_@return this;public Builder field(String fieldName) {_            this.fieldName = fieldName__            return this__        };set,the,name,of,the,field,containing,a,geolocation,to,use,param,field,name,name,of,the,field,return,this;public,builder,field,string,field,name,this,field,name,field,name,return,this
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1524684173;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1531937412;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1534539448;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1540583181;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1541592065;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1542357322;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_: <i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
GeoContextMapping -> @Override     public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts);1544110272;Parse a list of {@link GeoQueryContext}_using <code>parser</code>. A QueryContexts accepts one of the following forms:__<ul>_<li>Object: GeoQueryContext</li>_<li>String: GeoQueryContext value with boost=1  precision=PRECISION neighbours=[PRECISION]</li>_<li>Array: <pre>[GeoQueryContext, ..]</pre></li>_</ul>__A GeoQueryContext has one of the following forms:_<ul>_<li>Object:_<ul>_<li><pre>GEO POINT</pre></li>_<li><pre>{&quot_lat&quot_: <i>&lt_double&gt_</i>, &quot_lon&quot_: <i>&lt_double&gt_</i>, &quot_precision&quot_:_<i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_string&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_:_<i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_<li><pre>{&quot_context&quot_: <i>&lt_GEO POINT&gt_</i>, &quot_boost&quot_: <i>&lt_int&gt_</i>, &quot_precision&quot_:_<i>&lt_int&gt_</i>, &quot_neighbours&quot_: <i>&lt_[int, ..]&gt_</i>}</pre></li>_</ul>_<li>String: <pre>GEO POINT</pre></li>_</ul>_see {@code GeoPoint(String)} for GEO POINT;@Override_    public List<InternalQueryContext> toInternalQueryContexts(List<GeoQueryContext> queryContexts) {_        List<InternalQueryContext> internalQueryContextList = new ArrayList<>()__        for (GeoQueryContext queryContext : queryContexts) {_            int minPrecision = Math.min(this.precision, queryContext.getPrecision())__            GeoPoint point = queryContext.getGeoPoint()__            final Collection<String> locations = new HashSet<>()__            String geoHash = stringEncode(point.getLon(), point.getLat(), minPrecision)__            locations.add(geoHash)__            if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) {_                addNeighbors(geoHash, locations)__            } else if (queryContext.getNeighbours().isEmpty() == false) {_                queryContext.getNeighbours().stream()_                    .filter(neighbourPrecision -> neighbourPrecision < geoHash.length())_                    .forEach(neighbourPrecision -> {_                        String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)__                        locations.add(truncatedGeoHash)__                        addNeighbors(truncatedGeoHash, locations)__                    })__            }_            internalQueryContextList.addAll(_                locations.stream()_                    .map(location -> new InternalQueryContext(location, queryContext.getBoost(), location.length() < this.precision))_                    .collect(Collectors.toList()))__        }_        return internalQueryContextList__    };parse,a,list,of,link,geo,query,context,using,code,parser,code,a,query,contexts,accepts,one,of,the,following,forms,ul,li,object,geo,query,context,li,li,string,geo,query,context,value,with,boost,1,precision,precision,neighbours,precision,li,li,array,pre,geo,query,context,pre,li,ul,a,geo,query,context,has,one,of,the,following,forms,ul,li,object,ul,li,pre,geo,point,pre,li,li,pre,quot,lat,quot,i,lt,double,gt,i,quot,lon,quot,i,lt,double,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,string,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,li,pre,quot,context,quot,i,lt,geo,point,gt,i,quot,boost,quot,i,lt,int,gt,i,quot,precision,quot,i,lt,int,gt,i,quot,neighbours,quot,i,lt,int,gt,i,pre,li,ul,li,string,pre,geo,point,pre,li,ul,see,code,geo,point,string,for,geo,point;override,public,list,internal,query,context,to,internal,query,contexts,list,geo,query,context,query,contexts,list,internal,query,context,internal,query,context,list,new,array,list,for,geo,query,context,query,context,query,contexts,int,min,precision,math,min,this,precision,query,context,get,precision,geo,point,point,query,context,get,geo,point,final,collection,string,locations,new,hash,set,string,geo,hash,string,encode,point,get,lon,point,get,lat,min,precision,locations,add,geo,hash,if,query,context,get,neighbours,is,empty,geo,hash,length,this,precision,add,neighbors,geo,hash,locations,else,if,query,context,get,neighbours,is,empty,false,query,context,get,neighbours,stream,filter,neighbour,precision,neighbour,precision,geo,hash,length,for,each,neighbour,precision,string,truncated,geo,hash,geo,hash,substring,0,neighbour,precision,locations,add,truncated,geo,hash,add,neighbors,truncated,geo,hash,locations,internal,query,context,list,add,all,locations,stream,map,location,new,internal,query,context,location,query,context,get,boost,location,length,this,precision,collect,collectors,to,list,return,internal,query,context,list
