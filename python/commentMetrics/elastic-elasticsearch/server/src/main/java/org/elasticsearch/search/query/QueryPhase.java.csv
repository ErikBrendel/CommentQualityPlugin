# id;timestamp;commentText;codeText;commentWords;codeWords
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1524684173;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1535046779;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1536314350;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1537806831;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1541092382;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1541752911;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1546630609;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1546950713;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean returnsDocsInOrder(Query query, SortAndFormats sf);1550737421;Returns true if the provided <code>query</code> returns docs in index order (internal doc ids)._@param query The query to execute_@param sf The query sort;static boolean returnsDocsInOrder(Query query, SortAndFormats sf) {_        if (sf == null || Sort.RELEVANCE.equals(sf.sort)) {_            _            _            _            return query.getClass() == ConstantScoreQuery.class_                || query.getClass() == MatchAllDocsQuery.class__        } else {_            return Sort.INDEXORDER.equals(sf.sort)__        }_    };returns,true,if,the,provided,code,query,code,returns,docs,in,index,order,internal,doc,ids,param,query,the,query,to,execute,param,sf,the,query,sort;static,boolean,returns,docs,in,order,query,query,sort,and,formats,sf,if,sf,null,sort,relevance,equals,sf,sort,return,query,get,class,constant,score,query,class,query,get,class,match,all,docs,query,class,else,return,sort,indexorder,equals,sf,sort
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1524684173;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == -1) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> { timeoutRunnable.run()_ cancellationRunnable.run()_ }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"__                _                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,1,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1535046779;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == -1) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> { timeoutRunnable.run()_ cancellationRunnable.run()_ }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"__                _                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,1,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1536314350;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> { timeoutRunnable.run()_ cancellationRunnable.run()_ }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1537806831;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1541092382;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1541752911;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHits(false)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHits(false)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,false,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,false,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1546630609;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                        searchContext.trackTotalHitsUpTo(SearchContext.TRACK_TOTAL_HITS_DISABLED)__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        searchContext.trackTotalHitsUpTo(SearchContext.TRACK_TOTAL_HITS_DISABLED)__                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,search,context,track,total,hits,up,to,search,context,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,search,context,track,total,hits,up,to,search,context,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1546950713;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final Counter counter = searchContext.timeEstimateCounter()__                final long startTime = counter.get()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = counter.get()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,counter,counter,search,context,time,estimate,counter,final,long,start,time,counter,get,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,counter,get,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean execute(SearchContext searchContext,                            final IndexSearcher searcher,                            Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException;1550737421;In a package-private method so that it can be tested without having to_wire everything (mapperService, etc.)_@return whether the rescoring phase should be executed;static boolean execute(SearchContext searchContext,_                           final IndexSearcher searcher,_                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {_        final IndexReader reader = searcher.getIndexReader()__        QuerySearchResult queryResult = searchContext.queryResult()__        queryResult.searchTimedOut(false)__        try {_            queryResult.from(searchContext.from())__            queryResult.size(searchContext.size())__            Query query = searchContext.query()__            assert query == searcher.rewrite(query)_ __            final ScrollContext scrollContext = searchContext.scrollContext()__            if (scrollContext != null) {_                if (scrollContext.totalHits == null) {_                    _                    assert scrollContext.lastEmittedDoc == null__                    _                    __                } else {_                    final ScoreDoc after = scrollContext.lastEmittedDoc__                    if (returnsDocsInOrder(query, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new MinDocQuery(after.doc + 1), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                        _                        searchContext.terminateAfter(searchContext.size())__                    } else if (canEarlyTerminate(reader, searchContext.sort())) {_                        _                        _                        if (after != null) {_                            BooleanQuery bq = new BooleanQuery.Builder()_                                .add(query, BooleanClause.Occur.MUST)_                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER)_                                .build()__                            query = bq__                        }_                    }_                }_            }__            final LinkedList<QueryCollectorContext> collectors = new LinkedList<>()__            _            boolean hasFilterCollector = false__            if (searchContext.terminateAfter() != SearchContext.DEFAULT_TERMINATE_AFTER) {_                _                _                collectors.add(createEarlyTerminationCollectorContext(searchContext.terminateAfter()))__                _                hasFilterCollector = true__            }_            if (searchContext.parsedPostFilter() != null) {_                _                _                collectors.add(createFilteredCollectorContext(searcher, searchContext.parsedPostFilter().query()))__                _                hasFilterCollector = true__            }_            if (searchContext.queryCollectors().isEmpty() == false) {_                _                collectors.add(createMultiCollectorContext(searchContext.queryCollectors().values()))__            }_            if (searchContext.minimumScore() != null) {_                _                collectors.add(createMinScoreCollectorContext(searchContext.minimumScore()))__                _                hasFilterCollector = true__            }__            boolean timeoutSet = scrollContext == null && searchContext.timeout() != null &&_                searchContext.timeout().equals(SearchService.NO_TIMEOUT) == false___            final Runnable timeoutRunnable__            if (timeoutSet) {_                final long startTime = searchContext.getRelativeTimeInMillis()__                final long timeout = searchContext.timeout().millis()__                final long maxTime = startTime + timeout__                timeoutRunnable = () -> {_                    final long time = searchContext.getRelativeTimeInMillis()__                    if (time > maxTime) {_                        throw new TimeExceededException()__                    }_                }__            } else {_                timeoutRunnable = null__            }__            final Runnable cancellationRunnable__            if (searchContext.lowLevelCancellation()) {_                SearchTask task = searchContext.getTask()__                cancellationRunnable = () -> { if (task.isCancelled()) throw new TaskCancelledException("cancelled")_ }__            } else {_                cancellationRunnable = null__            }__            final Runnable checkCancelled__            if (timeoutRunnable != null && cancellationRunnable != null) {_                checkCancelled = () -> {_                    timeoutRunnable.run()__                    cancellationRunnable.run()__                }__            } else if (timeoutRunnable != null) {_                checkCancelled = timeoutRunnable__            } else if (cancellationRunnable != null) {_                checkCancelled = cancellationRunnable__            } else {_                checkCancelled = null__            }__            checkCancellationSetter.accept(checkCancelled)___            _            _            _            collectors.add(createCancellableCollectorContext(searchContext.getTask()::isCancelled))___            final boolean doProfile = searchContext.getProfilers() != null__            _            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector)__            _            collectors.addFirst(topDocsFactory)___            final Collector queryCollector__            if (doProfile) {_                InternalProfileCollector profileCollector = QueryCollectorContext.createQueryCollectorWithProfiler(collectors)__                searchContext.getProfilers().getCurrentQueryProfiler().setCollector(profileCollector)__                queryCollector = profileCollector__            } else {_               queryCollector = QueryCollectorContext.createQueryCollector(collectors)__            }__            try {_                searcher.search(query, queryCollector)__            } catch (EarlyTerminatingCollector.EarlyTerminationException e) {_                queryResult.terminatedEarly(true)__            } catch (TimeExceededException e) {_                assert timeoutSet : "TimeExceededException thrown even though timeout wasn't set"___                if (searchContext.request().allowPartialSearchResults() == false) {_                    _                    throw new QueryPhaseExecutionException(searchContext, "Time exceeded")__                }_                queryResult.searchTimedOut(true)__            } finally {_                searchContext.clearReleasables(SearchContext.Lifetime.COLLECTION)__            }__            final QuerySearchResult result = searchContext.queryResult()__            for (QueryCollectorContext ctx : collectors) {_                ctx.postProcess(result)__            }_            EsThreadPoolExecutor executor = (EsThreadPoolExecutor)_                    searchContext.indexShard().getThreadPool().executor(ThreadPool.Names.SEARCH)__            if (executor instanceof QueueResizingEsThreadPoolExecutor) {_                QueueResizingEsThreadPoolExecutor rExecutor = (QueueResizingEsThreadPoolExecutor) executor__                queryResult.nodeQueueSize(rExecutor.getCurrentQueueSize())__                queryResult.serviceTimeEWMA((long) rExecutor.getTaskExecutionEWMA())__            }_            if (searchContext.getProfilers() != null) {_                ProfileShardResult shardResults = SearchProfileShardResults.buildShardResults(searchContext.getProfilers())__                result.profileResults(shardResults)__            }_            return topDocsFactory.shouldRescore()__        } catch (Exception e) {_            throw new QueryPhaseExecutionException(searchContext, "Failed to execute main query", e)__        }_    };in,a,package,private,method,so,that,it,can,be,tested,without,having,to,wire,everything,mapper,service,etc,return,whether,the,rescoring,phase,should,be,executed;static,boolean,execute,search,context,search,context,final,index,searcher,searcher,consumer,runnable,check,cancellation,setter,throws,query,phase,execution,exception,final,index,reader,reader,searcher,get,index,reader,query,search,result,query,result,search,context,query,result,query,result,search,timed,out,false,try,query,result,from,search,context,from,query,result,size,search,context,size,query,query,search,context,query,assert,query,searcher,rewrite,query,final,scroll,context,scroll,context,search,context,scroll,context,if,scroll,context,null,if,scroll,context,total,hits,null,assert,scroll,context,last,emitted,doc,null,else,final,score,doc,after,scroll,context,last,emitted,doc,if,returns,docs,in,order,query,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,min,doc,query,after,doc,1,boolean,clause,occur,filter,build,query,bq,search,context,terminate,after,search,context,size,else,if,can,early,terminate,reader,search,context,sort,if,after,null,boolean,query,bq,new,boolean,query,builder,add,query,boolean,clause,occur,must,add,new,search,after,sorted,doc,query,search,context,sort,sort,field,doc,after,boolean,clause,occur,filter,build,query,bq,final,linked,list,query,collector,context,collectors,new,linked,list,boolean,has,filter,collector,false,if,search,context,terminate,after,search,context,collectors,add,create,early,termination,collector,context,search,context,terminate,after,has,filter,collector,true,if,search,context,parsed,post,filter,null,collectors,add,create,filtered,collector,context,searcher,search,context,parsed,post,filter,query,has,filter,collector,true,if,search,context,query,collectors,is,empty,false,collectors,add,create,multi,collector,context,search,context,query,collectors,values,if,search,context,minimum,score,null,collectors,add,create,min,score,collector,context,search,context,minimum,score,has,filter,collector,true,boolean,timeout,set,scroll,context,null,search,context,timeout,null,search,context,timeout,equals,search,service,false,final,runnable,timeout,runnable,if,timeout,set,final,long,start,time,search,context,get,relative,time,in,millis,final,long,timeout,search,context,timeout,millis,final,long,max,time,start,time,timeout,timeout,runnable,final,long,time,search,context,get,relative,time,in,millis,if,time,max,time,throw,new,time,exceeded,exception,else,timeout,runnable,null,final,runnable,cancellation,runnable,if,search,context,low,level,cancellation,search,task,task,search,context,get,task,cancellation,runnable,if,task,is,cancelled,throw,new,task,cancelled,exception,cancelled,else,cancellation,runnable,null,final,runnable,check,cancelled,if,timeout,runnable,null,cancellation,runnable,null,check,cancelled,timeout,runnable,run,cancellation,runnable,run,else,if,timeout,runnable,null,check,cancelled,timeout,runnable,else,if,cancellation,runnable,null,check,cancelled,cancellation,runnable,else,check,cancelled,null,check,cancellation,setter,accept,check,cancelled,collectors,add,create,cancellable,collector,context,search,context,get,task,is,cancelled,final,boolean,do,profile,search,context,get,profilers,null,final,top,docs,collector,context,top,docs,factory,create,top,docs,collector,context,search,context,reader,has,filter,collector,collectors,add,first,top,docs,factory,final,collector,query,collector,if,do,profile,internal,profile,collector,profile,collector,query,collector,context,create,query,collector,with,profiler,collectors,search,context,get,profilers,get,current,query,profiler,set,collector,profile,collector,query,collector,profile,collector,else,query,collector,query,collector,context,create,query,collector,collectors,try,searcher,search,query,query,collector,catch,early,terminating,collector,early,termination,exception,e,query,result,terminated,early,true,catch,time,exceeded,exception,e,assert,timeout,set,time,exceeded,exception,thrown,even,though,timeout,wasn,t,set,if,search,context,request,allow,partial,search,results,false,throw,new,query,phase,execution,exception,search,context,time,exceeded,query,result,search,timed,out,true,finally,search,context,clear,releasables,search,context,lifetime,collection,final,query,search,result,result,search,context,query,result,for,query,collector,context,ctx,collectors,ctx,post,process,result,es,thread,pool,executor,executor,es,thread,pool,executor,search,context,index,shard,get,thread,pool,executor,thread,pool,names,search,if,executor,instanceof,queue,resizing,es,thread,pool,executor,queue,resizing,es,thread,pool,executor,r,executor,queue,resizing,es,thread,pool,executor,executor,query,result,node,queue,size,r,executor,get,current,queue,size,query,result,service,time,ewma,long,r,executor,get,task,execution,ewma,if,search,context,get,profilers,null,profile,shard,result,shard,results,search,profile,shard,results,build,shard,results,search,context,get,profilers,result,profile,results,shard,results,return,top,docs,factory,should,rescore,catch,exception,e,throw,new,query,phase,execution,exception,search,context,failed,to,execute,main,query,e
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1524684173;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || EarlyTerminatingSortingCollector.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,early,terminating,sorting,collector,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1535046779;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || EarlyTerminatingSortingCollector.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,early,terminating,sorting,collector,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1536314350;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1537806831;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1541092382;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1541752911;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1546630609;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1546950713;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
QueryPhase -> static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats);1550737421;Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts_with <code>sortAndFormats</code>.;static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {_        if (sortAndFormats == null || sortAndFormats.sort == null) {_            return false__        }_        final Sort sort = sortAndFormats.sort__        for (LeafReaderContext ctx : reader.leaves()) {_            Sort indexSort = ctx.reader().getMetaData().getSort()__            if (indexSort == null || Lucene.canEarlyTerminate(sort, indexSort) == false) {_                return false__            }_        }_        return true__    };returns,whether,collection,within,the,provided,code,reader,code,can,be,early,terminated,if,it,sorts,with,code,sort,and,formats,code;static,boolean,can,early,terminate,index,reader,reader,sort,and,formats,sort,and,formats,if,sort,and,formats,null,sort,and,formats,sort,null,return,false,final,sort,sort,sort,and,formats,sort,for,leaf,reader,context,ctx,reader,leaves,sort,index,sort,ctx,reader,get,meta,data,get,sort,if,index,sort,null,lucene,can,early,terminate,sort,index,sort,false,return,false,return,true
