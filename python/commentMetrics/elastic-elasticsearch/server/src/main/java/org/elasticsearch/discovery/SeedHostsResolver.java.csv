commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() {     logger.debug("using max_concurrent_resolvers [{}], resolver timeout [{}]", concurrentConnects, resolveTimeout).     final ThreadFactory threadFactory = EsExecutors.daemonThreadFactory(settings, "[unicast_configured_hosts_resolver]").     executorService.set(EsExecutors.newScaling(nodeName + "/" + "unicast_configured_hosts_resolver", 0, concurrentConnects, 60, TimeUnit.SECONDS, threadFactory, transportService.getThreadPool().getThreadContext())). }
false;protected;0;4;;@Override protected void doStop() {     ThreadPool.terminate(executorService.get(), 10, TimeUnit.SECONDS). }
false;protected;0;3;;@Override protected void doClose() { }
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.debug("failure when resolving unicast hosts list", e). }
false;protected;0;14;;@Override protected void doRun() {     if (lifecycle.started() == false) {         logger.debug("resolveConfiguredHosts.doRun: lifecycle is {}, not proceeding", lifecycle).         return.     }     List<TransportAddress> providedAddresses = hostsProvider.getSeedAddresses((hosts, limitPortCounts) -> UnicastZenPing.resolveHostsLists(executorService.get(), logger, hosts, limitPortCounts, transportService, resolveTimeout)).     consumer.accept(providedAddresses). }
false;public;0;4;;@Override public void onAfter() {     resolveInProgress.set(false). }
false;public;0;4;;@Override public String toString() {     return "SeedHostsResolver resolving unicast hosts list". }
false;public;1;41;;@Override public void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer) {     if (lifecycle.started() == false) {         logger.debug("resolveConfiguredHosts: lifecycle is {}, not proceeding", lifecycle).         return.     }     if (resolveInProgress.compareAndSet(false, true)) {         transportService.getThreadPool().generic().execute(new AbstractRunnable() {              @Override             public void onFailure(Exception e) {                 logger.debug("failure when resolving unicast hosts list", e).             }              @Override             protected void doRun() {                 if (lifecycle.started() == false) {                     logger.debug("resolveConfiguredHosts.doRun: lifecycle is {}, not proceeding", lifecycle).                     return.                 }                 List<TransportAddress> providedAddresses = hostsProvider.getSeedAddresses((hosts, limitPortCounts) -> UnicastZenPing.resolveHostsLists(executorService.get(), logger, hosts, limitPortCounts, transportService, resolveTimeout)).                 consumer.accept(providedAddresses).             }              @Override             public void onAfter() {                 resolveInProgress.set(false).             }              @Override             public String toString() {                 return "SeedHostsResolver resolving unicast hosts list".             }         }).     } }
