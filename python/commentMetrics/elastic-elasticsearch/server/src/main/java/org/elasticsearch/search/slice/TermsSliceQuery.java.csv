commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public Scorer scorer(LeafReaderContext context) throws IOException {     final DocIdSet disi = build(context.reader()).     final DocIdSetIterator leafIt = disi.iterator().     return new ConstantScoreScorer(this, score(), scoreMode, leafIt). }
false;public;1;4;;@Override public boolean isCacheable(LeafReaderContext ctx) {     return true. }
false;public;3;16;;@Override public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {     return new ConstantScoreWeight(this, boost) {          @Override         public Scorer scorer(LeafReaderContext context) throws IOException {             final DocIdSet disi = build(context.reader()).             final DocIdSetIterator leafIt = disi.iterator().             return new ConstantScoreScorer(this, score(), scoreMode, leafIt).         }          @Override         public boolean isCacheable(LeafReaderContext ctx) {             return true.         }     }. }
true;private;1;16;/**  * Returns a DocIdSet per segments containing the matching docs for the specified slice.  */ ;/**  * Returns a DocIdSet per segments containing the matching docs for the specified slice.  */ private DocIdSet build(LeafReader reader) throws IOException {     final DocIdSetBuilder builder = new DocIdSetBuilder(reader.maxDoc()).     final Terms terms = reader.terms(getField()).     final TermsEnum te = terms.iterator().     PostingsEnum docsEnum = null.     for (BytesRef term = te.next(). term != null. term = te.next()) {         // use a fixed seed instead of term.hashCode() otherwise this query may return inconsistent results when         // running on another replica (StringHelper sets its default seed at startup with current time)         int hashCode = StringHelper.murmurhash3_x86_32(term, SEED).         if (contains(hashCode)) {             docsEnum = te.postings(docsEnum, PostingsEnum.NONE).             builder.add(docsEnum).         }     }     return builder.build(). }
