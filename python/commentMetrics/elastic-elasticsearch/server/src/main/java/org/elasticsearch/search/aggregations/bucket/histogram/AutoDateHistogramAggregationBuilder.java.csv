commented;modifiers;parameterAmount;loc;comment;code
true;static;1;16;/**  * Build roundings, computed dynamically as roundings are time zone dependent.  * The current implementation probably should not be invoked in a tight loop.  * @return Array of RoundingInfo  */ ;/**  * Build roundings, computed dynamically as roundings are time zone dependent.  * The current implementation probably should not be invoked in a tight loop.  * @return Array of RoundingInfo  */ static RoundingInfo[] buildRoundings(ZoneId timeZone) {     RoundingInfo[] roundings = new RoundingInfo[6].     roundings[0] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.SECOND_OF_MINUTE, timeZone), 1000L, "s", 1, 5, 10, 30).     roundings[1] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.MINUTES_OF_HOUR, timeZone), 60 * 1000L, "m", 1, 5, 10, 30).     roundings[2] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.HOUR_OF_DAY, timeZone), 60 * 60 * 1000L, "h", 1, 3, 12).     roundings[3] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.DAY_OF_MONTH, timeZone), 24 * 60 * 60 * 1000L, "d", 1, 7).     roundings[4] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.MONTH_OF_YEAR, timeZone), 30 * 24 * 60 * 60 * 1000L, "M", 1, 3).     roundings[5] = new RoundingInfo(createRounding(Rounding.DateTimeUnit.YEAR_OF_CENTURY, timeZone), 365 * 24 * 60 * 60 * 1000L, "y", 1, 5, 10, 20, 50, 100).     return roundings. }
false;public,static;2;3;;public static AutoDateHistogramAggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     return PARSER.parse(parser, new AutoDateHistogramAggregationBuilder(aggregationName), null). }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new AutoDateHistogramAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;4;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeVInt(numBuckets). }
false;public;0;4;;@Override public String getType() {     return NAME. }
false;public;1;7;;public AutoDateHistogramAggregationBuilder setNumBuckets(int numBuckets) {     if (numBuckets <= 0) {         throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName() + " must be greater than 0 for [" + name + "]").     }     this.numBuckets = numBuckets.     return this. }
false;public;0;3;;public int getNumBuckets() {     return numBuckets. }
false;protected;4;18;;@Override protected ValuesSourceAggregatorFactory<Numeric, ?> innerBuild(SearchContext context, ValuesSourceConfig<Numeric> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     RoundingInfo[] roundings = buildRoundings(timeZone()).     int maxRoundingInterval = Arrays.stream(roundings, 0, roundings.length - 1).map(rounding -> rounding.innerIntervals).flatMapToInt(Arrays::stream).boxed().reduce(Integer::max).get().     Settings settings = context.getQueryShardContext().getIndexSettings().getNodeSettings().     int maxBuckets = MultiBucketConsumerService.MAX_BUCKET_SETTING.get(settings).     int bucketCeiling = maxBuckets / maxRoundingInterval.     if (numBuckets > bucketCeiling) {         throw new IllegalArgumentException(NUM_BUCKETS_FIELD.getPreferredName() + " must be less than " + bucketCeiling).     }     return new AutoDateHistogramAggregatorFactory(name, config, numBuckets, roundings, context, parent, subFactoriesBuilder, metaData). }
false;static;2;8;;static Rounding createRounding(Rounding.DateTimeUnit interval, ZoneId timeZone) {     Rounding.Builder tzRoundingBuilder = Rounding.builder(interval).     if (timeZone != null) {         tzRoundingBuilder.timeZone(timeZone).     }     Rounding rounding = tzRoundingBuilder.build().     return rounding. }
false;protected;2;5;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(NUM_BUCKETS_FIELD.getPreferredName(), numBuckets).     return builder. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(numBuckets). }
false;protected;1;5;;@Override protected boolean innerEquals(Object obj) {     AutoDateHistogramAggregationBuilder other = (AutoDateHistogramAggregationBuilder) obj.     return Objects.equals(numBuckets, other.numBuckets). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     rounding.writeTo(out).     out.writeVLong(roughEstimateDurationMillis).     out.writeIntArray(innerIntervals).     out.writeString(unitAbbreviation). }
false;public;0;3;;public int getMaximumInnerInterval() {     return innerIntervals[innerIntervals.length - 1]. }
false;public;0;3;;public long getRoughEstimateDurationMillis() {     return roughEstimateDurationMillis. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(rounding, Arrays.hashCode(innerIntervals)). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     RoundingInfo other = (RoundingInfo) obj.     return Objects.equals(rounding, other.rounding) && Objects.deepEquals(innerIntervals, other.innerIntervals). }
