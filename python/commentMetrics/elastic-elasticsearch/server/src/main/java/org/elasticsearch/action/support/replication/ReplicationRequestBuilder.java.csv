commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;5;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ @SuppressWarnings("unchecked") public final RequestBuilder setTimeout(TimeValue timeout) {     request.timeout(timeout).     return (RequestBuilder) this. }
true;public,final;1;5;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ @SuppressWarnings("unchecked") public final RequestBuilder setTimeout(String timeout) {     request.timeout(timeout).     return (RequestBuilder) this. }
false;public,final;1;5;;@SuppressWarnings("unchecked") public final RequestBuilder setIndex(String index) {     request.index(index).     return (RequestBuilder) this. }
true;public;1;5;/**  * Sets the number of shard copies that must be active before proceeding with the write.  * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.  */ ;/**  * Sets the number of shard copies that must be active before proceeding with the write.  * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.  */ @SuppressWarnings("unchecked") public RequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {     request.waitForActiveShards(waitForActiveShards).     return (RequestBuilder) this. }
true;public;1;3;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public RequestBuilder setWaitForActiveShards(final int waitForActiveShards) {     return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
