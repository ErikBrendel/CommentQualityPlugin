commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public SortField.Type reducedType() {     return SortField.Type.STRING. }
false;public;1;12;;@Override public Object missingValue(boolean reversed) {     if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {         if (sortMissingLast(missingValue) ^ reversed) {             return SortField.STRING_LAST.         } else {             return SortField.STRING_FIRST.         }     }     // otherwise we fill missing values ourselves     return null. }
false;protected;1;3;;protected SortedBinaryDocValues getValues(LeafReaderContext context) throws IOException {     return indexFieldData.load(context).getBytesValues(). }
false;protected;1;1;;protected void setScorer(Scorable scorer) { }
false;protected;2;19;;@Override protected SortedDocValues getSortedDocValues(LeafReaderContext context, String field) throws IOException {     final SortedSetDocValues values = ((IndexOrdinalsFieldData) indexFieldData).load(context).getOrdinalsValues().     final SortedDocValues selectedValues.     if (nested == null) {         selectedValues = sortMode.select(values).     } else {         final BitSet rootDocs = nested.rootDocs(context).         final DocIdSetIterator innerDocs = nested.innerDocs(context).         final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.         selectedValues = sortMode.select(values, rootDocs, innerDocs, maxChildren).     }     if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {         return selectedValues.     } else {         return new ReplaceMissing(selectedValues, missingBytes).     } }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     BytesRefFieldComparatorSource.this.setScorer(scorer). }
false;protected;2;14;;@Override protected BinaryDocValues getBinaryDocValues(LeafReaderContext context, String field) throws IOException {     final SortedBinaryDocValues values = getValues(context).     final BinaryDocValues selectedValues.     if (nested == null) {         selectedValues = sortMode.select(values, missingBytes).     } else {         final BitSet rootDocs = nested.rootDocs(context).         final DocIdSetIterator innerDocs = nested.innerDocs(context).         final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.         selectedValues = sortMode.select(values, missingBytes, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren).     }     return selectedValues. }
false;public;1;4;;@Override public void setScorer(Scorable scorer) {     BytesRefFieldComparatorSource.this.setScorer(scorer). }
false;public;4;61;;@Override public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {     assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName()).     final boolean sortMissingLast = sortMissingLast(missingValue) ^ reversed.     final BytesRef missingBytes = (BytesRef) missingObject(missingValue, reversed).     if (indexFieldData instanceof IndexOrdinalsFieldData) {         return new FieldComparator.TermOrdValComparator(numHits, null, sortMissingLast) {              @Override             protected SortedDocValues getSortedDocValues(LeafReaderContext context, String field) throws IOException {                 final SortedSetDocValues values = ((IndexOrdinalsFieldData) indexFieldData).load(context).getOrdinalsValues().                 final SortedDocValues selectedValues.                 if (nested == null) {                     selectedValues = sortMode.select(values).                 } else {                     final BitSet rootDocs = nested.rootDocs(context).                     final DocIdSetIterator innerDocs = nested.innerDocs(context).                     final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.                     selectedValues = sortMode.select(values, rootDocs, innerDocs, maxChildren).                 }                 if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {                     return selectedValues.                 } else {                     return new ReplaceMissing(selectedValues, missingBytes).                 }             }              @Override             public void setScorer(Scorable scorer) {                 BytesRefFieldComparatorSource.this.setScorer(scorer).             }         }.     }     return new FieldComparator.TermValComparator(numHits, null, sortMissingLast) {          @Override         protected BinaryDocValues getBinaryDocValues(LeafReaderContext context, String field) throws IOException {             final SortedBinaryDocValues values = getValues(context).             final BinaryDocValues selectedValues.             if (nested == null) {                 selectedValues = sortMode.select(values, missingBytes).             } else {                 final BitSet rootDocs = nested.rootDocs(context).                 final DocIdSetIterator innerDocs = nested.innerDocs(context).                 final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE.                 selectedValues = sortMode.select(values, missingBytes, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren).             }             return selectedValues.         }          @Override         public void setScorer(Scorable scorer) {             BytesRefFieldComparatorSource.this.setScorer(scorer).         }     }. }
false;public;0;12;;@Override public int ordValue() throws IOException {     if (hasValue == false) {         return substituteOrd.     }     int ord = in.ordValue().     if (exists == false && ord >= substituteOrd) {         return ord + 1.     } else {         return ord.     } }
false;public;1;5;;@Override public boolean advanceExact(int target) throws IOException {     hasValue = in.advanceExact(target).     return true. }
false;public;0;4;;@Override public int docID() {     return in.docID(). }
false;public;0;8;;@Override public int getValueCount() {     if (exists) {         return in.getValueCount().     } else {         return in.getValueCount() + 1.     } }
false;public;1;10;;@Override public BytesRef lookupOrd(int ord) throws IOException {     if (ord == substituteOrd) {         return substituteTerm.     } else if (exists == false && ord > substituteOrd) {         return in.lookupOrd(ord - 1).     } else {         return in.lookupOrd(ord).     } }
