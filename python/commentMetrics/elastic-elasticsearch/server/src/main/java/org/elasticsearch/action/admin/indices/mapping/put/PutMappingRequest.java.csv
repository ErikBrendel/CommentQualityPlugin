# id;timestamp;commentText;codeText;commentWords;codeWords
PutMappingRequest -> public String source();1524684173;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1531179852;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1531910483;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1534362961;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1535139672;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1541592065;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1546566088;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1546912600;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1548262265;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1548349980;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public String source();1548691031;The mapping source definition.;public String source() {_        return source__    };the,mapping,source,definition;public,string,source,return,source
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1524684173;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1531179852;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1531910483;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1534362961;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1535139672;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1541592065;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1546566088;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1546912600;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1548262265;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1548349980;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public PutMappingRequest setConcreteIndex(Index index);1548691031;Sets a concrete index for this put mapping request.;public PutMappingRequest setConcreteIndex(Index index) {_        Objects.requireNonNull(indices, "index must not be null")__        this.concreteIndex = index__        return this__    };sets,a,concrete,index,for,this,put,mapping,request;public,put,mapping,request,set,concrete,index,index,index,objects,require,non,null,indices,index,must,not,be,null,this,concrete,index,index,return,this
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1524684173;@param type the mapping type_@param source consisting of field/properties pairs (e.g. "field1",_"type=string,store=true"). If the number of arguments is not_divisible by two an {@link IllegalArgumentException} is thrown_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,if,the,number,of,arguments,is,not,divisible,by,two,an,link,illegal,argument,exception,is,thrown,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1531179852;@param type the mapping type_@param source consisting of field/properties pairs (e.g. "field1",_"type=string,store=true"). If the number of arguments is not_divisible by two an {@link IllegalArgumentException} is thrown_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,if,the,number,of,arguments,is,not,divisible,by,two,an,link,illegal,argument,exception,is,thrown,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1531910483;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1534362961;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1535139672;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1541592065;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1546566088;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1546912600;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1548262265;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1548349980;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public static XContentBuilder buildFromSimplifiedDef(String type, Object... source);1548691031;@param type_the mapping type_@param source_consisting of field/properties pairs (e.g. "field1",_"type=string,store=true")_@throws IllegalArgumentException_if the number of the source arguments is not divisible by two_@return the mappings definition;public static XContentBuilder buildFromSimplifiedDef(String type, Object... source) {_        if (source.length % 2 != 0) {_            throw new IllegalArgumentException("mapping source must be pairs of fieldnames and properties definition.")__        }_        try {_            XContentBuilder builder = XContentFactory.jsonBuilder()__            builder.startObject()__            if (type != null) {_                builder.startObject(type)__            }__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    builder.startObject(fieldName)__                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                    for (String s : s1) {_                        String[] s2 = Strings.split(s, "=")__                        if (s2.length != 2) {_                            throw new IllegalArgumentException("malformed " + s)__                        }_                        builder.field(s2[0], s2[1])__                    }_                    builder.endObject()__                }_            }__            builder.startObject("properties")__            for (int i = 0_ i < source.length_ i++) {_                String fieldName = source[i++].toString()__                if (RESERVED_FIELDS.contains(fieldName)) {_                    continue__                }__                builder.startObject(fieldName)__                String[] s1 = Strings.splitStringByCommaToArray(source[i].toString())__                for (String s : s1) {_                    String[] s2 = Strings.split(s, "=")__                    if (s2.length != 2) {_                        throw new IllegalArgumentException("malformed " + s)__                    }_                    builder.field(s2[0], s2[1])__                }_                builder.endObject()__            }_            builder.endObject()__            if (type != null) {_                builder.endObject()__            }_            builder.endObject()__            return builder__        } catch (Exception e) {_            throw new IllegalArgumentException("failed to generate simplified mapping definition", e)__        }_    };param,type,the,mapping,type,param,source,consisting,of,field,properties,pairs,e,g,field1,type,string,store,true,throws,illegal,argument,exception,if,the,number,of,the,source,arguments,is,not,divisible,by,two,return,the,mappings,definition;public,static,xcontent,builder,build,from,simplified,def,string,type,object,source,if,source,length,2,0,throw,new,illegal,argument,exception,mapping,source,must,be,pairs,of,fieldnames,and,properties,definition,try,xcontent,builder,builder,xcontent,factory,json,builder,builder,start,object,if,type,null,builder,start,object,type,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,start,object,properties,for,int,i,0,i,source,length,i,string,field,name,source,i,to,string,if,contains,field,name,continue,builder,start,object,field,name,string,s1,strings,split,string,by,comma,to,array,source,i,to,string,for,string,s,s1,string,s2,strings,split,s,if,s2,length,2,throw,new,illegal,argument,exception,malformed,s,builder,field,s2,0,s2,1,builder,end,object,builder,end,object,if,type,null,builder,end,object,builder,end,object,return,builder,catch,exception,e,throw,new,illegal,argument,exception,failed,to,generate,simplified,mapping,definition,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1524684173;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1531179852;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1531910483;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1534362961;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1535139672;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1541592065;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1546566088;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1546912600;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1548262265;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1548349980;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);1548691031;The mapping source definition.;public PutMappingRequest source(BytesReference mappingSource, XContentType xContentType) {_        Objects.requireNonNull(xContentType)__        try {_            this.source = XContentHelper.convertToJson(mappingSource, false, false, xContentType)__            return this__        } catch (IOException e) {_            throw new UncheckedIOException("failed to convert source to json", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,bytes,reference,mapping,source,xcontent,type,x,content,type,objects,require,non,null,x,content,type,try,this,source,xcontent,helper,convert,to,json,mapping,source,false,false,x,content,type,return,this,catch,ioexception,e,throw,new,unchecked,ioexception,failed,to,convert,source,to,json,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1531179852;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1531910483;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1534362961;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1535139672;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1541592065;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1546566088;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1546912600;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(Strings.toString(builder), XContentType.JSON)__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,strings,to,string,builder,xcontent,type,json,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1548262265;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(BytesReference.bytes(builder), builder.contentType())__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,bytes,reference,bytes,builder,builder,content,type,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1548349980;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(BytesReference.bytes(builder), builder.contentType())__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,bytes,reference,bytes,builder,builder,content,type,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> public PutMappingRequest source(Map<String, ?> mappingSource);1548691031;The mapping source definition.;public PutMappingRequest source(Map<String, ?> mappingSource) {_        try {_            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)__            builder.map(mappingSource)__            return source(BytesReference.bytes(builder), builder.contentType())__        } catch (IOException e) {_            throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]", e)__        }_    };the,mapping,source,definition;public,put,mapping,request,source,map,string,mapping,source,try,xcontent,builder,builder,xcontent,factory,content,builder,xcontent,type,json,builder,map,mapping,source,return,source,bytes,reference,bytes,builder,builder,content,type,catch,ioexception,e,throw,new,elasticsearch,generation,exception,failed,to,generate,mapping,source,e
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1524684173;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1531179852;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1531910483;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1534362961;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1535139672;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1541592065;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1546566088;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1546912600;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1548262265;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1548349980;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> @Override     public PutMappingRequest indices(String... indices);1548691031;Sets the indices this put mapping operation will execute on.;@Override_    public PutMappingRequest indices(String... indices) {_        this.indices = indices__        return this__    };sets,the,indices,this,put,mapping,operation,will,execute,on;override,public,put,mapping,request,indices,string,indices,this,indices,indices,return,this
PutMappingRequest -> public Index getConcreteIndex();1524684173;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1531179852;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1531910483;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1534362961;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1535139672;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1541592065;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1546566088;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1546912600;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1548262265;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1548349980;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> public Index getConcreteIndex();1548691031;Returns a concrete index for this mapping or <code>null</code> if no concrete index is defined;public Index getConcreteIndex() {_        return concreteIndex__    };returns,a,concrete,index,for,this,mapping,or,code,null,code,if,no,concrete,index,is,defined;public,index,get,concrete,index,return,concrete,index
PutMappingRequest -> @Override     public String[] indices();1524684173;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1531179852;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1531910483;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1534362961;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1535139672;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1541592065;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1546566088;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1546912600;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1548262265;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1548349980;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> @Override     public String[] indices();1548691031;The indices the mappings will be put.;@Override_    public String[] indices() {_        return indices__    };the,indices,the,mappings,will,be,put;override,public,string,indices,return,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1524684173;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1531179852;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1531910483;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1534362961;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1535139672;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1541592065;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1546566088;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1546912600;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1548262265;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1548349980;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest(String... indices);1548691031;Constructs a new put mapping request against one or more indices. If nothing is set then_it will be executed against all indices.;public PutMappingRequest(String... indices) {_        this.indices = indices__    };constructs,a,new,put,mapping,request,against,one,or,more,indices,if,nothing,is,set,then,it,will,be,executed,against,all,indices;public,put,mapping,request,string,indices,this,indices,indices
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1524684173;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1531179852;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1531910483;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1534362961;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1535139672;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1541592065;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1546566088;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1546912600;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(Strings.toString(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,strings,to,string,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1548262265;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(BytesReference.bytes(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,bytes,reference,bytes,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1548349980;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(BytesReference.bytes(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,bytes,reference,bytes,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(XContentBuilder mappingBuilder);1548691031;The mapping source definition.;public PutMappingRequest source(XContentBuilder mappingBuilder) {_        return source(BytesReference.bytes(mappingBuilder), mappingBuilder.contentType())__    };the,mapping,source,definition;public,put,mapping,request,source,xcontent,builder,mapping,builder,return,source,bytes,reference,bytes,mapping,builder,mapping,builder,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1524684173;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1531179852;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1531910483;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1534362961;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1535139672;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1541592065;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1546566088;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1546912600;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1548262265;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1548349980;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public PutMappingRequest source(String mappingSource, XContentType xContentType);1548691031;The mapping source definition.;public PutMappingRequest source(String mappingSource, XContentType xContentType) {_        return source(new BytesArray(mappingSource), xContentType)__    };the,mapping,source,definition;public,put,mapping,request,source,string,mapping,source,xcontent,type,x,content,type,return,source,new,bytes,array,mapping,source,x,content,type
PutMappingRequest -> public String type();1524684173;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1531179852;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1531910483;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1534362961;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1535139672;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1541592065;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1546566088;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1546912600;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1548262265;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1548349980;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public String type();1548691031;The mapping type.;public String type() {_        return type__    };the,mapping,type;public,string,type,return,type
PutMappingRequest -> public PutMappingRequest source(Object... source);1524684173;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1531179852;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1531910483;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1534362961;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1535139672;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1541592065;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1546566088;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1546912600;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1548262265;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1548349980;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest source(Object... source);1548691031;A specialized simplified mapping source method, takes the form of simple properties definition:_("field1", "type=string,store=true").__Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata_mapping fields will automatically be put on the top level mapping object.;public PutMappingRequest source(Object... source) {_        return source(buildFromSimplifiedDef(type, source))__    };a,specialized,simplified,mapping,source,method,takes,the,form,of,simple,properties,definition,field1,type,string,store,true,also,supports,metadata,mapping,fields,such,as,and,as,property,definition,these,metadata,mapping,fields,will,automatically,be,put,on,the,top,level,mapping,object;public,put,mapping,request,source,object,source,return,source,build,from,simplified,def,type,source
PutMappingRequest -> public PutMappingRequest type(String type);1524684173;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1531179852;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1531910483;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1534362961;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1535139672;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1541592065;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1546566088;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1546912600;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1548262265;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1548349980;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
PutMappingRequest -> public PutMappingRequest type(String type);1548691031;The type of the mappings.;public PutMappingRequest type(String type) {_        this.type = type__        return this__    };the,type,of,the,mappings;public,put,mapping,request,type,string,type,this,type,type,return,this
