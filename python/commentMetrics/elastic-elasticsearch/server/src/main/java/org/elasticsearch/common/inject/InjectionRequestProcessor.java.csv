commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public Boolean visit(StaticInjectionRequest request) {     staticInjections.add(new StaticInjection(injector, request)).     return true. }
false;public;1;14;;@Override public Boolean visit(InjectionRequest request) {     Set<InjectionPoint> injectionPoints.     try {         injectionPoints = request.getInjectionPoints().     } catch (ConfigurationException e) {         errors.merge(e.getErrorMessages()).         injectionPoints = e.getPartialValue().     }     initializer.requestInjection(injector, request.getInstance(), request.getSource(), injectionPoints).     return true. }
false;public;0;5;;public void validate() {     for (StaticInjection staticInjection : staticInjections) {         staticInjection.validate().     } }
false;public;0;5;;public void injectMembers() {     for (StaticInjection staticInjection : staticInjections) {         staticInjection.injectMembers().     } }
false;;0;12;;void validate() {     Errors errorsForMember = errors.withSource(source).     Set<InjectionPoint> injectionPoints.     try {         injectionPoints = request.getInjectionPoints().     } catch (ConfigurationException e) {         errors.merge(e.getErrorMessages()).         injectionPoints = e.getPartialValue().     }     memberInjectors = injector.membersInjectorStore.getInjectors(injectionPoints, errorsForMember). }
false;public;1;7;;@Override public Void call(InternalContext context) {     for (SingleMemberInjector injector : memberInjectors) {         injector.inject(errors, context, null).     }     return null. }
false;;0;15;;void injectMembers() {     try {         injector.callInContext(new ContextualCallable<Void>() {              @Override             public Void call(InternalContext context) {                 for (SingleMemberInjector injector : memberInjectors) {                     injector.inject(errors, context, null).                 }                 return null.             }         }).     } catch (ErrorsException e) {         throw new AssertionError().     } }
