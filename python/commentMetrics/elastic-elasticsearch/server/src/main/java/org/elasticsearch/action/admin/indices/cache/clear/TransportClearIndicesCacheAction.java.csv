commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected EmptyResult readShardResult(StreamInput in) throws IOException {     return EmptyResult.readEmptyResultFrom(in). }
false;protected;7;6;;@Override protected ClearIndicesCacheResponse newResponse(ClearIndicesCacheRequest request, int totalShards, int successfulShards, int failedShards, List<EmptyResult> responses, List<DefaultShardOperationFailedException> shardFailures, ClusterState clusterState) {     return new ClearIndicesCacheResponse(totalShards, successfulShards, failedShards, shardFailures). }
false;protected;1;6;;@Override protected ClearIndicesCacheRequest readRequestFrom(StreamInput in) throws IOException {     final ClearIndicesCacheRequest request = new ClearIndicesCacheRequest().     request.readFrom(in).     return request. }
false;protected;2;6;;@Override protected EmptyResult shardOperation(ClearIndicesCacheRequest request, ShardRouting shardRouting) {     indicesService.clearIndexShardCache(shardRouting.shardId(), request.queryCache(), request.fieldDataCache(), request.requestCache(), request.fields()).     return EmptyResult.INSTANCE. }
true;protected;3;4;/**  * The refresh request works against *all* shards.  */ ;/**  * The refresh request works against *all* shards.  */ @Override protected ShardsIterator shards(ClusterState clusterState, ClearIndicesCacheRequest request, String[] concreteIndices) {     return clusterState.routingTable().allShards(concreteIndices). }
false;protected;2;4;;@Override protected ClusterBlockException checkGlobalBlock(ClusterState state, ClearIndicesCacheRequest request) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;protected;3;4;;@Override protected ClusterBlockException checkRequestBlock(ClusterState state, ClearIndicesCacheRequest request, String[] concreteIndices) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_WRITE, concreteIndices). }
