commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return super.validateNonNullIndex(). }
false;public;0;3;;public int shardId() {     return this.shardId. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public MultiTermVectorsShardRequest preference(String preference) {     this.preference = preference.     return this. }
false;public;0;3;;public String preference() {     return this.preference. }
false;public;2;4;;public void add(int location, TermVectorsRequest request) {     this.locations.add(location).     this.requests.add(request). }
false;public;0;8;;@Override public String[] indices() {     String[] indices = new String[requests.size()].     for (int i = 0. i < indices.length. i++) {         indices[i] = requests.get(i).index().     }     return indices. }
false;public;1;13;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     locations = new IntArrayList(size).     requests = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         locations.add(in.readVInt()).         requests.add(TermVectorsRequest.readTermVectorsRequest(in)).     }     preference = in.readOptionalString(). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(locations.size()).     for (int i = 0. i < locations.size(). i++) {         out.writeVInt(locations.get(i)).         requests.get(i).writeTo(out).     }     out.writeOptionalString(preference). }
