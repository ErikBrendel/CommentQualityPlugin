commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(filterBuilder). }
true;public;0;3;/**  * @return the query that was wrapped in this constant score query  */ ;/**  * @return the query that was wrapped in this constant score query  */ public QueryBuilder innerQuery() {     return this.filterBuilder. }
false;protected;2;8;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(INNER_QUERY_FIELD.getPreferredName()).     filterBuilder.toXContent(builder, params).     printBoostAndQueryName(builder).     builder.endObject(). }
false;public,static;1;41;;public static ConstantScoreQueryBuilder fromXContent(XContentParser parser) throws IOException {     QueryBuilder query = null.     boolean queryFound = false.     String queryName = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             if (INNER_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 query = parseInnerQueryBuilder(parser).                 queryFound = true.             } else {                 throw new ParsingException(parser.getTokenLocation(), "[constant_score] query does not support [" + currentFieldName + "]").             }         } else if (token.isValue()) {             if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 queryName = parser.text().             } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 boost = parser.floatValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), "[constant_score] query does not support [" + currentFieldName + "]").             }         } else {             throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "]").         }     }     if (!queryFound) {         throw new ParsingException(parser.getTokenLocation(), "[constant_score] requires a 'filter' element").     }     ConstantScoreQueryBuilder constantScoreBuilder = new ConstantScoreQueryBuilder(query).     constantScoreBuilder.boost(boost).     constantScoreBuilder.queryName(queryName).     return constantScoreBuilder. }
false;protected;1;5;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     Query innerFilter = filterBuilder.toQuery(context).     return new ConstantScoreQuery(innerFilter). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(filterBuilder). }
false;protected;1;4;;@Override protected boolean doEquals(ConstantScoreQueryBuilder other) {     return Objects.equals(filterBuilder, other.filterBuilder). }
false;protected;1;11;;@Override protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {     QueryBuilder rewrite = filterBuilder.rewrite(queryRewriteContext).     if (rewrite instanceof MatchNoneQueryBuilder) {         // we won't match anyway         return rewrite.     }     if (rewrite != filterBuilder) {         return new ConstantScoreQueryBuilder(rewrite).     }     return this. }
false;protected;1;4;;@Override protected void extractInnerHitBuilders(Map<String, InnerHitContextBuilder> innerHits) {     InnerHitContextBuilder.extractInnerHits(filterBuilder, innerHits). }
