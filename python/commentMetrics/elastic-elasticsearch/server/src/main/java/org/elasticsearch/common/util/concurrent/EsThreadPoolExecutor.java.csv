commented;modifiers;parameterAmount;loc;comment;code
false;final;0;3;;final String getName() {     return name. }
false;public;1;13;;public void shutdown(ShutdownListener listener) {     synchronized (monitor) {         if (this.listener != null) {             throw new IllegalStateException("Shutdown was already called on this thread pool").         }         if (isTerminated()) {             listener.onTerminated().         } else {             this.listener = listener.         }     }     shutdown(). }
false;protected,synchronized;0;13;;@Override protected synchronized void terminated() {     super.terminated().     synchronized (monitor) {         if (listener != null) {             try {                 listener.onTerminated().             } finally {                 listener = null.             }         }     } }
false;;0;1;;void onTerminated().
false;public;1;20;;@Override public void execute(Runnable command) {     command = wrapRunnable(command).     try {         super.execute(command).     } catch (EsRejectedExecutionException ex) {         if (command instanceof AbstractRunnable) {             // directly and don't need to rethrow it.             try {                 ((AbstractRunnable) command).onRejection(ex).             } finally {                 ((AbstractRunnable) command).onAfter().             }         } else {             throw ex.         }     } }
false;protected;2;6;;@Override protected void afterExecute(Runnable r, Throwable t) {     super.afterExecute(r, t).     EsExecutors.rethrowErrors(unwrap(r)).     assert assertDefaultContext(r). }
false;private;1;14;;private boolean assertDefaultContext(Runnable r) {     try {         assert contextHolder.isDefaultContext() : "the thread context is not the default context and the thread [" + Thread.currentThread().getName() + "] is being returned to the pool after executing [" + r + "]".     } catch (IllegalStateException ex) {         // we don't really care if we are closed         if (contextHolder.isClosed() == false) {             throw ex.         }     }     return true. }
true;public;0;3;/**  * Returns a stream of all pending tasks. This is similar to {@link #getQueue()} but will expose the originally submitted  * {@link Runnable} instances rather than potentially wrapped ones.  */ ;/**  * Returns a stream of all pending tasks. This is similar to {@link #getQueue()} but will expose the originally submitted  * {@link Runnable} instances rather than potentially wrapped ones.  */ public Stream<Runnable> getTasks() {     return this.getQueue().stream().map(this::unwrap). }
false;public,final;0;18;;@Override public final String toString() {     StringBuilder b = new StringBuilder().     b.append(getClass().getSimpleName()).append('[').     b.append("name = ").append(name).append(", ").     if (getQueue() instanceof SizeBlockingQueue) {         @SuppressWarnings("rawtypes")         SizeBlockingQueue queue = (SizeBlockingQueue) getQueue().         b.append("queue capacity = ").append(queue.capacity()).append(", ").     }     appendThreadPoolExecutorDetails(b).     /*          * ThreadPoolExecutor has some nice information in its toString but we          * can't get at it easily without just getting the toString.          */     b.append(super.toString()).append(']').     return b.toString(). }
true;protected;1;3;/**  * Append details about this thread pool to the specified {@link StringBuilder}. All details should be appended as key/value pairs in  * the form "%s = %s, "  *  * @param sb the {@link StringBuilder} to append to  */ ;/**  * Append details about this thread pool to the specified {@link StringBuilder}. All details should be appended as key/value pairs in  * the form "%s = %s, "  *  * @param sb the {@link StringBuilder} to append to  */ protected void appendThreadPoolExecutorDetails(final StringBuilder sb) { }
false;protected;1;3;;protected Runnable wrapRunnable(Runnable command) {     return contextHolder.preserveContext(command). }
false;protected;1;3;;protected Runnable unwrap(Runnable runnable) {     return contextHolder.unwrap(runnable). }
