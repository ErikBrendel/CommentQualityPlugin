commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_templates_action". }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/templates\n"). }
false;public;1;4;;@Override public RestResponse buildResponse(ClusterStateResponse clusterStateResponse) throws Exception {     return RestTable.buildResponse(buildTable(request, clusterStateResponse, matchPattern), channel). }
false;protected;2;15;;@Override protected RestChannelConsumer doCatRequest(final RestRequest request, NodeClient client) {     final String matchPattern = request.hasParam("name") ? request.param("name") : null.     final ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.clear().metaData(true).     clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local())).     clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().state(clusterStateRequest, new RestResponseListener<ClusterStateResponse>(channel) {          @Override         public RestResponse buildResponse(ClusterStateResponse clusterStateResponse) throws Exception {             return RestTable.buildResponse(buildTable(request, clusterStateResponse, matchPattern), channel).         }     }). }
false;protected;1;11;;@Override protected Table getTableWithHeader(RestRequest request) {     Table table = new Table().     table.startHeaders().     table.addCell("name", "alias:n.desc:template name").     table.addCell("index_patterns", "alias:t.desc:template index patterns").     table.addCell("order", "alias:o.desc:template application order number").     table.addCell("version", "alias:v.desc:version").     table.endHeaders().     return table. }
false;private;3;16;;private Table buildTable(RestRequest request, ClusterStateResponse clusterStateResponse, String patternString) {     Table table = getTableWithHeader(request).     MetaData metadata = clusterStateResponse.getState().metaData().     for (ObjectObjectCursor<String, IndexTemplateMetaData> entry : metadata.templates()) {         IndexTemplateMetaData indexData = entry.value.         if (patternString == null || Regex.simpleMatch(patternString, indexData.name())) {             table.startRow().             table.addCell(indexData.name()).             table.addCell("[" + String.join(", ", indexData.patterns()) + "]").             table.addCell(indexData.getOrder()).             table.addCell(indexData.getVersion()).             table.endRow().         }     }     return table. }
