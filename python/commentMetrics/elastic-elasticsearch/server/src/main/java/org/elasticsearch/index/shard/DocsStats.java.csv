commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;public void add(DocsStats other) {     if (other == null) {         return.     }     if (this.totalSizeInBytes == -1) {         this.totalSizeInBytes = other.totalSizeInBytes.     } else if (other.totalSizeInBytes != -1) {         this.totalSizeInBytes += other.totalSizeInBytes.     }     this.count += other.count.     this.deleted += other.deleted. }
false;public;0;3;;public long getCount() {     return this.count. }
false;public;0;3;;public long getDeleted() {     return this.deleted. }
true;public;0;3;/**  * Returns the total size in bytes of all documents in this stats.  * This value may be more reliable than {@link StoreStats#getSizeInBytes()} in estimating the index size.  */ ;/**  * Returns the total size in bytes of all documents in this stats.  * This value may be more reliable than {@link StoreStats#getSizeInBytes()} in estimating the index size.  */ public long getTotalSizeInBytes() {     return totalSizeInBytes. }
true;public;0;4;/**  * Returns the average size in bytes of all documents in this stats.  */ ;/**  * Returns the average size in bytes of all documents in this stats.  */ public long getAverageSizeInBytes() {     long totalDocs = count + deleted.     return totalDocs == 0 ? 0 : totalSizeInBytes / totalDocs. }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     count = in.readVLong().     deleted = in.readVLong().     if (in.getVersion().onOrAfter(Version.V_6_1_0)) {         totalSizeInBytes = in.readVLong().     } else {         totalSizeInBytes = -1.     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(count).     out.writeVLong(deleted).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeVLong(totalSizeInBytes).     } }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.DOCS).     builder.field(Fields.COUNT, count).     builder.field(Fields.DELETED, deleted).     builder.endObject().     return builder. }
