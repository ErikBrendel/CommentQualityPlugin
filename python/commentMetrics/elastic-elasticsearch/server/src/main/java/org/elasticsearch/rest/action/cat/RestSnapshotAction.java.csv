commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_snapshot_action". }
false;public;1;4;;@Override public RestResponse buildResponse(GetSnapshotsResponse getSnapshotsResponse) throws Exception {     return RestTable.buildResponse(buildTable(request, getSnapshotsResponse), channel). }
false;protected;2;18;;@Override protected RestChannelConsumer doCatRequest(final RestRequest request, NodeClient client) {     GetSnapshotsRequest getSnapshotsRequest = new GetSnapshotsRequest().repository(request.param("repository")).snapshots(new String[] { GetSnapshotsRequest.ALL_SNAPSHOTS }).     getSnapshotsRequest.ignoreUnavailable(request.paramAsBoolean("ignore_unavailable", getSnapshotsRequest.ignoreUnavailable())).     getSnapshotsRequest.masterNodeTimeout(request.paramAsTime("master_timeout", getSnapshotsRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().getSnapshots(getSnapshotsRequest, new RestResponseListener<GetSnapshotsResponse>(channel) {          @Override         public RestResponse buildResponse(GetSnapshotsResponse getSnapshotsResponse) throws Exception {             return RestTable.buildResponse(buildTable(request, getSnapshotsResponse), channel).         }     }). }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/snapshots/{repository}\n"). }
false;protected;1;18;;@Override protected Table getTableWithHeader(RestRequest request) {     return new Table().startHeaders().addCell("id", "alias:id,snapshot.desc:unique snapshot").addCell("status", "alias:s,status.text-align:right.desc:snapshot name").addCell("start_epoch", "alias:ste,startEpoch.desc:start time in seconds since 1970-01-01 00:00:00").addCell("start_time", "alias:sti,startTime.desc:start time in HH:MM:SS").addCell("end_epoch", "alias:ete,endEpoch.desc:end time in seconds since 1970-01-01 00:00:00").addCell("end_time", "alias:eti,endTime.desc:end time in HH:MM:SS").addCell("duration", "alias:dur,duration.text-align:right.desc:duration").addCell("indices", "alias:i,indices.text-align:right.desc:number of indices").addCell("successful_shards", "alias:ss,successful_shards.text-align:right.desc:number of successful shards").addCell("failed_shards", "alias:fs,failed_shards.text-align:right.desc:number of failed shards").addCell("total_shards", "alias:ts,total_shards.text-align:right.desc:number of total shards").addCell("reason", "default:false.alias:r,reason.desc:reason for failures").endHeaders(). }
false;private;2;29;;private Table buildTable(RestRequest req, GetSnapshotsResponse getSnapshotsResponse) {     Table table = getTableWithHeader(req).     for (SnapshotInfo snapshotStatus : getSnapshotsResponse.getSnapshots()) {         table.startRow().         table.addCell(snapshotStatus.snapshotId().getName()).         table.addCell(snapshotStatus.state()).         table.addCell(TimeUnit.SECONDS.convert(snapshotStatus.startTime(), TimeUnit.MILLISECONDS)).         table.addCell(FORMATTER.format(Instant.ofEpochMilli(snapshotStatus.startTime()))).         table.addCell(TimeUnit.SECONDS.convert(snapshotStatus.endTime(), TimeUnit.MILLISECONDS)).         table.addCell(FORMATTER.format(Instant.ofEpochMilli(snapshotStatus.endTime()))).         final long durationMillis.         if (snapshotStatus.state() == SnapshotState.IN_PROGRESS) {             durationMillis = System.currentTimeMillis() - snapshotStatus.startTime().         } else {             durationMillis = snapshotStatus.endTime() - snapshotStatus.startTime().         }         table.addCell(TimeValue.timeValueMillis(durationMillis)).         table.addCell(snapshotStatus.indices().size()).         table.addCell(snapshotStatus.successfulShards()).         table.addCell(snapshotStatus.failedShards()).         table.addCell(snapshotStatus.totalShards()).         table.addCell(snapshotStatus.reason()).         table.endRow().     }     return table. }
