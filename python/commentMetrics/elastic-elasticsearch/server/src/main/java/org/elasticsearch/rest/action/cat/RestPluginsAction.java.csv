commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "cat_plugins_action". }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/plugins\n"). }
false;public;1;4;;@Override public RestResponse buildResponse(final NodesInfoResponse nodesInfoResponse) throws Exception {     return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel). }
false;public;1;11;;@Override public void processResponse(final ClusterStateResponse clusterStateResponse) throws Exception {     NodesInfoRequest nodesInfoRequest = new NodesInfoRequest().     nodesInfoRequest.clear().plugins(true).     client.admin().cluster().nodesInfo(nodesInfoRequest, new RestResponseListener<NodesInfoResponse>(channel) {          @Override         public RestResponse buildResponse(final NodesInfoResponse nodesInfoResponse) throws Exception {             return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel).         }     }). }
false;public;2;21;;@Override public RestChannelConsumer doCatRequest(final RestRequest request, final NodeClient client) {     final ClusterStateRequest clusterStateRequest = new ClusterStateRequest().     clusterStateRequest.clear().nodes(true).     clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local())).     clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().state(clusterStateRequest, new RestActionListener<ClusterStateResponse>(channel) {          @Override         public void processResponse(final ClusterStateResponse clusterStateResponse) throws Exception {             NodesInfoRequest nodesInfoRequest = new NodesInfoRequest().             nodesInfoRequest.clear().plugins(true).             client.admin().cluster().nodesInfo(nodesInfoRequest, new RestResponseListener<NodesInfoResponse>(channel) {                  @Override                 public RestResponse buildResponse(final NodesInfoResponse nodesInfoResponse) throws Exception {                     return RestTable.buildResponse(buildTable(request, clusterStateResponse, nodesInfoResponse), channel).                 }             }).         }     }). }
false;protected;1;12;;@Override protected Table getTableWithHeader(final RestRequest request) {     Table table = new Table().     table.startHeaders().     table.addCell("id", "default:false.desc:unique node id").     table.addCell("name", "alias:n.desc:node name").     table.addCell("component", "alias:c.desc:component").     table.addCell("version", "alias:v.desc:component version").     table.addCell("description", "alias:d.default:false.desc:plugin details").     table.endHeaders().     return table. }
false;private;3;20;;private Table buildTable(RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo) {     DiscoveryNodes nodes = state.getState().nodes().     Table table = getTableWithHeader(req).     for (DiscoveryNode node : nodes) {         NodeInfo info = nodesInfo.getNodesMap().get(node.getId()).         for (PluginInfo pluginInfo : info.getPlugins().getPluginInfos()) {             table.startRow().             table.addCell(node.getId()).             table.addCell(node.getName()).             table.addCell(pluginInfo.getName()).             table.addCell(pluginInfo.getVersion()).             table.addCell(pluginInfo.getDescription()).             table.endRow().         }     }     return table. }
