# id;timestamp;commentText;codeText;commentWords;codeWords
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1524684173;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData.toArray(new RepositoryMetaData[repositoriesMetaData.size()]))__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,to,array,new,repository,meta,data,repositories,meta,data,size,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1525248068;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1529687475;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1531729807;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1536828374;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1541092382;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542402632;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542980705;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542989466;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543468844;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543953231;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543959410;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1546974294;Unregisters repository in the cluster_<p>_This method can be only called on the master node. It removes repository information from cluster metadata.__@param request  unregister repository request_@param listener unregister repository listener;public void unregisterRepository(final UnregisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories != null && repositories.repositories().size() > 0) {_                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size())__                    boolean changed = false__                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (Regex.simpleMatch(request.name, repositoryMetaData.name())) {_                            logger.info("delete repository [{}]", repositoryMetaData.name())__                            changed = true__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (changed) {_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                        mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                        return ClusterState.builder(currentState).metaData(mdBuilder).build()__                    }_                }_                if (Regex.isMatchAllPattern(request.name)) { _                    return currentState__                }_                throw new RepositoryMissingException(request.name)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };unregisters,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,removes,repository,information,from,cluster,metadata,param,request,unregister,repository,request,param,listener,unregister,repository,listener;public,void,unregister,repository,final,unregister,repository,request,request,final,action,listener,cluster,state,update,response,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,repositories,repositories,size,0,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,boolean,changed,false,for,repository,meta,data,repository,meta,data,repositories,repositories,if,regex,simple,match,request,name,repository,meta,data,name,logger,info,delete,repository,repository,meta,data,name,changed,true,else,repositories,meta,data,add,repository,meta,data,if,changed,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,if,regex,is,match,all,pattern,request,name,return,current,state,throw,new,repository,missing,exception,request,name,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1524684173;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1525248068;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1529687475;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1531729807;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1536828374;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1541092382;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1542402632;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1542980705;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1542989466;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1543468844;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1543953231;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1543959410;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest settings(Settings settings);1546974294;Sets repository settings__@param settings repository settings_@return this request;public RegisterRepositoryRequest settings(Settings settings) {_            this.settings = settings__            return this__        };sets,repository,settings,param,settings,repository,settings,return,this,request;public,register,repository,request,settings,settings,settings,this,settings,settings,return,this
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1524684173;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1525248068;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1529687475;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1531729807;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1536828374;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1541092382;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1542402632;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1542980705;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1542989466;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1543468844;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1543953231;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1543959410;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> UnregisterRepositoryRequest -> public UnregisterRepositoryRequest(String cause, String name);1546974294;Creates a new unregister repository request__@param cause repository unregistration cause_@param name  repository name;public UnregisterRepositoryRequest(String cause, String name) {_            this.cause = cause__            this.name = name__        };creates,a,new,unregister,repository,request,param,cause,repository,unregistration,cause,param,name,repository,name;public,unregister,repository,request,string,cause,string,name,this,cause,cause,this,name,name
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1524684173;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1525248068;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1529687475;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1531729807;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1536828374;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1541092382;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1542402632;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1542980705;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1542989466;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1543468844;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1543953231;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1543959410;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> RegisterRepositoryRequest -> public RegisterRepositoryRequest(String cause, String name, String type, boolean verify);1546974294;Constructs new register repository request__@param cause repository registration cause_@param name  repository name_@param type  repository type_@param verify verify repository after creation;public RegisterRepositoryRequest(String cause, String name, String type, boolean verify) {_            this.cause = cause__            this.name = name__            this.type = type__            this.verify = verify__        };constructs,new,register,repository,request,param,cause,repository,registration,cause,param,name,repository,name,param,type,repository,type,param,verify,verify,repository,after,creation;public,register,repository,request,string,cause,string,name,string,type,boolean,verify,this,cause,cause,this,name,name,this,type,type,this,verify,verify
RepositoriesService -> public Repository repository(String repositoryName);1524684173;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1525248068;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1529687475;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1531729807;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1536828374;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1541092382;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1542402632;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1542980705;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1542989466;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1543468844;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1543953231;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1543959410;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        repository = internalRepositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,repository,internal,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> public Repository repository(String repositoryName);1546974294;Returns registered repository_<p>_This method is called only on the master node__@param repositoryName repository name_@return registered repository_@throws RepositoryMissingException if repository with such name isn't registered;public Repository repository(String repositoryName) {_        Repository repository = repositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        repository = internalRepositories.get(repositoryName)__        if (repository != null) {_            return repository__        }_        throw new RepositoryMissingException(repositoryName)__    };returns,registered,repository,p,this,method,is,called,only,on,the,master,node,param,repository,name,repository,name,return,registered,repository,throws,repository,missing,exception,if,repository,with,such,name,isn,t,registered;public,repository,repository,string,repository,name,repository,repository,repositories,get,repository,name,if,repository,null,return,repository,repository,internal,repositories,get,repository,name,if,repository,null,return,repository,throw,new,repository,missing,exception,repository,name
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData, Map<String, Repository.Factory> factories);1543959410;Creates repository holder. This method starts the repository;private Repository createRepository(RepositoryMetaData repositoryMetaData, Map<String, Repository.Factory> factories) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = factories.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, factories::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder,this,method,starts,the,repository;private,repository,create,repository,repository,meta,data,repository,meta,data,map,string,repository,factory,factories,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,factories,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,factories,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData, Map<String, Repository.Factory> factories);1546974294;Creates repository holder. This method starts the repository;private Repository createRepository(RepositoryMetaData repositoryMetaData, Map<String, Repository.Factory> factories) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = factories.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, factories::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]",_                repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder,this,method,starts,the,repository;private,repository,create,repository,repository,meta,data,repository,meta,data,map,string,repository,factory,factories,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,factories,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,factories,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1524684173;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1525248068;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1529687475;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1531729807;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1536828374;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1541092382;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1542402632;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1542980705;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1542989466;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository) throws IOException;1543468844;Closes the given repository.;private void closeRepository(Repository repository) throws IOException {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,throws,ioexception,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1524684173;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(new RepositoryMetaData(request.name, request.type, request.settings))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData.toArray(new RepositoryMetaData[repositoriesMetaData.size()]))__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,to,array,new,repository,meta,data,repositories,meta,data,size,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1525248068;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1529687475;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1531729807;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1536828374;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1541092382;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542402632;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542980705;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1542989466;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543468844;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) throws IOException {_                ensureRepositoryNotInUse(currentState, request.name)__                _                if (!registerRepository(newRepositoryMetaData)) {_                    _                    return currentState__                }_                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,throws,ioexception,ensure,repository,not,in,use,current,state,request,name,if,register,repository,new,repository,meta,data,return,current,state,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543953231;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        _        try {_            closeRepository(createRepository(newRepositoryMetaData))__        } catch (Exception e) {_            registrationListener.onFailure(e)__            return__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            if (newRepositoryMetaData.equals(repositoryMetaData)) {_                                _                                return currentState__                            }_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,try,close,repository,create,repository,new,repository,meta,data,catch,exception,e,registration,listener,on,failure,e,return,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,if,new,repository,meta,data,equals,repository,meta,data,return,current,state,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1543959410;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        _        try {_            closeRepository(createRepository(newRepositoryMetaData, typesRegistry))__        } catch (Exception e) {_            registrationListener.onFailure(e)__            return__        }__        clusterService.submitStateUpdateTask(request.cause, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_            @Override_            protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                return new ClusterStateUpdateResponse(acknowledged)__            }__            @Override_            public ClusterState execute(ClusterState currentState) {_                ensureRepositoryNotInUse(currentState, request.name)__                MetaData metaData = currentState.metaData()__                MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                if (repositories == null) {_                    logger.info("put repository [{}]", request.name)__                    repositories = new RepositoriesMetaData(_                        Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                } else {_                    boolean found = false__                    List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                    for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                        if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                            if (newRepositoryMetaData.equals(repositoryMetaData)) {_                                _                                return currentState__                            }_                            found = true__                            repositoriesMetaData.add(newRepositoryMetaData)__                        } else {_                            repositoriesMetaData.add(repositoryMetaData)__                        }_                    }_                    if (!found) {_                        logger.info("put repository [{}]", request.name)__                        repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                    } else {_                        logger.info("update repository [{}]", request.name)__                    }_                    repositories = new RepositoriesMetaData(repositoriesMetaData)__                }_                mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                return ClusterState.builder(currentState).metaData(mdBuilder).build()__            }__            @Override_            public void onFailure(String source, Exception e) {_                logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                super.onFailure(source, e)__            }__            @Override_            public boolean mustAck(DiscoveryNode discoveryNode) {_                _                return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__            }_        })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,try,close,repository,create,repository,new,repository,meta,data,types,registry,catch,exception,e,registration,listener,on,failure,e,return,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,if,new,repository,meta,data,equals,repository,meta,data,return,current,state,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener);1546974294;Registers new repository in the cluster_<p>_This method can be only called on the master node. It tries to create a new repository on the master_and if it was successful it adds new repository to cluster metadata.__@param request  register repository request_@param listener register repository listener;public void registerRepository(final RegisterRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {_        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name, request.type, request.settings)___        final ActionListener<ClusterStateUpdateResponse> registrationListener__        if (request.verify) {_            registrationListener = new VerifyingRegisterRepositoryListener(request.name, listener)__        } else {_            registrationListener = listener__        }__        _        try {_            closeRepository(createRepository(newRepositoryMetaData, typesRegistry))__        } catch (Exception e) {_            registrationListener.onFailure(e)__            return__        }__        clusterService.submitStateUpdateTask(request.cause,_            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {_                @Override_                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {_                    return new ClusterStateUpdateResponse(acknowledged)__                }__                @Override_                public ClusterState execute(ClusterState currentState) {_                    ensureRepositoryNotInUse(currentState, request.name)__                    MetaData metaData = currentState.metaData()__                    MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())__                    RepositoriesMetaData repositories = metaData.custom(RepositoriesMetaData.TYPE)__                    if (repositories == null) {_                        logger.info("put repository [{}]", request.name)__                        repositories = new RepositoriesMetaData(_                            Collections.singletonList(new RepositoryMetaData(request.name, request.type, request.settings)))__                    } else {_                        boolean found = false__                        List<RepositoryMetaData> repositoriesMetaData = new ArrayList<>(repositories.repositories().size() + 1)___                        for (RepositoryMetaData repositoryMetaData : repositories.repositories()) {_                            if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {_                                if (newRepositoryMetaData.equals(repositoryMetaData)) {_                                    _                                    return currentState__                                }_                                found = true__                                repositoriesMetaData.add(newRepositoryMetaData)__                            } else {_                                repositoriesMetaData.add(repositoryMetaData)__                            }_                        }_                        if (!found) {_                            logger.info("put repository [{}]", request.name)__                            repositoriesMetaData.add(new RepositoryMetaData(request.name, request.type, request.settings))__                        } else {_                            logger.info("update repository [{}]", request.name)__                        }_                        repositories = new RepositoriesMetaData(repositoriesMetaData)__                    }_                    mdBuilder.putCustom(RepositoriesMetaData.TYPE, repositories)__                    return ClusterState.builder(currentState).metaData(mdBuilder).build()__                }__                @Override_                public void onFailure(String source, Exception e) {_                    logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name), e)__                    super.onFailure(source, e)__                }__                @Override_                public boolean mustAck(DiscoveryNode discoveryNode) {_                    _                    return discoveryNode.isMasterNode() || discoveryNode.isDataNode()__                }_            })__    };registers,new,repository,in,the,cluster,p,this,method,can,be,only,called,on,the,master,node,it,tries,to,create,a,new,repository,on,the,master,and,if,it,was,successful,it,adds,new,repository,to,cluster,metadata,param,request,register,repository,request,param,listener,register,repository,listener;public,void,register,repository,final,register,repository,request,request,final,action,listener,cluster,state,update,response,listener,final,repository,meta,data,new,repository,meta,data,new,repository,meta,data,request,name,request,type,request,settings,final,action,listener,cluster,state,update,response,registration,listener,if,request,verify,registration,listener,new,verifying,register,repository,listener,request,name,listener,else,registration,listener,listener,try,close,repository,create,repository,new,repository,meta,data,types,registry,catch,exception,e,registration,listener,on,failure,e,return,cluster,service,submit,state,update,task,request,cause,new,acked,cluster,state,update,task,cluster,state,update,response,request,registration,listener,override,protected,cluster,state,update,response,new,response,boolean,acknowledged,return,new,cluster,state,update,response,acknowledged,override,public,cluster,state,execute,cluster,state,current,state,ensure,repository,not,in,use,current,state,request,name,meta,data,meta,data,current,state,meta,data,meta,data,builder,md,builder,meta,data,builder,current,state,meta,data,repositories,meta,data,repositories,meta,data,custom,repositories,meta,data,type,if,repositories,null,logger,info,put,repository,request,name,repositories,new,repositories,meta,data,collections,singleton,list,new,repository,meta,data,request,name,request,type,request,settings,else,boolean,found,false,list,repository,meta,data,repositories,meta,data,new,array,list,repositories,repositories,size,1,for,repository,meta,data,repository,meta,data,repositories,repositories,if,repository,meta,data,name,equals,new,repository,meta,data,name,if,new,repository,meta,data,equals,repository,meta,data,return,current,state,found,true,repositories,meta,data,add,new,repository,meta,data,else,repositories,meta,data,add,repository,meta,data,if,found,logger,info,put,repository,request,name,repositories,meta,data,add,new,repository,meta,data,request,name,request,type,request,settings,else,logger,info,update,repository,request,name,repositories,new,repositories,meta,data,repositories,meta,data,md,builder,put,custom,repositories,meta,data,type,repositories,return,cluster,state,builder,current,state,meta,data,md,builder,build,override,public,void,on,failure,string,source,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,request,name,e,super,on,failure,source,e,override,public,boolean,must,ack,discovery,node,discovery,node,return,discovery,node,is,master,node,discovery,node,is,data,node
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1524684173;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1525248068;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1529687475;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1531729807;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1536828374;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1541092382;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1542402632;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1542980705;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1542989466;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1543468844;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private Repository createRepository(RepositoryMetaData repositoryMetaData);1543953231;Creates repository holder;private Repository createRepository(RepositoryMetaData repositoryMetaData) {_        logger.debug("creating repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name())__        Repository.Factory factory = typesRegistry.get(repositoryMetaData.type())__        if (factory == null) {_            throw new RepositoryException(repositoryMetaData.name(),_                "repository type [" + repositoryMetaData.type() + "] does not exist")__        }_        try {_            Repository repository = factory.create(repositoryMetaData, typesRegistry::get)__            repository.start()__            return repository__        } catch (Exception e) {_            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}][{}]", repositoryMetaData.type(), repositoryMetaData.name()), e)__            throw new RepositoryException(repositoryMetaData.name(), "failed to create repository", e)__        }_    };creates,repository,holder;private,repository,create,repository,repository,meta,data,repository,meta,data,logger,debug,creating,repository,repository,meta,data,type,repository,meta,data,name,repository,factory,factory,types,registry,get,repository,meta,data,type,if,factory,null,throw,new,repository,exception,repository,meta,data,name,repository,type,repository,meta,data,type,does,not,exist,try,repository,repository,factory,create,repository,meta,data,types,registry,get,repository,start,return,repository,catch,exception,e,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,type,repository,meta,data,name,e,throw,new,repository,exception,repository,meta,data,name,failed,to,create,repository,e
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1524684173;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (!previousMetadata.type().equals(repositoryMetaData.type()) && previousMetadata.settings().equals(repositoryMetaData.settings())) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,previous,metadata,settings,equals,repository,meta,data,settings,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1525248068;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (!previousMetadata.type().equals(repositoryMetaData.type()) && previousMetadata.settings().equals(repositoryMetaData.settings())) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,previous,metadata,settings,equals,repository,meta,data,settings,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1529687475;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1531729807;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1536828374;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1541092382;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1542402632;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1542980705;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1542989466;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException;1543468844;Creates a new repository and adds it to the list of registered repositories._<p>_If a repository with the same name but different types or settings already exists, it will be closed and_replaced with the new repository. If a repository with the same name exists but it has the same type and settings_the new repository is ignored.__@param repositoryMetaData new repository metadata_@return {@code true} if new repository was added or {@code false} if it was ignored;private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {_        Repository previous = repositories.get(repositoryMetaData.name())__        if (previous != null) {_            RepositoryMetaData previousMetadata = previous.getMetadata()__            if (previousMetadata.equals(repositoryMetaData)) {_                _                return false__            }_        }_        Repository newRepo = createRepository(repositoryMetaData)__        if (previous != null) {_            closeRepository(previous)__        }_        Map<String, Repository> newRepositories = new HashMap<>(repositories)__        newRepositories.put(repositoryMetaData.name(), newRepo)__        repositories = newRepositories__        return true__    };creates,a,new,repository,and,adds,it,to,the,list,of,registered,repositories,p,if,a,repository,with,the,same,name,but,different,types,or,settings,already,exists,it,will,be,closed,and,replaced,with,the,new,repository,if,a,repository,with,the,same,name,exists,but,it,has,the,same,type,and,settings,the,new,repository,is,ignored,param,repository,meta,data,new,repository,metadata,return,code,true,if,new,repository,was,added,or,code,false,if,it,was,ignored;private,boolean,register,repository,repository,meta,data,repository,meta,data,throws,ioexception,repository,previous,repositories,get,repository,meta,data,name,if,previous,null,repository,meta,data,previous,metadata,previous,get,metadata,if,previous,metadata,equals,repository,meta,data,return,false,repository,new,repo,create,repository,repository,meta,data,if,previous,null,close,repository,previous,map,string,repository,new,repositories,new,hash,map,repositories,new,repositories,put,repository,meta,data,name,new,repo,repositories,new,repositories,return,true
RepositoriesService -> private void closeRepository(Repository repository);1543953231;Closes the given repository.;private void closeRepository(Repository repository) {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository);1543959410;Closes the given repository.;private void closeRepository(Repository repository) {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> private void closeRepository(Repository repository);1546974294;Closes the given repository.;private void closeRepository(Repository repository) {_        logger.debug("closing repository [{}][{}]", repository.getMetadata().type(), repository.getMetadata().name())__        repository.close()__    };closes,the,given,repository;private,void,close,repository,repository,repository,logger,debug,closing,repository,repository,get,metadata,type,repository,get,metadata,name,repository,close
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1524684173;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1525248068;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1529687475;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1531729807;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1536828374;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1541092382;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1542402632;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1542980705;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1542989466;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1543468844;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1543953231;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1543959410;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData, typesRegistry)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]", repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData, typesRegistry)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,types,registry,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,types,registry,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
RepositoriesService -> @Override     public void applyClusterState(ClusterChangedEvent event);1546974294;Checks if new repositories appeared in or disappeared from cluster metadata and updates current list of_repositories accordingly.__@param event cluster changed event;@Override_    public void applyClusterState(ClusterChangedEvent event) {_        try {_            RepositoriesMetaData oldMetaData = event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE)__            RepositoriesMetaData newMetaData = event.state().getMetaData().custom(RepositoriesMetaData.TYPE)___            _            if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {_                return__            }__            logger.trace("processing new index repositories for state version [{}]", event.state().version())___            Map<String, Repository> survivors = new HashMap<>()__            _            for (Map.Entry<String, Repository> entry : repositories.entrySet()) {_                if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {_                    logger.debug("unregistering repository [{}]", entry.getKey())__                    closeRepository(entry.getValue())__                } else {_                    survivors.put(entry.getKey(), entry.getValue())__                }_            }__            Map<String, Repository> builder = new HashMap<>()__            if (newMetaData != null) {_                _                for (RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {_                    Repository repository = survivors.get(repositoryMetaData.name())__                    if (repository != null) {_                        _                        RepositoryMetaData previousMetadata = repository.getMetadata()__                        if (previousMetadata.type().equals(repositoryMetaData.type()) == false_                            || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {_                            _                            logger.debug("updating repository [{}]", repositoryMetaData.name())__                            closeRepository(repository)__                            repository = null__                            try {_                                repository = createRepository(repositoryMetaData, typesRegistry)__                            } catch (RepositoryException ex) {_                                _                                _                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",_                                    repositoryMetaData.name()), ex)__                            }_                        }_                    } else {_                        try {_                            repository = createRepository(repositoryMetaData, typesRegistry)__                        } catch (RepositoryException ex) {_                            logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", repositoryMetaData.name()), ex)__                        }_                    }_                    if (repository != null) {_                        logger.debug("registering repository [{}]", repositoryMetaData.name())__                        builder.put(repositoryMetaData.name(), repository)__                    }_                }_            }_            repositories = Collections.unmodifiableMap(builder)__        } catch (Exception ex) {_            logger.warn("failure updating cluster state ", ex)__        }_    };checks,if,new,repositories,appeared,in,or,disappeared,from,cluster,metadata,and,updates,current,list,of,repositories,accordingly,param,event,cluster,changed,event;override,public,void,apply,cluster,state,cluster,changed,event,event,try,repositories,meta,data,old,meta,data,event,previous,state,get,meta,data,custom,repositories,meta,data,type,repositories,meta,data,new,meta,data,event,state,get,meta,data,custom,repositories,meta,data,type,if,old,meta,data,null,new,meta,data,null,old,meta,data,null,old,meta,data,equals,new,meta,data,return,logger,trace,processing,new,index,repositories,for,state,version,event,state,version,map,string,repository,survivors,new,hash,map,for,map,entry,string,repository,entry,repositories,entry,set,if,new,meta,data,null,new,meta,data,repository,entry,get,key,null,logger,debug,unregistering,repository,entry,get,key,close,repository,entry,get,value,else,survivors,put,entry,get,key,entry,get,value,map,string,repository,builder,new,hash,map,if,new,meta,data,null,for,repository,meta,data,repository,meta,data,new,meta,data,repositories,repository,repository,survivors,get,repository,meta,data,name,if,repository,null,repository,meta,data,previous,metadata,repository,get,metadata,if,previous,metadata,type,equals,repository,meta,data,type,false,previous,metadata,settings,equals,repository,meta,data,settings,false,logger,debug,updating,repository,repository,meta,data,name,close,repository,repository,repository,null,try,repository,create,repository,repository,meta,data,types,registry,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,change,repository,repository,meta,data,name,ex,else,try,repository,create,repository,repository,meta,data,types,registry,catch,repository,exception,ex,logger,warn,new,parameterized,message,failed,to,create,repository,repository,meta,data,name,ex,if,repository,null,logger,debug,registering,repository,repository,meta,data,name,builder,put,repository,meta,data,name,repository,repositories,collections,unmodifiable,map,builder,catch,exception,ex,logger,warn,failure,updating,cluster,state,ex
