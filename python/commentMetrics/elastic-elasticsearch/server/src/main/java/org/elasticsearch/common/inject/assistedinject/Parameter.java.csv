commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isProvidedByFactory() {     return isAssisted. }
false;public;0;3;;public Type getType() {     return type. }
false;public;0;14;;@Override public String toString() {     StringBuilder result = new StringBuilder().     if (isAssisted) {         result.append("@Assisted").         result.append(" ").     }     if (bindingAnnotation != null) {         result.append(bindingAnnotation.toString()).         result.append(" ").     }     result.append(type.toString()).     return result.toString(). }
false;private;1;8;;private boolean hasAssistedAnnotation(Annotation[] annotations) {     for (Annotation annotation : annotations) {         if (annotation.annotationType().equals(Assisted.class)) {             return true.         }     }     return false. }
true;public;1;5;/**  * Returns the Guice {@link Key} for this parameter.  */ ;/**  * Returns the Guice {@link Key} for this parameter.  */ public Object getValue(Injector injector) {     return isProvider ? injector.getProvider(getBindingForType(getProvidedType(type))) : injector.getInstance(getPrimaryBindingKey()). }
false;;0;5;;Key<?> getPrimaryBindingKey() {     return isProvider ? getBindingForType(getProvidedType(type)) : getBindingForType(type). }
false;private;1;3;;private Type getProvidedType(Type type) {     return ((ParameterizedType) type).getActualTypeArguments()[0]. }
false;private;1;4;;private boolean isProvider(Type type) {     return type instanceof ParameterizedType && ((ParameterizedType) type).getRawType() == Provider.class. }
false;private;1;5;;private Key<?> getBindingForType(Type type) {     return bindingAnnotation != null ? Key.get(type, bindingAnnotation) : Key.get(type). }
true;private;1;12;/**  * Returns the unique binding annotation from the specified list, or  * {@code null} if there are none.  *  * @throws IllegalStateException if multiple binding annotations exist.  */ ;/**  * Returns the unique binding annotation from the specified list, or  * {@code null} if there are none.  *  * @throws IllegalStateException if multiple binding annotations exist.  */ private Annotation getBindingAnnotation(Annotation[] annotations) {     Annotation bindingAnnotation = null.     for (Annotation a : annotations) {         if (a.annotationType().getAnnotation(BindingAnnotation.class) != null) {             if (bindingAnnotation != null) {                 throw new IllegalArgumentException("Parameter has multiple binding annotations: " + bindingAnnotation + " and " + a).             }             bindingAnnotation = a.         }     }     return bindingAnnotation. }
