commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Set the deferred collectors.  */ ;/**  * Set the deferred collectors.  */ public abstract void setDeferredCollector(Iterable<BucketCollector> deferredCollectors).
false;public,final;1;3;;public final void replay(long... selectedBuckets) throws IOException {     prepareSelectedBuckets(selectedBuckets). }
false;public,abstract;1;1;;public abstract void prepareSelectedBuckets(long... selectedBuckets) throws IOException.
true;public;1;3;/**  * Wrap the provided aggregator so that it behaves (almost) as if it had  * been collected directly.  */ ;/**  * Wrap the provided aggregator so that it behaves (almost) as if it had  * been collected directly.  */ public Aggregator wrap(final Aggregator in) {     return new WrappedAggregator(in). }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return in.scoreMode(). }
false;public;0;4;;@Override public void close() {     in.close(). }
false;public;0;4;;@Override public String name() {     return in.name(). }
false;public;0;4;;@Override public Aggregator parent() {     return in.parent(). }
false;public;0;4;;@Override public SearchContext context() {     return in.context(). }
false;public;1;4;;@Override public Aggregator subAggregator(String name) {     return in.subAggregator(name). }
false;public;1;4;;@Override public InternalAggregation buildAggregation(long bucket) throws IOException {     return in.buildAggregation(bucket). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return in.buildEmptyAggregation(). }
false;public;1;5;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx) throws IOException {     throw new IllegalStateException("Deferred collectors cannot be collected directly. They must be collected through the recording wrapper."). }
false;public;0;5;;@Override public void preCollection() throws IOException {     throw new IllegalStateException("Deferred collectors cannot be collected directly. They must be collected through the recording wrapper."). }
false;public;0;5;;@Override public void postCollection() throws IOException {     throw new IllegalStateException("Deferred collectors cannot be collected directly. They must be collected through the recording wrapper."). }
