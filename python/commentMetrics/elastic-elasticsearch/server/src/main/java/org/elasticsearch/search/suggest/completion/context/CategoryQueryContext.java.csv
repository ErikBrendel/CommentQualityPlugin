commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the category of the context  */ ;/**  * Returns the category of the context  */ public String getCategory() {     return category. }
true;public;0;3;/**  * Returns if the context should be treated as a prefix  */ ;/**  * Returns if the context should be treated as a prefix  */ public boolean isPrefix() {     return isPrefix. }
true;public;0;3;/**  * Returns the query-time boost of the context  */ ;/**  * Returns the query-time boost of the context  */ public int getBoost() {     return boost. }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     CategoryQueryContext that = (CategoryQueryContext) o.     if (isPrefix != that.isPrefix)         return false.     if (boost != that.boost)         return false.     return category != null ? category.equals(that.category) : that.category == null. }
false;public;0;7;;@Override public int hashCode() {     int result = category != null ? category.hashCode() : 0.     result = 31 * result + (isPrefix ? 1 : 0).     result = 31 * result + boost.     return result. }
false;public,static;1;17;;public static CategoryQueryContext fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     Builder builder = builder().     if (token == XContentParser.Token.START_OBJECT) {         try {             CATEGORY_PARSER.parse(parser, builder, null).         } catch (XContentParseException e) {             throw new XContentParseException("category context must be a string, number or boolean").         }     } else if (token == XContentParser.Token.VALUE_STRING || token == XContentParser.Token.VALUE_BOOLEAN || token == XContentParser.Token.VALUE_NUMBER) {         builder.setCategory(parser.text()).     } else {         throw new XContentParseException("category context must be an object, string, number or boolean").     }     return builder.build(). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(CONTEXT_VALUE, category).     builder.field(CONTEXT_BOOST, boost).     builder.field(CONTEXT_PREFIX, isPrefix).     builder.endObject().     return builder. }
true;public;1;5;/**  * Sets the category of the category.  * This is a required field  */ ;/**  * Sets the category of the category.  * This is a required field  */ public Builder setCategory(String category) {     Objects.requireNonNull(category, "category must not be null").     this.category = category.     return this. }
true;public;1;4;/**  * Sets if the context should be treated as a prefix or not.  * Defaults to false  */ ;/**  * Sets if the context should be treated as a prefix or not.  * Defaults to false  */ public Builder setPrefix(boolean prefix) {     this.isPrefix = prefix.     return this. }
true;public;1;7;/**  * Sets the query-time boost of the context.  * Defaults to 1.  */ ;/**  * Sets the query-time boost of the context.  * Defaults to 1.  */ public Builder setBoost(int boost) {     if (boost <= 0) {         throw new IllegalArgumentException("boost must be greater than 0").     }     this.boost = boost.     return this. }
false;public;0;4;;public CategoryQueryContext build() {     Objects.requireNonNull(category, "category must not be null").     return new CategoryQueryContext(category, boost, isPrefix). }
