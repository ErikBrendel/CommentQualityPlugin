commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected RecoveryState readShardResult(StreamInput in) throws IOException {     return RecoveryState.readRecoveryState(in). }
false;protected;7;23;;@Override protected RecoveryResponse newResponse(RecoveryRequest request, int totalShards, int successfulShards, int failedShards, List<RecoveryState> responses, List<DefaultShardOperationFailedException> shardFailures, ClusterState clusterState) {     Map<String, List<RecoveryState>> shardResponses = new HashMap<>().     for (RecoveryState recoveryState : responses) {         if (recoveryState == null) {             continue.         }         String indexName = recoveryState.getShardId().getIndexName().         if (!shardResponses.containsKey(indexName)) {             shardResponses.put(indexName, new ArrayList<>()).         }         if (request.activeOnly()) {             if (recoveryState.getStage() != RecoveryState.Stage.DONE) {                 shardResponses.get(indexName).add(recoveryState).             }         } else {             shardResponses.get(indexName).add(recoveryState).         }     }     return new RecoveryResponse(totalShards, successfulShards, failedShards, shardResponses, shardFailures). }
false;protected;1;6;;@Override protected RecoveryRequest readRequestFrom(StreamInput in) throws IOException {     final RecoveryRequest recoveryRequest = new RecoveryRequest().     recoveryRequest.readFrom(in).     return recoveryRequest. }
false;protected;2;6;;@Override protected RecoveryState shardOperation(RecoveryRequest request, ShardRouting shardRouting) {     IndexService indexService = indicesService.indexServiceSafe(shardRouting.shardId().getIndex()).     IndexShard indexShard = indexService.getShard(shardRouting.shardId().id()).     return indexShard.recoveryState(). }
false;protected;3;4;;@Override protected ShardsIterator shards(ClusterState state, RecoveryRequest request, String[] concreteIndices) {     return state.routingTable().allShardsIncludingRelocationTargets(concreteIndices). }
false;protected;2;4;;@Override protected ClusterBlockException checkGlobalBlock(ClusterState state, RecoveryRequest request) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ). }
false;protected;3;4;;@Override protected ClusterBlockException checkRequestBlock(ClusterState state, RecoveryRequest request, String[] concreteIndices) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, concreteIndices). }
