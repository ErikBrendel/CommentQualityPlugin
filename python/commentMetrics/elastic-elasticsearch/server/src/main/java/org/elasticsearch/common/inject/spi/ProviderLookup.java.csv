commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public T get() {     if (lookup.delegate == null) {         throw new IllegalStateException("This Provider cannot be used until the Injector has been created.").     }     return lookup.delegate.get(). }
false;public;0;4;;@Override public String toString() {     return "Provider<" + lookup.key.getTypeLiteral() + ">". }
false;public;0;3;;public Key<T> getKey() {     return lookup.getKey(). }
false;public;0;4;;@Override public Object getSource() {     return source. }
false;public;0;3;;public Key<T> getKey() {     return key. }
false;public;1;4;;@Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
true;public;1;6;/**  * Sets the actual provider.  *  * @throws IllegalStateException if the delegate is already set  */ ;/**  * Sets the actual provider.  *  * @throws IllegalStateException if the delegate is already set  */ public void initializeDelegate(Provider<T> delegate) {     if (this.delegate != null) {         throw new IllegalStateException("delegate already initialized").     }     this.delegate = Objects.requireNonNull(delegate, "delegate"). }
false;public;1;4;;@Override public void applyTo(Binder binder) {     initializeDelegate(binder.withSource(getSource()).getProvider(key)). }
true;public;0;3;/**  * Returns the delegate provider, or {@code null} if it has not yet been initialized. The delegate  * will be initialized when this element is processed, or otherwise used to create an injector.  */ ;/**  * Returns the delegate provider, or {@code null} if it has not yet been initialized. The delegate  * will be initialized when this element is processed, or otherwise used to create an injector.  */ public Provider<T> getDelegate() {     return delegate. }
true;public;0;3;/**  * Returns the looked up provider. The result is not valid until this lookup has been initialized,  * which usually happens when the injector is created. The provider will throw an {@code  * IllegalStateException} if you try to use it beforehand.  */ ;/**  * Returns the looked up provider. The result is not valid until this lookup has been initialized,  * which usually happens when the injector is created. The provider will throw an {@code  * IllegalStateException} if you try to use it beforehand.  */ public Provider<T> getProvider() {     return new ProviderImpl<>(this). }
