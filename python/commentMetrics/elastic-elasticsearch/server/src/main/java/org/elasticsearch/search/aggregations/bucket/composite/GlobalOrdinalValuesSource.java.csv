commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;@Override void copyCurrent(int slot) {     values = bigArrays.grow(values, slot + 1).     values.set(slot, currentValue). }
false;;2;4;;@Override int compare(int from, int to) {     return Long.compare(values.get(from), values.get(to)) * reverseMul. }
false;;1;4;;@Override int compareCurrent(int slot) {     return Long.compare(currentValue, values.get(slot)) * reverseMul. }
false;;0;11;;@Override int compareCurrentWithAfter() {     int cmp = Long.compare(currentValue, afterValueGlobalOrd).     if (cmp == 0 && isTopValueInsertionPoint) {         // is "after" the insertion point.         return reverseMul.     }     return cmp * reverseMul. }
false;;1;4;;@Override int hashCode(int slot) {     return Long.hashCode(values.get(slot)). }
false;;0;4;;@Override int hashCodeCurrent() {     return Long.hashCode(currentValue). }
false;;1;11;;@Override void setAfter(Comparable value) {     if (missingBucket && value == null) {         afterValue = null.         afterValueGlobalOrd = -1L.     } else if (value.getClass() == String.class) {         afterValue = format.parseBytesRef(value.toString()).     } else {         throw new IllegalArgumentException("invalid value, expected string, got " + value.getClass().getSimpleName()).     } }
false;;1;13;;@Override BytesRef toComparable(int slot) throws IOException {     long globalOrd = values.get(slot).     if (missingBucket && globalOrd == -1) {         return null.     } else if (globalOrd == lastLookupOrd) {         return lastLookupValue.     } else {         lastLookupOrd = globalOrd.         lastLookupValue = BytesRef.deepCopyOf(lookup.lookupOrd(values.get(slot))).         return lastLookupValue.     } }
false;public;2;13;;@Override public void collect(int doc, long bucket) throws IOException {     if (dvs.advanceExact(doc)) {         long ord.         while ((ord = dvs.nextOrd()) != NO_MORE_ORDS) {             currentValue = ord.             next.collect(doc, bucket).         }     } else if (missingBucket) {         currentValue = -1.         next.collect(doc, bucket).     } }
false;;2;22;;@Override LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector next) throws IOException {     final SortedSetDocValues dvs = docValuesFunc.apply(context).     if (lookup == null) {         initLookup(dvs).     }     return new LeafBucketCollector() {          @Override         public void collect(int doc, long bucket) throws IOException {             if (dvs.advanceExact(doc)) {                 long ord.                 while ((ord = dvs.nextOrd()) != NO_MORE_ORDS) {                     currentValue = ord.                     next.collect(doc, bucket).                 }             } else if (missingBucket) {                 currentValue = -1.                 next.collect(doc, bucket).             }         }     }. }
false;public;2;17;;@Override public void collect(int doc, long bucket) throws IOException {     if (currentValueIsSet == false) {         if (dvs.advanceExact(doc)) {             long ord.             while ((ord = dvs.nextOrd()) != NO_MORE_ORDS) {                 if (term.equals(lookup.lookupOrd(ord))) {                     currentValueIsSet = true.                     currentValue = ord.                     break.                 }             }         }     }     assert currentValueIsSet.     next.collect(doc, bucket). }
false;;3;32;;@Override LeafBucketCollector getLeafCollector(Comparable value, LeafReaderContext context, LeafBucketCollector next) throws IOException {     if (value.getClass() != BytesRef.class) {         throw new IllegalArgumentException("Expected BytesRef, got " + value.getClass()).     }     BytesRef term = (BytesRef) value.     final SortedSetDocValues dvs = docValuesFunc.apply(context).     if (lookup == null) {         initLookup(dvs).     }     return new LeafBucketCollector() {          boolean currentValueIsSet = false.          @Override         public void collect(int doc, long bucket) throws IOException {             if (currentValueIsSet == false) {                 if (dvs.advanceExact(doc)) {                     long ord.                     while ((ord = dvs.nextOrd()) != NO_MORE_ORDS) {                         if (term.equals(lookup.lookupOrd(ord))) {                             currentValueIsSet = true.                             currentValue = ord.                             break.                         }                     }                 }             }             assert currentValueIsSet.             next.collect(doc, bucket).         }     }. }
false;;2;9;;@Override SortedDocsProducer createSortedDocsProducerOrNull(IndexReader reader, Query query) {     if (checkIfSortedDocsIsApplicable(reader, fieldType) == false || fieldType instanceof StringFieldType == false || (query != null && query.getClass() != MatchAllDocsQuery.class)) {         return null.     }     return new TermsSortedDocsProducer(fieldType.name()). }
false;public;0;4;;@Override public void close() {     Releasables.close(values). }
false;private;1;11;;private void initLookup(SortedSetDocValues dvs) throws IOException {     lookup = dvs.     if (afterValue != null && afterValueGlobalOrd == null) {         afterValueGlobalOrd = lookup.lookupTerm(afterValue).         if (afterValueGlobalOrd < 0) {             // convert negative insert position             afterValueGlobalOrd = -afterValueGlobalOrd - 1.             isTopValueInsertionPoint = true.         }     } }
