commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(fuzziness).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         // start using features that are not available on all nodes.         if (isAutoWithCustomValues()) {             out.writeBoolean(true).             out.writeVInt(lowDistance).             out.writeVInt(highDistance).         } else {             out.writeBoolean(false).         }     } }
true;public,static;1;3;/**  * Creates a {@link Fuzziness} instance from an edit distance. The value must be one of {@code [0, 1, 2]}  *  * Note: Using this method only makes sense if the field you are applying Fuzziness to is some sort of string.  */ ;/**  * Creates a {@link Fuzziness} instance from an edit distance. The value must be one of {@code [0, 1, 2]}  *  * Note: Using this method only makes sense if the field you are applying Fuzziness to is some sort of string.  */ public static Fuzziness fromEdits(int edits) {     return new Fuzziness(edits). }
false;public,static;1;12;;public static Fuzziness build(Object fuzziness) {     if (fuzziness instanceof Fuzziness) {         return (Fuzziness) fuzziness.     }     String string = fuzziness.toString().     if (AUTO.asString().equalsIgnoreCase(string)) {         return AUTO.     } else if (string.toUpperCase(Locale.ROOT).startsWith(AUTO.asString() + ":")) {         return parseCustomAuto(string).     }     return new Fuzziness(string). }
false;private,static;1;16;;private static Fuzziness parseCustomAuto(final String string) {     assert string.toUpperCase(Locale.ROOT).startsWith(AUTO.asString() + ":").     String[] fuzzinessLimit = string.substring(AUTO.asString().length() + 1).split(",").     if (fuzzinessLimit.length == 2) {         try {             int lowerLimit = Integer.parseInt(fuzzinessLimit[0]).             int highLimit = Integer.parseInt(fuzzinessLimit[1]).             return new Fuzziness("AUTO", lowerLimit, highLimit).         } catch (NumberFormatException e) {             throw new ElasticsearchParseException("failed to parse [{}] as a \"auto:int,int\"", e, string).         }     } else {         throw new ElasticsearchParseException("failed to find low and high distance values").     } }
false;public,static;1;31;;public static Fuzziness parse(XContentParser parser) throws IOException {     XContentParser.Token token = parser.currentToken().     switch(token) {         case VALUE_STRING:         case VALUE_NUMBER:             final String fuzziness = parser.text().             if (AUTO.asString().equalsIgnoreCase(fuzziness)) {                 return AUTO.             } else if (fuzziness.toUpperCase(Locale.ROOT).startsWith(AUTO.asString() + ":")) {                 return parseCustomAuto(fuzziness).             }             try {                 final int minimumSimilarity = Integer.parseInt(fuzziness).                 switch(minimumSimilarity) {                     case 0:                         return ZERO.                     case 1:                         return ONE.                     case 2:                         return TWO.                     default:                         return build(fuzziness).                 }             } catch (NumberFormatException ex) {                 return build(fuzziness).             }         default:             throw new IllegalArgumentException("Can't parse fuzziness on token: [" + token + "]").     } }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(X_FIELD_NAME, asString()).     return builder. }
false;public;0;3;;public int asDistance() {     return asDistance(null). }
false;public;1;13;;public int asDistance(String text) {     if (this.equals(AUTO)) {         // AUTO         final int len = termLen(text).         if (len < lowDistance) {             return 0.         } else if (len < highDistance) {             return 1.         } else {             return 2.         }     }     return Math.min(2, (int) asFloat()). }
false;public;0;6;;public float asFloat() {     if (this.equals(AUTO) || isAutoWithCustomValues()) {         return 1f.     }     return Float.parseFloat(fuzziness.toString()). }
false;private;1;3;;private int termLen(String text) {     // 5 avg term length in english     return text == null ? 5 : text.codePointCount(0, text.length()). }
false;public;0;6;;public String asString() {     if (isAutoWithCustomValues()) {         return fuzziness.toString() + ":" + lowDistance + "," + highDistance.     }     return fuzziness.toString(). }
false;private;0;4;;private boolean isAutoWithCustomValues() {     return fuzziness.startsWith("AUTO") && (lowDistance != DEFAULT_LOW_DISTANCE || highDistance != DEFAULT_HIGH_DISTANCE). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Fuzziness other = (Fuzziness) obj.     return Objects.equals(fuzziness, other.fuzziness) && lowDistance == other.lowDistance && highDistance == other.highDistance. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(fuzziness, lowDistance, highDistance). }
