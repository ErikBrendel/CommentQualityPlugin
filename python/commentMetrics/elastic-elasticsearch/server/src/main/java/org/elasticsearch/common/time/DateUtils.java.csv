# id;timestamp;commentText;codeText;commentWords;codeWords
DateUtils -> private static long of(final int year, final int month);1549876539;Return the first day of the month_@param year  the year to return_@param month the month to return, ranging from 1-12_@return the milliseconds since the epoch of the first day of the month in the year;private static long of(final int year, final int month) {_        long millis = utcMillisAtStartOfYear(year)__        millis += getTotalMillisByYearMonth(year, month)__        return millis__    };return,the,first,day,of,the,month,param,year,the,year,to,return,param,month,the,month,to,return,ranging,from,1,12,return,the,milliseconds,since,the,epoch,of,the,first,day,of,the,month,in,the,year;private,static,long,of,final,int,year,final,int,month,long,millis,utc,millis,at,start,of,year,year,millis,get,total,millis,by,year,month,year,month,return,millis
DateUtils -> private static long of(final int year, final int month);1549960939;Return the first day of the month_@param year  the year to return_@param month the month to return, ranging from 1-12_@return the milliseconds since the epoch of the first day of the month in the year;private static long of(final int year, final int month) {_        long millis = utcMillisAtStartOfYear(year)__        millis += getTotalMillisByYearMonth(year, month)__        return millis__    };return,the,first,day,of,the,month,param,year,the,year,to,return,param,month,the,month,to,return,ranging,from,1,12,return,the,milliseconds,since,the,epoch,of,the,first,day,of,the,month,in,the,year;private,static,long,of,final,int,year,final,int,month,long,millis,utc,millis,at,start,of,year,year,millis,get,total,millis,by,year,month,year,month,return,millis
DateUtils -> public static long roundFloor(long utcMillis, final long unitMillis);1549876539;Rounds the given utc milliseconds sicne the epoch down to the next unit millis__Note: This does not check for correctness of the result, as this only works with units smaller or equal than a day_In order to ensure the performane of this methods, there are no guards or checks in it__@param utcMillis   the milliseconds since the epoch_@param unitMillis  the unit to round to_@return            the rounded milliseconds since the epoch;public static long roundFloor(long utcMillis, final long unitMillis) {_        if (utcMillis >= 0) {_            return utcMillis - utcMillis % unitMillis__        } else {_            utcMillis += 1__            return utcMillis - utcMillis % unitMillis - unitMillis__        }_    };rounds,the,given,utc,milliseconds,sicne,the,epoch,down,to,the,next,unit,millis,note,this,does,not,check,for,correctness,of,the,result,as,this,only,works,with,units,smaller,or,equal,than,a,day,in,order,to,ensure,the,performane,of,this,methods,there,are,no,guards,or,checks,in,it,param,utc,millis,the,milliseconds,since,the,epoch,param,unit,millis,the,unit,to,round,to,return,the,rounded,milliseconds,since,the,epoch;public,static,long,round,floor,long,utc,millis,final,long,unit,millis,if,utc,millis,0,return,utc,millis,utc,millis,unit,millis,else,utc,millis,1,return,utc,millis,utc,millis,unit,millis,unit,millis
DateUtils -> public static long roundFloor(long utcMillis, final long unitMillis);1549960939;Rounds the given utc milliseconds sicne the epoch down to the next unit millis__Note: This does not check for correctness of the result, as this only works with units smaller or equal than a day_In order to ensure the performane of this methods, there are no guards or checks in it__@param utcMillis   the milliseconds since the epoch_@param unitMillis  the unit to round to_@return            the rounded milliseconds since the epoch;public static long roundFloor(long utcMillis, final long unitMillis) {_        if (utcMillis >= 0) {_            return utcMillis - utcMillis % unitMillis__        } else {_            utcMillis += 1__            return utcMillis - utcMillis % unitMillis - unitMillis__        }_    };rounds,the,given,utc,milliseconds,sicne,the,epoch,down,to,the,next,unit,millis,note,this,does,not,check,for,correctness,of,the,result,as,this,only,works,with,units,smaller,or,equal,than,a,day,in,order,to,ensure,the,performane,of,this,methods,there,are,no,guards,or,checks,in,it,param,utc,millis,the,milliseconds,since,the,epoch,param,unit,millis,the,unit,to,round,to,return,the,rounded,milliseconds,since,the,epoch;public,static,long,round,floor,long,utc,millis,final,long,unit,millis,if,utc,millis,0,return,utc,millis,utc,millis,unit,millis,else,utc,millis,1,return,utc,millis,utc,millis,unit,millis,unit,millis
DateUtils -> public static long roundYear(final long utcMillis);1549876539;Round down to the beginning of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the beginning of the year;public static long roundYear(final long utcMillis) {_        int year = getYear(utcMillis)__        return utcMillisAtStartOfYear(year)__    };round,down,to,the,beginning,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,beginning,of,the,year;public,static,long,round,year,final,long,utc,millis,int,year,get,year,utc,millis,return,utc,millis,at,start,of,year,year
DateUtils -> public static long roundYear(final long utcMillis);1549960939;Round down to the beginning of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the beginning of the year;public static long roundYear(final long utcMillis) {_        int year = getYear(utcMillis)__        return utcMillisAtStartOfYear(year)__    };round,down,to,the,beginning,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,beginning,of,the,year;public,static,long,round,year,final,long,utc,millis,int,year,get,year,utc,millis,return,utc,millis,at,start,of,year,year
DateUtils -> public static long roundQuarterOfYear(final long utcMillis);1549876539;Round down to the beginning of the quarter of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the quarter of the year;public static long roundQuarterOfYear(final long utcMillis) {_        int year = getYear(utcMillis)__        int month = getMonthOfYear(utcMillis, year)__        int firstMonthOfQuarter = (((month-1) / 3) * 3) + 1__        return DateUtils.of(year, firstMonthOfQuarter)__    };round,down,to,the,beginning,of,the,quarter,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,quarter,of,the,year;public,static,long,round,quarter,of,year,final,long,utc,millis,int,year,get,year,utc,millis,int,month,get,month,of,year,utc,millis,year,int,first,month,of,quarter,month,1,3,3,1,return,date,utils,of,year,first,month,of,quarter
DateUtils -> public static long roundQuarterOfYear(final long utcMillis);1549960939;Round down to the beginning of the quarter of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the quarter of the year;public static long roundQuarterOfYear(final long utcMillis) {_        int year = getYear(utcMillis)__        int month = getMonthOfYear(utcMillis, year)__        int firstMonthOfQuarter = (((month-1) / 3) * 3) + 1__        return DateUtils.of(year, firstMonthOfQuarter)__    };round,down,to,the,beginning,of,the,quarter,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,quarter,of,the,year;public,static,long,round,quarter,of,year,final,long,utc,millis,int,year,get,year,utc,millis,int,month,get,month,of,year,utc,millis,year,int,first,month,of,quarter,month,1,3,3,1,return,date,utils,of,year,first,month,of,quarter
DateUtils -> public static long roundMonthOfYear(final long utcMillis);1549876539;Round down to the beginning of the month of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the month of the year;public static long roundMonthOfYear(final long utcMillis) {_        int year = getYear(utcMillis)__        int month = getMonthOfYear(utcMillis, year)__        return DateUtils.of(year, month)__    };round,down,to,the,beginning,of,the,month,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,month,of,the,year;public,static,long,round,month,of,year,final,long,utc,millis,int,year,get,year,utc,millis,int,month,get,month,of,year,utc,millis,year,return,date,utils,of,year,month
DateUtils -> public static long roundMonthOfYear(final long utcMillis);1549960939;Round down to the beginning of the month of the year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the month of the year;public static long roundMonthOfYear(final long utcMillis) {_        int year = getYear(utcMillis)__        int month = getMonthOfYear(utcMillis, year)__        return DateUtils.of(year, month)__    };round,down,to,the,beginning,of,the,month,of,the,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,month,of,the,year;public,static,long,round,month,of,year,final,long,utc,millis,int,year,get,year,utc,millis,int,month,get,month,of,year,utc,millis,year,return,date,utils,of,year,month
DateUtils -> public static Instant toInstant(long nanoSecondsSinceEpoch);1549276276;convert a long value to a java time instant_the long value resembles the nanoseconds since the epoch__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the instant resembling the specified date;public static Instant toInstant(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and cannot " +_                "be processed in nanosecond resolution")__        }_        if (nanoSecondsSinceEpoch == 0) {_            return Instant.EPOCH__        }__        long seconds = nanoSecondsSinceEpoch / 1_000_000_000__        long nanos = nanoSecondsSinceEpoch % 1_000_000_000__        return Instant.ofEpochSecond(seconds, nanos)__    };convert,a,long,value,to,a,java,time,instant,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,instant,resembling,the,specified,date;public,static,instant,to,instant,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,cannot,be,processed,in,nanosecond,resolution,if,nano,seconds,since,epoch,0,return,instant,epoch,long,seconds,nano,seconds,since,epoch,long,nanos,nano,seconds,since,epoch,return,instant,of,epoch,second,seconds,nanos
DateUtils -> public static Instant toInstant(long nanoSecondsSinceEpoch);1549632251;convert a long value to a java time instant_the long value resembles the nanoseconds since the epoch__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the instant resembling the specified date;public static Instant toInstant(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and cannot " +_                "be processed in nanosecond resolution")__        }_        if (nanoSecondsSinceEpoch == 0) {_            return Instant.EPOCH__        }__        long seconds = nanoSecondsSinceEpoch / 1_000_000_000__        long nanos = nanoSecondsSinceEpoch % 1_000_000_000__        return Instant.ofEpochSecond(seconds, nanos)__    };convert,a,long,value,to,a,java,time,instant,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,instant,resembling,the,specified,date;public,static,instant,to,instant,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,cannot,be,processed,in,nanosecond,resolution,if,nano,seconds,since,epoch,0,return,instant,epoch,long,seconds,nano,seconds,since,epoch,long,nanos,nano,seconds,since,epoch,return,instant,of,epoch,second,seconds,nanos
DateUtils -> public static Instant toInstant(long nanoSecondsSinceEpoch);1549876539;convert a long value to a java time instant_the long value resembles the nanoseconds since the epoch__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the instant resembling the specified date;public static Instant toInstant(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and cannot " +_                "be processed in nanosecond resolution")__        }_        if (nanoSecondsSinceEpoch == 0) {_            return Instant.EPOCH__        }__        long seconds = nanoSecondsSinceEpoch / 1_000_000_000__        long nanos = nanoSecondsSinceEpoch % 1_000_000_000__        return Instant.ofEpochSecond(seconds, nanos)__    };convert,a,long,value,to,a,java,time,instant,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,instant,resembling,the,specified,date;public,static,instant,to,instant,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,cannot,be,processed,in,nanosecond,resolution,if,nano,seconds,since,epoch,0,return,instant,epoch,long,seconds,nano,seconds,since,epoch,long,nanos,nano,seconds,since,epoch,return,instant,of,epoch,second,seconds,nanos
DateUtils -> public static Instant toInstant(long nanoSecondsSinceEpoch);1549960939;convert a long value to a java time instant_the long value resembles the nanoseconds since the epoch__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the instant resembling the specified date;public static Instant toInstant(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and cannot " +_                "be processed in nanosecond resolution")__        }_        if (nanoSecondsSinceEpoch == 0) {_            return Instant.EPOCH__        }__        long seconds = nanoSecondsSinceEpoch / 1_000_000_000__        long nanos = nanoSecondsSinceEpoch % 1_000_000_000__        return Instant.ofEpochSecond(seconds, nanos)__    };convert,a,long,value,to,a,java,time,instant,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,instant,resembling,the,specified,date;public,static,instant,to,instant,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,cannot,be,processed,in,nanosecond,resolution,if,nano,seconds,since,epoch,0,return,instant,epoch,long,seconds,nano,seconds,since,epoch,long,nanos,nano,seconds,since,epoch,return,instant,of,epoch,second,seconds,nanos
DateUtils -> public static long toLong(Instant instant);1549276276;convert a java time instant to a long value which is stored in lucene_the long value resembles the nanoseconds since the epoch__@param instant the instant to convert_@return        the nano seconds and seconds as a single long;public static long toLong(Instant instant) {_        if (instant.isBefore(Instant.EPOCH)) {_            throw new IllegalArgumentException("date[" + instant + "] is before the epoch in 1970 and cannot be " +_                "stored in nanosecond resolution")__        }_        if (instant.isAfter(MAX_NANOSECOND_INSTANT)) {_            throw new IllegalArgumentException("date[" + instant + "] is after 2262-04-11T23:47:16.854775807 and cannot be " +_                "stored in nanosecond resolution")__        }_        return instant.getEpochSecond() * 1_000_000_000 + instant.getNano()__    };convert,a,java,time,instant,to,a,long,value,which,is,stored,in,lucene,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,instant,the,instant,to,convert,return,the,nano,seconds,and,seconds,as,a,single,long;public,static,long,to,long,instant,instant,if,instant,is,before,instant,epoch,throw,new,illegal,argument,exception,date,instant,is,before,the,epoch,in,1970,and,cannot,be,stored,in,nanosecond,resolution,if,instant,is,after,throw,new,illegal,argument,exception,date,instant,is,after,2262,04,11t23,47,16,854775807,and,cannot,be,stored,in,nanosecond,resolution,return,instant,get,epoch,second,instant,get,nano
DateUtils -> public static long toLong(Instant instant);1549632251;convert a java time instant to a long value which is stored in lucene_the long value resembles the nanoseconds since the epoch__@param instant the instant to convert_@return        the nano seconds and seconds as a single long;public static long toLong(Instant instant) {_        if (instant.isBefore(Instant.EPOCH)) {_            throw new IllegalArgumentException("date[" + instant + "] is before the epoch in 1970 and cannot be " +_                "stored in nanosecond resolution")__        }_        if (instant.isAfter(MAX_NANOSECOND_INSTANT)) {_            throw new IllegalArgumentException("date[" + instant + "] is after 2262-04-11T23:47:16.854775807 and cannot be " +_                "stored in nanosecond resolution")__        }_        return instant.getEpochSecond() * 1_000_000_000 + instant.getNano()__    };convert,a,java,time,instant,to,a,long,value,which,is,stored,in,lucene,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,instant,the,instant,to,convert,return,the,nano,seconds,and,seconds,as,a,single,long;public,static,long,to,long,instant,instant,if,instant,is,before,instant,epoch,throw,new,illegal,argument,exception,date,instant,is,before,the,epoch,in,1970,and,cannot,be,stored,in,nanosecond,resolution,if,instant,is,after,throw,new,illegal,argument,exception,date,instant,is,after,2262,04,11t23,47,16,854775807,and,cannot,be,stored,in,nanosecond,resolution,return,instant,get,epoch,second,instant,get,nano
DateUtils -> public static long toLong(Instant instant);1549876539;convert a java time instant to a long value which is stored in lucene_the long value resembles the nanoseconds since the epoch__@param instant the instant to convert_@return        the nano seconds and seconds as a single long;public static long toLong(Instant instant) {_        if (instant.isBefore(Instant.EPOCH)) {_            throw new IllegalArgumentException("date[" + instant + "] is before the epoch in 1970 and cannot be " +_                "stored in nanosecond resolution")__        }_        if (instant.isAfter(MAX_NANOSECOND_INSTANT)) {_            throw new IllegalArgumentException("date[" + instant + "] is after 2262-04-11T23:47:16.854775807 and cannot be " +_                "stored in nanosecond resolution")__        }_        return instant.getEpochSecond() * 1_000_000_000 + instant.getNano()__    };convert,a,java,time,instant,to,a,long,value,which,is,stored,in,lucene,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,instant,the,instant,to,convert,return,the,nano,seconds,and,seconds,as,a,single,long;public,static,long,to,long,instant,instant,if,instant,is,before,instant,epoch,throw,new,illegal,argument,exception,date,instant,is,before,the,epoch,in,1970,and,cannot,be,stored,in,nanosecond,resolution,if,instant,is,after,throw,new,illegal,argument,exception,date,instant,is,after,2262,04,11t23,47,16,854775807,and,cannot,be,stored,in,nanosecond,resolution,return,instant,get,epoch,second,instant,get,nano
DateUtils -> public static long toLong(Instant instant);1549960939;convert a java time instant to a long value which is stored in lucene_the long value resembles the nanoseconds since the epoch__@param instant the instant to convert_@return        the nano seconds and seconds as a single long;public static long toLong(Instant instant) {_        if (instant.isBefore(Instant.EPOCH)) {_            throw new IllegalArgumentException("date[" + instant + "] is before the epoch in 1970 and cannot be " +_                "stored in nanosecond resolution")__        }_        if (instant.isAfter(MAX_NANOSECOND_INSTANT)) {_            throw new IllegalArgumentException("date[" + instant + "] is after 2262-04-11T23:47:16.854775807 and cannot be " +_                "stored in nanosecond resolution")__        }_        return instant.getEpochSecond() * 1_000_000_000 + instant.getNano()__    };convert,a,java,time,instant,to,a,long,value,which,is,stored,in,lucene,the,long,value,resembles,the,nanoseconds,since,the,epoch,param,instant,the,instant,to,convert,return,the,nano,seconds,and,seconds,as,a,single,long;public,static,long,to,long,instant,instant,if,instant,is,before,instant,epoch,throw,new,illegal,argument,exception,date,instant,is,before,the,epoch,in,1970,and,cannot,be,stored,in,nanosecond,resolution,if,instant,is,after,throw,new,illegal,argument,exception,date,instant,is,after,2262,04,11t23,47,16,854775807,and,cannot,be,stored,in,nanosecond,resolution,return,instant,get,epoch,second,instant,get,nano
DateUtils -> public static long roundWeekOfWeekYear(final long utcMillis);1549876539;Round down to the beginning of the week based on week year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the beginning of the week based on week year;public static long roundWeekOfWeekYear(final long utcMillis) {_        return roundFloor(utcMillis + 3 * 86400 * 1000L, 604800000) - 3 * 86400 * 1000L__    };round,down,to,the,beginning,of,the,week,based,on,week,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,beginning,of,the,week,based,on,week,year;public,static,long,round,week,of,week,year,final,long,utc,millis,return,round,floor,utc,millis,3,86400,1000l,604800000,3,86400,1000l
DateUtils -> public static long roundWeekOfWeekYear(final long utcMillis);1549960939;Round down to the beginning of the week based on week year of the specified time_@param utcMillis the milliseconds since the epoch_@return The milliseconds since the epoch rounded down to the beginning of the week based on week year;public static long roundWeekOfWeekYear(final long utcMillis) {_        return roundFloor(utcMillis + 3 * 86400 * 1000L, 604800000) - 3 * 86400 * 1000L__    };round,down,to,the,beginning,of,the,week,based,on,week,year,of,the,specified,time,param,utc,millis,the,milliseconds,since,the,epoch,return,the,milliseconds,since,the,epoch,rounded,down,to,the,beginning,of,the,week,based,on,week,year;public,static,long,round,week,of,week,year,final,long,utc,millis,return,round,floor,utc,millis,3,86400,1000l,604800000,3,86400,1000l
DateUtils -> public static ZonedDateTime nowWithMillisResolution();1549632251;Returns the current UTC date-time with milliseconds precision._In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean_that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8_{@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}_which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision.__@return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC;public static ZonedDateTime nowWithMillisResolution() {_        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1))__        return ZonedDateTime.now(millisResolutionClock)__    };returns,the,current,utc,date,time,with,milliseconds,precision,in,java,9,as,opposed,to,java,8,the,code,clock,implementation,uses,system,s,best,clock,implementation,which,could,mean,that,the,precision,of,the,clock,can,be,milliseconds,microseconds,or,nanoseconds,whereas,in,java,8,code,system,current,time,millis,is,always,used,to,account,for,these,differences,this,method,defines,a,new,code,clock,which,will,offer,a,value,for,code,zoned,date,time,now,set,to,always,have,milliseconds,precision,return,link,zoned,date,time,instance,for,the,current,date,time,with,milliseconds,precision,in,utc;public,static,zoned,date,time,now,with,millis,resolution,clock,millis,resolution,clock,clock,tick,clock,system,utc,duration,of,millis,1,return,zoned,date,time,now,millis,resolution,clock
DateUtils -> public static ZonedDateTime nowWithMillisResolution();1549876539;Returns the current UTC date-time with milliseconds precision._In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean_that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8_{@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}_which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision.__@return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC;public static ZonedDateTime nowWithMillisResolution() {_        Clock millisResolutionClock = Clock.tick(Clock.systemUTC(), Duration.ofMillis(1))__        return ZonedDateTime.now(millisResolutionClock)__    };returns,the,current,utc,date,time,with,milliseconds,precision,in,java,9,as,opposed,to,java,8,the,code,clock,implementation,uses,system,s,best,clock,implementation,which,could,mean,that,the,precision,of,the,clock,can,be,milliseconds,microseconds,or,nanoseconds,whereas,in,java,8,code,system,current,time,millis,is,always,used,to,account,for,these,differences,this,method,defines,a,new,code,clock,which,will,offer,a,value,for,code,zoned,date,time,now,set,to,always,have,milliseconds,precision,return,link,zoned,date,time,instance,for,the,current,date,time,with,milliseconds,precision,in,utc;public,static,zoned,date,time,now,with,millis,resolution,clock,millis,resolution,clock,clock,tick,clock,system,utc,duration,of,millis,1,return,zoned,date,time,now,millis,resolution,clock
DateUtils -> public static ZonedDateTime nowWithMillisResolution();1549960939;Returns the current UTC date-time with milliseconds precision._In Java 9+ (as opposed to Java 8) the {@code Clock} implementation uses system's best clock implementation (which could mean_that the precision of the clock can be milliseconds, microseconds or nanoseconds), whereas in Java 8_{@code System.currentTimeMillis()} is always used. To account for these differences, this method defines a new {@code Clock}_which will offer a value for {@code ZonedDateTime.now()} set to always have milliseconds precision.__@return {@link ZonedDateTime} instance for the current date-time with milliseconds precision in UTC;public static ZonedDateTime nowWithMillisResolution() {_        return nowWithMillisResolution(Clock.systemUTC())__    };returns,the,current,utc,date,time,with,milliseconds,precision,in,java,9,as,opposed,to,java,8,the,code,clock,implementation,uses,system,s,best,clock,implementation,which,could,mean,that,the,precision,of,the,clock,can,be,milliseconds,microseconds,or,nanoseconds,whereas,in,java,8,code,system,current,time,millis,is,always,used,to,account,for,these,differences,this,method,defines,a,new,code,clock,which,will,offer,a,value,for,code,zoned,date,time,now,set,to,always,have,milliseconds,precision,return,link,zoned,date,time,instance,for,the,current,date,time,with,milliseconds,precision,in,utc;public,static,zoned,date,time,now,with,millis,resolution,return,now,with,millis,resolution,clock,system,utc
DateUtils -> public static long toMilliSeconds(long nanoSecondsSinceEpoch);1549276276;Convert a nanosecond timestamp in milliseconds__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the milliseconds since the epoch;public static long toMilliSeconds(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and will " +_                "be converted to milliseconds")__        }__        if (nanoSecondsSinceEpoch == 0) {_            return 0__        }__        return nanoSecondsSinceEpoch / 1_000_000__    };convert,a,nanosecond,timestamp,in,milliseconds,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,milliseconds,since,the,epoch;public,static,long,to,milli,seconds,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,will,be,converted,to,milliseconds,if,nano,seconds,since,epoch,0,return,0,return,nano,seconds,since,epoch
DateUtils -> public static long toMilliSeconds(long nanoSecondsSinceEpoch);1549632251;Convert a nanosecond timestamp in milliseconds__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the milliseconds since the epoch;public static long toMilliSeconds(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and will " +_                "be converted to milliseconds")__        }__        if (nanoSecondsSinceEpoch == 0) {_            return 0__        }__        return nanoSecondsSinceEpoch / 1_000_000__    };convert,a,nanosecond,timestamp,in,milliseconds,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,milliseconds,since,the,epoch;public,static,long,to,milli,seconds,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,will,be,converted,to,milliseconds,if,nano,seconds,since,epoch,0,return,0,return,nano,seconds,since,epoch
DateUtils -> public static long toMilliSeconds(long nanoSecondsSinceEpoch);1549876539;Convert a nanosecond timestamp in milliseconds__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the milliseconds since the epoch;public static long toMilliSeconds(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and will " +_                "be converted to milliseconds")__        }__        if (nanoSecondsSinceEpoch == 0) {_            return 0__        }__        return nanoSecondsSinceEpoch / 1_000_000__    };convert,a,nanosecond,timestamp,in,milliseconds,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,milliseconds,since,the,epoch;public,static,long,to,milli,seconds,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,will,be,converted,to,milliseconds,if,nano,seconds,since,epoch,0,return,0,return,nano,seconds,since,epoch
DateUtils -> public static long toMilliSeconds(long nanoSecondsSinceEpoch);1549960939;Convert a nanosecond timestamp in milliseconds__@param nanoSecondsSinceEpoch the nanoseconds since the epoch_@return                      the milliseconds since the epoch;public static long toMilliSeconds(long nanoSecondsSinceEpoch) {_        if (nanoSecondsSinceEpoch < 0) {_            throw new IllegalArgumentException("nanoseconds are [" + nanoSecondsSinceEpoch + "] are before the epoch in 1970 and will " +_                "be converted to milliseconds")__        }__        if (nanoSecondsSinceEpoch == 0) {_            return 0__        }__        return nanoSecondsSinceEpoch / 1_000_000__    };convert,a,nanosecond,timestamp,in,milliseconds,param,nano,seconds,since,epoch,the,nanoseconds,since,the,epoch,return,the,milliseconds,since,the,epoch;public,static,long,to,milli,seconds,long,nano,seconds,since,epoch,if,nano,seconds,since,epoch,0,throw,new,illegal,argument,exception,nanoseconds,are,nano,seconds,since,epoch,are,before,the,epoch,in,1970,and,will,be,converted,to,milliseconds,if,nano,seconds,since,epoch,0,return,0,return,nano,seconds,since,epoch
