commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return AdjacencyMatrixAggregationBuilder.NAME. }
false;public;0;4;;@Override public List<? extends AdjacencyMatrix.Bucket> getBuckets() {     return buckets. }
false;public;1;10;;@Override public ParsedBucket getBucketByKey(String key) {     if (bucketMap == null) {         bucketMap = new HashMap<>(buckets.size()).         for (ParsedBucket bucket : buckets) {             bucketMap.put(bucket.getKey(), bucket).         }     }     return bucketMap.get(key). }
false;public,static;2;5;;public static ParsedAdjacencyMatrix fromXContent(XContentParser parser, String name) throws IOException {     ParsedAdjacencyMatrix aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
false;public;0;4;;@Override public String getKey() {     return key. }
false;public;0;4;;@Override public String getKeyAsString() {     return key. }
false;static;1;3;;static ParsedBucket fromXContent(XContentParser parser) throws IOException {     return parseXContent(parser, false, ParsedBucket::new, (p, bucket) -> bucket.key = p.text()). }
