commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Prepares the target to receive translog operations, after all file have been copied  *  * @param fileBasedRecovery whether or not this call is part of an file based recovery  * @param totalTranslogOps  total translog operations expected to be sent  */ ;/**  * Prepares the target to receive translog operations, after all file have been copied  *  * @param fileBasedRecovery whether or not this call is part of an file based recovery  * @param totalTranslogOps  total translog operations expected to be sent  */ void prepareForTranslogOperations(boolean fileBasedRecovery, int totalTranslogOps, ActionListener<Void> listener).
true;;2;1;/**  * The finalize request refreshes the engine now that new segments are available, enables garbage collection of tombstone files, updates  * the global checkpoint.  *  * @param globalCheckpoint the global checkpoint on the recovery source  * @param listener         the listener which will be notified when this method is completed  */ ;/**  * The finalize request refreshes the engine now that new segments are available, enables garbage collection of tombstone files, updates  * the global checkpoint.  *  * @param globalCheckpoint the global checkpoint on the recovery source  * @param listener         the listener which will be notified when this method is completed  */ void finalizeRecovery(long globalCheckpoint, ActionListener<Void> listener).
true;;1;1;/**  * Blockingly waits for cluster state with at least clusterStateVersion to be available  */ ;/**  * Blockingly waits for cluster state with at least clusterStateVersion to be available  */ void ensureClusterStateVersion(long clusterStateVersion).
true;;1;1;/**  * Handoff the primary context between the relocation source and the relocation target.  *  * @param primaryContext the primary context from the relocation source  */ ;/**  * Handoff the primary context between the relocation source and the relocation target.  *  * @param primaryContext the primary context from the relocation source  */ void handoffPrimaryContext(ReplicationTracker.PrimaryContext primaryContext).
true;;6;7;/**  * Index a set of translog operations on the target  *  * @param operations                          operations to index  * @param totalTranslogOps                    current number of total operations expected to be indexed  * @param maxSeenAutoIdTimestampOnPrimary     the maximum auto_id_timestamp of all append-only requests processed by the primary shard  * @param maxSeqNoOfUpdatesOrDeletesOnPrimary the max seq_no of update operations (index operations overwrite Lucene) or delete ops on  *                                            the primary shard when capturing these operations. This value is at least as high as the  *                                            max_seq_no_of_updates on the primary was when any of these ops were processed on it.  * @param retentionLeases                     the retention leases on the primary  * @param listener                            a listener which will be notified with the local checkpoint on the target  *                                            after these operations are successfully indexed on the target.  */ ;/**  * Index a set of translog operations on the target  *  * @param operations                          operations to index  * @param totalTranslogOps                    current number of total operations expected to be indexed  * @param maxSeenAutoIdTimestampOnPrimary     the maximum auto_id_timestamp of all append-only requests processed by the primary shard  * @param maxSeqNoOfUpdatesOrDeletesOnPrimary the max seq_no of update operations (index operations overwrite Lucene) or delete ops on  *                                            the primary shard when capturing these operations. This value is at least as high as the  *                                            max_seq_no_of_updates on the primary was when any of these ops were processed on it.  * @param retentionLeases                     the retention leases on the primary  * @param listener                            a listener which will be notified with the local checkpoint on the target  *                                            after these operations are successfully indexed on the target.  */ void indexTranslogOperations(List<Translog.Operation> operations, int totalTranslogOps, long maxSeenAutoIdTimestampOnPrimary, long maxSeqNoOfUpdatesOrDeletesOnPrimary, RetentionLeases retentionLeases, ActionListener<Long> listener).
true;;5;5;/**  * Notifies the target of the files it is going to receive  */ ;/**  * Notifies the target of the files it is going to receive  */ void receiveFileInfo(List<String> phase1FileNames, List<Long> phase1FileSizes, List<String> phase1ExistingFileNames, List<Long> phase1ExistingFileSizes, int totalTranslogOps).
true;;2;1;/**  * After all source files has been sent over, this command is sent to the target so it can clean any local  * files that are not part of the source store  * @param totalTranslogOps an update number of translog operations that will be replayed later on  * @param sourceMetaData meta data of the source store  */ ;/**  * After all source files has been sent over, this command is sent to the target so it can clean any local  * files that are not part of the source store  * @param totalTranslogOps an update number of translog operations that will be replayed later on  * @param sourceMetaData meta data of the source store  */ void cleanFiles(int totalTranslogOps, Store.MetadataSnapshot sourceMetaData) throws IOException.
true;;6;2;/**  * writes a partial file chunk to the target store  */ ;/**  * writes a partial file chunk to the target store  */ void writeFileChunk(StoreFileMetaData fileMetaData, long position, BytesReference content, boolean lastChunk, int totalTranslogOps, ActionListener<Void> listener).
