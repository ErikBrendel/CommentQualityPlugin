commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Object getSource() {     return source. }
false;public;0;3;;public Class<?> getType() {     return type. }
true;public;0;3;/**  * Returns the static methods and fields of {@code type} that will be injected to fulfill this  * request.  *  * @return a possibly empty set of injection points. The set has a specified iteration order. All  *         fields are returned and then all methods. Within the fields, supertype fields are returned  *         before subtype fields. Similarly, supertype methods are returned before subtype methods.  * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as  *                                a field with multiple binding annotations. The exception's {@link  *                                ConfigurationException#getPartialValue() partial value} is a {@code Set<InjectionPoint>}  *                                of the valid injection points.  */ ;/**  * Returns the static methods and fields of {@code type} that will be injected to fulfill this  * request.  *  * @return a possibly empty set of injection points. The set has a specified iteration order. All  *         fields are returned and then all methods. Within the fields, supertype fields are returned  *         before subtype fields. Similarly, supertype methods are returned before subtype methods.  * @throws ConfigurationException if there is a malformed injection point on {@code type}, such as  *                                a field with multiple binding annotations. The exception's {@link  *                                ConfigurationException#getPartialValue() partial value} is a {@code Set<InjectionPoint>}  *                                of the valid injection points.  */ public Set<InjectionPoint> getInjectionPoints() throws ConfigurationException {     return InjectionPoint.forStaticMethodsAndFields(type). }
false;public;1;4;;@Override public void applyTo(Binder binder) {     binder.withSource(getSource()).requestStaticInjection(type). }
false;public;1;4;;@Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
