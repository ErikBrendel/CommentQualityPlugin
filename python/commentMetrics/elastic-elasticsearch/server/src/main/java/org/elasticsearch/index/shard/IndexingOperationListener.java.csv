commented;modifiers;parameterAmount;loc;comment;code
true;default;2;3;/**  * Called before the indexing occurs.  */ ;/**  * Called before the indexing occurs.  */ default Engine.Index preIndex(ShardId shardId, Engine.Index operation) {     return operation. }
true;default;3;1;/**  * Called after the indexing operation occurred. Note that this is  * also called when indexing a document did not succeed due to document  * related failures. See {@link #postIndex(ShardId, Engine.Index, Exception)}  * for engine level failures  */ ;/**  * Called after the indexing operation occurred. Note that this is  * also called when indexing a document did not succeed due to document  * related failures. See {@link #postIndex(ShardId, Engine.Index, Exception)}  * for engine level failures  */ default void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) { }
true;default;3;1;/**  * Called after the indexing operation occurred with engine level exception.  * See {@link #postIndex(ShardId, Engine.Index, Engine.IndexResult)} for document  * related failures  */ ;/**  * Called after the indexing operation occurred with engine level exception.  * See {@link #postIndex(ShardId, Engine.Index, Engine.IndexResult)} for document  * related failures  */ default void postIndex(ShardId shardId, Engine.Index index, Exception ex) { }
true;default;2;3;/**  * Called before the delete occurs.  */ ;/**  * Called before the delete occurs.  */ default Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {     return delete. }
true;default;3;1;/**  * Called after the delete operation occurred. Note that this is  * also called when deleting a document did not succeed due to document  * related failures. See {@link #postDelete(ShardId, Engine.Delete, Exception)}  * for engine level failures  */ ;/**  * Called after the delete operation occurred. Note that this is  * also called when deleting a document did not succeed due to document  * related failures. See {@link #postDelete(ShardId, Engine.Delete, Exception)}  * for engine level failures  */ default void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) { }
true;default;3;1;/**  * Called after the delete operation occurred with engine level exception.  * See {@link #postDelete(ShardId, Engine.Delete, Engine.DeleteResult)} for document  * related failures  */ ;/**  * Called after the delete operation occurred with engine level exception.  * See {@link #postDelete(ShardId, Engine.Delete, Engine.DeleteResult)} for document  * related failures  */ default void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) { }
false;public;2;12;;@Override public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {     assert operation != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.preIndex(shardId, operation).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("preIndex listener [{}] failed", listener), e).         }     }     return operation. }
false;public;3;11;;@Override public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {     assert index != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.postIndex(shardId, index, result).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("postIndex listener [{}] failed", listener), e).         }     } }
false;public;3;12;;@Override public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {     assert index != null && ex != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.postIndex(shardId, index, ex).         } catch (Exception inner) {             inner.addSuppressed(ex).             logger.warn(() -> new ParameterizedMessage("postIndex listener [{}] failed", listener), inner).         }     } }
false;public;2;12;;@Override public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {     assert delete != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.preDelete(shardId, delete).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("preDelete listener [{}] failed", listener), e).         }     }     return delete. }
false;public;3;11;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {     assert delete != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.postDelete(shardId, delete, result).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("postDelete listener [{}] failed", listener), e).         }     } }
false;public;3;12;;@Override public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {     assert delete != null && ex != null.     for (IndexingOperationListener listener : listeners) {         try {             listener.postDelete(shardId, delete, ex).         } catch (Exception inner) {             inner.addSuppressed(ex).             logger.warn(() -> new ParameterizedMessage("postDelete listener [{}] failed", listener), inner).         }     } }
