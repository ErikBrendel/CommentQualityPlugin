commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * The health of the cluster.  *  * @param request The cluster state request  * @return The result future  * @see Requests#clusterHealthRequest(String...)  */ ;/**  * The health of the cluster.  *  * @param request The cluster state request  * @return The result future  * @see Requests#clusterHealthRequest(String...)  */ ActionFuture<ClusterHealthResponse> health(ClusterHealthRequest request).
true;;2;1;/**  * The health of the cluster.  *  * @param request  The cluster state request  * @param listener A listener to be notified with a result  * @see Requests#clusterHealthRequest(String...)  */ ;/**  * The health of the cluster.  *  * @param request  The cluster state request  * @param listener A listener to be notified with a result  * @see Requests#clusterHealthRequest(String...)  */ void health(ClusterHealthRequest request, ActionListener<ClusterHealthResponse> listener).
true;;1;1;/**  * The health of the cluster.  */ ;/**  * The health of the cluster.  */ ClusterHealthRequestBuilder prepareHealth(String... indices).
true;;1;1;/**  * The state of the cluster.  *  * @param request The cluster state request.  * @return The result future  * @see Requests#clusterStateRequest()  */ ;/**  * The state of the cluster.  *  * @param request The cluster state request.  * @return The result future  * @see Requests#clusterStateRequest()  */ ActionFuture<ClusterStateResponse> state(ClusterStateRequest request).
true;;2;1;/**  * The state of the cluster.  *  * @param request  The cluster state request.  * @param listener A listener to be notified with a result  * @see Requests#clusterStateRequest()  */ ;/**  * The state of the cluster.  *  * @param request  The cluster state request.  * @param listener A listener to be notified with a result  * @see Requests#clusterStateRequest()  */ void state(ClusterStateRequest request, ActionListener<ClusterStateResponse> listener).
true;;0;1;/**  * The state of the cluster.  */ ;/**  * The state of the cluster.  */ ClusterStateRequestBuilder prepareState().
true;;1;1;/**  * Updates settings in the cluster.  */ ;/**  * Updates settings in the cluster.  */ ActionFuture<ClusterUpdateSettingsResponse> updateSettings(ClusterUpdateSettingsRequest request).
true;;2;1;/**  * Update settings in the cluster.  */ ;/**  * Update settings in the cluster.  */ void updateSettings(ClusterUpdateSettingsRequest request, ActionListener<ClusterUpdateSettingsResponse> listener).
true;;0;1;/**  * Update settings in the cluster.  */ ;/**  * Update settings in the cluster.  */ ClusterUpdateSettingsRequestBuilder prepareUpdateSettings().
true;;0;1;/**  * Re initialize each cluster node and pass them the secret store password.  */ ;/**  * Re initialize each cluster node and pass them the secret store password.  */ NodesReloadSecureSettingsRequestBuilder prepareReloadSecureSettings().
true;;1;1;/**  * Reroutes allocation of shards. Advance API.  */ ;/**  * Reroutes allocation of shards. Advance API.  */ ActionFuture<ClusterRerouteResponse> reroute(ClusterRerouteRequest request).
true;;2;1;/**  * Reroutes allocation of shards. Advance API.  */ ;/**  * Reroutes allocation of shards. Advance API.  */ void reroute(ClusterRerouteRequest request, ActionListener<ClusterRerouteResponse> listener).
true;;0;1;/**  * Update settings in the cluster.  */ ;/**  * Update settings in the cluster.  */ ClusterRerouteRequestBuilder prepareReroute().
true;;1;1;/**  * Nodes info of the cluster.  *  * @param request The nodes info request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesInfoRequest(String...)  */ ;/**  * Nodes info of the cluster.  *  * @param request The nodes info request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesInfoRequest(String...)  */ ActionFuture<NodesInfoResponse> nodesInfo(NodesInfoRequest request).
true;;2;1;/**  * Nodes info of the cluster.  *  * @param request  The nodes info request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesInfoRequest(String...)  */ ;/**  * Nodes info of the cluster.  *  * @param request  The nodes info request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesInfoRequest(String...)  */ void nodesInfo(NodesInfoRequest request, ActionListener<NodesInfoResponse> listener).
true;;1;1;/**  * Nodes info of the cluster.  */ ;/**  * Nodes info of the cluster.  */ NodesInfoRequestBuilder prepareNodesInfo(String... nodesIds).
true;;1;1;/**  * Cluster wide aggregated stats.  *  * @param request The cluster stats request  * @return The result future  * @see org.elasticsearch.client.Requests#clusterStatsRequest  */ ;/**  * Cluster wide aggregated stats.  *  * @param request The cluster stats request  * @return The result future  * @see org.elasticsearch.client.Requests#clusterStatsRequest  */ ActionFuture<ClusterStatsResponse> clusterStats(ClusterStatsRequest request).
true;;2;1;/**  * Cluster wide aggregated stats  *  * @param request  The cluster stats request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#clusterStatsRequest()  */ ;/**  * Cluster wide aggregated stats  *  * @param request  The cluster stats request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#clusterStatsRequest()  */ void clusterStats(ClusterStatsRequest request, ActionListener<ClusterStatsResponse> listener).
false;;0;1;;ClusterStatsRequestBuilder prepareClusterStats().
true;;1;1;/**  * Nodes stats of the cluster.  *  * @param request The nodes stats request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesStatsRequest(String...)  */ ;/**  * Nodes stats of the cluster.  *  * @param request The nodes stats request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesStatsRequest(String...)  */ ActionFuture<NodesStatsResponse> nodesStats(NodesStatsRequest request).
true;;2;1;/**  * Nodes stats of the cluster.  *  * @param request  The nodes info request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesStatsRequest(String...)  */ ;/**  * Nodes stats of the cluster.  *  * @param request  The nodes info request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesStatsRequest(String...)  */ void nodesStats(NodesStatsRequest request, ActionListener<NodesStatsResponse> listener).
true;;1;1;/**  * Nodes stats of the cluster.  */ ;/**  * Nodes stats of the cluster.  */ NodesStatsRequestBuilder prepareNodesStats(String... nodesIds).
true;;1;1;/**  * Returns top N hot-threads samples per node. The hot-threads are only  * sampled for the node ids specified in the request. Nodes usage of the  * cluster.  *  * @param request  *            The nodes usage request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesUsageRequest(String...)  */ ;/**  * Returns top N hot-threads samples per node. The hot-threads are only  * sampled for the node ids specified in the request. Nodes usage of the  * cluster.  *  * @param request  *            The nodes usage request  * @return The result future  * @see org.elasticsearch.client.Requests#nodesUsageRequest(String...)  */ ActionFuture<NodesUsageResponse> nodesUsage(NodesUsageRequest request).
true;;2;1;/**  * Nodes usage of the cluster.  *  * @param request  *            The nodes usage request  * @param listener  *            A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesUsageRequest(String...)  */ ;/**  * Nodes usage of the cluster.  *  * @param request  *            The nodes usage request  * @param listener  *            A listener to be notified with a result  * @see org.elasticsearch.client.Requests#nodesUsageRequest(String...)  */ void nodesUsage(NodesUsageRequest request, ActionListener<NodesUsageResponse> listener).
true;;1;1;/**  * Nodes usage of the cluster.  */ ;/**  * Nodes usage of the cluster.  */ NodesUsageRequestBuilder prepareNodesUsage(String... nodesIds).
true;;1;1;/**  * Returns top N hot-threads samples per node. The hot-threads are only  * sampled for the node ids specified in the request.  */ ;/**  * Returns top N hot-threads samples per node. The hot-threads are only  * sampled for the node ids specified in the request.  */ ActionFuture<NodesHotThreadsResponse> nodesHotThreads(NodesHotThreadsRequest request).
true;;2;1;/**  * Returns top N hot-threads samples per node. The hot-threads are only sampled  * for the node ids specified in the request.  */ ;/**  * Returns top N hot-threads samples per node. The hot-threads are only sampled  * for the node ids specified in the request.  */ void nodesHotThreads(NodesHotThreadsRequest request, ActionListener<NodesHotThreadsResponse> listener).
true;;1;1;/**  * Returns a request builder to fetch top N hot-threads samples per node. The hot-threads are only sampled  * for the node ids provided. Note: Use {@code *} to fetch samples for all nodes  */ ;/**  * Returns a request builder to fetch top N hot-threads samples per node. The hot-threads are only sampled  * for the node ids provided. Note: Use {@code *} to fetch samples for all nodes  */ NodesHotThreadsRequestBuilder prepareNodesHotThreads(String... nodesIds).
true;;1;1;/**  * List tasks  *  * @param request The nodes tasks request  * @return The result future  * @see org.elasticsearch.client.Requests#listTasksRequest()  */ ;/**  * List tasks  *  * @param request The nodes tasks request  * @return The result future  * @see org.elasticsearch.client.Requests#listTasksRequest()  */ ActionFuture<ListTasksResponse> listTasks(ListTasksRequest request).
true;;2;1;/**  * List active tasks  *  * @param request  The nodes tasks request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#listTasksRequest()  */ ;/**  * List active tasks  *  * @param request  The nodes tasks request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#listTasksRequest()  */ void listTasks(ListTasksRequest request, ActionListener<ListTasksResponse> listener).
true;;1;1;/**  * List active tasks  */ ;/**  * List active tasks  */ ListTasksRequestBuilder prepareListTasks(String... nodesIds).
true;;1;1;/**  * Get a task.  *  * @param request the request  * @return the result future  * @see org.elasticsearch.client.Requests#getTaskRequest()  */ ;/**  * Get a task.  *  * @param request the request  * @return the result future  * @see org.elasticsearch.client.Requests#getTaskRequest()  */ ActionFuture<GetTaskResponse> getTask(GetTaskRequest request).
true;;2;1;/**  * Get a task.  *  * @param request the request  * @param listener A listener to be notified with the result  * @see org.elasticsearch.client.Requests#getTaskRequest()  */ ;/**  * Get a task.  *  * @param request the request  * @param listener A listener to be notified with the result  * @see org.elasticsearch.client.Requests#getTaskRequest()  */ void getTask(GetTaskRequest request, ActionListener<GetTaskResponse> listener).
true;;1;1;/**  * Fetch a task by id.  */ ;/**  * Fetch a task by id.  */ GetTaskRequestBuilder prepareGetTask(String taskId).
true;;1;1;/**  * Fetch a task by id.  */ ;/**  * Fetch a task by id.  */ GetTaskRequestBuilder prepareGetTask(TaskId taskId).
true;;1;1;/**  * Cancel tasks  *  * @param request The nodes tasks request  * @return The result future  * @see org.elasticsearch.client.Requests#cancelTasksRequest()  */ ;/**  * Cancel tasks  *  * @param request The nodes tasks request  * @return The result future  * @see org.elasticsearch.client.Requests#cancelTasksRequest()  */ ActionFuture<CancelTasksResponse> cancelTasks(CancelTasksRequest request).
true;;2;1;/**  * Cancel active tasks  *  * @param request  The nodes tasks request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#cancelTasksRequest()  */ ;/**  * Cancel active tasks  *  * @param request  The nodes tasks request  * @param listener A listener to be notified with a result  * @see org.elasticsearch.client.Requests#cancelTasksRequest()  */ void cancelTasks(CancelTasksRequest request, ActionListener<CancelTasksResponse> listener).
true;;1;1;/**  * Cancel active tasks  */ ;/**  * Cancel active tasks  */ CancelTasksRequestBuilder prepareCancelTasks(String... nodesIds).
true;;1;1;/**  * Returns list of shards the given search would be executed on.  */ ;/**  * Returns list of shards the given search would be executed on.  */ ActionFuture<ClusterSearchShardsResponse> searchShards(ClusterSearchShardsRequest request).
true;;2;1;/**  * Returns list of shards the given search would be executed on.  */ ;/**  * Returns list of shards the given search would be executed on.  */ void searchShards(ClusterSearchShardsRequest request, ActionListener<ClusterSearchShardsResponse> listener).
true;;0;1;/**  * Returns list of shards the given search would be executed on.  */ ;/**  * Returns list of shards the given search would be executed on.  */ ClusterSearchShardsRequestBuilder prepareSearchShards().
true;;1;1;/**  * Returns list of shards the given search would be executed on.  */ ;/**  * Returns list of shards the given search would be executed on.  */ ClusterSearchShardsRequestBuilder prepareSearchShards(String... indices).
true;;1;1;/**  * Registers a snapshot repository.  */ ;/**  * Registers a snapshot repository.  */ ActionFuture<AcknowledgedResponse> putRepository(PutRepositoryRequest request).
true;;2;1;/**  * Registers a snapshot repository.  */ ;/**  * Registers a snapshot repository.  */ void putRepository(PutRepositoryRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Registers a snapshot repository.  */ ;/**  * Registers a snapshot repository.  */ PutRepositoryRequestBuilder preparePutRepository(String name).
true;;1;1;/**  * Unregisters a repository.  */ ;/**  * Unregisters a repository.  */ ActionFuture<AcknowledgedResponse> deleteRepository(DeleteRepositoryRequest request).
true;;2;1;/**  * Unregisters a repository.  */ ;/**  * Unregisters a repository.  */ void deleteRepository(DeleteRepositoryRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Unregisters a repository.  */ ;/**  * Unregisters a repository.  */ DeleteRepositoryRequestBuilder prepareDeleteRepository(String name).
true;;1;1;/**  * Gets repositories.  */ ;/**  * Gets repositories.  */ ActionFuture<GetRepositoriesResponse> getRepositories(GetRepositoriesRequest request).
true;;2;1;/**  * Gets repositories.  */ ;/**  * Gets repositories.  */ void getRepositories(GetRepositoriesRequest request, ActionListener<GetRepositoriesResponse> listener).
true;;1;1;/**  * Gets repositories.  */ ;/**  * Gets repositories.  */ GetRepositoriesRequestBuilder prepareGetRepositories(String... name).
true;;1;1;/**  * Verifies a repository.  */ ;/**  * Verifies a repository.  */ ActionFuture<VerifyRepositoryResponse> verifyRepository(VerifyRepositoryRequest request).
true;;2;1;/**  * Verifies a repository.  */ ;/**  * Verifies a repository.  */ void verifyRepository(VerifyRepositoryRequest request, ActionListener<VerifyRepositoryResponse> listener).
true;;1;1;/**  * Verifies a repository.  */ ;/**  * Verifies a repository.  */ VerifyRepositoryRequestBuilder prepareVerifyRepository(String name).
true;;1;1;/**  * Creates a new snapshot.  */ ;/**  * Creates a new snapshot.  */ ActionFuture<CreateSnapshotResponse> createSnapshot(CreateSnapshotRequest request).
true;;2;1;/**  * Creates a new snapshot.  */ ;/**  * Creates a new snapshot.  */ void createSnapshot(CreateSnapshotRequest request, ActionListener<CreateSnapshotResponse> listener).
true;;2;1;/**  * Creates a new snapshot.  */ ;/**  * Creates a new snapshot.  */ CreateSnapshotRequestBuilder prepareCreateSnapshot(String repository, String name).
true;;1;1;/**  * Get snapshot.  */ ;/**  * Get snapshot.  */ ActionFuture<GetSnapshotsResponse> getSnapshots(GetSnapshotsRequest request).
true;;2;1;/**  * Get snapshot.  */ ;/**  * Get snapshot.  */ void getSnapshots(GetSnapshotsRequest request, ActionListener<GetSnapshotsResponse> listener).
true;;1;1;/**  * Get snapshot.  */ ;/**  * Get snapshot.  */ GetSnapshotsRequestBuilder prepareGetSnapshots(String repository).
true;;1;1;/**  * Delete snapshot.  */ ;/**  * Delete snapshot.  */ ActionFuture<AcknowledgedResponse> deleteSnapshot(DeleteSnapshotRequest request).
true;;2;1;/**  * Delete snapshot.  */ ;/**  * Delete snapshot.  */ void deleteSnapshot(DeleteSnapshotRequest request, ActionListener<AcknowledgedResponse> listener).
true;;2;1;/**  * Delete snapshot.  */ ;/**  * Delete snapshot.  */ DeleteSnapshotRequestBuilder prepareDeleteSnapshot(String repository, String snapshot).
true;;1;1;/**  * Restores a snapshot.  */ ;/**  * Restores a snapshot.  */ ActionFuture<RestoreSnapshotResponse> restoreSnapshot(RestoreSnapshotRequest request).
true;;2;1;/**  * Restores a snapshot.  */ ;/**  * Restores a snapshot.  */ void restoreSnapshot(RestoreSnapshotRequest request, ActionListener<RestoreSnapshotResponse> listener).
true;;2;1;/**  * Restores a snapshot.  */ ;/**  * Restores a snapshot.  */ RestoreSnapshotRequestBuilder prepareRestoreSnapshot(String repository, String snapshot).
true;;2;1;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ ;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ void pendingClusterTasks(PendingClusterTasksRequest request, ActionListener<PendingClusterTasksResponse> listener).
true;;1;1;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ ;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ ActionFuture<PendingClusterTasksResponse> pendingClusterTasks(PendingClusterTasksRequest request).
true;;0;1;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ ;/**  * Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations  * that update the cluster state (for example, a create index operation)  */ PendingClusterTasksRequestBuilder preparePendingClusterTasks().
true;;1;1;/**  * Get snapshot status.  */ ;/**  * Get snapshot status.  */ ActionFuture<SnapshotsStatusResponse> snapshotsStatus(SnapshotsStatusRequest request).
true;;2;1;/**  * Get snapshot status.  */ ;/**  * Get snapshot status.  */ void snapshotsStatus(SnapshotsStatusRequest request, ActionListener<SnapshotsStatusResponse> listener).
true;;1;1;/**  * Get snapshot status.  */ ;/**  * Get snapshot status.  */ SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository).
true;;0;1;/**  * Get snapshot status.  */ ;/**  * Get snapshot status.  */ SnapshotsStatusRequestBuilder prepareSnapshotStatus().
true;;2;1;/**  * Stores an ingest pipeline  */ ;/**  * Stores an ingest pipeline  */ void putPipeline(PutPipelineRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Stores an ingest pipeline  */ ;/**  * Stores an ingest pipeline  */ ActionFuture<AcknowledgedResponse> putPipeline(PutPipelineRequest request).
true;;3;1;/**  * Stores an ingest pipeline  */ ;/**  * Stores an ingest pipeline  */ PutPipelineRequestBuilder preparePutPipeline(String id, BytesReference source, XContentType xContentType).
true;;2;1;/**  * Deletes a stored ingest pipeline  */ ;/**  * Deletes a stored ingest pipeline  */ void deletePipeline(DeletePipelineRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Deletes a stored ingest pipeline  */ ;/**  * Deletes a stored ingest pipeline  */ ActionFuture<AcknowledgedResponse> deletePipeline(DeletePipelineRequest request).
true;;0;1;/**  * Deletes a stored ingest pipeline  */ ;/**  * Deletes a stored ingest pipeline  */ DeletePipelineRequestBuilder prepareDeletePipeline().
true;;1;1;/**  * Deletes a stored ingest pipeline  */ ;/**  * Deletes a stored ingest pipeline  */ DeletePipelineRequestBuilder prepareDeletePipeline(String id).
true;;2;1;/**  * Returns a stored ingest pipeline  */ ;/**  * Returns a stored ingest pipeline  */ void getPipeline(GetPipelineRequest request, ActionListener<GetPipelineResponse> listener).
true;;1;1;/**  * Returns a stored ingest pipeline  */ ;/**  * Returns a stored ingest pipeline  */ ActionFuture<GetPipelineResponse> getPipeline(GetPipelineRequest request).
true;;1;1;/**  * Returns a stored ingest pipeline  */ ;/**  * Returns a stored ingest pipeline  */ GetPipelineRequestBuilder prepareGetPipeline(String... ids).
true;;2;1;/**  * Simulates an ingest pipeline  */ ;/**  * Simulates an ingest pipeline  */ void simulatePipeline(SimulatePipelineRequest request, ActionListener<SimulatePipelineResponse> listener).
true;;1;1;/**  * Simulates an ingest pipeline  */ ;/**  * Simulates an ingest pipeline  */ ActionFuture<SimulatePipelineResponse> simulatePipeline(SimulatePipelineRequest request).
true;;2;1;/**  * Simulates an ingest pipeline  */ ;/**  * Simulates an ingest pipeline  */ SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source, XContentType xContentType).
true;;2;1;/**  * Explain the allocation of a shard  */ ;/**  * Explain the allocation of a shard  */ void allocationExplain(ClusterAllocationExplainRequest request, ActionListener<ClusterAllocationExplainResponse> listener).
true;;1;1;/**  * Explain the allocation of a shard  */ ;/**  * Explain the allocation of a shard  */ ActionFuture<ClusterAllocationExplainResponse> allocationExplain(ClusterAllocationExplainRequest request).
true;;0;1;/**  * Explain the allocation of a shard  */ ;/**  * Explain the allocation of a shard  */ ClusterAllocationExplainRequestBuilder prepareAllocationExplain().
true;;0;1;/**  * Store a script in the cluster state  */ ;/**  * Store a script in the cluster state  */ PutStoredScriptRequestBuilder preparePutStoredScript().
true;;2;1;/**  * Delete a script from the cluster state  */ ;/**  * Delete a script from the cluster state  */ void deleteStoredScript(DeleteStoredScriptRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Delete a script from the cluster state  */ ;/**  * Delete a script from the cluster state  */ ActionFuture<AcknowledgedResponse> deleteStoredScript(DeleteStoredScriptRequest request).
true;;0;1;/**  * Delete a script from the cluster state  */ ;/**  * Delete a script from the cluster state  */ DeleteStoredScriptRequestBuilder prepareDeleteStoredScript().
true;;1;1;/**  * Delete a script from the cluster state  */ ;/**  * Delete a script from the cluster state  */ DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id).
true;;2;1;/**  * Store a script in the cluster state  */ ;/**  * Store a script in the cluster state  */ void putStoredScript(PutStoredScriptRequest request, ActionListener<AcknowledgedResponse> listener).
true;;1;1;/**  * Store a script in the cluster state  */ ;/**  * Store a script in the cluster state  */ ActionFuture<AcknowledgedResponse> putStoredScript(PutStoredScriptRequest request).
true;;0;1;/**  * Get a script from the cluster state  */ ;/**  * Get a script from the cluster state  */ GetStoredScriptRequestBuilder prepareGetStoredScript().
true;;1;1;/**  * Get a script from the cluster state  */ ;/**  * Get a script from the cluster state  */ GetStoredScriptRequestBuilder prepareGetStoredScript(String id).
true;;2;1;/**  * Get a script from the cluster state  */ ;/**  * Get a script from the cluster state  */ void getStoredScript(GetStoredScriptRequest request, ActionListener<GetStoredScriptResponse> listener).
true;;1;1;/**  * Get a script from the cluster state  */ ;/**  * Get a script from the cluster state  */ ActionFuture<GetStoredScriptResponse> getStoredScript(GetStoredScriptRequest request).
