commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "explain_action". }
false;public;2;41;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     ExplainRequest explainRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("explain_with_types", TYPES_DEPRECATION_MESSAGE).         explainRequest = new ExplainRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         explainRequest = new ExplainRequest(request.param("index"), request.param("id")).     }     explainRequest.parent(request.param("parent")).     explainRequest.routing(request.param("routing")).     explainRequest.preference(request.param("preference")).     String queryString = request.param("q").     request.withContentOrSourceParamParserOrNull(parser -> {         if (parser != null) {             explainRequest.query(RestActions.getQueryContent(parser)).         } else if (queryString != null) {             QueryBuilder query = RestActions.urlParamsToQueryBuilder(request).             explainRequest.query(query).         }     }).     if (request.param("fields") != null) {         throw new IllegalArgumentException("The parameter [fields] is no longer supported, " + "please use [stored_fields] to retrieve stored fields").     }     String sField = request.param("stored_fields").     if (sField != null) {         String[] sFields = Strings.splitStringByCommaToArray(sField).         if (sFields != null) {             explainRequest.storedFields(sFields).         }     }     explainRequest.fetchSourceContext(FetchSourceContext.parseFromRestRequest(request)).     return channel -> client.explain(explainRequest, new RestStatusToXContentListener<>(channel)). }
