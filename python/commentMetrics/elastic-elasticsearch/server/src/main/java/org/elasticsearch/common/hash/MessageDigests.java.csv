commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;9;;private static ThreadLocal<MessageDigest> createThreadLocalMessageDigest(String digest) {     return ThreadLocal.withInitial(() -> {         try {             return MessageDigest.getInstance(digest).         } catch (NoSuchAlgorithmException e) {             throw new IllegalStateException("unexpected exception creating MessageDigest instance for [" + digest + "]", e).         }     }). }
true;public,static;0;3;/**  * Returns a {@link MessageDigest} instance for MD5 digests. note  * that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides MD5 message digest functionality.  */ ;/**  * Returns a {@link MessageDigest} instance for MD5 digests. note  * that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides MD5 message digest functionality.  */ public static MessageDigest md5() {     return get(MD5_DIGEST). }
true;public,static;0;3;/**  * Returns a {@link MessageDigest} instance for SHA-1 digests. note  * that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides SHA-1 message digest functionality.  */ ;/**  * Returns a {@link MessageDigest} instance for SHA-1 digests. note  * that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides SHA-1 message digest functionality.  */ public static MessageDigest sha1() {     return get(SHA_1_DIGEST). }
true;public,static;0;3;/**  * Returns a {@link MessageDigest} instance for SHA-256 digests.  * note that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides SHA-256 message digest functionality.  */ ;/**  * Returns a {@link MessageDigest} instance for SHA-256 digests.  * note that the instance returned is thread local and must not be  * shared amongst threads.  *  * @return a thread local {@link MessageDigest} instance that  * provides SHA-256 message digest functionality.  */ public static MessageDigest sha256() {     return get(SHA_256_DIGEST). }
false;private,static;1;5;;private static MessageDigest get(ThreadLocal<MessageDigest> messageDigest) {     MessageDigest instance = messageDigest.get().     instance.reset().     return instance. }
true;public,static;1;11;/**  * Format a byte array as a hex string.  *  * @param bytes the input to be represented as hex.  * @return a hex representation of the input as a String.  */ ;/**  * Format a byte array as a hex string.  *  * @param bytes the input to be represented as hex.  * @return a hex representation of the input as a String.  */ public static String toHexString(byte[] bytes) {     Objects.requireNonNull(bytes).     StringBuilder sb = new StringBuilder(2 * bytes.length).     for (int i = 0. i < bytes.length. i++) {         byte b = bytes[i].         sb.append(HEX_DIGITS[b >> 4 & 0xf]).append(HEX_DIGITS[b & 0xf]).     }     return sb.toString(). }
