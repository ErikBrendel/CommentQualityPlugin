# id;timestamp;commentText;codeText;commentWords;codeWords
FragmentBuilderHelper -> public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo);1528167589;Fixes problems with broken analysis chains if positions and offsets are messed up that can lead to_{@link StringIndexOutOfBoundsException} in the {@link FastVectorHighlighter};public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo) {_        assert fragInfo != null : "FragInfo must not be null"__        assert fieldType.name().equals(values[0].name()) : "Expected MappedFieldType for field " + values[0].name()__        if (!fragInfo.getSubInfos().isEmpty() && containsBrokenAnalysis(fieldType.indexAnalyzer())) {_            _            final List<SubInfo> subInfos = fragInfo.getSubInfos()__            CollectionUtil.introSort(subInfos, new Comparator<SubInfo>() {_                @Override_                public int compare(SubInfo o1, SubInfo o2) {_                    int startOffset = o1.getTermsOffsets().get(0).getStartOffset()__                    int startOffset2 = o2.getTermsOffsets().get(0).getStartOffset()__                    return FragmentBuilderHelper.compare(startOffset, startOffset2)__                }_            })__            return new WeightedFragInfo(Math.min(fragInfo.getSubInfos().get(0).getTermsOffsets().get(0).getStartOffset(),_                    fragInfo.getStartOffset()), fragInfo.getEndOffset(), subInfos, fragInfo.getTotalBoost())__        } else {_            return fragInfo__        }_    };fixes,problems,with,broken,analysis,chains,if,positions,and,offsets,are,messed,up,that,can,lead,to,link,string,index,out,of,bounds,exception,in,the,link,fast,vector,highlighter;public,static,weighted,frag,info,fix,weighted,frag,info,mapped,field,type,field,type,field,values,weighted,frag,info,frag,info,assert,frag,info,null,frag,info,must,not,be,null,assert,field,type,name,equals,values,0,name,expected,mapped,field,type,for,field,values,0,name,if,frag,info,get,sub,infos,is,empty,contains,broken,analysis,field,type,index,analyzer,final,list,sub,info,sub,infos,frag,info,get,sub,infos,collection,util,intro,sort,sub,infos,new,comparator,sub,info,override,public,int,compare,sub,info,o1,sub,info,o2,int,start,offset,o1,get,terms,offsets,get,0,get,start,offset,int,start,offset2,o2,get,terms,offsets,get,0,get,start,offset,return,fragment,builder,helper,compare,start,offset,start,offset2,return,new,weighted,frag,info,math,min,frag,info,get,sub,infos,get,0,get,terms,offsets,get,0,get,start,offset,frag,info,get,start,offset,frag,info,get,end,offset,sub,infos,frag,info,get,total,boost,else,return,frag,info
FragmentBuilderHelper -> public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo);1539615817;Fixes problems with broken analysis chains if positions and offsets are messed up that can lead to_{@link StringIndexOutOfBoundsException} in the {@link FastVectorHighlighter};public static WeightedFragInfo fixWeightedFragInfo(MappedFieldType fieldType, Field[] values, WeightedFragInfo fragInfo) {_        assert fragInfo != null : "FragInfo must not be null"__        assert fieldType.name().equals(values[0].name()) : "Expected MappedFieldType for field " + values[0].name()__        if (!fragInfo.getSubInfos().isEmpty() && containsBrokenAnalysis(fieldType.indexAnalyzer())) {_            _            final List<SubInfo> subInfos = fragInfo.getSubInfos()__            CollectionUtil.introSort(subInfos, new Comparator<SubInfo>() {_                @Override_                public int compare(SubInfo o1, SubInfo o2) {_                    int startOffset = o1.getTermsOffsets().get(0).getStartOffset()__                    int startOffset2 = o2.getTermsOffsets().get(0).getStartOffset()__                    return FragmentBuilderHelper.compare(startOffset, startOffset2)__                }_            })__            return new WeightedFragInfo(Math.min(fragInfo.getSubInfos().get(0).getTermsOffsets().get(0).getStartOffset(),_                    fragInfo.getStartOffset()), fragInfo.getEndOffset(), subInfos, fragInfo.getTotalBoost())__        } else {_            return fragInfo__        }_    };fixes,problems,with,broken,analysis,chains,if,positions,and,offsets,are,messed,up,that,can,lead,to,link,string,index,out,of,bounds,exception,in,the,link,fast,vector,highlighter;public,static,weighted,frag,info,fix,weighted,frag,info,mapped,field,type,field,type,field,values,weighted,frag,info,frag,info,assert,frag,info,null,frag,info,must,not,be,null,assert,field,type,name,equals,values,0,name,expected,mapped,field,type,for,field,values,0,name,if,frag,info,get,sub,infos,is,empty,contains,broken,analysis,field,type,index,analyzer,final,list,sub,info,sub,infos,frag,info,get,sub,infos,collection,util,intro,sort,sub,infos,new,comparator,sub,info,override,public,int,compare,sub,info,o1,sub,info,o2,int,start,offset,o1,get,terms,offsets,get,0,get,start,offset,int,start,offset2,o2,get,terms,offsets,get,0,get,start,offset,return,fragment,builder,helper,compare,start,offset,start,offset2,return,new,weighted,frag,info,math,min,frag,info,get,sub,infos,get,0,get,terms,offsets,get,0,get,start,offset,frag,info,get,start,offset,frag,info,get,end,offset,sub,infos,frag,info,get,total,boost,else,return,frag,info
