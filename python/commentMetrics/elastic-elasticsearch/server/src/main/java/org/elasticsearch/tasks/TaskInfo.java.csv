commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     taskId.writeTo(out).     out.writeString(type).     out.writeString(action).     out.writeOptionalString(description).     out.writeOptionalNamedWriteable(status).     out.writeLong(startTime).     out.writeLong(runningTimeNanos).     out.writeBoolean(cancellable).     parentTaskId.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_2_0)) {         out.writeMap(headers, StreamOutput::writeString, StreamOutput::writeString).     } }
false;public;0;3;;public TaskId getTaskId() {     return taskId. }
false;public;0;3;;public long getId() {     return taskId.getId(). }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getAction() {     return action. }
false;public;0;3;;public String getDescription() {     return description. }
true;public;0;3;/**  * The status of the running task. Only available if TaskInfos were build  * with the detailed flag.  */ ;/**  * The status of the running task. Only available if TaskInfos were build  * with the detailed flag.  */ public Task.Status getStatus() {     return status. }
true;public;0;3;/**  * Returns the task start time  */ ;/**  * Returns the task start time  */ public long getStartTime() {     return startTime. }
true;public;0;3;/**  * Returns the task running time  */ ;/**  * Returns the task running time  */ public long getRunningTimeNanos() {     return runningTimeNanos. }
true;public;0;3;/**  * Returns true if the task supports cancellation  */ ;/**  * Returns true if the task supports cancellation  */ public boolean isCancellable() {     return cancellable. }
true;public;0;3;/**  * Returns the parent task id  */ ;/**  * Returns the parent task id  */ public TaskId getParentTaskId() {     return parentTaskId. }
true;public;0;3;/**  * Returns the task headers  */ ;/**  * Returns the task headers  */ public Map<String, String> getHeaders() {     return headers. }
false;public;2;28;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("node", taskId.getNodeId()).     builder.field("id", taskId.getId()).     builder.field("type", type).     builder.field("action", action).     if (status != null) {         builder.field("status", status, params).     }     if (description != null) {         builder.field("description", description).     }     builder.timeField("start_time_in_millis", "start_time", startTime).     if (builder.humanReadable()) {         builder.field("running_time", new TimeValue(runningTimeNanos, TimeUnit.NANOSECONDS).toString()).     }     builder.field("running_time_in_nanos", runningTimeNanos).     builder.field("cancellable", cancellable).     if (parentTaskId.isSet()) {         builder.field("parent_task_id", parentTaskId.toString()).     }     builder.startObject("headers").     for (Map.Entry<String, String> attribute : headers.entrySet()) {         builder.field(attribute.getKey(), attribute.getValue()).     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static TaskInfo fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
true;public;1;17;// Implements equals and hashCode for testing ;// Implements equals and hashCode for testing @Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != TaskInfo.class) {         return false.     }     TaskInfo other = (TaskInfo) obj.     return Objects.equals(taskId, other.taskId) && Objects.equals(type, other.type) && Objects.equals(action, other.action) && Objects.equals(description, other.description) && Objects.equals(startTime, other.startTime) && Objects.equals(runningTimeNanos, other.runningTimeNanos) && Objects.equals(parentTaskId, other.parentTaskId) && Objects.equals(cancellable, other.cancellable) && Objects.equals(status, other.status) && Objects.equals(headers, other.headers). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(taskId, type, action, description, startTime, runningTimeNanos, parentTaskId, cancellable, status, headers). }
