commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns <code>true</code> iff auto throttle is enabled.  *  * @see ConcurrentMergeScheduler#enableAutoIOThrottle()  */ ;/**  * Returns <code>true</code> iff auto throttle is enabled.  *  * @see ConcurrentMergeScheduler#enableAutoIOThrottle()  */ public boolean isAutoThrottle() {     return autoThrottle. }
true;;1;3;/**  * Enables / disables auto throttling on the {@link ConcurrentMergeScheduler}  */ ;/**  * Enables / disables auto throttling on the {@link ConcurrentMergeScheduler}  */ void setAutoThrottle(boolean autoThrottle) {     this.autoThrottle = autoThrottle. }
true;public;0;3;/**  * Returns {@code maxThreadCount}.  */ ;/**  * Returns {@code maxThreadCount}.  */ public int getMaxThreadCount() {     return maxThreadCount. }
true;;2;14;/**  * Expert: directly set the maximum number of merge threads and  * simultaneous merges allowed.  */ ;/**  * Expert: directly set the maximum number of merge threads and  * simultaneous merges allowed.  */ void setMaxThreadAndMergeCount(int maxThreadCount, int maxMergeCount) {     if (maxThreadCount < 1) {         throw new IllegalArgumentException("maxThreadCount should be at least 1").     }     if (maxMergeCount < 1) {         throw new IllegalArgumentException("maxMergeCount should be at least 1").     }     if (maxThreadCount > maxMergeCount) {         throw new IllegalArgumentException("maxThreadCount (= " + maxThreadCount + ") should be <= maxMergeCount (= " + maxMergeCount + ")").     }     this.maxThreadCount = maxThreadCount.     this.maxMergeCount = maxMergeCount. }
true;public;0;3;/**  * Returns {@code maxMergeCount}.  */ ;/**  * Returns {@code maxMergeCount}.  */ public int getMaxMergeCount() {     return maxMergeCount. }
