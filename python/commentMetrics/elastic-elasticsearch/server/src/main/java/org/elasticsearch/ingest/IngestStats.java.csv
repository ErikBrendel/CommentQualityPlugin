commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public void writeTo(StreamOutput out) throws IOException {     totalStats.writeTo(out).     out.writeVInt(pipelineStats.size()).     for (PipelineStat pipelineStat : pipelineStats) {         out.writeString(pipelineStat.getPipelineId()).         pipelineStat.getStats().writeTo(out).         if (out.getVersion().onOrAfter(Version.V_6_5_0)) {             List<ProcessorStat> processorStatsForPipeline = processorStats.get(pipelineStat.getPipelineId()).             if (processorStatsForPipeline == null) {                 out.writeVInt(0).             } else {                 out.writeVInt(processorStatsForPipeline.size()).                 for (ProcessorStat processorStat : processorStatsForPipeline) {                     out.writeString(processorStat.getName()).                     processorStat.getStats().writeTo(out).                 }             }         }     } }
false;public;2;28;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject("ingest").     builder.startObject("total").     totalStats.toXContent(builder, params).     builder.endObject().     builder.startObject("pipelines").     for (PipelineStat pipelineStat : pipelineStats) {         builder.startObject(pipelineStat.getPipelineId()).         pipelineStat.getStats().toXContent(builder, params).         List<ProcessorStat> processorStatsForPipeline = processorStats.get(pipelineStat.getPipelineId()).         builder.startArray("processors").         if (processorStatsForPipeline != null) {             for (ProcessorStat processorStat : processorStatsForPipeline) {                 builder.startObject().                 builder.startObject(processorStat.getName()).                 processorStat.getStats().toXContent(builder, params).                 builder.endObject().                 builder.endObject().             }         }         builder.endArray().         builder.endObject().     }     builder.endObject().     builder.endObject().     return builder. }
false;public;0;3;;public Stats getTotalStats() {     return totalStats. }
false;public;0;3;;public List<PipelineStat> getPipelineStats() {     return pipelineStats. }
false;public;0;3;;public Map<String, List<ProcessorStat>> getProcessorStats() {     return processorStats. }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(ingestCount).     out.writeVLong(ingestTimeInMillis).     out.writeVLong(ingestCurrent).     out.writeVLong(ingestFailedCount). }
true;public;0;3;/**  * @return The total number of executed ingest preprocessing operations.  */ ;/**  * @return The total number of executed ingest preprocessing operations.  */ public long getIngestCount() {     return ingestCount. }
true;public;0;3;/**  * @return The total time spent of ingest preprocessing in millis.  */ ;/**  * @return The total time spent of ingest preprocessing in millis.  */ public long getIngestTimeInMillis() {     return ingestTimeInMillis. }
true;public;0;3;/**  * @return The total number of ingest preprocessing operations currently executing.  */ ;/**  * @return The total number of ingest preprocessing operations currently executing.  */ public long getIngestCurrent() {     return ingestCurrent. }
true;public;0;3;/**  * @return The total number of ingest preprocessing operations that have failed.  */ ;/**  * @return The total number of ingest preprocessing operations that have failed.  */ public long getIngestFailedCount() {     return ingestFailedCount. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("count", ingestCount).     builder.humanReadableField("time_in_millis", "time", new TimeValue(ingestTimeInMillis, TimeUnit.MILLISECONDS)).     builder.field("current", ingestCurrent).     builder.field("failed", ingestFailedCount).     return builder. }
false;;1;4;;Builder addTotalMetrics(IngestMetric totalMetric) {     this.totalStats = totalMetric.createStats().     return this. }
false;;2;4;;Builder addPipelineMetrics(String pipelineId, IngestMetric pipelineMetric) {     this.pipelineStats.add(new PipelineStat(pipelineId, pipelineMetric.createStats())).     return this. }
false;;3;5;;Builder addProcessorMetrics(String pipelineId, String processorName, IngestMetric metric) {     this.processorStats.computeIfAbsent(pipelineId, k -> new ArrayList<>()).add(new ProcessorStat(processorName, metric.createStats())).     return this. }
false;;0;4;;IngestStats build() {     return new IngestStats(totalStats, Collections.unmodifiableList(pipelineStats), Collections.unmodifiableMap(processorStats)). }
false;public;0;3;;public String getPipelineId() {     return pipelineId. }
false;public;0;3;;public Stats getStats() {     return stats. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Stats getStats() {     return stats. }
