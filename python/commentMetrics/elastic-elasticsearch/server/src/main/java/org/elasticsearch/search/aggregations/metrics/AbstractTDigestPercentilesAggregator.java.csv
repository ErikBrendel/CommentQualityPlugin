commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;3;;private static int indexOfKey(double[] keys, double key) {     return ArrayUtils.binarySearch(keys, key, 0.001). }
false;public;0;4;;@Override public ScoreMode scoreMode() {     return valuesSource != null && valuesSource.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES. }
false;public;2;17;;@Override public void collect(int doc, long bucket) throws IOException {     states = bigArrays.grow(states, bucket + 1).     TDigestState state = states.get(bucket).     if (state == null) {         state = new TDigestState(compression).         states.set(bucket, state).     }     if (values.advanceExact(doc)) {         final int valueCount = values.docValueCount().         for (int i = 0. i < valueCount. i++) {             state.add(values.nextValue()).         }     } }
false;public;2;28;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     if (valuesSource == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final BigArrays bigArrays = context.bigArrays().     final SortedNumericDoubleValues values = valuesSource.doubleValues(ctx).     return new LeafBucketCollectorBase(sub, values) {          @Override         public void collect(int doc, long bucket) throws IOException {             states = bigArrays.grow(states, bucket + 1).             TDigestState state = states.get(bucket).             if (state == null) {                 state = new TDigestState(compression).                 states.set(bucket, state).             }             if (values.advanceExact(doc)) {                 final int valueCount = values.docValueCount().                 for (int i = 0. i < valueCount. i++) {                     state.add(values.nextValue()).                 }             }         }     }. }
false;public;1;4;;@Override public boolean hasMetric(String name) {     return indexOfKey(keys, Double.parseDouble(name)) >= 0. }
false;protected;1;7;;protected TDigestState getState(long bucketOrd) {     if (bucketOrd >= states.size()) {         return null.     }     final TDigestState state = states.get(bucketOrd).     return state. }
false;protected;0;4;;@Override protected void doClose() {     Releasables.close(states). }
