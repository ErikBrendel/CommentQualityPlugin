commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Add a new coordinate to the collection  * @param coordinate the coordinate to add  * @return this  */ ;/**  * Add a new coordinate to the collection  * @param coordinate the coordinate to add  * @return this  */ public CoordinatesBuilder coordinate(Coordinate coordinate) {     int expectedDims.     int actualDims.     if (points.isEmpty() == false && (expectedDims = Double.isNaN(points.get(0).z) ? 2 : 3) != (actualDims = Double.isNaN(coordinate.z) ? 2 : 3)) {         throw new ElasticsearchException("unable to add coordinate to CoordinateBuilder: " + "coordinate dimensions do not match. Expected [{}] but found [{}]", expectedDims, actualDims).     } else {         this.points.add(coordinate).     }     return this. }
true;public;2;3;/**  * Add a new coordinate to the collection  * @param longitude longitude of the coordinate  * @param latitude latitude of the coordinate  * @return this  */ ;/**  * Add a new coordinate to the collection  * @param longitude longitude of the coordinate  * @param latitude latitude of the coordinate  * @return this  */ public CoordinatesBuilder coordinate(double longitude, double latitude) {     return this.coordinate(new Coordinate(longitude, latitude)). }
true;public;1;3;/**  * Add an array of coordinates to the current coordinates  *  * @param coordinates array of {@link Coordinate}s to add  * @return this  */ ;/**  * Add an array of coordinates to the current coordinates  *  * @param coordinates array of {@link Coordinate}s to add  * @return this  */ public CoordinatesBuilder coordinates(Coordinate... coordinates) {     return this.coordinates(Arrays.asList(coordinates)). }
true;public;1;4;/**  * Add a collection of coordinates to the current coordinates  *  * @param coordinates collection of {@link Coordinate}s to add  * @return this  */ ;/**  * Add a collection of coordinates to the current coordinates  *  * @param coordinates collection of {@link Coordinate}s to add  * @return this  */ public CoordinatesBuilder coordinates(Collection<? extends Coordinate> coordinates) {     this.points.addAll(coordinates).     return this. }
true;public;0;8;/**  * Makes a closed ring out of the current coordinates by adding the starting point as the end point.  * Will have no effect of starting and end point are already the same coordinate.  */ ;/**  * Makes a closed ring out of the current coordinates by adding the starting point as the end point.  * Will have no effect of starting and end point are already the same coordinate.  */ public CoordinatesBuilder close() {     Coordinate start = points.get(0).     Coordinate end = points.get(points.size() - 1).     if (start.x != end.x || start.y != end.y) {         points.add(start).     }     return this. }
true;public;0;3;/**  * @return a list containing the current coordinates  */ ;/**  * @return a list containing the current coordinates  */ public List<Coordinate> build() {     return new ArrayList<>(this.points). }
