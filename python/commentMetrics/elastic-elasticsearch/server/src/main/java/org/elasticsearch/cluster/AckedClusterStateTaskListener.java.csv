commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Called to determine which nodes the acknowledgement is expected from.  *  * As this method will be called multiple times to determine the set of acking nodes,  * it is crucial for it to return consistent results: Given the same listener instance  * and the same node parameter, the method implementation should return the same result.  *  * @param discoveryNode a node  * @return true if the node is expected to send ack back, false otherwise  */ ;/**  * Called to determine which nodes the acknowledgement is expected from.  *  * As this method will be called multiple times to determine the set of acking nodes,  * it is crucial for it to return consistent results: Given the same listener instance  * and the same node parameter, the method implementation should return the same result.  *  * @param discoveryNode a node  * @return true if the node is expected to send ack back, false otherwise  */ boolean mustAck(DiscoveryNode discoveryNode).
true;;1;1;/**  * Called once all the nodes have acknowledged the cluster state update request. Must be  * very lightweight execution, since it gets executed on the cluster service thread.  *  * @param e optional error that might have been thrown  */ ;/**  * Called once all the nodes have acknowledged the cluster state update request. Must be  * very lightweight execution, since it gets executed on the cluster service thread.  *  * @param e optional error that might have been thrown  */ void onAllNodesAcked(@Nullable Exception e).
true;;0;1;/**  * Called once the acknowledgement timeout defined by  * {@link AckedClusterStateUpdateTask#ackTimeout()} has expired  */ ;/**  * Called once the acknowledgement timeout defined by  * {@link AckedClusterStateUpdateTask#ackTimeout()} has expired  */ void onAckTimeout().
true;;0;1;/**  * Acknowledgement timeout, maximum time interval to wait for acknowledgements  */ ;/**  * Acknowledgement timeout, maximum time interval to wait for acknowledgements  */ TimeValue ackTimeout().
