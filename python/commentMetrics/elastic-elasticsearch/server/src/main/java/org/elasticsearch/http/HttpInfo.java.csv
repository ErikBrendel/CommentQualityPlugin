commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     address.writeTo(out).     out.writeLong(maxContentLength). }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.HTTP).     builder.array(Fields.BOUND_ADDRESS, (Object[]) address.boundAddresses()).     TransportAddress publishAddress = address.publishAddress().     String publishAddressString = publishAddress.toString().     String hostString = publishAddress.address().getHostString().     if (InetAddresses.isInetAddress(hostString) == false) {         if (cnameInPublishHost) {             publishAddressString = hostString + '/' + publishAddress.toString().         } else {             deprecationLogger.deprecated("[http.publish_host] was printed as [ip:port] instead of [hostname/ip:port]. " + "This format is deprecated and will change to [hostname/ip:port] in a future version. " + "Use -Des.http.cname_in_publish_address=true to enforce non-deprecated formatting.").         }     }     builder.field(Fields.PUBLISH_ADDRESS, publishAddressString).     builder.humanReadableField(Fields.MAX_CONTENT_LENGTH_IN_BYTES, Fields.MAX_CONTENT_LENGTH, maxContentLength()).     builder.endObject().     return builder. }
false;public;0;3;;public BoundTransportAddress address() {     return address. }
false;public;0;3;;public BoundTransportAddress getAddress() {     return address(). }
false;public;0;3;;public ByteSizeValue maxContentLength() {     return new ByteSizeValue(maxContentLength). }
false;public;0;3;;public ByteSizeValue getMaxContentLength() {     return maxContentLength(). }
