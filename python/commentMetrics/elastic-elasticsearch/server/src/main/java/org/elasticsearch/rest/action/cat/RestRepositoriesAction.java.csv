commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public RestResponse buildResponse(GetRepositoriesResponse getRepositoriesResponse) throws Exception {     return RestTable.buildResponse(buildTable(request, getRepositoriesResponse), channel). }
false;protected;2;16;;@Override protected RestChannelConsumer doCatRequest(RestRequest request, NodeClient client) {     GetRepositoriesRequest getRepositoriesRequest = new GetRepositoriesRequest().     getRepositoriesRequest.local(request.paramAsBoolean("local", getRepositoriesRequest.local())).     getRepositoriesRequest.masterNodeTimeout(request.paramAsTime("master_timeout", getRepositoriesRequest.masterNodeTimeout())).     return channel -> client.admin().cluster().getRepositories(getRepositoriesRequest, new RestResponseListener<GetRepositoriesResponse>(channel) {          @Override         public RestResponse buildResponse(GetRepositoriesResponse getRepositoriesResponse) throws Exception {             return RestTable.buildResponse(buildTable(request, getRepositoriesResponse), channel).         }     }). }
false;public;0;4;;@Override public String getName() {     return "cat_repositories_action". }
false;protected;1;4;;@Override protected void documentation(StringBuilder sb) {     sb.append("/_cat/repositories\n"). }
false;protected;1;8;;@Override protected Table getTableWithHeader(RestRequest request) {     return new Table().startHeaders().addCell("id", "alias:id,repoId.desc:unique repository id").addCell("type", "alias:t,type.text-align:right.desc:repository type").endHeaders(). }
false;private;2;13;;private Table buildTable(RestRequest req, GetRepositoriesResponse getRepositoriesResponse) {     Table table = getTableWithHeader(req).     for (RepositoryMetaData repositoryMetaData : getRepositoriesResponse.repositories()) {         table.startRow().         table.addCell(repositoryMetaData.name()).         table.addCell(repositoryMetaData.type()).         table.endRow().     }     return table. }
