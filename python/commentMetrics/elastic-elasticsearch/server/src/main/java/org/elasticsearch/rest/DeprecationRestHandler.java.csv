commented;modifiers;parameterAmount;loc;comment;code
true;public;3;6;/**  * {@inheritDoc}  * <p>  * Usage is logged via the {@link DeprecationLogger} so that the actual response can be notified of deprecation as well.  */ ;/**  * {@inheritDoc}  * <p>  * Usage is logged via the {@link DeprecationLogger} so that the actual response can be notified of deprecation as well.  */ @Override public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {     deprecationLogger.deprecated(deprecationMessage).     handler.handleRequest(request, channel, client). }
false;public;0;4;;@Override public boolean supportsContentStream() {     return handler.supportsContentStream(). }
true;public,static;1;16;/**  * This does a very basic pass at validating that a header's value contains only expected characters according to RFC-5987, and those  * that it references.  * <p>  * https://tools.ietf.org/html/rfc5987  * <p>  * This is only expected to be used for assertions. The idea is that only readable US-ASCII characters are expected. the rest must be  * encoded with percent encoding, which makes checking for a valid character range very simple.  *  * @param value The header value to check  * @return {@code true} if the {@code value} is not obviously wrong.  */ ;/**  * This does a very basic pass at validating that a header's value contains only expected characters according to RFC-5987, and those  * that it references.  * <p>  * https://tools.ietf.org/html/rfc5987  * <p>  * This is only expected to be used for assertions. The idea is that only readable US-ASCII characters are expected. the rest must be  * encoded with percent encoding, which makes checking for a valid character range very simple.  *  * @param value The header value to check  * @return {@code true} if the {@code value} is not obviously wrong.  */ public static boolean validHeaderValue(String value) {     if (Strings.hasText(value) == false) {         return false.     }     for (int i = 0. i < value.length(). i++) {         char c = value.charAt(i).         // 32 = ' ' (31 = unit separator). 126 = '~' (127 = DEL)         if (c < 32 || c > 126) {             return false.         }     }     return true. }
true;public,static;1;7;/**  * Throw an exception if the {@code value} is not a {@link #validHeaderValue(String) valid header}.  *  * @param value The header value to check  * @return Always {@code value}.  * @throws IllegalArgumentException if {@code value} is not a {@link #validHeaderValue(String) valid header}.  */ ;/**  * Throw an exception if the {@code value} is not a {@link #validHeaderValue(String) valid header}.  *  * @param value The header value to check  * @return Always {@code value}.  * @throws IllegalArgumentException if {@code value} is not a {@link #validHeaderValue(String) valid header}.  */ public static String requireValidHeader(String value) {     if (validHeaderValue(value) == false) {         throw new IllegalArgumentException("header value must contain only US ASCII text").     }     return value. }
