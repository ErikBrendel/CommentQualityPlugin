commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(repository).     out.writeStringArray(snapshots).     out.writeBoolean(ignoreUnavailable).     out.writeBoolean(verbose). }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (repository == null) {         validationException = addValidationError("repository is missing", validationException).     }     return validationException. }
true;public;1;4;/**  * Sets repository name  *  * @param repository repository name  * @return this request  */ ;/**  * Sets repository name  *  * @param repository repository name  * @return this request  */ public GetSnapshotsRequest repository(String repository) {     this.repository = repository.     return this. }
true;public;0;3;/**  * Returns repository name  *  * @return repository name  */ ;/**  * Returns repository name  *  * @return repository name  */ public String repository() {     return this.repository. }
true;public;0;3;/**  * Returns the names of the snapshots.  *  * @return the names of snapshots  */ ;/**  * Returns the names of the snapshots.  *  * @return the names of snapshots  */ public String[] snapshots() {     return this.snapshots. }
true;public;1;4;/**  * Sets the list of snapshots to be returned  *  * @return this request  */ ;/**  * Sets the list of snapshots to be returned  *  * @return this request  */ public GetSnapshotsRequest snapshots(String[] snapshots) {     this.snapshots = snapshots.     return this. }
true;public;1;4;/**  * Set to true to ignore unavailable snapshots  *  * @return this request  */ ;/**  * Set to true to ignore unavailable snapshots  *  * @return this request  */ public GetSnapshotsRequest ignoreUnavailable(boolean ignoreUnavailable) {     this.ignoreUnavailable = ignoreUnavailable.     return this. }
true;public;0;3;/**  * @return Whether snapshots should be ignored when unavailable (corrupt or temporarily not fetchable)  */ ;/**  * @return Whether snapshots should be ignored when unavailable (corrupt or temporarily not fetchable)  */ public boolean ignoreUnavailable() {     return ignoreUnavailable. }
true;public;1;4;/**  * Set to {@code false} to only show the snapshot names and the indices they contain.  * This is useful when the snapshots belong to a cloud-based repository where each  * blob read is a concern (cost wise and performance wise), as the snapshot names and  * indices they contain can be retrieved from a single index blob in the repository,  * whereas the rest of the information requires reading a snapshot metadata file for  * each snapshot requested.  Defaults to {@code true}, which returns all information  * about each requested snapshot.  */ ;/**  * Set to {@code false} to only show the snapshot names and the indices they contain.  * This is useful when the snapshots belong to a cloud-based repository where each  * blob read is a concern (cost wise and performance wise), as the snapshot names and  * indices they contain can be retrieved from a single index blob in the repository,  * whereas the rest of the information requires reading a snapshot metadata file for  * each snapshot requested.  Defaults to {@code true}, which returns all information  * about each requested snapshot.  */ public GetSnapshotsRequest verbose(boolean verbose) {     this.verbose = verbose.     return this. }
true;public;0;3;/**  * Returns whether the request will return a verbose response.  */ ;/**  * Returns whether the request will return a verbose response.  */ public boolean verbose() {     return verbose. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
