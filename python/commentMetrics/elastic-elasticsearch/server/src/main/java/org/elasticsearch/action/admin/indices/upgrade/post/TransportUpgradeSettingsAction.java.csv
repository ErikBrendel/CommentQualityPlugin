commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // we go async right away....     return ThreadPool.Names.SAME. }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(UpgradeSettingsRequest request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public;1;4;;@Override public void onResponse(ClusterStateUpdateResponse response) {     listener.onResponse(new AcknowledgedResponse(response.isAcknowledged())). }
false;public;1;6;;@Override public void onFailure(Exception t) {     logger.debug(() -> new ParameterizedMessage("failed to upgrade minimum compatibility version settings on indices [{}]", request.versions().keySet()), t).     listener.onFailure(t). }
false;protected;3;22;;@Override protected void masterOperation(final UpgradeSettingsRequest request, final ClusterState state, final ActionListener<AcknowledgedResponse> listener) {     UpgradeSettingsClusterStateUpdateRequest clusterStateUpdateRequest = new UpgradeSettingsClusterStateUpdateRequest().ackTimeout(request.timeout()).versions(request.versions()).masterNodeTimeout(request.masterNodeTimeout()).     updateSettingsService.upgradeIndexSettings(clusterStateUpdateRequest, new ActionListener<ClusterStateUpdateResponse>() {          @Override         public void onResponse(ClusterStateUpdateResponse response) {             listener.onResponse(new AcknowledgedResponse(response.isAcknowledged())).         }          @Override         public void onFailure(Exception t) {             logger.debug(() -> new ParameterizedMessage("failed to upgrade minimum compatibility version settings on indices [{}]", request.versions().keySet()), t).             listener.onFailure(t).         }     }). }
