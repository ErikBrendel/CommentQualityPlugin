commented;modifiers;parameterAmount;loc;comment;code
true;default;3;1;/**  * Called when the shard routing has changed state.  *  * @param indexShard The index shard  * @param oldRouting The old routing state (can be null)  * @param newRouting The new routing state  */ ;/**  * Called when the shard routing has changed state.  *  * @param indexShard The index shard  * @param oldRouting The old routing state (can be null)  * @param newRouting The new routing state  */ default void shardRoutingChanged(IndexShard indexShard, @Nullable ShardRouting oldRouting, ShardRouting newRouting) { }
true;default;1;1;/**  * Called after the index shard has been created.  */ ;/**  * Called after the index shard has been created.  */ default void afterIndexShardCreated(IndexShard indexShard) { }
true;default;1;1;/**  * Called after the index shard has been started.  */ ;/**  * Called after the index shard has been started.  */ default void afterIndexShardStarted(IndexShard indexShard) { }
true;default;3;1;/**  * Called before the index shard gets closed.  *  * @param indexShard The index shard  */ ;/**  * Called before the index shard gets closed.  *  * @param indexShard The index shard  */ default void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) { }
true;default;3;1;/**  * Called after the index shard has been closed.  *  * @param shardId The shard id  */ ;/**  * Called after the index shard has been closed.  *  * @param shardId The shard id  */ default void afterIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, Settings indexSettings) { }
true;default;4;2;/**  * Called after a shard's {@link org.elasticsearch.index.shard.IndexShardState} changes.  * The order of concurrent events is preserved. The execution must be lightweight.  *  * @param indexShard the shard the new state was applied to  * @param previousState the previous index shard state if there was one, null otherwise  * @param currentState the new shard state  * @param reason the reason for the state change if there is one, null otherwise  */ ;/**  * Called after a shard's {@link org.elasticsearch.index.shard.IndexShardState} changes.  * The order of concurrent events is preserved. The execution must be lightweight.  *  * @param indexShard the shard the new state was applied to  * @param previousState the previous index shard state if there was one, null otherwise  * @param currentState the new shard state  * @param reason the reason for the state change if there is one, null otherwise  */ default void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) { }
true;default;1;1;/**  * Called when a shard is marked as inactive  *  * @param indexShard The shard that was marked inactive  */ ;/**  * Called when a shard is marked as inactive  *  * @param indexShard The shard that was marked inactive  */ default void onShardInactive(IndexShard indexShard) { }
true;default;2;3;/**  * Called before the index gets created. Note that this is also called  * when the index is created on data nodes  */ ;/**  * Called before the index gets created. Note that this is also called  * when the index is created on data nodes  */ default void beforeIndexCreated(Index index, Settings indexSettings) { }
true;default;1;3;/**  * Called after the index has been created.  */ ;/**  * Called after the index has been created.  */ default void afterIndexCreated(IndexService indexService) { }
true;default;2;3;/**  * Called before the index get closed.  *  * @param indexService The index service  * @param reason       the reason for index removal  */ ;/**  * Called before the index get closed.  *  * @param indexService The index service  * @param reason       the reason for index removal  */ default void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason) { }
true;default;3;3;/**  * Called after the index has been removed.  *  * @param index The index  * @param reason       the reason for index removal  */ ;/**  * Called after the index has been removed.  *  * @param index The index  * @param reason       the reason for index removal  */ default void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason) { }
true;default;2;2;/**  * Called before the index shard gets created.  */ ;/**  * Called before the index shard gets created.  */ default void beforeIndexShardCreated(ShardId shardId, Settings indexSettings) { }
true;default;2;2;/**  * Called before the index shard gets deleted from disk  * Note: this method is only executed on the first attempt of deleting the shard. Retries are will not invoke  * this method.  * @param shardId The shard id  * @param indexSettings the shards index settings  */ ;/**  * Called before the index shard gets deleted from disk  * Note: this method is only executed on the first attempt of deleting the shard. Retries are will not invoke  * this method.  * @param shardId The shard id  * @param indexSettings the shards index settings  */ default void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings) { }
true;default;2;2;/**  * Called after the index shard has been deleted from disk.  *  * Note: this method is only called if the deletion of the shard did finish without an exception  *  * @param shardId The shard id  * @param indexSettings the shards index settings  */ ;/**  * Called after the index shard has been deleted from disk.  *  * Note: this method is only called if the deletion of the shard did finish without an exception  *  * @param shardId The shard id  * @param indexSettings the shards index settings  */ default void afterIndexShardDeleted(ShardId shardId, Settings indexSettings) { }
true;default;2;2;/**  * Called on the Master node only before the {@link IndexService} instances is created to simulate an index creation.  * This happens right before the index and it's metadata is registered in the cluster state  */ ;/**  * Called on the Master node only before the {@link IndexService} instances is created to simulate an index creation.  * This happens right before the index and it's metadata is registered in the cluster state  */ default void beforeIndexAddedToCluster(Index index, Settings indexSettings) { }
true;default;1;1;/**  * Called when the given shards store is created. The shard store is created before the shard is created.  *  * @param shardId the shard ID the store belongs to  */ ;/**  * Called when the given shards store is created. The shard store is created before the shard is created.  *  * @param shardId the shard ID the store belongs to  */ default void onStoreCreated(ShardId shardId) { }
true;default;1;1;/**  * Called when the given shards store is closed. The store is closed once all resource have been released on the store.  * This implies that all index readers are closed and no recoveries are running.  *  * @param shardId the shard ID the store belongs to  */ ;/**  * Called when the given shards store is closed. The store is closed once all resource have been released on the store.  * This implies that all index readers are closed and no recoveries are running.  *  * @param shardId the shard ID the store belongs to  */ default void onStoreClosed(ShardId shardId) { }
