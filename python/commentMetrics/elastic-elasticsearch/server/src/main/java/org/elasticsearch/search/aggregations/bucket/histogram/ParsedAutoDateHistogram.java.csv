commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return AutoDateHistogramAggregationBuilder.NAME. }
false;public;0;3;;public String getInterval() {     return interval. }
false;public;1;3;;public void setInterval(String interval) {     this.interval = interval. }
false;public;0;4;;@Override public List<? extends Histogram.Bucket> getBuckets() {     return buckets. }
false;public,static;2;5;;public static ParsedAutoDateHistogram fromXContent(XContentParser parser, String name) throws IOException {     ParsedAutoDateHistogram aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
false;protected;2;6;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder = super.doXContentBody(builder, params).     builder.field("interval", getInterval()).     return builder. }
false;public;0;7;;@Override public Object getKey() {     if (key != null) {         return Instant.ofEpochMilli(key).atZone(ZoneOffset.UTC).     }     return null. }
false;public;0;11;;@Override public String getKeyAsString() {     String keyAsString = super.getKeyAsString().     if (keyAsString != null) {         return keyAsString.     }     if (key != null) {         return Long.toString(key).     }     return null. }
false;protected;1;4;;@Override protected XContentBuilder keyToXContent(XContentBuilder builder) throws IOException {     return builder.field(CommonFields.KEY.getPreferredName(), key). }
false;static;2;3;;static ParsedBucket fromXContent(XContentParser parser, boolean keyed) throws IOException {     return parseXContent(parser, keyed, ParsedBucket::new, (p, bucket) -> bucket.key = p.longValue()). }
