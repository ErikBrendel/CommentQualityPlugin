commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public void add(RequestCacheStats stats) {     this.memorySize += stats.memorySize.     this.evictions += stats.evictions.     this.hitCount += stats.hitCount.     this.missCount += stats.missCount. }
false;public;0;3;;public long getMemorySizeInBytes() {     return this.memorySize. }
false;public;0;3;;public ByteSizeValue getMemorySize() {     return new ByteSizeValue(memorySize). }
false;public;0;3;;public long getEvictions() {     return this.evictions. }
false;public;0;3;;public long getHitCount() {     return this.hitCount. }
false;public;0;3;;public long getMissCount() {     return this.missCount. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     memorySize = in.readVLong().     evictions = in.readVLong().     hitCount = in.readVLong().     missCount = in.readVLong(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(memorySize).     out.writeVLong(evictions).     out.writeVLong(hitCount).     out.writeVLong(missCount). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.REQUEST_CACHE_STATS).     builder.humanReadableField(Fields.MEMORY_SIZE_IN_BYTES, Fields.MEMORY_SIZE, getMemorySize()).     builder.field(Fields.EVICTIONS, getEvictions()).     builder.field(Fields.HIT_COUNT, getHitCount()).     builder.field(Fields.MISS_COUNT, getMissCount()).     builder.endObject().     return builder. }
