# id;timestamp;commentText;codeText;commentWords;codeWords
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1524684173;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1528762805;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1531937412;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1532353780;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1535723122;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1536314350;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1541008027;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1545678410;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType);1548834350;Recursively update sub field types.;public DocumentMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {_        Mapping updated = this.mapping.updateFieldType(fullNameToFieldType)__        if (updated == this.mapping) {_            _            return this__        }_        assert updated == updated.updateFieldType(fullNameToFieldType) : "updateFieldType operation is not idempotent"__        return new DocumentMapper(mapperService, updated)__    };recursively,update,sub,field,types;public,document,mapper,update,field,type,map,string,mapped,field,type,full,name,to,field,type,mapping,updated,this,mapping,update,field,type,full,name,to,field,type,if,updated,this,mapping,return,this,assert,updated,updated,update,field,type,full,name,to,field,type,update,field,type,operation,is,not,idempotent,return,new,document,mapper,mapper,service,updated
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1524684173;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), false, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,false,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1528762805;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), false, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,false,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1531937412;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), false, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,false,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1532353780;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), false, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,false,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1535723122;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), false, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,false,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1536314350;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), ScoreMode.COMPLETE_NO_SCORES, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,score,mode,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1541008027;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), ScoreMode.COMPLETE_NO_SCORES, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,score,mode,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1545678410;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), ScoreMode.COMPLETE_NO_SCORES, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,score,mode,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
DocumentMapper -> public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException;1548834350;Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.;public ObjectMapper findNestedObjectMapper(int nestedDocId, SearchContext sc, LeafReaderContext context) throws IOException {_        ObjectMapper nestedObjectMapper = null__        for (ObjectMapper objectMapper : objectMappers().values()) {_            if (!objectMapper.nested().isNested()) {_                continue__            }__            Query filter = objectMapper.nestedTypeFilter()__            if (filter == null) {_                continue__            }_            _            _            final Weight nestedWeight = filter.createWeight(sc.searcher(), ScoreMode.COMPLETE_NO_SCORES, 1f)__            Scorer scorer = nestedWeight.scorer(context)__            if (scorer == null) {_                continue__            }__            if (scorer.iterator().advance(nestedDocId) == nestedDocId) {_                if (nestedObjectMapper == null) {_                    nestedObjectMapper = objectMapper__                } else {_                    if (nestedObjectMapper.fullPath().length() < objectMapper.fullPath().length()) {_                        nestedObjectMapper = objectMapper__                    }_                }_            }_        }_        return nestedObjectMapper__    };returns,the,best,nested,link,object,mapper,instances,that,is,in,the,scope,of,the,specified,nested,doc,id;public,object,mapper,find,nested,object,mapper,int,nested,doc,id,search,context,sc,leaf,reader,context,context,throws,ioexception,object,mapper,nested,object,mapper,null,for,object,mapper,object,mapper,object,mappers,values,if,object,mapper,nested,is,nested,continue,query,filter,object,mapper,nested,type,filter,if,filter,null,continue,final,weight,nested,weight,filter,create,weight,sc,searcher,score,mode,1f,scorer,scorer,nested,weight,scorer,context,if,scorer,null,continue,if,scorer,iterator,advance,nested,doc,id,nested,doc,id,if,nested,object,mapper,null,nested,object,mapper,object,mapper,else,if,nested,object,mapper,full,path,length,object,mapper,full,path,length,nested,object,mapper,object,mapper,return,nested,object,mapper
