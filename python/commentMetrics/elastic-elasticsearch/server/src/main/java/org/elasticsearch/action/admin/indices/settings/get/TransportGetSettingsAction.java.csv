commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // Very lightweight operation     return ThreadPool.Names.SAME. }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(GetSettingsRequest request, ClusterState state) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indexNameExpressionResolver.concreteIndexNames(state, request)). }
false;protected;0;4;;@Override protected GetSettingsResponse newResponse() {     return new GetSettingsResponse(). }
false;private,static;1;3;;private static boolean isFilteredRequest(GetSettingsRequest request) {     return CollectionUtils.isEmpty(request.names()) == false. }
false;protected;3;31;;@Override protected void masterOperation(GetSettingsRequest request, ClusterState state, ActionListener<GetSettingsResponse> listener) {     Index[] concreteIndices = indexNameExpressionResolver.concreteIndices(state, request).     ImmutableOpenMap.Builder<String, Settings> indexToSettingsBuilder = ImmutableOpenMap.builder().     ImmutableOpenMap.Builder<String, Settings> indexToDefaultSettingsBuilder = ImmutableOpenMap.builder().     for (Index concreteIndex : concreteIndices) {         IndexMetaData indexMetaData = state.getMetaData().index(concreteIndex).         if (indexMetaData == null) {             continue.         }         Settings indexSettings = settingsFilter.filter(indexMetaData.getSettings()).         if (request.humanReadable()) {             indexSettings = IndexMetaData.addHumanReadableSettings(indexSettings).         }         if (isFilteredRequest(request)) {             indexSettings = indexSettings.filter(k -> Regex.simpleMatch(request.names(), k)).         }         indexToSettingsBuilder.put(concreteIndex.getName(), indexSettings).         if (request.includeDefaults()) {             Settings defaultSettings = settingsFilter.filter(indexScopedSettings.diff(indexSettings, Settings.EMPTY)).             if (isFilteredRequest(request)) {                 defaultSettings = defaultSettings.filter(k -> Regex.simpleMatch(request.names(), k)).             }             indexToDefaultSettingsBuilder.put(concreteIndex.getName(), defaultSettings).         }     }     listener.onResponse(new GetSettingsResponse(indexToSettingsBuilder.build(), indexToDefaultSettingsBuilder.build())). }
