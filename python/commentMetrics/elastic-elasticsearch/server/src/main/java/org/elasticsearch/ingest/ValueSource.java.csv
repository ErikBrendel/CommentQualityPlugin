commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Returns a copy of the value this ValueSource holds and resolves templates if there're any.  *  * For immutable values only a copy of the reference to the value is made.  *  * @param model The model to be used when resolving any templates  * @return copy of the wrapped value  */ ;/**  * Returns a copy of the value this ValueSource holds and resolves templates if there're any.  *  * For immutable values only a copy of the reference to the value is made.  *  * @param model The model to be used when resolving any templates  * @return copy of the wrapped value  */ Object copyAndResolve(Map<String, Object> model).
false;static;2;36;;static ValueSource wrap(Object value, ScriptService scriptService) {     if (value instanceof Map) {         @SuppressWarnings("unchecked")         Map<Object, Object> mapValue = (Map) value.         Map<ValueSource, ValueSource> valueTypeMap = new HashMap<>(mapValue.size()).         for (Map.Entry<Object, Object> entry : mapValue.entrySet()) {             valueTypeMap.put(wrap(entry.getKey(), scriptService), wrap(entry.getValue(), scriptService)).         }         return new MapValue(valueTypeMap).     } else if (value instanceof List) {         @SuppressWarnings("unchecked")         List<Object> listValue = (List) value.         List<ValueSource> valueSourceList = new ArrayList<>(listValue.size()).         for (Object item : listValue) {             valueSourceList.add(wrap(item, scriptService)).         }         return new ListValue(valueSourceList).     } else if (value == null || value instanceof Number || value instanceof Boolean) {         return new ObjectValue(value).     } else if (value instanceof byte[]) {         return new ByteValue((byte[]) value).     } else if (value instanceof String) {         // modified if templating is not available         if (scriptService.isLangSupported(DEFAULT_TEMPLATE_LANG) && ((String) value).contains("{{")) {             Script script = new Script(ScriptType.INLINE, DEFAULT_TEMPLATE_LANG, (String) value, Collections.emptyMap()).             return new TemplatedValue(scriptService.compile(script, TemplateScript.CONTEXT)).         } else {             return new ObjectValue(value).         }     } else {         throw new IllegalArgumentException("unexpected value type [" + value.getClass() + "]").     } }
false;public;1;8;;@Override public Object copyAndResolve(Map<String, Object> model) {     Map<Object, Object> copy = new HashMap<>().     for (Map.Entry<ValueSource, ValueSource> entry : this.map.entrySet()) {         copy.put(entry.getKey().copyAndResolve(model), entry.getValue().copyAndResolve(model)).     }     return copy. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     MapValue mapValue = (MapValue) o.     return map.equals(mapValue.map). }
false;public;0;4;;@Override public int hashCode() {     return map.hashCode(). }
false;public;1;8;;@Override public Object copyAndResolve(Map<String, Object> model) {     List<Object> copy = new ArrayList<>(values.size()).     for (ValueSource value : values) {         copy.add(value.copyAndResolve(model)).     }     return copy. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ListValue listValue = (ListValue) o.     return values.equals(listValue.values). }
false;public;0;4;;@Override public int hashCode() {     return values.hashCode(). }
false;public;1;4;;@Override public Object copyAndResolve(Map<String, Object> model) {     return value. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ObjectValue objectValue = (ObjectValue) o.     return Objects.equals(value, objectValue.value). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hashCode(value). }
false;public;1;4;;@Override public Object copyAndResolve(Map<String, Object> model) {     return value. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ByteValue objectValue = (ByteValue) o.     return Arrays.equals(value, objectValue.value). }
false;public;0;4;;@Override public int hashCode() {     return Arrays.hashCode(value). }
false;public;1;4;;@Override public Object copyAndResolve(Map<String, Object> model) {     return template.newInstance(model).execute(). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TemplatedValue templatedValue = (TemplatedValue) o.     return Objects.equals(template, templatedValue.template). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hashCode(template). }
