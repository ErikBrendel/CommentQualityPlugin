commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Gets an instance of the class.  *  * @param config  The current Configuration.  * @param options pattern options, may be null.  If first element is "short",  *                only the first line of the throwable will be formatted.  * @return instance of class.  */ ;/**  * Gets an instance of the class.  *  * @param config  The current Configuration.  * @param options pattern options, may be null.  If first element is "short",  *                only the first line of the throwable will be formatted.  * @return instance of class.  */ public static JsonThrowablePatternConverter newInstance(final Configuration config, final String[] options) {     return new JsonThrowablePatternConverter(config, options). }
true;public;2;10;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void format(final LogEvent event, final StringBuilder toAppendTo) {     String consoleStacktrace = formatStacktrace(event).     if (Strings.isNotEmpty(consoleStacktrace)) {         String jsonStacktrace = formatJson(consoleStacktrace).         toAppendTo.append(", ").         toAppendTo.append(jsonStacktrace).     } }
false;private;1;5;;private String formatStacktrace(LogEvent event) {     StringBuilder stringBuilder = new StringBuilder().     throwablePatternConverter.format(event, stringBuilder).     return stringBuilder.toString(). }
false;private;1;10;;private String formatJson(String consoleStacktrace) {     String lineSeparator = options.getSeparator() + "\t|" + options.getSeparator().     String[] split = consoleStacktrace.split(lineSeparator).     StringJoiner stringJoiner = new StringJoiner(",\n", "\n\"stacktrace\": [", "]").     for (String line : split) {         stringJoiner.add(wrapAsJson(line)).     }     return stringJoiner.toString(). }
false;private;1;4;;private String wrapAsJson(String line) {     byte[] bytes = JsonStringEncoder.getInstance().quoteAsUTF8(line).     return "\"" + new String(bytes, Charset.defaultCharset()) + "\"". }
false;public;0;4;;@Override public boolean handlesThrowable() {     return true. }
