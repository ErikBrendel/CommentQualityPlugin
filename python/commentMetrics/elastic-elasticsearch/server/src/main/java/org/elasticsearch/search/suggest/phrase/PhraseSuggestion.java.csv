commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getWriteableName() {     return PhraseSuggestionBuilder.SUGGESTION_NAME. }
false;public;0;4;;@Override public int getWriteableType() {     return TYPE. }
false;protected;1;4;;@Override protected Entry newEntry(StreamInput in) throws IOException {     return new Entry(in). }
false;public,static;2;5;;public static PhraseSuggestion fromXContent(XContentParser parser, String name) throws IOException {     PhraseSuggestion suggestion = new PhraseSuggestion(name, -1).     parseEntries(parser, suggestion, PhraseSuggestion.Entry::fromXContent).     return suggestion. }
true;public;0;3;/**  * @return cutoff score for suggestions.  input term score * confidence for phrase suggest, 0 otherwise  */ ;/**  * @return cutoff score for suggestions.  input term score * confidence for phrase suggest, 0 otherwise  */ public double getCutoffScore() {     return cutoffScore. }
false;protected;1;13;;@Override protected void merge(Suggestion.Entry<Option> other) {     super.merge(other).     // and the simplest one for us to implement.     if (!(other instanceof PhraseSuggestion.Entry)) {         return.     }     PhraseSuggestion.Entry otherSuggestionEntry = (PhraseSuggestion.Entry) other.     this.cutoffScore = Math.max(this.cutoffScore, otherSuggestionEntry.cutoffScore). }
false;public;1;6;;@Override public void addOption(Option option) {     if (option.getScore() > this.cutoffScore) {         this.options.add(option).     } }
false;public,static;1;3;;public static Entry fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
false;protected;1;4;;@Override protected Option newOption(StreamInput in) throws IOException {     return new Option(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeDouble(cutoffScore). }
false;public;1;5;;@Override public boolean equals(Object other) {     return super.equals(other) && Objects.equals(cutoffScore, ((Entry) other).cutoffScore). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), cutoffScore). }
false;public,static;1;3;;public static Option fromXContent(XContentParser parser) {     return PARSER.apply(parser, null). }
