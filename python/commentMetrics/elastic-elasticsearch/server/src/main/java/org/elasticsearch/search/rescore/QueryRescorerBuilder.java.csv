commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(queryBuilder).     scoreMode.writeTo(out).     out.writeFloat(rescoreQueryWeight).     out.writeFloat(queryWeight). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
true;public;0;3;/**  * @return the query used for this rescore query  */ ;/**  * @return the query used for this rescore query  */ public QueryBuilder getRescoreQuery() {     return this.queryBuilder. }
true;public;1;4;/**  * Sets the original query weight for rescoring. The default is {@code 1.0}  */ ;/**  * Sets the original query weight for rescoring. The default is {@code 1.0}  */ public QueryRescorerBuilder setQueryWeight(float queryWeight) {     this.queryWeight = queryWeight.     return this. }
true;public;0;3;/**  * Gets the original query weight for rescoring. The default is {@code 1.0}  */ ;/**  * Gets the original query weight for rescoring. The default is {@code 1.0}  */ public float getQueryWeight() {     return this.queryWeight. }
true;public;1;4;/**  * Sets the original query weight for rescoring. The default is {@code 1.0}  */ ;/**  * Sets the original query weight for rescoring. The default is {@code 1.0}  */ public QueryRescorerBuilder setRescoreQueryWeight(float rescoreQueryWeight) {     this.rescoreQueryWeight = rescoreQueryWeight.     return this. }
true;public;0;3;/**  * Gets the original query weight for rescoring. The default is {@code 1.0}  */ ;/**  * Gets the original query weight for rescoring. The default is {@code 1.0}  */ public float getRescoreQueryWeight() {     return this.rescoreQueryWeight. }
true;public;1;4;/**  * Sets the original query score mode. The default is {@link QueryRescoreMode#Total}.  */ ;/**  * Sets the original query score mode. The default is {@link QueryRescoreMode#Total}.  */ public QueryRescorerBuilder setScoreMode(QueryRescoreMode scoreMode) {     this.scoreMode = scoreMode.     return this. }
true;public;0;3;/**  * Gets the original query score mode. The default is {@code total}  */ ;/**  * Gets the original query score mode. The default is {@code total}  */ public QueryRescoreMode getScoreMode() {     return this.scoreMode. }
false;public;2;9;;@Override public void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(RESCORE_QUERY_FIELD.getPreferredName(), queryBuilder).     builder.field(QUERY_WEIGHT_FIELD.getPreferredName(), queryWeight).     builder.field(RESCORE_QUERY_WEIGHT_FIELD.getPreferredName(), rescoreQueryWeight).     builder.field(SCORE_MODE_FIELD.getPreferredName(), scoreMode.name().toLowerCase(Locale.ROOT)).     builder.endObject(). }
false;public,static;1;4;;public static QueryRescorerBuilder fromXContent(XContentParser parser) throws IOException {     InnerBuilder innerBuilder = QUERY_RESCORE_PARSER.parse(parser, new InnerBuilder(), null).     return innerBuilder.build(). }
false;public;2;10;;@Override public QueryRescoreContext innerBuildContext(int windowSize, QueryShardContext context) throws IOException {     QueryRescoreContext queryRescoreContext = new QueryRescoreContext(windowSize).     // query is rewritten at this point already     queryRescoreContext.setQuery(queryBuilder.toQuery(context)).     queryRescoreContext.setQueryWeight(this.queryWeight).     queryRescoreContext.setRescoreQueryWeight(this.rescoreQueryWeight).     queryRescoreContext.setScoreMode(this.scoreMode).     return queryRescoreContext. }
false;public,final;0;5;;@Override public final int hashCode() {     int result = super.hashCode().     return 31 * result + Objects.hash(scoreMode, queryWeight, rescoreQueryWeight, queryBuilder). }
false;public,final;1;15;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     QueryRescorerBuilder other = (QueryRescorerBuilder) obj.     return super.equals(obj) && Objects.equals(scoreMode, other.scoreMode) && Objects.equals(queryWeight, other.queryWeight) && Objects.equals(rescoreQueryWeight, other.rescoreQueryWeight) && Objects.equals(queryBuilder, other.queryBuilder). }
false;;1;3;;void setQueryBuilder(QueryBuilder builder) {     this.queryBuilder = builder. }
false;;0;7;;QueryRescorerBuilder build() {     QueryRescorerBuilder queryRescoreBuilder = new QueryRescorerBuilder(queryBuilder).     queryRescoreBuilder.setQueryWeight(queryWeight).     queryRescoreBuilder.setRescoreQueryWeight(rescoreQueryWeight).     queryRescoreBuilder.setScoreMode(scoreMode).     return queryRescoreBuilder. }
false;;1;3;;void setQueryWeight(float queryWeight) {     this.queryWeight = queryWeight. }
false;;1;3;;void setRescoreQueryWeight(float rescoreQueryWeight) {     this.rescoreQueryWeight = rescoreQueryWeight. }
false;;1;3;;void setScoreMode(QueryRescoreMode scoreMode) {     this.scoreMode = scoreMode. }
false;public;1;15;;@Override public QueryRescorerBuilder rewrite(QueryRewriteContext ctx) throws IOException {     QueryBuilder rewrite = queryBuilder.rewrite(ctx).     if (rewrite == queryBuilder) {         return this.     }     QueryRescorerBuilder queryRescoreBuilder = new QueryRescorerBuilder(rewrite).     queryRescoreBuilder.setQueryWeight(queryWeight).     queryRescoreBuilder.setRescoreQueryWeight(rescoreQueryWeight).     queryRescoreBuilder.setScoreMode(scoreMode).     if (windowSize() != null) {         queryRescoreBuilder.windowSize(windowSize()).     }     return queryRescoreBuilder. }
