commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;10;;public static Text[] convertFromStringArray(String[] strings) {     if (strings.length == 0) {         return EMPTY_ARRAY.     }     Text[] texts = new Text[strings.length].     for (int i = 0. i < strings.length. i++) {         texts[i] = new Text(strings[i]).     }     return texts. }
true;public;0;3;/**  * Whether a {@link BytesReference} view of the data is already materialized.  */ ;/**  * Whether a {@link BytesReference} view of the data is already materialized.  */ public boolean hasBytes() {     return bytes != null. }
true;public;0;6;/**  * Returns a {@link BytesReference} view of the data.  */ ;/**  * Returns a {@link BytesReference} view of the data.  */ public BytesReference bytes() {     if (bytes == null) {         bytes = new BytesArray(text.getBytes(StandardCharsets.UTF_8)).     }     return bytes. }
true;public;0;3;/**  * Whether a {@link String} view of the data is already materialized.  */ ;/**  * Whether a {@link String} view of the data is already materialized.  */ public boolean hasString() {     return text != null. }
true;public;0;3;/**  * Returns a {@link String} view of the data.  */ ;/**  * Returns a {@link String} view of the data.  */ public String string() {     return text == null ? bytes.utf8ToString() : text. }
false;public;0;4;;@Override public String toString() {     return string(). }
false;public;0;7;;@Override public int hashCode() {     if (hash == 0) {         hash = bytes().hashCode().     }     return hash. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return bytes().equals(((Text) obj).bytes()). }
false;public;1;4;;@Override public int compareTo(Text text) {     return bytes().compareTo(text.bytes()). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (hasString()) {         return builder.value(this.string()).     } else {         // TODO: TextBytesOptimization we can use a buffer here to convert it? maybe add a         // request to jackson to support InputStream as well?         BytesRef br = this.bytes().toBytesRef().         return builder.utf8Value(br.bytes, br.offset, br.length).     } }
