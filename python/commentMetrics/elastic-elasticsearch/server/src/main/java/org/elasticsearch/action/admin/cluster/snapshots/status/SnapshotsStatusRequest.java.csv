commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(repository).     out.writeStringArray(snapshots).     out.writeBoolean(ignoreUnavailable). }
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (repository == null) {         validationException = addValidationError("repository is missing", validationException).     }     if (snapshots == null) {         validationException = addValidationError("snapshots is null", validationException).     }     return validationException. }
true;public;1;4;/**  * Sets repository name  *  * @param repository repository name  * @return this request  */ ;/**  * Sets repository name  *  * @param repository repository name  * @return this request  */ public SnapshotsStatusRequest repository(String repository) {     this.repository = repository.     return this. }
true;public;0;3;/**  * Returns repository name  *  * @return repository name  */ ;/**  * Returns repository name  *  * @return repository name  */ public String repository() {     return this.repository. }
true;public;0;3;/**  * Returns the names of the snapshots.  *  * @return the names of snapshots  */ ;/**  * Returns the names of the snapshots.  *  * @return the names of snapshots  */ public String[] snapshots() {     return this.snapshots. }
true;public;1;4;/**  * Sets the list of snapshots to be returned  *  * @return this request  */ ;/**  * Sets the list of snapshots to be returned  *  * @return this request  */ public SnapshotsStatusRequest snapshots(String[] snapshots) {     this.snapshots = snapshots.     return this. }
true;public;1;4;/**  * Set to <code>true</code> to ignore unavailable snapshots, instead of throwing an exception.  * Defaults to <code>false</code>, which means unavailable snapshots cause an exception to be thrown.  *  * @param ignoreUnavailable whether to ignore unavailable snapshots  * @return this request  */ ;/**  * Set to <code>true</code> to ignore unavailable snapshots, instead of throwing an exception.  * Defaults to <code>false</code>, which means unavailable snapshots cause an exception to be thrown.  *  * @param ignoreUnavailable whether to ignore unavailable snapshots  * @return this request  */ public SnapshotsStatusRequest ignoreUnavailable(boolean ignoreUnavailable) {     this.ignoreUnavailable = ignoreUnavailable.     return this. }
true;public;0;3;/**  * Returns whether the request permits unavailable snapshots to be ignored.  *  * @return true if the request will ignore unavailable snapshots, false if it will throw an exception on unavailable snapshots  */ ;/**  * Returns whether the request permits unavailable snapshots to be ignored.  *  * @return true if the request will ignore unavailable snapshots, false if it will throw an exception on unavailable snapshots  */ public boolean ignoreUnavailable() {     return ignoreUnavailable. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
