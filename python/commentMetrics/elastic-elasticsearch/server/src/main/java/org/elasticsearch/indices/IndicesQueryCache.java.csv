# id;timestamp;commentText;codeText;commentWords;codeWords
IndicesQueryCache -> public void clearIndex(String index);1524684173;Clear all entries that belong to the given index.;public void clearIndex(String index) {_        final Set<Object> coreCacheKeys = shardKeyMap.getCoreKeysForIndex(index)__        for (Object coreKey : coreCacheKeys) {_            cache.clearCoreCacheKey(coreKey)__        }__        _        _        _        _        if (cache.getCacheSize() == 0) {_            cache.clear()__        }_    };clear,all,entries,that,belong,to,the,given,index;public,void,clear,index,string,index,final,set,object,core,cache,keys,shard,key,map,get,core,keys,for,index,index,for,object,core,key,core,cache,keys,cache,clear,core,cache,key,core,key,if,cache,get,cache,size,0,cache,clear
IndicesQueryCache -> public void clearIndex(String index);1527096592;Clear all entries that belong to the given index.;public void clearIndex(String index) {_        final Set<Object> coreCacheKeys = shardKeyMap.getCoreKeysForIndex(index)__        for (Object coreKey : coreCacheKeys) {_            cache.clearCoreCacheKey(coreKey)__        }__        _        _        _        _        if (cache.getCacheSize() == 0) {_            cache.clear()__        }_    };clear,all,entries,that,belong,to,the,given,index;public,void,clear,index,string,index,final,set,object,core,cache,keys,shard,key,map,get,core,keys,for,index,index,for,object,core,key,core,cache,keys,cache,clear,core,cache,key,core,key,if,cache,get,cache,size,0,cache,clear
IndicesQueryCache -> public void clearIndex(String index);1541092382;Clear all entries that belong to the given index.;public void clearIndex(String index) {_        final Set<Object> coreCacheKeys = shardKeyMap.getCoreKeysForIndex(index)__        for (Object coreKey : coreCacheKeys) {_            cache.clearCoreCacheKey(coreKey)__        }__        _        _        _        _        if (cache.getCacheSize() == 0) {_            cache.clear()__        }_    };clear,all,entries,that,belong,to,the,given,index;public,void,clear,index,string,index,final,set,object,core,cache,keys,shard,key,map,get,core,keys,for,index,index,for,object,core,key,core,cache,keys,cache,clear,core,cache,key,core,key,if,cache,get,cache,size,0,cache,clear
IndicesQueryCache -> public void clearIndex(String index);1542402632;Clear all entries that belong to the given index.;public void clearIndex(String index) {_        final Set<Object> coreCacheKeys = shardKeyMap.getCoreKeysForIndex(index)__        for (Object coreKey : coreCacheKeys) {_            cache.clearCoreCacheKey(coreKey)__        }__        _        _        _        _        if (cache.getCacheSize() == 0) {_            cache.clear()__        }_    };clear,all,entries,that,belong,to,the,given,index;public,void,clear,index,string,index,final,set,object,core,cache,keys,shard,key,map,get,core,keys,for,index,index,for,object,core,key,core,cache,keys,cache,clear,core,cache,key,core,key,if,cache,get,cache,size,0,cache,clear
IndicesQueryCache -> public void clearIndex(String index);1549897161;Clear all entries that belong to the given index.;public void clearIndex(String index) {_        final Set<Object> coreCacheKeys = shardKeyMap.getCoreKeysForIndex(index)__        for (Object coreKey : coreCacheKeys) {_            cache.clearCoreCacheKey(coreKey)__        }__        _        _        _        _        if (cache.getCacheSize() == 0) {_            cache.clear()__        }_    };clear,all,entries,that,belong,to,the,given,index;public,void,clear,index,string,index,final,set,object,core,cache,keys,shard,key,map,get,core,keys,for,index,index,for,object,core,key,core,cache,keys,cache,clear,core,cache,key,core,key,if,cache,get,cache,size,0,cache,clear
IndicesQueryCache -> public QueryCacheStats getStats(ShardId shard);1524684173;Get usage statistics for the given shard.;public QueryCacheStats getStats(ShardId shard) {_        final Map<ShardId, QueryCacheStats> stats = new HashMap<>()__        for (Map.Entry<ShardId, Stats> entry : shardStats.entrySet()) {_            stats.put(entry.getKey(), entry.getValue().toQueryCacheStats())__        }_        QueryCacheStats shardStats = new QueryCacheStats()__        QueryCacheStats info = stats.get(shard)__        if (info == null) {_            info = new QueryCacheStats()__        }_        shardStats.add(info)___        _        _        long totalSize = 0__        for (QueryCacheStats s : stats.values()) {_            totalSize += s.getCacheSize()__        }_        final double weight = totalSize == 0_                ? 1d / stats.size()_                : ((double) shardStats.getCacheSize()) / totalSize__        final long additionalRamBytesUsed = Math.round(weight * sharedRamBytesUsed)__        shardStats.add(new QueryCacheStats(additionalRamBytesUsed, 0, 0, 0, 0))__        return shardStats__    };get,usage,statistics,for,the,given,shard;public,query,cache,stats,get,stats,shard,id,shard,final,map,shard,id,query,cache,stats,stats,new,hash,map,for,map,entry,shard,id,stats,entry,shard,stats,entry,set,stats,put,entry,get,key,entry,get,value,to,query,cache,stats,query,cache,stats,shard,stats,new,query,cache,stats,query,cache,stats,info,stats,get,shard,if,info,null,info,new,query,cache,stats,shard,stats,add,info,long,total,size,0,for,query,cache,stats,s,stats,values,total,size,s,get,cache,size,final,double,weight,total,size,0,1d,stats,size,double,shard,stats,get,cache,size,total,size,final,long,additional,ram,bytes,used,math,round,weight,shared,ram,bytes,used,shard,stats,add,new,query,cache,stats,additional,ram,bytes,used,0,0,0,0,return,shard,stats
IndicesQueryCache -> public QueryCacheStats getStats(ShardId shard);1527096592;Get usage statistics for the given shard.;public QueryCacheStats getStats(ShardId shard) {_        final Map<ShardId, QueryCacheStats> stats = new HashMap<>()__        for (Map.Entry<ShardId, Stats> entry : shardStats.entrySet()) {_            stats.put(entry.getKey(), entry.getValue().toQueryCacheStats())__        }_        QueryCacheStats shardStats = new QueryCacheStats()__        QueryCacheStats info = stats.get(shard)__        if (info == null) {_            info = new QueryCacheStats()__        }_        shardStats.add(info)___        _        _        long totalSize = 0__        for (QueryCacheStats s : stats.values()) {_            totalSize += s.getCacheSize()__        }_        final double weight = totalSize == 0_                ? 1d / stats.size()_                : ((double) shardStats.getCacheSize()) / totalSize__        final long additionalRamBytesUsed = Math.round(weight * sharedRamBytesUsed)__        shardStats.add(new QueryCacheStats(additionalRamBytesUsed, 0, 0, 0, 0))__        return shardStats__    };get,usage,statistics,for,the,given,shard;public,query,cache,stats,get,stats,shard,id,shard,final,map,shard,id,query,cache,stats,stats,new,hash,map,for,map,entry,shard,id,stats,entry,shard,stats,entry,set,stats,put,entry,get,key,entry,get,value,to,query,cache,stats,query,cache,stats,shard,stats,new,query,cache,stats,query,cache,stats,info,stats,get,shard,if,info,null,info,new,query,cache,stats,shard,stats,add,info,long,total,size,0,for,query,cache,stats,s,stats,values,total,size,s,get,cache,size,final,double,weight,total,size,0,1d,stats,size,double,shard,stats,get,cache,size,total,size,final,long,additional,ram,bytes,used,math,round,weight,shared,ram,bytes,used,shard,stats,add,new,query,cache,stats,additional,ram,bytes,used,0,0,0,0,return,shard,stats
IndicesQueryCache -> public QueryCacheStats getStats(ShardId shard);1541092382;Get usage statistics for the given shard.;public QueryCacheStats getStats(ShardId shard) {_        final Map<ShardId, QueryCacheStats> stats = new HashMap<>()__        for (Map.Entry<ShardId, Stats> entry : shardStats.entrySet()) {_            stats.put(entry.getKey(), entry.getValue().toQueryCacheStats())__        }_        QueryCacheStats shardStats = new QueryCacheStats()__        QueryCacheStats info = stats.get(shard)__        if (info == null) {_            info = new QueryCacheStats()__        }_        shardStats.add(info)___        _        _        long totalSize = 0__        for (QueryCacheStats s : stats.values()) {_            totalSize += s.getCacheSize()__        }_        final double weight = totalSize == 0_                ? 1d / stats.size()_                : ((double) shardStats.getCacheSize()) / totalSize__        final long additionalRamBytesUsed = Math.round(weight * sharedRamBytesUsed)__        shardStats.add(new QueryCacheStats(additionalRamBytesUsed, 0, 0, 0, 0))__        return shardStats__    };get,usage,statistics,for,the,given,shard;public,query,cache,stats,get,stats,shard,id,shard,final,map,shard,id,query,cache,stats,stats,new,hash,map,for,map,entry,shard,id,stats,entry,shard,stats,entry,set,stats,put,entry,get,key,entry,get,value,to,query,cache,stats,query,cache,stats,shard,stats,new,query,cache,stats,query,cache,stats,info,stats,get,shard,if,info,null,info,new,query,cache,stats,shard,stats,add,info,long,total,size,0,for,query,cache,stats,s,stats,values,total,size,s,get,cache,size,final,double,weight,total,size,0,1d,stats,size,double,shard,stats,get,cache,size,total,size,final,long,additional,ram,bytes,used,math,round,weight,shared,ram,bytes,used,shard,stats,add,new,query,cache,stats,additional,ram,bytes,used,0,0,0,0,return,shard,stats
IndicesQueryCache -> public QueryCacheStats getStats(ShardId shard);1542402632;Get usage statistics for the given shard.;public QueryCacheStats getStats(ShardId shard) {_        final Map<ShardId, QueryCacheStats> stats = new HashMap<>()__        for (Map.Entry<ShardId, Stats> entry : shardStats.entrySet()) {_            stats.put(entry.getKey(), entry.getValue().toQueryCacheStats())__        }_        QueryCacheStats shardStats = new QueryCacheStats()__        QueryCacheStats info = stats.get(shard)__        if (info == null) {_            info = new QueryCacheStats()__        }_        shardStats.add(info)___        _        _        long totalSize = 0__        for (QueryCacheStats s : stats.values()) {_            totalSize += s.getCacheSize()__        }_        final double weight = totalSize == 0_                ? 1d / stats.size()_                : ((double) shardStats.getCacheSize()) / totalSize__        final long additionalRamBytesUsed = Math.round(weight * sharedRamBytesUsed)__        shardStats.add(new QueryCacheStats(additionalRamBytesUsed, 0, 0, 0, 0))__        return shardStats__    };get,usage,statistics,for,the,given,shard;public,query,cache,stats,get,stats,shard,id,shard,final,map,shard,id,query,cache,stats,stats,new,hash,map,for,map,entry,shard,id,stats,entry,shard,stats,entry,set,stats,put,entry,get,key,entry,get,value,to,query,cache,stats,query,cache,stats,shard,stats,new,query,cache,stats,query,cache,stats,info,stats,get,shard,if,info,null,info,new,query,cache,stats,shard,stats,add,info,long,total,size,0,for,query,cache,stats,s,stats,values,total,size,s,get,cache,size,final,double,weight,total,size,0,1d,stats,size,double,shard,stats,get,cache,size,total,size,final,long,additional,ram,bytes,used,math,round,weight,shared,ram,bytes,used,shard,stats,add,new,query,cache,stats,additional,ram,bytes,used,0,0,0,0,return,shard,stats
IndicesQueryCache -> public QueryCacheStats getStats(ShardId shard);1549897161;Get usage statistics for the given shard.;public QueryCacheStats getStats(ShardId shard) {_        final Map<ShardId, QueryCacheStats> stats = new HashMap<>()__        for (Map.Entry<ShardId, Stats> entry : shardStats.entrySet()) {_            stats.put(entry.getKey(), entry.getValue().toQueryCacheStats())__        }_        QueryCacheStats shardStats = new QueryCacheStats()__        QueryCacheStats info = stats.get(shard)__        if (info == null) {_            info = new QueryCacheStats()__        }_        shardStats.add(info)___        _        _        long totalSize = 0__        for (QueryCacheStats s : stats.values()) {_            totalSize += s.getCacheSize()__        }_        final double weight = totalSize == 0_                ? 1d / stats.size()_                : ((double) shardStats.getCacheSize()) / totalSize__        final long additionalRamBytesUsed = Math.round(weight * sharedRamBytesUsed)__        shardStats.add(new QueryCacheStats(additionalRamBytesUsed, 0, 0, 0, 0))__        return shardStats__    };get,usage,statistics,for,the,given,shard;public,query,cache,stats,get,stats,shard,id,shard,final,map,shard,id,query,cache,stats,stats,new,hash,map,for,map,entry,shard,id,stats,entry,shard,stats,entry,set,stats,put,entry,get,key,entry,get,value,to,query,cache,stats,query,cache,stats,shard,stats,new,query,cache,stats,query,cache,stats,info,stats,get,shard,if,info,null,info,new,query,cache,stats,shard,stats,add,info,long,total,size,0,for,query,cache,stats,s,stats,values,total,size,s,get,cache,size,final,double,weight,total,size,0,1d,stats,size,double,shard,stats,get,cache,size,total,size,final,long,additional,ram,bytes,used,math,round,weight,shared,ram,bytes,used,shard,stats,add,new,query,cache,stats,additional,ram,bytes,used,0,0,0,0,return,shard,stats
