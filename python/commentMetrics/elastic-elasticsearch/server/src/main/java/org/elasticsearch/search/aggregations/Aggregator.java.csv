commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Returns the aggregator factory with which this parser is associated, may return {@code null} indicating the  * aggregation should be skipped (e.g. when trying to aggregate on unmapped fields).  *  * @param aggregationName   The name of the aggregation  * @param parser            The parser  * @return                  The resolved aggregator factory or {@code null} in case the aggregation should be skipped  * @throws java.io.IOException      When parsing fails  */ ;/**  * Returns the aggregator factory with which this parser is associated, may return {@code null} indicating the  * aggregation should be skipped (e.g. when trying to aggregate on unmapped fields).  *  * @param aggregationName   The name of the aggregation  * @param parser            The parser  * @return                  The resolved aggregator factory or {@code null} in case the aggregation should be skipped  * @throws java.io.IOException      When parsing fails  */ AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException.
true;public,static;1;9;/**  * Returns whether one of the parents is a {@link BucketsAggregator}.  */ ;/**  * Returns whether one of the parents is a {@link BucketsAggregator}.  */ public static boolean descendsFromBucketAggregator(Aggregator parent) {     while (parent != null) {         if (parent instanceof BucketsAggregator) {             return true.         }         parent = parent.parent().     }     return false. }
true;public,abstract;0;1;/**  * Return the name of this aggregator.  */ ;/**  * Return the name of this aggregator.  */ public abstract String name().
true;public,abstract;0;1;/**  * Return the {@link SearchContext} attached with this {@link Aggregator}.  */ ;/**  * Return the {@link SearchContext} attached with this {@link Aggregator}.  */ public abstract SearchContext context().
true;public,abstract;0;1;/**  * Return the parent aggregator.  */ ;/**  * Return the parent aggregator.  */ public abstract Aggregator parent().
true;public,abstract;1;1;/**  * Return the sub aggregator with the provided name.  */ ;/**  * Return the sub aggregator with the provided name.  */ public abstract Aggregator subAggregator(String name).
true;public,abstract;1;1;/**  * Build an aggregation for data that has been collected into {@code bucket}.  */ ;/**  * Build an aggregation for data that has been collected into {@code bucket}.  */ public abstract InternalAggregation buildAggregation(long bucket) throws IOException.
true;public,abstract;0;1;/**  * Build an empty aggregation.  */ ;/**  * Build an empty aggregation.  */ public abstract InternalAggregation buildEmptyAggregation().
false;public;0;3;;public ParseField parseField() {     return parseField. }
false;public,static;2;9;;public static SubAggCollectionMode parse(String value, DeprecationHandler deprecationHandler) {     SubAggCollectionMode[] modes = SubAggCollectionMode.values().     for (SubAggCollectionMode mode : modes) {         if (mode.parseField.match(value, deprecationHandler)) {             return mode.         }     }     throw new ElasticsearchParseException("no [{}] found for value [{}]", KEY.getPreferredName(), value). }
false;public,static;1;3;;public static SubAggCollectionMode readFromStream(StreamInput in) throws IOException {     return in.readEnum(SubAggCollectionMode.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
