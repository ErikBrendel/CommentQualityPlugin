commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Scorer getScorer() {     return in. }
false;public;0;4;;@Override public int docID() {     return in.docID(). }
false;public;0;4;;@Override public float score() {     return curScore. }
false;public;1;4;;@Override public int advanceShallow(int target) throws IOException {     return in.advanceShallow(target). }
false;public;1;4;;@Override public float getMaxScore(int upTo) throws IOException {     return in.getMaxScore(upTo). }
false;public;0;4;;@Override public DocIdSetIterator iterator() {     return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator()). }
false;public;0;10;;@Override public boolean matches() throws IOException {     // otherwise calling score() is illegal     if (inTwoPhase != null && inTwoPhase.matches() == false) {         return false.     }     curScore = in.score().     return curScore >= minScore. }
false;public;0;5;;@Override public float matchCost() {     return // random constant for the score computation     1000f + (inTwoPhase == null ? 0 : inTwoPhase.matchCost()). }
false;public;0;24;;@Override public TwoPhaseIterator twoPhaseIterator() {     final TwoPhaseIterator inTwoPhase = this.in.twoPhaseIterator().     final DocIdSetIterator approximation = inTwoPhase == null ? in.iterator() : inTwoPhase.approximation().     return new TwoPhaseIterator(approximation) {          @Override         public boolean matches() throws IOException {             // otherwise calling score() is illegal             if (inTwoPhase != null && inTwoPhase.matches() == false) {                 return false.             }             curScore = in.score().             return curScore >= minScore.         }          @Override         public float matchCost() {             return // random constant for the score computation             1000f + (inTwoPhase == null ? 0 : inTwoPhase.matchCost()).         }     }. }
