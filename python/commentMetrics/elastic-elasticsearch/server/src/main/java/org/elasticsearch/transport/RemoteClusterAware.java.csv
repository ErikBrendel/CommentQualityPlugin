commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Setting<List<String>> getSetting() {     return SEARCH_REMOTE_CLUSTERS_SEEDS. }
false;public;1;4;;@Override public String getKey(final String key) {     return key.replaceFirst("^search", "cluster"). }
false;public;0;4;;@Override public Setting<String> getSetting() {     return SEARCH_REMOTE_CLUSTERS_PROXY. }
false;public;1;4;;@Override public String getKey(final String key) {     return key.replaceFirst("^search", "cluster"). }
true;protected,static;1;22;/**  * Builds the dynamic per-cluster config from the given settings. This is a map keyed by the cluster alias that points to a tuple  * (ProxyAddresss, [SeedNodeSuppliers]). If a cluster is configured with a proxy address all seed nodes will point to  * {@link TransportAddress#META_ADDRESS} and their configured address will be used as the hostname for the generated discovery node.  */ ;/**  * Builds the dynamic per-cluster config from the given settings. This is a map keyed by the cluster alias that points to a tuple  * (ProxyAddresss, [SeedNodeSuppliers]). If a cluster is configured with a proxy address all seed nodes will point to  * {@link TransportAddress#META_ADDRESS} and their configured address will be used as the hostname for the generated discovery node.  */ protected static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(final Settings settings) {     final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> remoteSeeds = buildRemoteClustersDynamicConfig(settings, REMOTE_CLUSTERS_SEEDS).     final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> searchRemoteSeeds = buildRemoteClustersDynamicConfig(settings, SEARCH_REMOTE_CLUSTERS_SEEDS).     // sort the intersection for predictable output order     final NavigableSet<String> intersection = new TreeSet<>(Arrays.asList(searchRemoteSeeds.keySet().stream().filter(s -> remoteSeeds.keySet().contains(s)).sorted().toArray(String[]::new))).     if (intersection.isEmpty() == false) {         final String message = String.format(Locale.ROOT, "found duplicate remote cluster configurations for cluster alias%s [%s]", intersection.size() == 1 ? "" : "es", String.join(",", intersection)).         throw new IllegalArgumentException(message).     }     return Stream.concat(remoteSeeds.entrySet().stream(), searchRemoteSeeds.entrySet().stream()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)). }
false;private,static;2;16;;private static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(final Settings settings, final Setting.AffixSetting<List<String>> seedsSetting) {     final Stream<Setting<List<String>>> allConcreteSettings = seedsSetting.getAllConcreteSettings(settings).     return allConcreteSettings.collect(Collectors.toMap(seedsSetting::getNamespace, concreteSetting -> {         String clusterName = seedsSetting.getNamespace(concreteSetting).         List<String> addresses = concreteSetting.get(settings).         final boolean proxyMode = REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(clusterName).existsOrFallbackExists(settings).         List<Tuple<String, Supplier<DiscoveryNode>>> nodes = new ArrayList<>(addresses.size()).         for (String address : addresses) {             nodes.add(Tuple.tuple(address, () -> buildSeedNode(clusterName, address, proxyMode))).         }         return new Tuple<>(REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(clusterName).get(settings), nodes).     })). }
false;static;3;14;;static DiscoveryNode buildSeedNode(String clusterName, String address, boolean proxyMode) {     if (proxyMode) {         TransportAddress transportAddress = new TransportAddress(TransportAddress.META_ADDRESS, 0).         String hostName = address.substring(0, indexOfPortSeparator(address)).         return new DiscoveryNode("", clusterName + "#" + address, UUIDs.randomBase64UUID(), hostName, address, transportAddress, Collections.singletonMap("server_name", hostName), EnumSet.allOf(DiscoveryNode.Role.class), Version.CURRENT.minimumCompatibilityVersion()).     } else {         TransportAddress transportAddress = new TransportAddress(RemoteClusterAware.parseSeedAddress(address)).         return new DiscoveryNode(clusterName + "#" + transportAddress.toString(), transportAddress, Version.CURRENT.minimumCompatibilityVersion()).     } }
true;protected;3;33;/**  * Groups indices per cluster by splitting remote cluster-alias, index-name pairs on {@link #REMOTE_CLUSTER_INDEX_SEPARATOR}. All  * indices per cluster are collected as a list in the returned map keyed by the cluster alias. Local indices are grouped under  * {@link #LOCAL_CLUSTER_GROUP_KEY}. The returned map is mutable.  *  * @param remoteClusterNames the remote cluster names  * @param requestIndices the indices in the search request to filter  * @param indexExists a predicate that can test if a certain index or alias exists in the local cluster  *  * @return a map of grouped remote and local indices  */ ;/**  * Groups indices per cluster by splitting remote cluster-alias, index-name pairs on {@link #REMOTE_CLUSTER_INDEX_SEPARATOR}. All  * indices per cluster are collected as a list in the returned map keyed by the cluster alias. Local indices are grouped under  * {@link #LOCAL_CLUSTER_GROUP_KEY}. The returned map is mutable.  *  * @param remoteClusterNames the remote cluster names  * @param requestIndices the indices in the search request to filter  * @param indexExists a predicate that can test if a certain index or alias exists in the local cluster  *  * @return a map of grouped remote and local indices  */ protected Map<String, List<String>> groupClusterIndices(Set<String> remoteClusterNames, String[] requestIndices, Predicate<String> indexExists) {     Map<String, List<String>> perClusterIndices = new HashMap<>().     for (String index : requestIndices) {         int i = index.indexOf(RemoteClusterService.REMOTE_CLUSTER_INDEX_SEPARATOR).         if (i >= 0) {             String remoteClusterName = index.substring(0, i).             List<String> clusters = clusterNameResolver.resolveClusterNames(remoteClusterNames, remoteClusterName).             if (clusters.isEmpty() == false) {                 if (indexExists.test(index)) {                     // means such names need to be supported until 7.last. It will be possible to remove this check from 8.0 on.                     throw new IllegalArgumentException("Can not filter indices. index " + index + " exists but there is also a remote cluster named: " + remoteClusterName).                 }                 String indexName = index.substring(i + 1).                 for (String clusterName : clusters) {                     perClusterIndices.computeIfAbsent(clusterName, k -> new ArrayList<>()).add(indexName).                 }             } else {                 // Indices and aliases can be created with ":" in their names up to 6.last (although deprecated), and still be                 // around in 7.x. That's why we need to be lenient here and treat the index as local although it contains ":".                 // It will be possible to remove such leniency and assume that no local indices contain ":" only from 8.0 on.                 perClusterIndices.computeIfAbsent(RemoteClusterAware.LOCAL_CLUSTER_GROUP_KEY, k -> new ArrayList<>()).add(index).             }         } else {             perClusterIndices.computeIfAbsent(RemoteClusterAware.LOCAL_CLUSTER_GROUP_KEY, k -> new ArrayList<>()).add(index).         }     }     return perClusterIndices. }
false;;3;5;;void updateRemoteCluster(String clusterAlias, List<String> addresses, String proxy) {     Boolean compress = TransportSettings.TRANSPORT_COMPRESS.get(settings).     TimeValue pingSchedule = TransportSettings.PING_SCHEDULE.get(settings).     updateRemoteCluster(clusterAlias, addresses, proxy, compress, pingSchedule). }
false;;2;10;;void updateRemoteCluster(String clusterAlias, Settings settings) {     String proxy = REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(clusterAlias).get(settings).     List<String> addresses = REMOTE_CLUSTERS_SEEDS.getConcreteSettingForNamespace(clusterAlias).get(settings).     Boolean compress = RemoteClusterService.REMOTE_CLUSTER_COMPRESS.getConcreteSettingForNamespace(clusterAlias).get(settings).     TimeValue pingSchedule = RemoteClusterService.REMOTE_CLUSTER_PING_SCHEDULE.getConcreteSettingForNamespace(clusterAlias).get(settings).     updateRemoteCluster(clusterAlias, addresses, proxy, compress, pingSchedule). }
true;protected,abstract;5;2;/**  * Subclasses must implement this to receive information about updated cluster aliases. If the given address list is  * empty the cluster alias is unregistered and should be removed.  */ ;/**  * Subclasses must implement this to receive information about updated cluster aliases. If the given address list is  * empty the cluster alias is unregistered and should be removed.  */ protected abstract void updateRemoteCluster(String clusterAlias, List<String> addresses, String proxy, boolean compressionEnabled, TimeValue pingSchedule).
true;public;1;11;/**  * Registers this instance to listen to updates on the cluster settings.  */ ;/**  * Registers this instance to listen to updates on the cluster settings.  */ public void listenForUpdates(ClusterSettings clusterSettings) {     List<Setting.AffixSetting<?>> remoteClusterSettings = Arrays.asList(RemoteClusterAware.REMOTE_CLUSTERS_PROXY, RemoteClusterAware.REMOTE_CLUSTERS_SEEDS, RemoteClusterService.REMOTE_CLUSTER_COMPRESS, RemoteClusterService.REMOTE_CLUSTER_PING_SCHEDULE).     clusterSettings.addAffixGroupUpdateConsumer(remoteClusterSettings, this::updateRemoteCluster).     clusterSettings.addAffixUpdateConsumer(RemoteClusterAware.SEARCH_REMOTE_CLUSTERS_PROXY, RemoteClusterAware.SEARCH_REMOTE_CLUSTERS_SEEDS, (key, value) -> updateRemoteCluster(key, value.v2(), value.v1()), (namespace, value) -> {     }). }
false;static;1;13;;static InetSocketAddress parseSeedAddress(String remoteHost) {     final Tuple<String, Integer> hostPort = parseHostPort(remoteHost).     final String host = hostPort.v1().     assert hostPort.v2() != null : remoteHost.     final int port = hostPort.v2().     InetAddress hostAddress.     try {         hostAddress = InetAddress.getByName(host).     } catch (UnknownHostException e) {         throw new IllegalArgumentException("unknown host [" + host + "]", e).     }     return new InetSocketAddress(hostAddress, port). }
false;public,static;1;5;;public static Tuple<String, Integer> parseHostPort(final String remoteHost) {     final String host = remoteHost.substring(0, indexOfPortSeparator(remoteHost)).     final int port = parsePort(remoteHost).     return Tuple.tuple(host, port). }
false;private,static;1;11;;private static int parsePort(String remoteHost) {     try {         int port = Integer.valueOf(remoteHost.substring(indexOfPortSeparator(remoteHost) + 1)).         if (port <= 0) {             throw new IllegalArgumentException("port number must be > 0 but was: [" + port + "]").         }         return port.     } catch (NumberFormatException e) {         throw new IllegalArgumentException("failed to parse port", e).     } }
false;private,static;1;7;;private static int indexOfPortSeparator(String remoteHost) {     // in case we have a IPv6 address ie. [::1]:9300     int portSeparator = remoteHost.lastIndexOf(':').     if (portSeparator == -1 || portSeparator == remoteHost.length()) {         throw new IllegalArgumentException("remote hosts need to be configured as [host:port], found [" + remoteHost + "] instead").     }     return portSeparator. }
false;public,static;2;4;;public static String buildRemoteIndexName(String clusterAlias, String indexName) {     return clusterAlias == null || LOCAL_CLUSTER_GROUP_KEY.equals(clusterAlias) ? indexName : clusterAlias + REMOTE_CLUSTER_INDEX_SEPARATOR + indexName. }
