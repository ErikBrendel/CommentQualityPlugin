commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int capacity() {     return this.capacity. }
false;public;0;4;;@Override public int remainingCapacity() {     return Math.max(0, this.capacity()). }
true;public,synchronized;4;25;/**  * Resize the limit for the queue, returning the new size limit  */ ;/**  * Resize the limit for the queue, returning the new size limit  */ public synchronized int adjustCapacity(int optimalCapacity, int adjustmentAmount, int minCapacity, int maxCapacity) {     assert adjustmentAmount > 0 : "adjustment amount should be a positive value".     assert optimalCapacity >= 0 : "desired capacity cannot be negative".     assert minCapacity >= 0 : "cannot have min capacity smaller than 0".     assert maxCapacity >= minCapacity : "cannot have max capacity smaller than min capacity".     if (optimalCapacity == capacity) {         // Yahtzee!         return this.capacity.     }     if (optimalCapacity > capacity + adjustmentAmount) {         // adjust up         final int newCapacity = Math.min(maxCapacity, capacity + adjustmentAmount).         this.capacity = newCapacity.         return newCapacity.     } else if (optimalCapacity < capacity - adjustmentAmount) {         // adjust down         final int newCapacity = Math.max(minCapacity, capacity - adjustmentAmount).         this.capacity = newCapacity.         return newCapacity.     } else {         return this.capacity.     } }
