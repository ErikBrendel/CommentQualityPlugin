commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;public static AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     // the aggregation name is supplied to the parser as a Context. See note at top of Parser for more details     return PARSER.parse(parser, aggregationName). }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new PercentileRanksAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;8;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeDoubleArray(values).     out.writeBoolean(keyed).     out.writeVInt(numberOfSignificantValueDigits).     out.writeDouble(compression).     method.writeTo(out). }
true;public;0;3;/**  * Get the values to compute percentiles from.  */ ;/**  * Get the values to compute percentiles from.  */ public double[] values() {     return values. }
true;public;1;4;/**  * Set whether the XContent response should be keyed  */ ;/**  * Set whether the XContent response should be keyed  */ public PercentileRanksAggregationBuilder keyed(boolean keyed) {     this.keyed = keyed.     return this. }
true;public;0;3;/**  * Get whether the XContent response should be keyed  */ ;/**  * Get whether the XContent response should be keyed  */ public boolean keyed() {     return keyed. }
true;public;1;7;/**  * Expert: set the number of significant digits in the values. Only relevant  * when using {@link PercentilesMethod#HDR}.  */ ;/**  * Expert: set the number of significant digits in the values. Only relevant  * when using {@link PercentilesMethod#HDR}.  */ public PercentileRanksAggregationBuilder numberOfSignificantValueDigits(int numberOfSignificantValueDigits) {     if (numberOfSignificantValueDigits < 0 || numberOfSignificantValueDigits > 5) {         throw new IllegalArgumentException("[numberOfSignificantValueDigits] must be between 0 and 5: [" + name + "]").     }     this.numberOfSignificantValueDigits = numberOfSignificantValueDigits.     return this. }
true;public;0;3;/**  * Expert: get the number of significant digits in the values. Only relevant  * when using {@link PercentilesMethod#HDR}.  */ ;/**  * Expert: get the number of significant digits in the values. Only relevant  * when using {@link PercentilesMethod#HDR}.  */ public int numberOfSignificantValueDigits() {     return numberOfSignificantValueDigits. }
true;public;1;8;/**  * Expert: set the compression. Higher values improve accuracy but also  * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.  */ ;/**  * Expert: set the compression. Higher values improve accuracy but also  * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.  */ public PercentileRanksAggregationBuilder compression(double compression) {     if (compression < 0.0) {         throw new IllegalArgumentException("[compression] must be greater than or equal to 0. Found [" + compression + "] in [" + name + "]").     }     this.compression = compression.     return this. }
true;public;0;3;/**  * Expert: get the compression. Higher values improve accuracy but also  * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.  */ ;/**  * Expert: get the compression. Higher values improve accuracy but also  * memory usage. Only relevant when using {@link PercentilesMethod#TDIGEST}.  */ public double compression() {     return compression. }
false;public;1;7;;public PercentileRanksAggregationBuilder method(PercentilesMethod method) {     if (method == null) {         throw new IllegalArgumentException("[method] must not be null: [" + name + "]").     }     this.method = method.     return this. }
false;public;0;3;;public PercentilesMethod method() {     return method. }
false;protected;4;14;;@Override protected ValuesSourceAggregatorFactory<Numeric, ?> innerBuild(SearchContext context, ValuesSourceConfig<Numeric> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     switch(method) {         case TDIGEST:             return new TDigestPercentileRanksAggregatorFactory(name, config, values, compression, keyed, context, parent, subFactoriesBuilder, metaData).         case HDR:             return new HDRPercentileRanksAggregatorFactory(name, config, values, numberOfSignificantValueDigits, keyed, context, parent, subFactoriesBuilder, metaData).         default:             throw new IllegalStateException("Illegal method [" + method + "]").     } }
false;protected;2;13;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.array(VALUES_FIELD.getPreferredName(), values).     builder.field(PercentilesAggregationBuilder.KEYED_FIELD.getPreferredName(), keyed).     builder.startObject(method.toString()).     if (method == PercentilesMethod.TDIGEST) {         builder.field(PercentilesAggregationBuilder.COMPRESSION_FIELD.getPreferredName(), compression).     } else {         builder.field(PercentilesAggregationBuilder.NUMBER_SIGNIFICANT_DIGITS_FIELD.getPreferredName(), numberOfSignificantValueDigits).     }     builder.endObject().     return builder. }
false;protected;1;22;;@Override protected boolean innerEquals(Object obj) {     PercentileRanksAggregationBuilder other = (PercentileRanksAggregationBuilder) obj.     if (!Objects.equals(method, other.method)) {         return false.     }     boolean equalSettings = false.     switch(method) {         case HDR:             equalSettings = Objects.equals(numberOfSignificantValueDigits, other.numberOfSignificantValueDigits).             break.         case TDIGEST:             equalSettings = Objects.equals(compression, other.compression).             break.         default:             throw new IllegalStateException("Illegal method [" + method + "]").     }     return equalSettings && Objects.deepEquals(values, other.values) && Objects.equals(keyed, other.keyed) && Objects.equals(method, other.method). }
false;protected;0;11;;@Override protected int innerHashCode() {     switch(method) {         case HDR:             return Objects.hash(Arrays.hashCode(values), keyed, numberOfSignificantValueDigits, method).         case TDIGEST:             return Objects.hash(Arrays.hashCode(values), keyed, compression, method).         default:             throw new IllegalStateException("Illegal method [" + method + "]").     } }
false;public;0;4;;@Override public String getType() {     return NAME. }
