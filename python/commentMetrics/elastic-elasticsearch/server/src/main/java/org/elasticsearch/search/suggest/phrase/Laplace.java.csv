commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeDouble(alpha). }
true;public;0;3;/**  * @return the laplace model alpha parameter  */ ;/**  * @return the laplace model alpha parameter  */ public double getAlpha() {     return this.alpha. }
false;protected;2;5;;@Override protected XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(ALPHA_FIELD.getPreferredName(), alpha).     return builder. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;5;;@Override protected boolean doEquals(SmoothingModel other) {     Laplace otherModel = (Laplace) other.     return Objects.equals(alpha, otherModel.alpha). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(alpha). }
false;public,static;1;14;;public static SmoothingModel fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token.     String fieldName = null.     double alpha = DEFAULT_LAPLACE_ALPHA.     while ((token = parser.nextToken()) != Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             fieldName = parser.currentName().         }         if (token.isValue() && ALPHA_FIELD.match(fieldName, parser.getDeprecationHandler())) {             alpha = parser.doubleValue().         }     }     return new Laplace(alpha). }
false;public;0;5;;@Override public WordScorerFactory buildWordScorerFactory() {     return (IndexReader reader, Terms terms, String field, double realWordLikelihood, BytesRef separator) -> new LaplaceScorer(reader, terms, field, realWordLikelihood, separator, alpha). }
