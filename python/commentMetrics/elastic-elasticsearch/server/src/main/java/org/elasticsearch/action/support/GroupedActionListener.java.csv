commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public void onResponse(T element) {     results.setOnce(pos.incrementAndGet() - 1, element).     if (countDown.countDown()) {         if (failure.get() != null) {             delegate.onFailure(failure.get()).         } else {             List<T> collect = this.results.asList().             collect.addAll(defaults).             delegate.onResponse(Collections.unmodifiableList(collect)).         }     } }
false;public;1;12;;@Override public void onFailure(Exception e) {     if (failure.compareAndSet(null, e) == false) {         failure.accumulateAndGet(e, (previous, current) -> {             previous.addSuppressed(current).             return previous.         }).     }     if (countDown.countDown()) {         delegate.onFailure(failure.get()).     } }
