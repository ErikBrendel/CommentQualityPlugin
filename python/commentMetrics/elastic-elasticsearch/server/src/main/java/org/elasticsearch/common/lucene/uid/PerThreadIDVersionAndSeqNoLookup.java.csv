# id;timestamp;commentText;codeText;commentWords;codeWords
PerThreadIDVersionAndSeqNoLookup -> private int getDocID(BytesRef id, Bits liveDocs) throws IOException;1524684173;returns the internal lucene doc id for the given id bytes._{@link DocIdSetIterator#NO_MORE_DOCS} is returned if not found;private int getDocID(BytesRef id, Bits liveDocs) throws IOException {_        if (termsEnum.seekExact(id)) {_            int docID = DocIdSetIterator.NO_MORE_DOCS__            _            docsEnum = termsEnum.postings(docsEnum, 0)__            for (int d = docsEnum.nextDoc()_ d != DocIdSetIterator.NO_MORE_DOCS_ d = docsEnum.nextDoc()) {_                if (liveDocs != null && liveDocs.get(d) == false) {_                    continue__                }_                docID = d__            }_            return docID__        } else {_            return DocIdSetIterator.NO_MORE_DOCS__        }_    };returns,the,internal,lucene,doc,id,for,the,given,id,bytes,link,doc,id,set,iterator,is,returned,if,not,found;private,int,get,doc,id,bytes,ref,id,bits,live,docs,throws,ioexception,if,terms,enum,seek,exact,id,int,doc,id,doc,id,set,iterator,docs,enum,terms,enum,postings,docs,enum,0,for,int,d,docs,enum,next,doc,d,doc,id,set,iterator,d,docs,enum,next,doc,if,live,docs,null,live,docs,get,d,false,continue,doc,id,d,return,doc,id,else,return,doc,id,set,iterator
PerThreadIDVersionAndSeqNoLookup -> private int getDocID(BytesRef id, Bits liveDocs) throws IOException;1535723122;returns the internal lucene doc id for the given id bytes._{@link DocIdSetIterator#NO_MORE_DOCS} is returned if not found;private int getDocID(BytesRef id, Bits liveDocs) throws IOException {_        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            int docID = DocIdSetIterator.NO_MORE_DOCS__            _            docsEnum = termsEnum.postings(docsEnum, 0)__            for (int d = docsEnum.nextDoc()_ d != DocIdSetIterator.NO_MORE_DOCS_ d = docsEnum.nextDoc()) {_                if (liveDocs != null && liveDocs.get(d) == false) {_                    continue__                }_                docID = d__            }_            return docID__        } else {_            return DocIdSetIterator.NO_MORE_DOCS__        }_    };returns,the,internal,lucene,doc,id,for,the,given,id,bytes,link,doc,id,set,iterator,is,returned,if,not,found;private,int,get,doc,id,bytes,ref,id,bits,live,docs,throws,ioexception,if,terms,enum,null,terms,enum,seek,exact,id,int,doc,id,doc,id,set,iterator,docs,enum,terms,enum,postings,docs,enum,0,for,int,d,docs,enum,next,doc,d,doc,id,set,iterator,d,docs,enum,next,doc,if,live,docs,null,live,docs,get,d,false,continue,doc,id,d,return,doc,id,else,return,doc,id,set,iterator
PerThreadIDVersionAndSeqNoLookup -> private int getDocID(BytesRef id, Bits liveDocs) throws IOException;1541622390;returns the internal lucene doc id for the given id bytes._{@link DocIdSetIterator#NO_MORE_DOCS} is returned if not found;private int getDocID(BytesRef id, Bits liveDocs) throws IOException {_        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            int docID = DocIdSetIterator.NO_MORE_DOCS__            _            docsEnum = termsEnum.postings(docsEnum, 0)__            for (int d = docsEnum.nextDoc()_ d != DocIdSetIterator.NO_MORE_DOCS_ d = docsEnum.nextDoc()) {_                if (liveDocs != null && liveDocs.get(d) == false) {_                    continue__                }_                docID = d__            }_            return docID__        } else {_            return DocIdSetIterator.NO_MORE_DOCS__        }_    };returns,the,internal,lucene,doc,id,for,the,given,id,bytes,link,doc,id,set,iterator,is,returned,if,not,found;private,int,get,doc,id,bytes,ref,id,bits,live,docs,throws,ioexception,if,terms,enum,null,terms,enum,seek,exact,id,int,doc,id,doc,id,set,iterator,docs,enum,terms,enum,postings,docs,enum,0,for,int,d,docs,enum,next,doc,d,doc,id,set,iterator,d,docs,enum,next,doc,if,live,docs,null,live,docs,get,d,false,continue,doc,id,d,return,doc,id,else,return,doc,id,set,iterator
PerThreadIDVersionAndSeqNoLookup -> private int getDocID(BytesRef id, Bits liveDocs) throws IOException;1544684920;returns the internal lucene doc id for the given id bytes._{@link DocIdSetIterator#NO_MORE_DOCS} is returned if not found;private int getDocID(BytesRef id, Bits liveDocs) throws IOException {_        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            int docID = DocIdSetIterator.NO_MORE_DOCS__            _            docsEnum = termsEnum.postings(docsEnum, 0)__            for (int d = docsEnum.nextDoc()_ d != DocIdSetIterator.NO_MORE_DOCS_ d = docsEnum.nextDoc()) {_                if (liveDocs != null && liveDocs.get(d) == false) {_                    continue__                }_                docID = d__            }_            return docID__        } else {_            return DocIdSetIterator.NO_MORE_DOCS__        }_    };returns,the,internal,lucene,doc,id,for,the,given,id,bytes,link,doc,id,set,iterator,is,returned,if,not,found;private,int,get,doc,id,bytes,ref,id,bits,live,docs,throws,ioexception,if,terms,enum,null,terms,enum,seek,exact,id,int,doc,id,doc,id,set,iterator,docs,enum,terms,enum,postings,docs,enum,0,for,int,d,docs,enum,next,doc,d,doc,id,set,iterator,d,docs,enum,next,doc,if,live,docs,null,live,docs,get,d,false,continue,doc,id,d,return,doc,id,else,return,doc,id,set,iterator
PerThreadIDVersionAndSeqNoLookup -> private int getDocID(BytesRef id, Bits liveDocs) throws IOException;1545221705;returns the internal lucene doc id for the given id bytes._{@link DocIdSetIterator#NO_MORE_DOCS} is returned if not found;private int getDocID(BytesRef id, Bits liveDocs) throws IOException {_        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            int docID = DocIdSetIterator.NO_MORE_DOCS__            _            docsEnum = termsEnum.postings(docsEnum, 0)__            for (int d = docsEnum.nextDoc()_ d != DocIdSetIterator.NO_MORE_DOCS_ d = docsEnum.nextDoc()) {_                if (liveDocs != null && liveDocs.get(d) == false) {_                    continue__                }_                docID = d__            }_            return docID__        } else {_            return DocIdSetIterator.NO_MORE_DOCS__        }_    };returns,the,internal,lucene,doc,id,for,the,given,id,bytes,link,doc,id,set,iterator,is,returned,if,not,found;private,int,get,doc,id,bytes,ref,id,bits,live,docs,throws,ioexception,if,terms,enum,null,terms,enum,seek,exact,id,int,doc,id,doc,id,set,iterator,docs,enum,terms,enum,postings,docs,enum,0,for,int,d,docs,enum,next,doc,d,doc,id,set,iterator,d,docs,enum,next,doc,if,live,docs,null,live,docs,get,d,false,continue,doc,id,d,return,doc,id,else,return,doc,id,set,iterator
PerThreadIDVersionAndSeqNoLookup -> DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException;1524684173;Return null if id is not found.;DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())__        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            NumericDocValues seqNos = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__            long seqNo__            if (seqNos != null && seqNos.advanceExact(docID)) {_                seqNo = seqNos.longValue()__            } else {_                seqNo =  SequenceNumbers.UNASSIGNED_SEQ_NO__            }_            return new DocIdAndSeqNo(docID, seqNo, context)__        } else {_            return null__        }_    };return,null,if,id,is,not,found;doc,id,and,seq,no,lookup,seq,no,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,numeric,doc,values,seq,nos,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,long,seq,no,if,seq,nos,null,seq,nos,advance,exact,doc,id,seq,no,seq,nos,long,value,else,seq,no,sequence,numbers,return,new,doc,id,and,seq,no,doc,id,seq,no,context,else,return,null
PerThreadIDVersionAndSeqNoLookup -> DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException;1535723122;Return null if id is not found.;DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())__        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            NumericDocValues seqNos = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__            long seqNo__            if (seqNos != null && seqNos.advanceExact(docID)) {_                seqNo = seqNos.longValue()__            } else {_                seqNo =  SequenceNumbers.UNASSIGNED_SEQ_NO__            }_            return new DocIdAndSeqNo(docID, seqNo, context)__        } else {_            return null__        }_    };return,null,if,id,is,not,found;doc,id,and,seq,no,lookup,seq,no,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,numeric,doc,values,seq,nos,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,long,seq,no,if,seq,nos,null,seq,nos,advance,exact,doc,id,seq,no,seq,nos,long,value,else,seq,no,sequence,numbers,return,new,doc,id,and,seq,no,doc,id,seq,no,context,else,return,null
PerThreadIDVersionAndSeqNoLookup -> DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException;1541622390;Return null if id is not found.;DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            docsEnum = termsEnum.postings(docsEnum, 0)__            final Bits liveDocs = context.reader().getLiveDocs()__            DocIdAndSeqNo result = null__            int docID = docsEnum.nextDoc()__            if (docID != DocIdSetIterator.NO_MORE_DOCS) {_                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__                for (_ docID != DocIdSetIterator.NO_MORE_DOCS_ docID = docsEnum.nextDoc()) {_                    final long seqNo__                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {_                        seqNo = seqNoDV.longValue()__                    } else {_                        seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__                    }_                    final boolean isLive = (liveDocs == null || liveDocs.get(docID))__                    if (isLive) {_                        _                        _                        _                        assert result == null || result.seqNo <= seqNo :_                            "the live doc does not have the highest seq_no_ live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo__                        return new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                    if (result == null || result.seqNo < seqNo) {_                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                }_            }_            return result__        } else {_            return null__        }_    };return,null,if,id,is,not,found;doc,id,and,seq,no,lookup,seq,no,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,if,terms,enum,null,terms,enum,seek,exact,id,docs,enum,terms,enum,postings,docs,enum,0,final,bits,live,docs,context,reader,get,live,docs,doc,id,and,seq,no,result,null,int,doc,id,docs,enum,next,doc,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,seq,no,dv,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,for,doc,id,doc,id,set,iterator,doc,id,docs,enum,next,doc,final,long,seq,no,if,seq,no,dv,null,seq,no,dv,advance,exact,doc,id,seq,no,seq,no,dv,long,value,else,seq,no,sequence,numbers,final,boolean,is,live,live,docs,null,live,docs,get,doc,id,if,is,live,assert,result,null,result,seq,no,seq,no,the,live,doc,does,not,have,the,highest,seq,no,result,seq,no,return,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,if,result,null,result,seq,no,seq,no,result,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,return,result,else,return,null
PerThreadIDVersionAndSeqNoLookup -> DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException;1544684920;Return null if id is not found.;DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            docsEnum = termsEnum.postings(docsEnum, 0)__            final Bits liveDocs = context.reader().getLiveDocs()__            DocIdAndSeqNo result = null__            int docID = docsEnum.nextDoc()__            if (docID != DocIdSetIterator.NO_MORE_DOCS) {_                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__                for (_ docID != DocIdSetIterator.NO_MORE_DOCS_ docID = docsEnum.nextDoc()) {_                    final long seqNo__                    _                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {_                        seqNo = seqNoDV.longValue()__                    } else {_                        seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__                    }_                    final boolean isLive = (liveDocs == null || liveDocs.get(docID))__                    if (isLive) {_                        _                        _                        _                        assert result == null || result.seqNo <= seqNo :_                            "the live doc does not have the highest seq_no_ live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo__                        return new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                    if (result == null || result.seqNo < seqNo) {_                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                }_            }_            return result__        } else {_            return null__        }_    };return,null,if,id,is,not,found;doc,id,and,seq,no,lookup,seq,no,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,if,terms,enum,null,terms,enum,seek,exact,id,docs,enum,terms,enum,postings,docs,enum,0,final,bits,live,docs,context,reader,get,live,docs,doc,id,and,seq,no,result,null,int,doc,id,docs,enum,next,doc,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,seq,no,dv,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,for,doc,id,doc,id,set,iterator,doc,id,docs,enum,next,doc,final,long,seq,no,if,seq,no,dv,null,seq,no,dv,advance,exact,doc,id,seq,no,seq,no,dv,long,value,else,seq,no,sequence,numbers,final,boolean,is,live,live,docs,null,live,docs,get,doc,id,if,is,live,assert,result,null,result,seq,no,seq,no,the,live,doc,does,not,have,the,highest,seq,no,result,seq,no,return,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,if,result,null,result,seq,no,seq,no,result,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,return,result,else,return,null
PerThreadIDVersionAndSeqNoLookup -> DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException;1545221705;Return null if id is not found.;DocIdAndSeqNo lookupSeqNo(BytesRef id, LeafReaderContext context) throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        _        if (termsEnum != null && termsEnum.seekExact(id)) {_            docsEnum = termsEnum.postings(docsEnum, 0)__            final Bits liveDocs = context.reader().getLiveDocs()__            DocIdAndSeqNo result = null__            int docID = docsEnum.nextDoc()__            if (docID != DocIdSetIterator.NO_MORE_DOCS) {_                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__                for (_ docID != DocIdSetIterator.NO_MORE_DOCS_ docID = docsEnum.nextDoc()) {_                    final long seqNo__                    _                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {_                        seqNo = seqNoDV.longValue()__                    } else {_                        seqNo = UNASSIGNED_SEQ_NO__                    }_                    final boolean isLive = (liveDocs == null || liveDocs.get(docID))__                    if (isLive) {_                        _                        _                        _                        assert result == null || result.seqNo <= seqNo :_                            "the live doc does not have the highest seq_no_ live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo__                        return new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                    if (result == null || result.seqNo < seqNo) {_                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive)__                    }_                }_            }_            return result__        } else {_            return null__        }_    };return,null,if,id,is,not,found;doc,id,and,seq,no,lookup,seq,no,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,if,terms,enum,null,terms,enum,seek,exact,id,docs,enum,terms,enum,postings,docs,enum,0,final,bits,live,docs,context,reader,get,live,docs,doc,id,and,seq,no,result,null,int,doc,id,docs,enum,next,doc,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,seq,no,dv,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,for,doc,id,doc,id,set,iterator,doc,id,docs,enum,next,doc,final,long,seq,no,if,seq,no,dv,null,seq,no,dv,advance,exact,doc,id,seq,no,seq,no,dv,long,value,else,seq,no,final,boolean,is,live,live,docs,null,live,docs,get,doc,id,if,is,live,assert,result,null,result,seq,no,seq,no,the,live,doc,does,not,have,the,highest,seq,no,result,seq,no,return,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,if,result,null,result,seq,no,seq,no,result,new,doc,id,and,seq,no,doc,id,seq,no,context,is,live,return,result,else,return,null
PerThreadIDVersionAndSeqNoLookup -> public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)         throws IOException;1524684173;Return null if id is not found._We pass the {@link LeafReaderContext} as an argument so that things_still work with reader wrappers that hide some documents while still_using the same cache key. Otherwise we'd have to disable caching_entirely for these readers.;public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)_        throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())___        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            final NumericDocValues versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME)__            if (versions == null) {_                throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__            }_            if (versions.advanceExact(docID) == false) {_                throw new IllegalArgumentException("Document [" + docID + "] misses the [" + VersionFieldMapper.NAME + "] field")__            }_            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase)__        } else {_            return null__        }_    };return,null,if,id,is,not,found,we,pass,the,link,leaf,reader,context,as,an,argument,so,that,things,still,work,with,reader,wrappers,that,hide,some,documents,while,still,using,the,same,cache,key,otherwise,we,d,have,to,disable,caching,entirely,for,these,readers;public,doc,id,and,version,lookup,version,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,versions,context,reader,get,numeric,doc,values,version,field,mapper,name,if,versions,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,if,versions,advance,exact,doc,id,false,throw,new,illegal,argument,exception,document,doc,id,misses,the,version,field,mapper,name,field,return,new,doc,id,and,version,doc,id,versions,long,value,context,reader,context,doc,base,else,return,null
PerThreadIDVersionAndSeqNoLookup -> public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)         throws IOException;1535723122;Return null if id is not found._We pass the {@link LeafReaderContext} as an argument so that things_still work with reader wrappers that hide some documents while still_using the same cache key. Otherwise we'd have to disable caching_entirely for these readers.;public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)_        throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())___        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            final NumericDocValues versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME)__            if (versions == null) {_                throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__            }_            if (versions.advanceExact(docID) == false) {_                throw new IllegalArgumentException("Document [" + docID + "] misses the [" + VersionFieldMapper.NAME + "] field")__            }_            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase)__        } else {_            return null__        }_    };return,null,if,id,is,not,found,we,pass,the,link,leaf,reader,context,as,an,argument,so,that,things,still,work,with,reader,wrappers,that,hide,some,documents,while,still,using,the,same,cache,key,otherwise,we,d,have,to,disable,caching,entirely,for,these,readers;public,doc,id,and,version,lookup,version,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,versions,context,reader,get,numeric,doc,values,version,field,mapper,name,if,versions,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,if,versions,advance,exact,doc,id,false,throw,new,illegal,argument,exception,document,doc,id,misses,the,version,field,mapper,name,field,return,new,doc,id,and,version,doc,id,versions,long,value,context,reader,context,doc,base,else,return,null
PerThreadIDVersionAndSeqNoLookup -> public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)         throws IOException;1541622390;Return null if id is not found._We pass the {@link LeafReaderContext} as an argument so that things_still work with reader wrappers that hide some documents while still_using the same cache key. Otherwise we'd have to disable caching_entirely for these readers.;public DocIdAndVersion lookupVersion(BytesRef id, LeafReaderContext context)_        throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())___        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            final NumericDocValues versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME)__            if (versions == null) {_                throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__            }_            if (versions.advanceExact(docID) == false) {_                throw new IllegalArgumentException("Document [" + docID + "] misses the [" + VersionFieldMapper.NAME + "] field")__            }_            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase)__        } else {_            return null__        }_    };return,null,if,id,is,not,found,we,pass,the,link,leaf,reader,context,as,an,argument,so,that,things,still,work,with,reader,wrappers,that,hide,some,documents,while,still,using,the,same,cache,key,otherwise,we,d,have,to,disable,caching,entirely,for,these,readers;public,doc,id,and,version,lookup,version,bytes,ref,id,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,versions,context,reader,get,numeric,doc,values,version,field,mapper,name,if,versions,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,if,versions,advance,exact,doc,id,false,throw,new,illegal,argument,exception,document,doc,id,misses,the,version,field,mapper,name,field,return,new,doc,id,and,version,doc,id,versions,long,value,context,reader,context,doc,base,else,return,null
PerThreadIDVersionAndSeqNoLookup -> public DocIdAndVersion lookupVersion(BytesRef id, boolean loadSeqNo, LeafReaderContext context)         throws IOException;1544684920;Return null if id is not found._We pass the {@link LeafReaderContext} as an argument so that things_still work with reader wrappers that hide some documents while still_using the same cache key. Otherwise we'd have to disable caching_entirely for these readers.;public DocIdAndVersion lookupVersion(BytesRef id, boolean loadSeqNo, LeafReaderContext context)_        throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())___        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            final NumericDocValues versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME)__            if (versions == null) {_                throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__            }_            if (versions.advanceExact(docID) == false) {_                throw new IllegalArgumentException("Document [" + docID + "] misses the [" + VersionFieldMapper.NAME + "] field")__            }_            final long seqNo__            final long term__            if (loadSeqNo) {_                NumericDocValues seqNos = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__                _                if (seqNos != null && seqNos.advanceExact(docID)) {_                    seqNo = seqNos.longValue()__                } else {_                    seqNo =  SequenceNumbers.UNASSIGNED_SEQ_NO__                }_                NumericDocValues terms = context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (terms != null && terms.advanceExact(docID)) {_                    term = terms.longValue()__                } else {_                    term = 0__                }__            } else {_                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO__                term = 0__            }_            return new DocIdAndVersion(docID, versions.longValue(), seqNo, term, context.reader(), context.docBase)__        } else {_            return null__        }_    };return,null,if,id,is,not,found,we,pass,the,link,leaf,reader,context,as,an,argument,so,that,things,still,work,with,reader,wrappers,that,hide,some,documents,while,still,using,the,same,cache,key,otherwise,we,d,have,to,disable,caching,entirely,for,these,readers;public,doc,id,and,version,lookup,version,bytes,ref,id,boolean,load,seq,no,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,versions,context,reader,get,numeric,doc,values,version,field,mapper,name,if,versions,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,if,versions,advance,exact,doc,id,false,throw,new,illegal,argument,exception,document,doc,id,misses,the,version,field,mapper,name,field,final,long,seq,no,final,long,term,if,load,seq,no,numeric,doc,values,seq,nos,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,if,seq,nos,null,seq,nos,advance,exact,doc,id,seq,no,seq,nos,long,value,else,seq,no,sequence,numbers,numeric,doc,values,terms,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,terms,null,terms,advance,exact,doc,id,term,terms,long,value,else,term,0,else,seq,no,sequence,numbers,term,0,return,new,doc,id,and,version,doc,id,versions,long,value,seq,no,term,context,reader,context,doc,base,else,return,null
PerThreadIDVersionAndSeqNoLookup -> public DocIdAndVersion lookupVersion(BytesRef id, boolean loadSeqNo, LeafReaderContext context)         throws IOException;1545221705;Return null if id is not found._We pass the {@link LeafReaderContext} as an argument so that things_still work with reader wrappers that hide some documents while still_using the same cache key. Otherwise we'd have to disable caching_entirely for these readers.;public DocIdAndVersion lookupVersion(BytesRef id, boolean loadSeqNo, LeafReaderContext context)_        throws IOException {_        assert context.reader().getCoreCacheHelper().getKey().equals(readerKey) :_            "context's reader is not the same as the reader class was initialized on."__        int docID = getDocID(id, context.reader().getLiveDocs())___        if (docID != DocIdSetIterator.NO_MORE_DOCS) {_            final NumericDocValues versions = context.reader().getNumericDocValues(VersionFieldMapper.NAME)__            if (versions == null) {_                throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__            }_            if (versions.advanceExact(docID) == false) {_                throw new IllegalArgumentException("Document [" + docID + "] misses the [" + VersionFieldMapper.NAME + "] field")__            }_            final long seqNo__            final long term__            if (loadSeqNo) {_                NumericDocValues seqNos = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME)__                _                if (seqNos != null && seqNos.advanceExact(docID)) {_                    seqNo = seqNos.longValue()__                } else {_                    seqNo =  UNASSIGNED_SEQ_NO__                }_                NumericDocValues terms = context.reader().getNumericDocValues(SeqNoFieldMapper.PRIMARY_TERM_NAME)__                if (terms != null && terms.advanceExact(docID)) {_                    term = terms.longValue()__                } else {_                    term = UNASSIGNED_PRIMARY_TERM__                }__            } else {_                seqNo = UNASSIGNED_SEQ_NO__                term = UNASSIGNED_PRIMARY_TERM__            }_            return new DocIdAndVersion(docID, versions.longValue(), seqNo, term, context.reader(), context.docBase)__        } else {_            return null__        }_    };return,null,if,id,is,not,found,we,pass,the,link,leaf,reader,context,as,an,argument,so,that,things,still,work,with,reader,wrappers,that,hide,some,documents,while,still,using,the,same,cache,key,otherwise,we,d,have,to,disable,caching,entirely,for,these,readers;public,doc,id,and,version,lookup,version,bytes,ref,id,boolean,load,seq,no,leaf,reader,context,context,throws,ioexception,assert,context,reader,get,core,cache,helper,get,key,equals,reader,key,context,s,reader,is,not,the,same,as,the,reader,class,was,initialized,on,int,doc,id,get,doc,id,id,context,reader,get,live,docs,if,doc,id,doc,id,set,iterator,final,numeric,doc,values,versions,context,reader,get,numeric,doc,values,version,field,mapper,name,if,versions,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,if,versions,advance,exact,doc,id,false,throw,new,illegal,argument,exception,document,doc,id,misses,the,version,field,mapper,name,field,final,long,seq,no,final,long,term,if,load,seq,no,numeric,doc,values,seq,nos,context,reader,get,numeric,doc,values,seq,no,field,mapper,name,if,seq,nos,null,seq,nos,advance,exact,doc,id,seq,no,seq,nos,long,value,else,seq,no,numeric,doc,values,terms,context,reader,get,numeric,doc,values,seq,no,field,mapper,if,terms,null,terms,advance,exact,doc,id,term,terms,long,value,else,term,else,seq,no,term,return,new,doc,id,and,version,doc,id,versions,long,value,seq,no,term,context,reader,context,doc,base,else,return,null
PerThreadIDVersionAndSeqNoLookup -> PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException;1524684173;Initialize lookup for the provided segment;PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException {_        this.uidField = uidField__        Terms terms = reader.terms(uidField)__        if (terms == null) {_            throw new IllegalArgumentException("reader misses the [" + uidField + "] field")__        }_        termsEnum = terms.iterator()__        if (reader.getNumericDocValues(VersionFieldMapper.NAME) == null) {_            throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field")__        }__        Object readerKey = null__        assert (readerKey = reader.getCoreCacheHelper().getKey()) != null__        this.readerKey = readerKey__    };initialize,lookup,for,the,provided,segment;per,thread,idversion,and,seq,no,lookup,leaf,reader,reader,string,uid,field,throws,ioexception,this,uid,field,uid,field,terms,terms,reader,terms,uid,field,if,terms,null,throw,new,illegal,argument,exception,reader,misses,the,uid,field,field,terms,enum,terms,iterator,if,reader,get,numeric,doc,values,version,field,mapper,name,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,object,reader,key,null,assert,reader,key,reader,get,core,cache,helper,get,key,null,this,reader,key,reader,key
PerThreadIDVersionAndSeqNoLookup -> PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException;1535723122;Initialize lookup for the provided segment;PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException {_        this.uidField = uidField__        final Terms terms = reader.terms(uidField)__        if (terms == null) {_            _            final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD)__            final NumericDocValues tombstoneDV = reader.getNumericDocValues(SeqNoFieldMapper.TOMBSTONE_NAME)__            if (softDeletesDV == null || tombstoneDV == null) {_                throw new IllegalArgumentException("reader does not have _uid terms but not a no-op segment_ " +_                    "_soft_deletes [" + softDeletesDV + "], _tombstone [" + tombstoneDV + "]")__            }_            termsEnum = null__        } else {_            termsEnum = terms.iterator()__        }_        if (reader.getNumericDocValues(VersionFieldMapper.NAME) == null) {_            throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field_ _uid terms [" + terms + "]")__        }_        Object readerKey = null__        assert (readerKey = reader.getCoreCacheHelper().getKey()) != null__        this.readerKey = readerKey__    };initialize,lookup,for,the,provided,segment;per,thread,idversion,and,seq,no,lookup,leaf,reader,reader,string,uid,field,throws,ioexception,this,uid,field,uid,field,final,terms,terms,reader,terms,uid,field,if,terms,null,final,numeric,doc,values,soft,deletes,dv,reader,get,numeric,doc,values,lucene,final,numeric,doc,values,tombstone,dv,reader,get,numeric,doc,values,seq,no,field,mapper,if,soft,deletes,dv,null,tombstone,dv,null,throw,new,illegal,argument,exception,reader,does,not,have,terms,but,not,a,no,op,segment,soft,deletes,dv,tombstone,dv,terms,enum,null,else,terms,enum,terms,iterator,if,reader,get,numeric,doc,values,version,field,mapper,name,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,terms,terms,object,reader,key,null,assert,reader,key,reader,get,core,cache,helper,get,key,null,this,reader,key,reader,key
PerThreadIDVersionAndSeqNoLookup -> PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException;1541622390;Initialize lookup for the provided segment;PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException {_        this.uidField = uidField__        final Terms terms = reader.terms(uidField)__        if (terms == null) {_            _            final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD)__            final NumericDocValues tombstoneDV = reader.getNumericDocValues(SeqNoFieldMapper.TOMBSTONE_NAME)__            if (softDeletesDV == null || tombstoneDV == null) {_                throw new IllegalArgumentException("reader does not have _uid terms but not a no-op segment_ " +_                    "_soft_deletes [" + softDeletesDV + "], _tombstone [" + tombstoneDV + "]")__            }_            termsEnum = null__        } else {_            termsEnum = terms.iterator()__        }_        if (reader.getNumericDocValues(VersionFieldMapper.NAME) == null) {_            throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field_ _uid terms [" + terms + "]")__        }_        Object readerKey = null__        assert (readerKey = reader.getCoreCacheHelper().getKey()) != null__        this.readerKey = readerKey__    };initialize,lookup,for,the,provided,segment;per,thread,idversion,and,seq,no,lookup,leaf,reader,reader,string,uid,field,throws,ioexception,this,uid,field,uid,field,final,terms,terms,reader,terms,uid,field,if,terms,null,final,numeric,doc,values,soft,deletes,dv,reader,get,numeric,doc,values,lucene,final,numeric,doc,values,tombstone,dv,reader,get,numeric,doc,values,seq,no,field,mapper,if,soft,deletes,dv,null,tombstone,dv,null,throw,new,illegal,argument,exception,reader,does,not,have,terms,but,not,a,no,op,segment,soft,deletes,dv,tombstone,dv,terms,enum,null,else,terms,enum,terms,iterator,if,reader,get,numeric,doc,values,version,field,mapper,name,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,terms,terms,object,reader,key,null,assert,reader,key,reader,get,core,cache,helper,get,key,null,this,reader,key,reader,key
PerThreadIDVersionAndSeqNoLookup -> PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException;1544684920;Initialize lookup for the provided segment;PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException {_        this.uidField = uidField__        final Terms terms = reader.terms(uidField)__        if (terms == null) {_            _            final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD)__            final NumericDocValues tombstoneDV = reader.getNumericDocValues(SeqNoFieldMapper.TOMBSTONE_NAME)__            if (softDeletesDV == null || tombstoneDV == null) {_                throw new IllegalArgumentException("reader does not have _uid terms but not a no-op segment_ " +_                    "_soft_deletes [" + softDeletesDV + "], _tombstone [" + tombstoneDV + "]")__            }_            termsEnum = null__        } else {_            termsEnum = terms.iterator()__        }_        if (reader.getNumericDocValues(VersionFieldMapper.NAME) == null) {_            throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field_ _uid terms [" + terms + "]")__        }_        Object readerKey = null__        assert (readerKey = reader.getCoreCacheHelper().getKey()) != null__        this.readerKey = readerKey__    };initialize,lookup,for,the,provided,segment;per,thread,idversion,and,seq,no,lookup,leaf,reader,reader,string,uid,field,throws,ioexception,this,uid,field,uid,field,final,terms,terms,reader,terms,uid,field,if,terms,null,final,numeric,doc,values,soft,deletes,dv,reader,get,numeric,doc,values,lucene,final,numeric,doc,values,tombstone,dv,reader,get,numeric,doc,values,seq,no,field,mapper,if,soft,deletes,dv,null,tombstone,dv,null,throw,new,illegal,argument,exception,reader,does,not,have,terms,but,not,a,no,op,segment,soft,deletes,dv,tombstone,dv,terms,enum,null,else,terms,enum,terms,iterator,if,reader,get,numeric,doc,values,version,field,mapper,name,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,terms,terms,object,reader,key,null,assert,reader,key,reader,get,core,cache,helper,get,key,null,this,reader,key,reader,key
PerThreadIDVersionAndSeqNoLookup -> PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException;1545221705;Initialize lookup for the provided segment;PerThreadIDVersionAndSeqNoLookup(LeafReader reader, String uidField) throws IOException {_        this.uidField = uidField__        final Terms terms = reader.terms(uidField)__        if (terms == null) {_            _            final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD)__            final NumericDocValues tombstoneDV = reader.getNumericDocValues(SeqNoFieldMapper.TOMBSTONE_NAME)__            if (softDeletesDV == null || tombstoneDV == null) {_                throw new IllegalArgumentException("reader does not have _uid terms but not a no-op segment_ " +_                    "_soft_deletes [" + softDeletesDV + "], _tombstone [" + tombstoneDV + "]")__            }_            termsEnum = null__        } else {_            termsEnum = terms.iterator()__        }_        if (reader.getNumericDocValues(VersionFieldMapper.NAME) == null) {_            throw new IllegalArgumentException("reader misses the [" + VersionFieldMapper.NAME + "] field_ _uid terms [" + terms + "]")__        }_        Object readerKey = null__        assert (readerKey = reader.getCoreCacheHelper().getKey()) != null__        this.readerKey = readerKey__    };initialize,lookup,for,the,provided,segment;per,thread,idversion,and,seq,no,lookup,leaf,reader,reader,string,uid,field,throws,ioexception,this,uid,field,uid,field,final,terms,terms,reader,terms,uid,field,if,terms,null,final,numeric,doc,values,soft,deletes,dv,reader,get,numeric,doc,values,lucene,final,numeric,doc,values,tombstone,dv,reader,get,numeric,doc,values,seq,no,field,mapper,if,soft,deletes,dv,null,tombstone,dv,null,throw,new,illegal,argument,exception,reader,does,not,have,terms,but,not,a,no,op,segment,soft,deletes,dv,tombstone,dv,terms,enum,null,else,terms,enum,terms,iterator,if,reader,get,numeric,doc,values,version,field,mapper,name,null,throw,new,illegal,argument,exception,reader,misses,the,version,field,mapper,name,field,terms,terms,object,reader,key,null,assert,reader,key,reader,get,core,cache,helper,get,key,null,this,reader,key,reader,key
