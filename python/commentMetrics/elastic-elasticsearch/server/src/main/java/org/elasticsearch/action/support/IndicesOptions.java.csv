# id;timestamp;commentText;codeText;commentWords;codeWords
IndicesOptions -> public boolean expandWildcardsClosed();1524684173;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return (id & EXPAND_WILDCARDS_CLOSED) != 0__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,id,0
IndicesOptions -> public boolean expandWildcardsClosed();1526449283;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1526510804;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1531179852;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1531729807;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1540847035;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1541493930;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1541508630;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public boolean expandWildcardsClosed();1541612607;@return Whether wildcard expressions should get expanded to closed indices;public boolean expandWildcardsClosed() {_        return expandWildcards.contains(WildcardStates.CLOSED)__    };return,whether,wildcard,expressions,should,get,expanded,to,closed,indices;public,boolean,expand,wildcards,closed,return,expand,wildcards,contains,wildcard,states,closed
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1524684173;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return VALUES[LENIENT_EXPAND_OPEN]__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return,values
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1526449283;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1526510804;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1531179852;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1531729807;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1540847035;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1541493930;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1541508630;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static IndicesOptions lenientExpandOpen();1541612607;@return indices options that ignores unavailable indices, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions lenientExpandOpen() {_        return LENIENT_EXPAND_OPEN__    };return,indices,options,that,ignores,unavailable,indices,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,lenient,expand,open,return
IndicesOptions -> public static boolean isIndicesOptions(String name);1524684173;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1526449283;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1526510804;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1531179852;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1531729807;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1540847035;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1541493930;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "ignore_throttled".equals(name) || "ignoreThrottled".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,ignore,throttled,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1541508630;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "ignore_throttled".equals(name) || "ignoreThrottled".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,ignore,throttled,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public static boolean isIndicesOptions(String name);1541612607;Returns true if the name represents a valid name for one of the indices option_false otherwise;public static boolean isIndicesOptions(String name) {_        return "expand_wildcards".equals(name) || "expandWildcards".equals(name) ||_                "ignore_unavailable".equals(name) || "ignoreUnavailable".equals(name) ||_                "ignore_throttled".equals(name) || "ignoreThrottled".equals(name) ||_                "allow_no_indices".equals(name) || "allowNoIndices".equals(name)__    };returns,true,if,the,name,represents,a,valid,name,for,one,of,the,indices,option,false,otherwise;public,static,boolean,is,indices,options,string,name,return,equals,name,expand,wildcards,equals,name,equals,name,ignore,unavailable,equals,name,equals,name,ignore,throttled,equals,name,equals,name,allow,no,indices,equals,name
IndicesOptions -> public boolean expandWildcardsOpen();1524684173;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return (id & EXPAND_WILDCARDS_OPEN) != 0__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,id,0
IndicesOptions -> public boolean expandWildcardsOpen();1526449283;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1526510804;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1531179852;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1531729807;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1540847035;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1541493930;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1541508630;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean expandWildcardsOpen();1541612607;@return Whether wildcard expressions should get expanded to open indices;public boolean expandWildcardsOpen() {_        return expandWildcards.contains(WildcardStates.OPEN)__    };return,whether,wildcard,expressions,should,get,expanded,to,open,indices;public,boolean,expand,wildcards,open,return,expand,wildcards,contains,wildcard,states,open
IndicesOptions -> public boolean forbidClosedIndices();1524684173;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return (id & FORBID_CLOSED_INDICES) != 0__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,id,0
IndicesOptions -> public boolean forbidClosedIndices();1526449283;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1526510804;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1531179852;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1531729807;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1540847035;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1541493930;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1541508630;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean forbidClosedIndices();1541612607;@return Whether execution on closed indices is allowed.;public boolean forbidClosedIndices() {_        return options.contains(Option.FORBID_CLOSED_INDICES)__    };return,whether,execution,on,closed,indices,is,allowed;public,boolean,forbid,closed,indices,return,options,contains,option
IndicesOptions -> public boolean ignoreThrottled();1541493930;@return whether indices that are marked as throttled should be ignored when resolving a wildcard or alias;public boolean ignoreThrottled() {_        return options.contains(Option.IGNORE_THROTTLED)__    };return,whether,indices,that,are,marked,as,throttled,should,be,ignored,when,resolving,a,wildcard,or,alias;public,boolean,ignore,throttled,return,options,contains,option
IndicesOptions -> public boolean ignoreThrottled();1541508630;@return whether indices that are marked as throttled should be ignored when resolving a wildcard or alias;public boolean ignoreThrottled() {_        return options.contains(Option.IGNORE_THROTTLED)__    };return,whether,indices,that,are,marked,as,throttled,should,be,ignored,when,resolving,a,wildcard,or,alias;public,boolean,ignore,throttled,return,options,contains,option
IndicesOptions -> public boolean ignoreThrottled();1541612607;@return whether indices that are marked as throttled should be ignored;public boolean ignoreThrottled() {_        return options.contains(Option.IGNORE_THROTTLED)__    };return,whether,indices,that,are,marked,as,throttled,should,be,ignored;public,boolean,ignore,throttled,return,options,contains,option
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled();1541493930;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error and ignores indices that are throttled.;public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error,and,ignores,indices,that,are,throttled;public,static,indices,options,strict,expand,open,and,forbid,closed,ignore,throttled,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled();1541508630;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error and ignores indices that are throttled.;public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error,and,ignores,indices,that,are,throttled;public,static,indices,options,strict,expand,open,and,forbid,closed,ignore,throttled,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled();1541612607;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error and ignores indices that are throttled.;public static IndicesOptions strictExpandOpenAndForbidClosedIgnoreThrottled() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED_IGNORE_THROTTLED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error,and,ignores,indices,that,are,throttled;public,static,indices,options,strict,expand,open,and,forbid,closed,ignore,throttled,return
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1524684173;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return (id & FORBID_ALIASES_TO_MULTIPLE_INDICES) == 0__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,id,0
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1526449283;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1526510804;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1531179852;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1531729807;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1540847035;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1541493930;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1541508630;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public boolean allowAliasesToMultipleIndices();1541612607;@return whether aliases pointing to multiple indices are allowed;public boolean allowAliasesToMultipleIndices() {_        _        _        return options.contains(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES) == false__    };return,whether,aliases,pointing,to,multiple,indices,are,allowed;public,boolean,allow,aliases,to,multiple,indices,return,options,contains,option,false
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1524684173;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return VALUES[STRICT_EXPAND_OPEN_FORBID_CLOSED]__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return,values
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1526449283;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1526510804;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1531179852;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1531729807;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1540847035;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1541493930;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1541508630;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictExpandOpenAndForbidClosed();1541612607;@return indices options that requires every specified index to exist, expands wildcards only to open indices,_allows that no indices are resolved from wildcard expressions (not returning an error) and forbids the_use of closed indices by throwing an error.;public static IndicesOptions strictExpandOpenAndForbidClosed() {_        return STRICT_EXPAND_OPEN_FORBID_CLOSED__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error,and,forbids,the,use,of,closed,indices,by,throwing,an,error;public,static,indices,options,strict,expand,open,and,forbid,closed,return
IndicesOptions -> public boolean allowNoIndices();1524684173;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return (id & ALLOW_NO_INDICES) != 0__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,id,0
IndicesOptions -> public boolean allowNoIndices();1526449283;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1526510804;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1531179852;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1531729807;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1540847035;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1541493930;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1541508630;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public boolean allowNoIndices();1541612607;@return Whether to ignore if a wildcard expression resolves to no concrete indices._The `_all` string or empty list of indices count as wildcard expressions too._Also when an alias points to a closed index this option decides if no concrete indices_are allowed.;public boolean allowNoIndices() {_        return options.contains(Option.ALLOW_NO_INDICES)__    };return,whether,to,ignore,if,a,wildcard,expression,resolves,to,no,concrete,indices,the,string,or,empty,list,of,indices,count,as,wildcard,expressions,too,also,when,an,alias,points,to,a,closed,index,this,option,decides,if,no,concrete,indices,are,allowed;public,boolean,allow,no,indices,return,options,contains,option
IndicesOptions -> public static IndicesOptions strictExpand();1524684173;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return VALUES[STRICT_EXPAND_OPEN_CLOSED]__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return,values
IndicesOptions -> public static IndicesOptions strictExpand();1526449283;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1526510804;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1531179852;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1531729807;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1540847035;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1541493930;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1541508630;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> public static IndicesOptions strictExpand();1541612607;@return indices option that requires every specified index to exist, expands wildcards to both open and closed_indices and allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpand() {_        return STRICT_EXPAND_OPEN_CLOSED__    };return,indices,option,that,requires,every,specified,index,to,exist,expands,wildcards,to,both,open,and,closed,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,return
IndicesOptions -> private static byte toByte(IndicesOptions options);1526449283;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1526510804;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1531179852;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1531729807;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1540847035;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1541493930;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1541508630;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> private static byte toByte(IndicesOptions options);1541612607;See: {@link #fromByte(byte)};private static byte toByte(IndicesOptions options) {_        byte id = 0__        if (options.ignoreUnavailable()) {_            id |= 1__        }_        if (options.allowNoIndices()) {_            id |= 2__        }_        if (options.expandWildcardsOpen()) {_            id |= 4__        }_        if (options.expandWildcardsClosed()) {_            id |= 8__        }_        _        _        if (options.allowAliasesToMultipleIndices() == false) {_            id |= 16__        }_        if (options.forbidClosedIndices()) {_            id |= 32__        }_        if (options.ignoreAliases()) {_            id |= 64__        }_        return id__    };see,link,from,byte,byte;private,static,byte,to,byte,indices,options,options,byte,id,0,if,options,ignore,unavailable,id,1,if,options,allow,no,indices,id,2,if,options,expand,wildcards,open,id,4,if,options,expand,wildcards,closed,id,8,if,options,allow,aliases,to,multiple,indices,false,id,16,if,options,forbid,closed,indices,id,32,if,options,ignore,aliases,id,64,return,id
IndicesOptions -> public static IndicesOptions strictExpandOpen();1524684173;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return VALUES[STRICT_EXPAND_OPEN]__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return,values
IndicesOptions -> public static IndicesOptions strictExpandOpen();1526449283;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1526510804;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1531179852;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1531729807;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1540847035;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1541493930;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1541508630;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public static IndicesOptions strictExpandOpen();1541612607;@return indices options that requires every specified index to exist, expands wildcards only to open indices and_allows that no indices are resolved from wildcard expressions (not returning an error).;public static IndicesOptions strictExpandOpen() {_        return STRICT_EXPAND_OPEN__    };return,indices,options,that,requires,every,specified,index,to,exist,expands,wildcards,only,to,open,indices,and,allows,that,no,indices,are,resolved,from,wildcard,expressions,not,returning,an,error;public,static,indices,options,strict,expand,open,return
IndicesOptions -> public boolean ignoreAliases();1524684173;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return (id & IGNORE_ALIASES) != 0__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,id,0
IndicesOptions -> public boolean ignoreAliases();1526449283;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1526510804;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1531179852;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1531729807;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1540847035;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1541493930;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1541508630;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreAliases();1541612607;@return whether aliases should be ignored (when resolving a wildcard);public boolean ignoreAliases() {_        return options.contains(Option.IGNORE_ALIASES)__    };return,whether,aliases,should,be,ignored,when,resolving,a,wildcard;public,boolean,ignore,aliases,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1524684173;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return (id & IGNORE_UNAVAILABLE) != 0__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,id,0
IndicesOptions -> public boolean ignoreUnavailable();1526449283;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1526510804;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1531179852;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1531729807;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1540847035;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1541493930;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1541508630;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public boolean ignoreUnavailable();1541612607;@return Whether specified concrete indices should be ignored when unavailable (missing or closed);public boolean ignoreUnavailable() {_        return options.contains(Option.IGNORE_UNAVAILABLE)__    };return,whether,specified,concrete,indices,should,be,ignored,when,unavailable,missing,or,closed;public,boolean,ignore,unavailable,return,options,contains,option
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1524684173;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return VALUES[STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED]__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return,values
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1526449283;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1526510804;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1531179852;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1531729807;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1540847035;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1541493930;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1541508630;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
IndicesOptions -> public static IndicesOptions strictSingleIndexNoExpandForbidClosed();1541612607;@return indices option that requires each specified index or alias to exist, doesn't expand wildcards and_throws error if any of the aliases resolves to multiple indices;public static IndicesOptions strictSingleIndexNoExpandForbidClosed() {_        return STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED__    };return,indices,option,that,requires,each,specified,index,or,alias,to,exist,doesn,t,expand,wildcards,and,throws,error,if,any,of,the,aliases,resolves,to,multiple,indices;public,static,indices,options,strict,single,index,no,expand,forbid,closed,return
