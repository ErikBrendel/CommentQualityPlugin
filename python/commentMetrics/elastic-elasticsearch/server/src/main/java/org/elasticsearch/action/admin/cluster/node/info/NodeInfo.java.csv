commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * System's hostname. <code>null</code> in case of UnknownHostException  */ ;/**  * System's hostname. <code>null</code> in case of UnknownHostException  */ @Nullable public String getHostname() {     return getNode().getHostName(). }
true;public;0;3;/**  * The current ES version  */ ;/**  * The current ES version  */ public Version getVersion() {     return version. }
true;public;0;3;/**  * The build version of the node.  */ ;/**  * The build version of the node.  */ public Build getBuild() {     return this.build. }
true;public;0;4;/**  * The settings of the node.  */ ;/**  * The settings of the node.  */ @Nullable public Settings getSettings() {     return this.settings. }
true;public;0;4;/**  * Operating System level information.  */ ;/**  * Operating System level information.  */ @Nullable public OsInfo getOs() {     return this.os. }
true;public;0;4;/**  * Process level information.  */ ;/**  * Process level information.  */ @Nullable public ProcessInfo getProcess() {     return process. }
true;public;0;4;/**  * JVM level information.  */ ;/**  * JVM level information.  */ @Nullable public JvmInfo getJvm() {     return jvm. }
false;public;0;4;;@Nullable public ThreadPoolInfo getThreadPool() {     return this.threadPool. }
false;public;0;4;;@Nullable public TransportInfo getTransport() {     return transport. }
false;public;0;4;;@Nullable public HttpInfo getHttp() {     return http. }
false;public;0;4;;@Nullable public PluginsAndModules getPlugins() {     return this.plugins. }
false;public;0;4;;@Nullable public IngestInfo getIngest() {     return ingest. }
false;public;0;4;;@Nullable public ByteSizeValue getTotalIndexingBuffer() {     return totalIndexingBuffer. }
false;public,static;1;5;;public static NodeInfo readNodeInfo(StreamInput in) throws IOException {     NodeInfo nodeInfo = new NodeInfo().     nodeInfo.readFrom(in).     return nodeInfo. }
false;public;1;22;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     version = Version.readVersion(in).     build = Build.readBuild(in).     if (in.readBoolean()) {         totalIndexingBuffer = new ByteSizeValue(in.readLong()).     } else {         totalIndexingBuffer = null.     }     if (in.readBoolean()) {         settings = Settings.readSettingsFromStream(in).     }     os = in.readOptionalWriteable(OsInfo::new).     process = in.readOptionalWriteable(ProcessInfo::new).     jvm = in.readOptionalWriteable(JvmInfo::new).     threadPool = in.readOptionalWriteable(ThreadPoolInfo::new).     transport = in.readOptionalWriteable(TransportInfo::new).     http = in.readOptionalWriteable(HttpInfo::new).     plugins = in.readOptionalWriteable(PluginsAndModules::new).     ingest = in.readOptionalWriteable(IngestInfo::new). }
false;public;1;26;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(version.id).     Build.writeBuild(build, out).     if (totalIndexingBuffer == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeLong(totalIndexingBuffer.getBytes()).     }     if (settings == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         Settings.writeSettingsToStream(settings, out).     }     out.writeOptionalWriteable(os).     out.writeOptionalWriteable(process).     out.writeOptionalWriteable(jvm).     out.writeOptionalWriteable(threadPool).     out.writeOptionalWriteable(transport).     out.writeOptionalWriteable(http).     out.writeOptionalWriteable(plugins).     out.writeOptionalWriteable(ingest). }
