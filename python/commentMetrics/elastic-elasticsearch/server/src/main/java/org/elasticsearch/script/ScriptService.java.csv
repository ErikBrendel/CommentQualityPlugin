# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1524684173;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        _        _        boolean expression = "expression".equals(lang)__        boolean notSupported = context.name.equals(ExecutableScript.UPDATE_CONTEXT.name)__        if (expression && notSupported) {_            throw new UnsupportedOperationException("scripts of type [" + script.getType() + "]," +_                " operation [" + context.name + "] and lang [" + lang + "] are not supported")__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,boolean,expression,expression,equals,lang,boolean,not,supported,context,name,equals,executable,script,name,if,expression,not,supported,throw,new,unsupported,operation,exception,scripts,of,type,script,get,type,operation,context,name,and,lang,lang,are,not,supported,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1533862840;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        _        _        boolean expression = "expression".equals(lang)__        boolean notSupported = context.name.equals(UpdateScript.CONTEXT.name)__        if (expression && notSupported) {_            throw new UnsupportedOperationException("scripts of type [" + script.getType() + "]," +_                " operation [" + context.name + "] and lang [" + lang + "] are not supported")__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,boolean,expression,expression,equals,lang,boolean,not,supported,context,name,equals,update,script,context,name,if,expression,not,supported,throw,new,unsupported,operation,exception,scripts,of,type,script,get,type,operation,context,name,and,lang,lang,are,not,supported,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1534362961;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        _        _        boolean expression = "expression".equals(lang)__        boolean notSupported = context.name.equals(UpdateScript.CONTEXT.name)__        if (expression && notSupported) {_            throw new UnsupportedOperationException("scripts of type [" + script.getType() + "]," +_                " operation [" + context.name + "] and lang [" + lang + "] are not supported")__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,boolean,expression,expression,equals,lang,boolean,not,supported,context,name,equals,update,script,context,name,if,expression,not,supported,throw,new,unsupported,operation,exception,scripts,of,type,script,get,type,operation,context,name,and,lang,lang,are,not,supported,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1537300661;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1541008027;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1541092382;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1541160764;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1541200074;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (type == ScriptType.INLINE) {_            if (idOrCode.getBytes(StandardCharsets.UTF_8).length > maxSizeInBytes) {_                throw new IllegalArgumentException("exceeded max allowed inline script size in bytes [" + maxSizeInBytes + "] " +_                        "with size [" + idOrCode.getBytes(StandardCharsets.UTF_8).length + "] for script [" + idOrCode + "]")__            }_        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,type,script,type,inline,if,id,or,code,get,bytes,standard,charsets,length,max,size,in,bytes,throw,new,illegal,argument,exception,exceeded,max,allowed,inline,script,size,in,bytes,max,size,in,bytes,with,size,id,or,code,get,bytes,standard,charsets,length,for,script,id,or,code,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1542402632;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (type == ScriptType.INLINE) {_            if (idOrCode.getBytes(StandardCharsets.UTF_8).length > maxSizeInBytes) {_                throw new IllegalArgumentException("exceeded max allowed inline script size in bytes [" + maxSizeInBytes + "] " +_                        "with size [" + idOrCode.getBytes(StandardCharsets.UTF_8).length + "] for script [" + idOrCode + "]")__            }_        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]", exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,type,script,type,inline,if,id,or,code,get,bytes,standard,charsets,length,max,size,in,bytes,throw,new,illegal,argument,exception,exceeded,max,allowed,inline,script,size,in,bytes,max,size,in,bytes,with,size,id,or,code,get,bytes,standard,charsets,length,for,script,id,or,code,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context);1544110272;Compiles a script using the given context.__@return a compiled script which may be used to construct instances of a script for the given context;public <FactoryType> FactoryType compile(Script script, ScriptContext<FactoryType> context) {_        Objects.requireNonNull(script)__        Objects.requireNonNull(context)___        ScriptType type = script.getType()__        String lang = script.getLang()__        String idOrCode = script.getIdOrCode()__        Map<String, String> options = script.getOptions()___        String id = idOrCode___        if (type == ScriptType.STORED) {_            _            _            _            _            _            StoredScriptSource source = getScriptFromClusterState(id)__            lang = source.getLang()__            idOrCode = source.getSource()__            options = source.getOptions()__        }__        ScriptEngine scriptEngine = getEngine(lang)___        if (isTypeEnabled(type) == false) {_            throw new IllegalArgumentException("cannot execute [" + type + "] scripts")__        }__        if (contexts.containsKey(context.name) == false) {_            throw new IllegalArgumentException("script context [" + context.name + "] not supported")__        }__        if (isContextEnabled(context) == false) {_            throw new IllegalArgumentException("cannot execute scripts using [" + context.name + "] context")__        }__        if (type == ScriptType.INLINE) {_            if (idOrCode.getBytes(StandardCharsets.UTF_8).length > maxSizeInBytes) {_                throw new IllegalArgumentException("exceeded max allowed inline script size in bytes [" + maxSizeInBytes + "] " +_                        "with size [" + idOrCode.getBytes(StandardCharsets.UTF_8).length + "] for script [" + idOrCode + "]")__            }_        }__        if (logger.isTraceEnabled()) {_            logger.trace("compiling lang: [{}] type: [{}] script: {}", lang, type, idOrCode)__        }__        CacheKey cacheKey = new CacheKey(lang, idOrCode, context.name, options)__        Object compiledScript = cache.get(cacheKey)___        if (compiledScript != null) {_            return context.factoryClazz.cast(compiledScript)__        }__        _        synchronized (this) {_            _            compiledScript = cache.get(cacheKey)___            if (compiledScript == null) {_                try {_                    _                    _                    _                    _                    if (logger.isTraceEnabled()) {_                        logger.trace("compiling script, type: [{}], lang: [{}], options: [{}]", type, lang, options)__                    }_                    _                    checkCompilationLimit()__                    compiledScript = scriptEngine.compile(id, idOrCode, context, options)__                } catch (ScriptException good) {_                    _                    throw good_ _                } catch (Exception exception) {_                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]",_                            exception)__                }__                _                _                scriptMetrics.onCompilation()__                cache.put(cacheKey, compiledScript)__            }__            return context.factoryClazz.cast(compiledScript)__        }_    };compiles,a,script,using,the,given,context,return,a,compiled,script,which,may,be,used,to,construct,instances,of,a,script,for,the,given,context;public,factory,type,factory,type,compile,script,script,script,context,factory,type,context,objects,require,non,null,script,objects,require,non,null,context,script,type,type,script,get,type,string,lang,script,get,lang,string,id,or,code,script,get,id,or,code,map,string,string,options,script,get,options,string,id,id,or,code,if,type,script,type,stored,stored,script,source,source,get,script,from,cluster,state,id,lang,source,get,lang,id,or,code,source,get,source,options,source,get,options,script,engine,script,engine,get,engine,lang,if,is,type,enabled,type,false,throw,new,illegal,argument,exception,cannot,execute,type,scripts,if,contexts,contains,key,context,name,false,throw,new,illegal,argument,exception,script,context,context,name,not,supported,if,is,context,enabled,context,false,throw,new,illegal,argument,exception,cannot,execute,scripts,using,context,name,context,if,type,script,type,inline,if,id,or,code,get,bytes,standard,charsets,length,max,size,in,bytes,throw,new,illegal,argument,exception,exceeded,max,allowed,inline,script,size,in,bytes,max,size,in,bytes,with,size,id,or,code,get,bytes,standard,charsets,length,for,script,id,or,code,if,logger,is,trace,enabled,logger,trace,compiling,lang,type,script,lang,type,id,or,code,cache,key,cache,key,new,cache,key,lang,id,or,code,context,name,options,object,compiled,script,cache,get,cache,key,if,compiled,script,null,return,context,factory,clazz,cast,compiled,script,synchronized,this,compiled,script,cache,get,cache,key,if,compiled,script,null,try,if,logger,is,trace,enabled,logger,trace,compiling,script,type,lang,options,type,lang,options,check,compilation,limit,compiled,script,script,engine,compile,id,id,or,code,context,options,catch,script,exception,good,throw,good,catch,exception,exception,throw,new,general,script,exception,failed,to,compile,type,script,id,using,lang,lang,exception,script,metrics,on,compilation,cache,put,cache,key,compiled,script,return,context,factory,clazz,cast,compiled,script
ScriptService -> void setMaxSizeInBytes(int newMaxSizeInBytes);1541200074;Changes the maximum number of bytes a script's source is allowed to have._@param newMaxSizeInBytes The new maximum number of bytes.;void setMaxSizeInBytes(int newMaxSizeInBytes) {_        for (Map.Entry<String, StoredScriptSource> source : getScriptsFromClusterState().entrySet()) {_            if (source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length > newMaxSizeInBytes) {_                throw new IllegalArgumentException("script.max_size_in_bytes cannot be set to [" + newMaxSizeInBytes + "], " +_                        "stored script [" + source.getKey() + "] exceeds the new value with a size of " +_                        "[" + source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length + "]")__            }_        }__        maxSizeInBytes = newMaxSizeInBytes__    };changes,the,maximum,number,of,bytes,a,script,s,source,is,allowed,to,have,param,new,max,size,in,bytes,the,new,maximum,number,of,bytes;void,set,max,size,in,bytes,int,new,max,size,in,bytes,for,map,entry,string,stored,script,source,source,get,scripts,from,cluster,state,entry,set,if,source,get,value,get,source,get,bytes,standard,charsets,length,new,max,size,in,bytes,throw,new,illegal,argument,exception,script,cannot,be,set,to,new,max,size,in,bytes,stored,script,source,get,key,exceeds,the,new,value,with,a,size,of,source,get,value,get,source,get,bytes,standard,charsets,length,max,size,in,bytes,new,max,size,in,bytes
ScriptService -> void setMaxSizeInBytes(int newMaxSizeInBytes);1542402632;Changes the maximum number of bytes a script's source is allowed to have._@param newMaxSizeInBytes The new maximum number of bytes.;void setMaxSizeInBytes(int newMaxSizeInBytes) {_        for (Map.Entry<String, StoredScriptSource> source : getScriptsFromClusterState().entrySet()) {_            if (source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length > newMaxSizeInBytes) {_                throw new IllegalArgumentException("script.max_size_in_bytes cannot be set to [" + newMaxSizeInBytes + "], " +_                        "stored script [" + source.getKey() + "] exceeds the new value with a size of " +_                        "[" + source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length + "]")__            }_        }__        maxSizeInBytes = newMaxSizeInBytes__    };changes,the,maximum,number,of,bytes,a,script,s,source,is,allowed,to,have,param,new,max,size,in,bytes,the,new,maximum,number,of,bytes;void,set,max,size,in,bytes,int,new,max,size,in,bytes,for,map,entry,string,stored,script,source,source,get,scripts,from,cluster,state,entry,set,if,source,get,value,get,source,get,bytes,standard,charsets,length,new,max,size,in,bytes,throw,new,illegal,argument,exception,script,cannot,be,set,to,new,max,size,in,bytes,stored,script,source,get,key,exceeds,the,new,value,with,a,size,of,source,get,value,get,source,get,bytes,standard,charsets,length,max,size,in,bytes,new,max,size,in,bytes
ScriptService -> void setMaxSizeInBytes(int newMaxSizeInBytes);1544110272;Changes the maximum number of bytes a script's source is allowed to have._@param newMaxSizeInBytes The new maximum number of bytes.;void setMaxSizeInBytes(int newMaxSizeInBytes) {_        for (Map.Entry<String, StoredScriptSource> source : getScriptsFromClusterState().entrySet()) {_            if (source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length > newMaxSizeInBytes) {_                throw new IllegalArgumentException("script.max_size_in_bytes cannot be set to [" + newMaxSizeInBytes + "], " +_                        "stored script [" + source.getKey() + "] exceeds the new value with a size of " +_                        "[" + source.getValue().getSource().getBytes(StandardCharsets.UTF_8).length + "]")__            }_        }__        maxSizeInBytes = newMaxSizeInBytes__    };changes,the,maximum,number,of,bytes,a,script,s,source,is,allowed,to,have,param,new,max,size,in,bytes,the,new,maximum,number,of,bytes;void,set,max,size,in,bytes,int,new,max,size,in,bytes,for,map,entry,string,stored,script,source,source,get,scripts,from,cluster,state,entry,set,if,source,get,value,get,source,get,bytes,standard,charsets,length,new,max,size,in,bytes,throw,new,illegal,argument,exception,script,cannot,be,set,to,new,max,size,in,bytes,stored,script,source,get,key,exceeds,the,new,value,with,a,size,of,source,get,value,get,source,get,bytes,standard,charsets,length,max,size,in,bytes,new,max,size,in,bytes
ScriptService -> void checkCompilationLimit();1524684173;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1533862840;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1534362961;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1537300661;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1541008027;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1541092382;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting")__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting
ScriptService -> void checkCompilationLimit();1541160764;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting",_                CircuitBreaker.Durability.TRANSIENT)__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting,circuit,breaker,durability,transient
ScriptService -> void checkCompilationLimit();1541200074;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting",_                CircuitBreaker.Durability.TRANSIENT)__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting,circuit,breaker,durability,transient
ScriptService -> void checkCompilationLimit();1542402632;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting",_                CircuitBreaker.Durability.TRANSIENT)__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting,circuit,breaker,durability,transient
ScriptService -> void checkCompilationLimit();1544110272;Check whether there have been too many compilations within the last minute, throwing a circuit breaking exception if so._This is a variant of the token bucket algorithm: https://en.wikipedia.org/wiki/Token_bucket__It can be thought of as a bucket with water, every time the bucket is checked, water is added proportional to the amount of time that_elapsed since the last time it was checked. If there is enough water, some is removed and the request is allowed. If there is not_enough water the request is denied. Just like a normal bucket, if water is added that overflows the bucket, the extra water/capacity_is discarded - there can never be more water in the bucket than the size of the bucket.;void checkCompilationLimit() {_        long now = System.nanoTime()__        long timePassed = now - lastInlineCompileTime__        lastInlineCompileTime = now___        scriptsPerTimeWindow += (timePassed) * compilesAllowedPerNano___        _        if (scriptsPerTimeWindow > rate.v1()) {_            scriptsPerTimeWindow = rate.v1()__        }__        _        if (scriptsPerTimeWindow >= 1) {_            scriptsPerTimeWindow -= 1.0__        } else {_            scriptMetrics.onCompilationLimit()__            _            throw new CircuitBreakingException("[script] Too many dynamic script compilations within, max: [" +_                    rate.v1() + "/" + rate.v2() +"]_ please use indexed, or scripts with parameters instead_ " +_                            "this limit can be changed by the [" + SCRIPT_MAX_COMPILATIONS_RATE.getKey() + "] setting",_                CircuitBreaker.Durability.TRANSIENT)__        }_    };check,whether,there,have,been,too,many,compilations,within,the,last,minute,throwing,a,circuit,breaking,exception,if,so,this,is,a,variant,of,the,token,bucket,algorithm,https,en,wikipedia,org,wiki,it,can,be,thought,of,as,a,bucket,with,water,every,time,the,bucket,is,checked,water,is,added,proportional,to,the,amount,of,time,that,elapsed,since,the,last,time,it,was,checked,if,there,is,enough,water,some,is,removed,and,the,request,is,allowed,if,there,is,not,enough,water,the,request,is,denied,just,like,a,normal,bucket,if,water,is,added,that,overflows,the,bucket,the,extra,water,capacity,is,discarded,there,can,never,be,more,water,in,the,bucket,than,the,size,of,the,bucket;void,check,compilation,limit,long,now,system,nano,time,long,time,passed,now,last,inline,compile,time,last,inline,compile,time,now,scripts,per,time,window,time,passed,compiles,allowed,per,nano,if,scripts,per,time,window,rate,v1,scripts,per,time,window,rate,v1,if,scripts,per,time,window,1,scripts,per,time,window,1,0,else,script,metrics,on,compilation,limit,throw,new,circuit,breaking,exception,script,too,many,dynamic,script,compilations,within,max,rate,v1,rate,v2,please,use,indexed,or,scripts,with,parameters,instead,this,limit,can,be,changed,by,the,get,key,setting,circuit,breaker,durability,transient
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1524684173;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1533862840;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1534362961;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1537300661;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1541008027;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1541092382;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1541160764;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1541200074;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1542402632;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
ScriptService -> void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate);1544110272;This configures the maximum script compilations per five minute window.__@param newRate the new expected maximum number of compilations per five minute window;void setMaxCompilationRate(Tuple<Integer, TimeValue> newRate) {_        this.rate = newRate__        _        this.scriptsPerTimeWindow = rate.v1()__        this.compilesAllowedPerNano = ((double) rate.v1()) / newRate.v2().nanos()__    };this,configures,the,maximum,script,compilations,per,five,minute,window,param,new,rate,the,new,expected,maximum,number,of,compilations,per,five,minute,window;void,set,max,compilation,rate,tuple,integer,time,value,new,rate,this,rate,new,rate,this,scripts,per,time,window,rate,v1,this,compiles,allowed,per,nano,double,rate,v1,new,rate,v2,nanos
