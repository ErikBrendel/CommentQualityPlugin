commented;modifiers;parameterAmount;loc;comment;code
true;public,final;2;9;/**  * Build a version of the task status you can throw over the wire and back  * to the user.  *  * @param localNodeId  *            the id of the node this task is running on  * @param detailed  *            should the information include detailed, potentially slow to  *            generate data?  */ ;/**  * Build a version of the task status you can throw over the wire and back  * to the user.  *  * @param localNodeId  *            the id of the node this task is running on  * @param detailed  *            should the information include detailed, potentially slow to  *            generate data?  */ public final TaskInfo taskInfo(String localNodeId, boolean detailed) {     String description = null.     Task.Status status = null.     if (detailed) {         description = getDescription().         status = getStatus().     }     return taskInfo(localNodeId, description, status). }
true;protected,final;3;4;/**  * Build a proper {@link TaskInfo} for this task.  */ ;/**  * Build a proper {@link TaskInfo} for this task.  */ protected final TaskInfo taskInfo(String localNodeId, String description, Status status) {     return new TaskInfo(new TaskId(localNodeId, getId()), getType(), getAction(), description, status, startTime, System.nanoTime() - startTimeNanos, this instanceof CancellableTask, parentTask, headers). }
true;public;0;3;/**  * Returns task id  */ ;/**  * Returns task id  */ public long getId() {     return id. }
true;public;0;3;/**  * Returns task channel type (netty, transport, direct)  */ ;/**  * Returns task channel type (netty, transport, direct)  */ public String getType() {     return type. }
true;public;0;3;/**  * Returns task action  */ ;/**  * Returns task action  */ public String getAction() {     return action. }
true;public;0;3;/**  * Generates task description  */ ;/**  * Generates task description  */ public String getDescription() {     return description. }
true;public;0;3;/**  * Returns the task's start time as a wall clock time since epoch ({@link System#currentTimeMillis()} style).  */ ;/**  * Returns the task's start time as a wall clock time since epoch ({@link System#currentTimeMillis()} style).  */ public long getStartTime() {     return startTime. }
true;public;0;3;/**  * Returns id of the parent task or NO_PARENT_ID if the task doesn't have any parent tasks  */ ;/**  * Returns id of the parent task or NO_PARENT_ID if the task doesn't have any parent tasks  */ public TaskId getParentTaskId() {     return parentTask. }
true;public;0;3;/**  * Build a status for this task or null if this task doesn't have status.  * Since most tasks don't have status this defaults to returning null. While  * this can never perform IO it might be a costly operation, requiring  * collating lists of results, etc. So only use it if you need the value.  */ ;/**  * Build a status for this task or null if this task doesn't have status.  * Since most tasks don't have status this defaults to returning null. While  * this can never perform IO it might be a costly operation, requiring  * collating lists of results, etc. So only use it if you need the value.  */ public Status getStatus() {     return null. }
true;public;1;3;/**  * Returns stored task header associated with the task  */ ;/**  * Returns stored task header associated with the task  */ public String getHeader(String header) {     return headers.get(header). }
false;public;2;3;;public TaskResult result(DiscoveryNode node, Exception error) throws IOException {     return new TaskResult(taskInfo(node.getId(), true), error). }
false;public;2;7;;public TaskResult result(DiscoveryNode node, ActionResponse response) throws IOException {     if (response instanceof ToXContent) {         return new TaskResult(taskInfo(node.getId(), true), (ToXContent) response).     } else {         throw new IllegalStateException("response has to implement ToXContent to be able to store the results").     } }
