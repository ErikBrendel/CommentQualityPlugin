# id;timestamp;commentText;codeText;commentWords;codeWords
ContextMappings -> public int size();1524684173;@return number of context mappings_held by this instance;public int size() {_        return contextMappings.size()__    };return,number,of,context,mappings,held,by,this,instance;public,int,size,return,context,mappings,size
ContextMappings -> public int size();1527840262;@return number of context mappings_held by this instance;public int size() {_        return contextMappings.size()__    };return,number,of,context,mappings,held,by,this,instance;public,int,size,return,context,mappings,size
ContextMappings -> public int size();1531179852;@return number of context mappings_held by this instance;public int size() {_        return contextMappings.size()__    };return,number,of,context,mappings,held,by,this,instance;public,int,size,return,context,mappings,size
ContextMappings -> public int size();1534539448;@return number of context mappings_held by this instance;public int size() {_        return contextMappings.size()__    };return,number,of,context,mappings,held,by,this,instance;public,int,size,return,context,mappings,size
ContextMappings -> public int size();1542357322;@return number of context mappings_held by this instance;public int size() {_        return contextMappings.size()__    };return,number,of,context,mappings,held,by,this,instance;public,int,size,return,context,mappings,size
ContextMappings -> public ContextMapping get(String name);1524684173;Returns a context mapping by its name;public ContextMapping get(String name) {_        ContextMapping contextMapping = contextNameMap.get(name)__        if (contextMapping == null) {_            List<String> keys = new ArrayList<>(contextNameMap.keySet())__            Collections.sort(keys)__            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString())__        }_        return contextMapping__    };returns,a,context,mapping,by,its,name;public,context,mapping,get,string,name,context,mapping,context,mapping,context,name,map,get,name,if,context,mapping,null,list,string,keys,new,array,list,context,name,map,key,set,collections,sort,keys,throw,new,illegal,argument,exception,unknown,context,name,name,must,be,one,of,keys,to,string,return,context,mapping
ContextMappings -> public ContextMapping get(String name);1527840262;Returns a context mapping by its name;public ContextMapping get(String name) {_        ContextMapping contextMapping = contextNameMap.get(name)__        if (contextMapping == null) {_            List<String> keys = new ArrayList<>(contextNameMap.keySet())__            Collections.sort(keys)__            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString())__        }_        return contextMapping__    };returns,a,context,mapping,by,its,name;public,context,mapping,get,string,name,context,mapping,context,mapping,context,name,map,get,name,if,context,mapping,null,list,string,keys,new,array,list,context,name,map,key,set,collections,sort,keys,throw,new,illegal,argument,exception,unknown,context,name,name,must,be,one,of,keys,to,string,return,context,mapping
ContextMappings -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1524684173;Writes a list of objects specified by the defined {@link ContextMapping}s__see {@link ContextMapping#toXContent(XContentBuilder, Params)};@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (ContextMapping contextMapping : contextMappings) {_            builder.startObject()__            contextMapping.toXContent(builder, params)__            builder.endObject()__        }_        return builder__    };writes,a,list,of,objects,specified,by,the,defined,link,context,mapping,s,see,link,context,mapping,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,context,mapping,context,mapping,context,mappings,builder,start,object,context,mapping,to,xcontent,builder,params,builder,end,object,return,builder
ContextMappings -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1527840262;Writes a list of objects specified by the defined {@link ContextMapping}s__see {@link ContextMapping#toXContent(XContentBuilder, Params)};@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (ContextMapping contextMapping : contextMappings) {_            builder.startObject()__            contextMapping.toXContent(builder, params)__            builder.endObject()__        }_        return builder__    };writes,a,list,of,objects,specified,by,the,defined,link,context,mapping,s,see,link,context,mapping,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,context,mapping,context,mapping,context,mappings,builder,start,object,context,mapping,to,xcontent,builder,params,builder,end,object,return,builder
ContextMappings -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1531179852;Writes a list of objects specified by the defined {@link ContextMapping}s__see {@link ContextMapping#toXContent(XContentBuilder, Params)};@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (ContextMapping<?> contextMapping : contextMappings) {_            builder.startObject()__            contextMapping.toXContent(builder, params)__            builder.endObject()__        }_        return builder__    };writes,a,list,of,objects,specified,by,the,defined,link,context,mapping,s,see,link,context,mapping,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,context,mapping,context,mapping,context,mappings,builder,start,object,context,mapping,to,xcontent,builder,params,builder,end,object,return,builder
ContextMappings -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1534539448;Writes a list of objects specified by the defined {@link ContextMapping}s__see {@link ContextMapping#toXContent(XContentBuilder, Params)};@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (ContextMapping<?> contextMapping : contextMappings) {_            builder.startObject()__            contextMapping.toXContent(builder, params)__            builder.endObject()__        }_        return builder__    };writes,a,list,of,objects,specified,by,the,defined,link,context,mapping,s,see,link,context,mapping,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,context,mapping,context,mapping,context,mappings,builder,start,object,context,mapping,to,xcontent,builder,params,builder,end,object,return,builder
ContextMappings -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1542357322;Writes a list of objects specified by the defined {@link ContextMapping}s__see {@link ContextMapping#toXContent(XContentBuilder, Params)};@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (ContextMapping<?> contextMapping : contextMappings) {_            builder.startObject()__            contextMapping.toXContent(builder, params)__            builder.endObject()__        }_        return builder__    };writes,a,list,of,objects,specified,by,the,defined,link,context,mapping,s,see,link,context,mapping,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,context,mapping,context,mapping,context,mappings,builder,start,object,context,mapping,to,xcontent,builder,params,builder,end,object,return,builder
ContextMappings -> public ContextMapping<?> get(String name);1531179852;Returns a context mapping by its name;public ContextMapping<?> get(String name) {_        ContextMapping<?> contextMapping = contextNameMap.get(name)__        if (contextMapping == null) {_            List<String> keys = new ArrayList<>(contextNameMap.keySet())__            Collections.sort(keys)__            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString())__        }_        return contextMapping__    };returns,a,context,mapping,by,its,name;public,context,mapping,get,string,name,context,mapping,context,mapping,context,name,map,get,name,if,context,mapping,null,list,string,keys,new,array,list,context,name,map,key,set,collections,sort,keys,throw,new,illegal,argument,exception,unknown,context,name,name,must,be,one,of,keys,to,string,return,context,mapping
ContextMappings -> public ContextMapping<?> get(String name);1534539448;Returns a context mapping by its name;public ContextMapping<?> get(String name) {_        ContextMapping<?> contextMapping = contextNameMap.get(name)__        if (contextMapping == null) {_            List<String> keys = new ArrayList<>(contextNameMap.keySet())__            Collections.sort(keys)__            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString())__        }_        return contextMapping__    };returns,a,context,mapping,by,its,name;public,context,mapping,get,string,name,context,mapping,context,mapping,context,name,map,get,name,if,context,mapping,null,list,string,keys,new,array,list,context,name,map,key,set,collections,sort,keys,throw,new,illegal,argument,exception,unknown,context,name,name,must,be,one,of,keys,to,string,return,context,mapping
ContextMappings -> public ContextMapping<?> get(String name);1542357322;Returns a context mapping by its name;public ContextMapping<?> get(String name) {_        ContextMapping<?> contextMapping = contextNameMap.get(name)__        if (contextMapping == null) {_            List<String> keys = new ArrayList<>(contextNameMap.keySet())__            Collections.sort(keys)__            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString())__        }_        return contextMapping__    };returns,a,context,mapping,by,its,name;public,context,mapping,get,string,name,context,mapping,context,mapping,context,name,map,get,name,if,context,mapping,null,list,string,keys,new,array,list,context,name,map,key,set,collections,sort,keys,throw,new,illegal,argument,exception,unknown,context,name,name,must,be,one,of,keys,to,string,return,context,mapping
ContextMappings -> public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts);1524684173;Adds a context-enabled field for all the defined mappings to <code>document</code>_see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField};public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts) {_        document.add(new TypedContextField(name, input, weight, contexts, document))__    };adds,a,context,enabled,field,for,all,the,defined,mappings,to,code,document,code,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field;public,void,add,field,parse,context,document,document,string,name,string,input,int,weight,map,string,set,char,sequence,contexts,document,add,new,typed,context,field,name,input,weight,contexts,document
ContextMappings -> public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts);1527840262;Adds a context-enabled field for all the defined mappings to <code>document</code>_see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField};public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts) {_        document.add(new TypedContextField(name, input, weight, contexts, document))__    };adds,a,context,enabled,field,for,all,the,defined,mappings,to,code,document,code,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field;public,void,add,field,parse,context,document,document,string,name,string,input,int,weight,map,string,set,char,sequence,contexts,document,add,new,typed,context,field,name,input,weight,contexts,document
ContextMappings -> public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts);1531179852;Adds a context-enabled field for all the defined mappings to <code>document</code>_see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField};public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts) {_        document.add(new TypedContextField(name, input, weight, contexts, document))__    };adds,a,context,enabled,field,for,all,the,defined,mappings,to,code,document,code,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field;public,void,add,field,parse,context,document,document,string,name,string,input,int,weight,map,string,set,char,sequence,contexts,document,add,new,typed,context,field,name,input,weight,contexts,document
ContextMappings -> public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts);1534539448;Adds a context-enabled field for all the defined mappings to <code>document</code>_see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField};public void addField(ParseContext.Document document, String name, String input, int weight, Map<String, Set<CharSequence>> contexts) {_        document.add(new TypedContextField(name, input, weight, contexts, document))__    };adds,a,context,enabled,field,for,all,the,defined,mappings,to,code,document,code,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field;public,void,add,field,parse,context,document,document,string,name,string,input,int,weight,map,string,set,char,sequence,contexts,document,add,new,typed,context,field,name,input,weight,contexts,document
ContextMappings -> public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts);1524684173;Maps an output context list to a map of context mapping names and their values__see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField}_@return a map of context names and their values;public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts) {_        Map<String, Set<CharSequence>> contextMap = new HashMap<>(contexts.size())__        for (CharSequence typedContext : contexts) {_            int typeId = typedContext.charAt(0)__            assert typeId < contextMappings.size() : "Returned context has invalid type"__            ContextMapping mapping = contextMappings.get(typeId)__            Set<CharSequence> contextEntries = contextMap.get(mapping.name())__            if (contextEntries == null) {_                contextEntries = new HashSet<>()__                contextMap.put(mapping.name(), contextEntries)__            }_            contextEntries.add(typedContext.subSequence(1, typedContext.length()))__        }_        return contextMap__    };maps,an,output,context,list,to,a,map,of,context,mapping,names,and,their,values,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field,return,a,map,of,context,names,and,their,values;public,map,string,set,char,sequence,get,named,contexts,list,char,sequence,contexts,map,string,set,char,sequence,context,map,new,hash,map,contexts,size,for,char,sequence,typed,context,contexts,int,type,id,typed,context,char,at,0,assert,type,id,context,mappings,size,returned,context,has,invalid,type,context,mapping,mapping,context,mappings,get,type,id,set,char,sequence,context,entries,context,map,get,mapping,name,if,context,entries,null,context,entries,new,hash,set,context,map,put,mapping,name,context,entries,context,entries,add,typed,context,sub,sequence,1,typed,context,length,return,context,map
ContextMappings -> public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts);1527840262;Maps an output context list to a map of context mapping names and their values__see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField}_@return a map of context names and their values;public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts) {_        Map<String, Set<CharSequence>> contextMap = new HashMap<>(contexts.size())__        for (CharSequence typedContext : contexts) {_            int typeId = typedContext.charAt(0)__            assert typeId < contextMappings.size() : "Returned context has invalid type"__            ContextMapping mapping = contextMappings.get(typeId)__            Set<CharSequence> contextEntries = contextMap.get(mapping.name())__            if (contextEntries == null) {_                contextEntries = new HashSet<>()__                contextMap.put(mapping.name(), contextEntries)__            }_            contextEntries.add(typedContext.subSequence(1, typedContext.length()))__        }_        return contextMap__    };maps,an,output,context,list,to,a,map,of,context,mapping,names,and,their,values,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field,return,a,map,of,context,names,and,their,values;public,map,string,set,char,sequence,get,named,contexts,list,char,sequence,contexts,map,string,set,char,sequence,context,map,new,hash,map,contexts,size,for,char,sequence,typed,context,contexts,int,type,id,typed,context,char,at,0,assert,type,id,context,mappings,size,returned,context,has,invalid,type,context,mapping,mapping,context,mappings,get,type,id,set,char,sequence,context,entries,context,map,get,mapping,name,if,context,entries,null,context,entries,new,hash,set,context,map,put,mapping,name,context,entries,context,entries,add,typed,context,sub,sequence,1,typed,context,length,return,context,map
ContextMappings -> public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts);1531179852;Maps an output context list to a map of context mapping names and their values__see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField}_@return a map of context names and their values;public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts) {_        Map<String, Set<CharSequence>> contextMap = new HashMap<>(contexts.size())__        for (CharSequence typedContext : contexts) {_            int typeId = typedContext.charAt(0)__            assert typeId < contextMappings.size() : "Returned context has invalid type"__            ContextMapping<?> mapping = contextMappings.get(typeId)__            Set<CharSequence> contextEntries = contextMap.get(mapping.name())__            if (contextEntries == null) {_                contextEntries = new HashSet<>()__                contextMap.put(mapping.name(), contextEntries)__            }_            contextEntries.add(typedContext.subSequence(1, typedContext.length()))__        }_        return contextMap__    };maps,an,output,context,list,to,a,map,of,context,mapping,names,and,their,values,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field,return,a,map,of,context,names,and,their,values;public,map,string,set,char,sequence,get,named,contexts,list,char,sequence,contexts,map,string,set,char,sequence,context,map,new,hash,map,contexts,size,for,char,sequence,typed,context,contexts,int,type,id,typed,context,char,at,0,assert,type,id,context,mappings,size,returned,context,has,invalid,type,context,mapping,mapping,context,mappings,get,type,id,set,char,sequence,context,entries,context,map,get,mapping,name,if,context,entries,null,context,entries,new,hash,set,context,map,put,mapping,name,context,entries,context,entries,add,typed,context,sub,sequence,1,typed,context,length,return,context,map
ContextMappings -> public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts);1534539448;Maps an output context list to a map of context mapping names and their values__see {@link org.elasticsearch.search.suggest.completion.context.ContextMappings.TypedContextField}_@return a map of context names and their values;public Map<String, Set<CharSequence>> getNamedContexts(List<CharSequence> contexts) {_        Map<String, Set<CharSequence>> contextMap = new HashMap<>(contexts.size())__        for (CharSequence typedContext : contexts) {_            int typeId = typedContext.charAt(0)__            assert typeId < contextMappings.size() : "Returned context has invalid type"__            ContextMapping<?> mapping = contextMappings.get(typeId)__            Set<CharSequence> contextEntries = contextMap.get(mapping.name())__            if (contextEntries == null) {_                contextEntries = new HashSet<>()__                contextMap.put(mapping.name(), contextEntries)__            }_            contextEntries.add(typedContext.subSequence(1, typedContext.length()))__        }_        return contextMap__    };maps,an,output,context,list,to,a,map,of,context,mapping,names,and,their,values,see,link,org,elasticsearch,search,suggest,completion,context,context,mappings,typed,context,field,return,a,map,of,context,names,and,their,values;public,map,string,set,char,sequence,get,named,contexts,list,char,sequence,contexts,map,string,set,char,sequence,context,map,new,hash,map,contexts,size,for,char,sequence,typed,context,contexts,int,type,id,typed,context,char,at,0,assert,type,id,context,mappings,size,returned,context,has,invalid,type,context,mapping,mapping,context,mappings,get,type,id,set,char,sequence,context,entries,context,map,get,mapping,name,if,context,entries,null,context,entries,new,hash,set,context,map,put,mapping,name,context,entries,context,entries,add,typed,context,sub,sequence,1,typed,context,length,return,context,map
ContextMappings -> public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts);1524684173;Wraps a {@link CompletionQuery} with context queries__@param query base completion query to wrap_@param queryContexts a map of context mapping name and collected query contexts_@return a context-enabled query;public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts) {_        ContextQuery typedContextQuery = new ContextQuery(query)__        if (queryContexts.isEmpty() == false) {_            CharsRefBuilder scratch = new CharsRefBuilder()__            scratch.grow(1)__            for (int typeId = 0_ typeId < contextMappings.size()_ typeId++) {_                scratch.setCharAt(0, (char) typeId)__                scratch.setLength(1)__                ContextMapping mapping = contextMappings.get(typeId)__                List<ContextMapping.InternalQueryContext> internalQueryContext = queryContexts.get(mapping.name())__                if (internalQueryContext != null) {_                    for (ContextMapping.InternalQueryContext context : internalQueryContext) {_                        scratch.append(context.context)__                        typedContextQuery.addContext(scratch.toCharsRef(), context.boost, !context.isPrefix)__                        scratch.setLength(1)__                    }_                }_            }_        }_        return typedContextQuery__    };wraps,a,link,completion,query,with,context,queries,param,query,base,completion,query,to,wrap,param,query,contexts,a,map,of,context,mapping,name,and,collected,query,contexts,return,a,context,enabled,query;public,context,query,to,context,query,completion,query,query,map,string,list,context,mapping,internal,query,context,query,contexts,context,query,typed,context,query,new,context,query,query,if,query,contexts,is,empty,false,chars,ref,builder,scratch,new,chars,ref,builder,scratch,grow,1,for,int,type,id,0,type,id,context,mappings,size,type,id,scratch,set,char,at,0,char,type,id,scratch,set,length,1,context,mapping,mapping,context,mappings,get,type,id,list,context,mapping,internal,query,context,internal,query,context,query,contexts,get,mapping,name,if,internal,query,context,null,for,context,mapping,internal,query,context,context,internal,query,context,scratch,append,context,context,typed,context,query,add,context,scratch,to,chars,ref,context,boost,context,is,prefix,scratch,set,length,1,return,typed,context,query
ContextMappings -> public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts);1527840262;Wraps a {@link CompletionQuery} with context queries__@param query base completion query to wrap_@param queryContexts a map of context mapping name and collected query contexts_@return a context-enabled query;public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts) {_        ContextQuery typedContextQuery = new ContextQuery(query)__        boolean hasContext = false__        if (queryContexts.isEmpty() == false) {_            CharsRefBuilder scratch = new CharsRefBuilder()__            scratch.grow(1)__            for (int typeId = 0_ typeId < contextMappings.size()_ typeId++) {_                scratch.setCharAt(0, (char) typeId)__                scratch.setLength(1)__                ContextMapping mapping = contextMappings.get(typeId)__                List<ContextMapping.InternalQueryContext> internalQueryContext = queryContexts.get(mapping.name())__                if (internalQueryContext != null) {_                    for (ContextMapping.InternalQueryContext context : internalQueryContext) {_                        scratch.append(context.context)__                        typedContextQuery.addContext(scratch.toCharsRef(), context.boost, !context.isPrefix)__                        scratch.setLength(1)__                        hasContext = true__                    }_                }_            }_        }_        if (hasContext == false) {_            DEPRECATION_LOGGER.deprecated("The ability to query with no context on a context enabled completion field is deprecated " +_                "and will be removed in the next major release.")__        }_        return typedContextQuery__    };wraps,a,link,completion,query,with,context,queries,param,query,base,completion,query,to,wrap,param,query,contexts,a,map,of,context,mapping,name,and,collected,query,contexts,return,a,context,enabled,query;public,context,query,to,context,query,completion,query,query,map,string,list,context,mapping,internal,query,context,query,contexts,context,query,typed,context,query,new,context,query,query,boolean,has,context,false,if,query,contexts,is,empty,false,chars,ref,builder,scratch,new,chars,ref,builder,scratch,grow,1,for,int,type,id,0,type,id,context,mappings,size,type,id,scratch,set,char,at,0,char,type,id,scratch,set,length,1,context,mapping,mapping,context,mappings,get,type,id,list,context,mapping,internal,query,context,internal,query,context,query,contexts,get,mapping,name,if,internal,query,context,null,for,context,mapping,internal,query,context,context,internal,query,context,scratch,append,context,context,typed,context,query,add,context,scratch,to,chars,ref,context,boost,context,is,prefix,scratch,set,length,1,has,context,true,if,has,context,false,deprecated,the,ability,to,query,with,no,context,on,a,context,enabled,completion,field,is,deprecated,and,will,be,removed,in,the,next,major,release,return,typed,context,query
ContextMappings -> public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts);1531179852;Wraps a {@link CompletionQuery} with context queries__@param query base completion query to wrap_@param queryContexts a map of context mapping name and collected query contexts_@return a context-enabled query;public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts) {_        ContextQuery typedContextQuery = new ContextQuery(query)__        boolean hasContext = false__        if (queryContexts.isEmpty() == false) {_            CharsRefBuilder scratch = new CharsRefBuilder()__            scratch.grow(1)__            for (int typeId = 0_ typeId < contextMappings.size()_ typeId++) {_                scratch.setCharAt(0, (char) typeId)__                scratch.setLength(1)__                ContextMapping<?> mapping = contextMappings.get(typeId)__                List<ContextMapping.InternalQueryContext> internalQueryContext = queryContexts.get(mapping.name())__                if (internalQueryContext != null) {_                    for (ContextMapping.InternalQueryContext context : internalQueryContext) {_                        scratch.append(context.context)__                        typedContextQuery.addContext(scratch.toCharsRef(), context.boost, !context.isPrefix)__                        scratch.setLength(1)__                        hasContext = true__                    }_                }_            }_        }_        if (hasContext == false) {_            throw new IllegalArgumentException("Missing mandatory contexts in context query")__        }_        return typedContextQuery__    };wraps,a,link,completion,query,with,context,queries,param,query,base,completion,query,to,wrap,param,query,contexts,a,map,of,context,mapping,name,and,collected,query,contexts,return,a,context,enabled,query;public,context,query,to,context,query,completion,query,query,map,string,list,context,mapping,internal,query,context,query,contexts,context,query,typed,context,query,new,context,query,query,boolean,has,context,false,if,query,contexts,is,empty,false,chars,ref,builder,scratch,new,chars,ref,builder,scratch,grow,1,for,int,type,id,0,type,id,context,mappings,size,type,id,scratch,set,char,at,0,char,type,id,scratch,set,length,1,context,mapping,mapping,context,mappings,get,type,id,list,context,mapping,internal,query,context,internal,query,context,query,contexts,get,mapping,name,if,internal,query,context,null,for,context,mapping,internal,query,context,context,internal,query,context,scratch,append,context,context,typed,context,query,add,context,scratch,to,chars,ref,context,boost,context,is,prefix,scratch,set,length,1,has,context,true,if,has,context,false,throw,new,illegal,argument,exception,missing,mandatory,contexts,in,context,query,return,typed,context,query
ContextMappings -> public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts);1534539448;Wraps a {@link CompletionQuery} with context queries__@param query base completion query to wrap_@param queryContexts a map of context mapping name and collected query contexts_@return a context-enabled query;public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts) {_        ContextQuery typedContextQuery = new ContextQuery(query)__        boolean hasContext = false__        if (queryContexts.isEmpty() == false) {_            CharsRefBuilder scratch = new CharsRefBuilder()__            scratch.grow(1)__            for (int typeId = 0_ typeId < contextMappings.size()_ typeId++) {_                scratch.setCharAt(0, (char) typeId)__                scratch.setLength(1)__                ContextMapping<?> mapping = contextMappings.get(typeId)__                List<ContextMapping.InternalQueryContext> internalQueryContext = queryContexts.get(mapping.name())__                if (internalQueryContext != null) {_                    for (ContextMapping.InternalQueryContext context : internalQueryContext) {_                        scratch.append(context.context)__                        typedContextQuery.addContext(scratch.toCharsRef(), context.boost, !context.isPrefix)__                        scratch.setLength(1)__                        hasContext = true__                    }_                }_            }_        }_        if (hasContext == false) {_            throw new IllegalArgumentException("Missing mandatory contexts in context query")__        }_        return typedContextQuery__    };wraps,a,link,completion,query,with,context,queries,param,query,base,completion,query,to,wrap,param,query,contexts,a,map,of,context,mapping,name,and,collected,query,contexts,return,a,context,enabled,query;public,context,query,to,context,query,completion,query,query,map,string,list,context,mapping,internal,query,context,query,contexts,context,query,typed,context,query,new,context,query,query,boolean,has,context,false,if,query,contexts,is,empty,false,chars,ref,builder,scratch,new,chars,ref,builder,scratch,grow,1,for,int,type,id,0,type,id,context,mappings,size,type,id,scratch,set,char,at,0,char,type,id,scratch,set,length,1,context,mapping,mapping,context,mappings,get,type,id,list,context,mapping,internal,query,context,internal,query,context,query,contexts,get,mapping,name,if,internal,query,context,null,for,context,mapping,internal,query,context,context,internal,query,context,scratch,append,context,context,typed,context,query,add,context,scratch,to,chars,ref,context,boost,context,is,prefix,scratch,set,length,1,has,context,true,if,has,context,false,throw,new,illegal,argument,exception,missing,mandatory,contexts,in,context,query,return,typed,context,query
ContextMappings -> public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts);1542357322;Wraps a {@link CompletionQuery} with context queries__@param query base completion query to wrap_@param queryContexts a map of context mapping name and collected query contexts_@return a context-enabled query;public ContextQuery toContextQuery(CompletionQuery query, Map<String, List<ContextMapping.InternalQueryContext>> queryContexts) {_        ContextQuery typedContextQuery = new ContextQuery(query)__        boolean hasContext = false__        if (queryContexts.isEmpty() == false) {_            CharsRefBuilder scratch = new CharsRefBuilder()__            scratch.grow(1)__            for (int typeId = 0_ typeId < contextMappings.size()_ typeId++) {_                scratch.setCharAt(0, (char) typeId)__                scratch.setLength(1)__                ContextMapping<?> mapping = contextMappings.get(typeId)__                List<ContextMapping.InternalQueryContext> internalQueryContext = queryContexts.get(mapping.name())__                if (internalQueryContext != null) {_                    for (ContextMapping.InternalQueryContext context : internalQueryContext) {_                        scratch.append(context.context)__                        typedContextQuery.addContext(scratch.toCharsRef(), context.boost, !context.isPrefix)__                        scratch.setLength(1)__                        hasContext = true__                    }_                }_            }_        }_        if (hasContext == false) {_            throw new IllegalArgumentException("Missing mandatory contexts in context query")__        }_        return typedContextQuery__    };wraps,a,link,completion,query,with,context,queries,param,query,base,completion,query,to,wrap,param,query,contexts,a,map,of,context,mapping,name,and,collected,query,contexts,return,a,context,enabled,query;public,context,query,to,context,query,completion,query,query,map,string,list,context,mapping,internal,query,context,query,contexts,context,query,typed,context,query,new,context,query,query,boolean,has,context,false,if,query,contexts,is,empty,false,chars,ref,builder,scratch,new,chars,ref,builder,scratch,grow,1,for,int,type,id,0,type,id,context,mappings,size,type,id,scratch,set,char,at,0,char,type,id,scratch,set,length,1,context,mapping,mapping,context,mappings,get,type,id,list,context,mapping,internal,query,context,internal,query,context,query,contexts,get,mapping,name,if,internal,query,context,null,for,context,mapping,internal,query,context,context,internal,query,context,scratch,append,context,context,typed,context,query,add,context,scratch,to,chars,ref,context,boost,context,is,prefix,scratch,set,length,1,has,context,true,if,has,context,false,throw,new,illegal,argument,exception,missing,mandatory,contexts,in,context,query,return,typed,context,query
ContextMappings -> public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException;1524684173;Loads {@link ContextMappings} from configuration__Expected configuration:_List of maps representing {@link ContextMapping}_[{"name": .., "type": .., ..}, {..}];public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException {_        final List<ContextMapping> contextMappings__        if (configuration instanceof List) {_            contextMappings = new ArrayList<>()__            List<Object> configurations = (List<Object>)configuration__            for (Object contextConfig : configurations) {_                contextMappings.add(load((Map<String, Object>) contextConfig, indexVersionCreated))__            }_            if (contextMappings.size() == 0) {_                throw new ElasticsearchParseException("expected at least one context mapping")__            }_        } else if (configuration instanceof Map) {_            contextMappings = Collections.singletonList(load(((Map<String, Object>) configuration), indexVersionCreated))__        } else {_            throw new ElasticsearchParseException("expected a list or an entry of context mapping")__        }_        return new ContextMappings(contextMappings)__    };loads,link,context,mappings,from,configuration,expected,configuration,list,of,maps,representing,link,context,mapping,name,type;public,static,context,mappings,load,object,configuration,version,index,version,created,throws,elasticsearch,parse,exception,final,list,context,mapping,context,mappings,if,configuration,instanceof,list,context,mappings,new,array,list,list,object,configurations,list,object,configuration,for,object,context,config,configurations,context,mappings,add,load,map,string,object,context,config,index,version,created,if,context,mappings,size,0,throw,new,elasticsearch,parse,exception,expected,at,least,one,context,mapping,else,if,configuration,instanceof,map,context,mappings,collections,singleton,list,load,map,string,object,configuration,index,version,created,else,throw,new,elasticsearch,parse,exception,expected,a,list,or,an,entry,of,context,mapping,return,new,context,mappings,context,mappings
ContextMappings -> public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException;1527840262;Loads {@link ContextMappings} from configuration__Expected configuration:_List of maps representing {@link ContextMapping}_[{"name": .., "type": .., ..}, {..}];public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException {_        final List<ContextMapping> contextMappings__        if (configuration instanceof List) {_            contextMappings = new ArrayList<>()__            List<Object> configurations = (List<Object>)configuration__            for (Object contextConfig : configurations) {_                contextMappings.add(load((Map<String, Object>) contextConfig, indexVersionCreated))__            }_            if (contextMappings.size() == 0) {_                throw new ElasticsearchParseException("expected at least one context mapping")__            }_        } else if (configuration instanceof Map) {_            contextMappings = Collections.singletonList(load(((Map<String, Object>) configuration), indexVersionCreated))__        } else {_            throw new ElasticsearchParseException("expected a list or an entry of context mapping")__        }_        return new ContextMappings(contextMappings)__    };loads,link,context,mappings,from,configuration,expected,configuration,list,of,maps,representing,link,context,mapping,name,type;public,static,context,mappings,load,object,configuration,version,index,version,created,throws,elasticsearch,parse,exception,final,list,context,mapping,context,mappings,if,configuration,instanceof,list,context,mappings,new,array,list,list,object,configurations,list,object,configuration,for,object,context,config,configurations,context,mappings,add,load,map,string,object,context,config,index,version,created,if,context,mappings,size,0,throw,new,elasticsearch,parse,exception,expected,at,least,one,context,mapping,else,if,configuration,instanceof,map,context,mappings,collections,singleton,list,load,map,string,object,configuration,index,version,created,else,throw,new,elasticsearch,parse,exception,expected,a,list,or,an,entry,of,context,mapping,return,new,context,mappings,context,mappings
ContextMappings -> public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException;1531179852;Loads {@link ContextMappings} from configuration__Expected configuration:_List of maps representing {@link ContextMapping}_[{"name": .., "type": .., ..}, {..}];public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException {_        final List<ContextMapping<?>> contextMappings__        if (configuration instanceof List) {_            contextMappings = new ArrayList<>()__            List<Object> configurations = (List<Object>) configuration__            for (Object contextConfig : configurations) {_                contextMappings.add(load((Map<String, Object>) contextConfig, indexVersionCreated))__            }_            if (contextMappings.size() == 0) {_                throw new ElasticsearchParseException("expected at least one context mapping")__            }_        } else if (configuration instanceof Map) {_            contextMappings = Collections.singletonList(load(((Map<String, Object>) configuration), indexVersionCreated))__        } else {_            throw new ElasticsearchParseException("expected a list or an entry of context mapping")__        }_        return new ContextMappings(contextMappings)__    };loads,link,context,mappings,from,configuration,expected,configuration,list,of,maps,representing,link,context,mapping,name,type;public,static,context,mappings,load,object,configuration,version,index,version,created,throws,elasticsearch,parse,exception,final,list,context,mapping,context,mappings,if,configuration,instanceof,list,context,mappings,new,array,list,list,object,configurations,list,object,configuration,for,object,context,config,configurations,context,mappings,add,load,map,string,object,context,config,index,version,created,if,context,mappings,size,0,throw,new,elasticsearch,parse,exception,expected,at,least,one,context,mapping,else,if,configuration,instanceof,map,context,mappings,collections,singleton,list,load,map,string,object,configuration,index,version,created,else,throw,new,elasticsearch,parse,exception,expected,a,list,or,an,entry,of,context,mapping,return,new,context,mappings,context,mappings
ContextMappings -> public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException;1534539448;Loads {@link ContextMappings} from configuration__Expected configuration:_List of maps representing {@link ContextMapping}_[{"name": .., "type": .., ..}, {..}];public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException {_        final List<ContextMapping<?>> contextMappings__        if (configuration instanceof List) {_            contextMappings = new ArrayList<>()__            List<Object> configurations = (List<Object>) configuration__            for (Object contextConfig : configurations) {_                contextMappings.add(load((Map<String, Object>) contextConfig, indexVersionCreated))__            }_            if (contextMappings.size() == 0) {_                throw new ElasticsearchParseException("expected at least one context mapping")__            }_        } else if (configuration instanceof Map) {_            contextMappings = Collections.singletonList(load(((Map<String, Object>) configuration), indexVersionCreated))__        } else {_            throw new ElasticsearchParseException("expected a list or an entry of context mapping")__        }_        return new ContextMappings(contextMappings)__    };loads,link,context,mappings,from,configuration,expected,configuration,list,of,maps,representing,link,context,mapping,name,type;public,static,context,mappings,load,object,configuration,version,index,version,created,throws,elasticsearch,parse,exception,final,list,context,mapping,context,mappings,if,configuration,instanceof,list,context,mappings,new,array,list,list,object,configurations,list,object,configuration,for,object,context,config,configurations,context,mappings,add,load,map,string,object,context,config,index,version,created,if,context,mappings,size,0,throw,new,elasticsearch,parse,exception,expected,at,least,one,context,mapping,else,if,configuration,instanceof,map,context,mappings,collections,singleton,list,load,map,string,object,configuration,index,version,created,else,throw,new,elasticsearch,parse,exception,expected,a,list,or,an,entry,of,context,mapping,return,new,context,mappings,context,mappings
ContextMappings -> public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException;1542357322;Loads {@link ContextMappings} from configuration__Expected configuration:_List of maps representing {@link ContextMapping}_[{"name": .., "type": .., ..}, {..}];public static ContextMappings load(Object configuration, Version indexVersionCreated) throws ElasticsearchParseException {_        final List<ContextMapping<?>> contextMappings__        if (configuration instanceof List) {_            contextMappings = new ArrayList<>()__            List<Object> configurations = (List<Object>) configuration__            for (Object contextConfig : configurations) {_                contextMappings.add(load((Map<String, Object>) contextConfig, indexVersionCreated))__            }_            if (contextMappings.size() == 0) {_                throw new ElasticsearchParseException("expected at least one context mapping")__            }_        } else if (configuration instanceof Map) {_            contextMappings = Collections.singletonList(load(((Map<String, Object>) configuration), indexVersionCreated))__        } else {_            throw new ElasticsearchParseException("expected a list or an entry of context mapping")__        }_        return new ContextMappings(contextMappings)__    };loads,link,context,mappings,from,configuration,expected,configuration,list,of,maps,representing,link,context,mapping,name,type;public,static,context,mappings,load,object,configuration,version,index,version,created,throws,elasticsearch,parse,exception,final,list,context,mapping,context,mappings,if,configuration,instanceof,list,context,mappings,new,array,list,list,object,configurations,list,object,configuration,for,object,context,config,configurations,context,mappings,add,load,map,string,object,context,config,index,version,created,if,context,mappings,size,0,throw,new,elasticsearch,parse,exception,expected,at,least,one,context,mapping,else,if,configuration,instanceof,map,context,mappings,collections,singleton,list,load,map,string,object,configuration,index,version,created,else,throw,new,elasticsearch,parse,exception,expected,a,list,or,an,entry,of,context,mapping,return,new,context,mappings,context,mappings
