commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeDouble(sigma). }
true;public;1;7;/**  * Set the value of sigma to use when calculating the standard deviation  * bounds  */ ;/**  * Set the value of sigma to use when calculating the standard deviation  * bounds  */ public ExtendedStatsBucketPipelineAggregationBuilder sigma(double sigma) {     if (sigma < 0.0) {         throw new IllegalArgumentException(ExtendedStatsBucketParser.SIGMA.getPreferredName() + " must be a non-negative double").     }     this.sigma = sigma.     return this. }
true;public;0;3;/**  * Get the value of sigma to use when calculating the standard deviation  * bounds  */ ;/**  * Get the value of sigma to use when calculating the standard deviation  * bounds  */ public double sigma() {     return sigma. }
false;protected;1;4;;@Override protected PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException {     return new ExtendedStatsBucketPipelineAggregator(name, bucketsPaths, sigma, gapPolicy(), formatter(), metaData). }
false;public;3;10;;@Override public void doValidate(AggregatorFactory<?> parent, Collection<AggregationBuilder> aggBuilders, Collection<PipelineAggregationBuilder> pipelineAggregatorFactories) {     super.doValidate(parent, aggBuilders, pipelineAggregatorFactories).     if (sigma < 0.0) {         throw new IllegalStateException(ExtendedStatsBucketParser.SIGMA.getPreferredName() + " must be a non-negative double").     } }
false;protected;2;5;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(ExtendedStatsBucketParser.SIGMA.getPreferredName(), sigma).     return builder. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(sigma). }
false;protected;1;5;;@Override protected boolean innerEquals(BucketMetricsPipelineAggregationBuilder<ExtendedStatsBucketPipelineAggregationBuilder> obj) {     ExtendedStatsBucketPipelineAggregationBuilder other = (ExtendedStatsBucketPipelineAggregationBuilder) obj.     return Objects.equals(sigma, other.sigma). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
