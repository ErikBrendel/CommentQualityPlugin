commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(scriptStack.toArray(new String[0])).     out.writeString(script).     out.writeString(lang). }
false;protected;2;6;;@Override protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("script_stack", scriptStack).     builder.field("script", script).     builder.field("lang", lang). }
true;public;0;3;/**  * Returns the stacktrace for the error in the script.  * @return a read-only list of frames, which may be empty.  */ ;/**  * Returns the stacktrace for the error in the script.  * @return a read-only list of frames, which may be empty.  */ public List<String> getScriptStack() {     return scriptStack. }
true;public;0;3;/**  * Returns the identifier for which script.  * @return script's name or source text that identifies the script.  */ ;/**  * Returns the identifier for which script.  * @return script's name or source text that identifies the script.  */ public String getScript() {     return script. }
true;public;0;3;/**  * Returns the language of the script.  * @return the {@code lang} parameter of the scripting engine.  */ ;/**  * Returns the language of the script.  * @return the {@code lang} parameter of the scripting engine.  */ public String getLang() {     return lang. }
true;public;0;11;/**  * Returns a JSON version of this exception for debugging.  */ ;/**  * Returns a JSON version of this exception for debugging.  */ public String toJsonString() {     try {         XContentBuilder json = XContentFactory.jsonBuilder().prettyPrint().         json.startObject().         toXContent(json, ToXContent.EMPTY_PARAMS).         json.endObject().         return Strings.toString(json).     } catch (IOException e) {         throw new RuntimeException(e).     } }
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.BAD_REQUEST. }
