commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * All the names under which values are registered. Expect this to be used mostly for testing.  */ ;/**  * All the names under which values are registered. Expect this to be used mostly for testing.  */ public Set<String> getNames() {     return registry.keySet(). }
true;public;2;3;/**  * Register a parser.  */ ;/**  * Register a parser.  */ public void register(T value, String name) {     register(value, new ParseField(name)). }
true;public;2;10;/**  * Register a parser.  */ ;/**  * Register a parser.  */ public void register(T value, ParseField parseField) {     Tuple<ParseField, T> parseFieldParserTuple = new Tuple<>(parseField, value).     for (String name : parseField.getAllNamesIncludedDeprecated()) {         Tuple<ParseField, T> previousValue = registry.putIfAbsent(name, parseFieldParserTuple).         if (previousValue != null) {             throw new IllegalArgumentException("[" + previousValue.v2() + "] already registered for [" + registryName + "][" + name + "] while trying to register [" + value + "]").         }     } }
true;public;3;7;/**  * Lookup a value from the registry by name while checking that the name matches the ParseField.  *  * @param name The name of the thing to look up.  * @return The value being looked up. Never null.  * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.  */ ;/**  * Lookup a value from the registry by name while checking that the name matches the ParseField.  *  * @param name The name of the thing to look up.  * @return The value being looked up. Never null.  * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.  */ public T lookup(String name, XContentLocation xContentLocation, DeprecationHandler deprecationHandler) {     T value = lookupReturningNullIfNotFound(name, deprecationHandler).     if (value == null) {         throw new ParsingException(xContentLocation, "no [" + registryName + "] registered for [" + name + "]").     }     return value. }
true;public;2;12;/**  * Lookup a value from the registry by name while checking that the name matches the ParseField.  *  * @param name The name of the thing to look up.  * @return The value being looked up or null if it wasn't found.  * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.  */ ;/**  * Lookup a value from the registry by name while checking that the name matches the ParseField.  *  * @param name The name of the thing to look up.  * @return The value being looked up or null if it wasn't found.  * @throws ParsingException if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.  */ public T lookupReturningNullIfNotFound(String name, DeprecationHandler deprecationHandler) {     Tuple<ParseField, T> parseFieldAndValue = registry.get(name).     if (parseFieldAndValue == null) {         return null.     }     ParseField parseField = parseFieldAndValue.v1().     T value = parseFieldAndValue.v2().     boolean match = parseField.match(name, deprecationHandler).     // this is always expected to match, ParseField is useful for deprecation warnings etc. here     assert match : "ParseField did not match registered name [" + name + "][" + registryName + "]".     return value. }
