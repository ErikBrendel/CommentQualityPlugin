commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeString(this.fieldName).     out.writeGenericValue(this.value).     this.fuzziness.writeTo(out).     out.writeVInt(this.prefixLength).     out.writeVInt(this.maxExpansions).     out.writeBoolean(this.transpositions).     out.writeOptionalString(this.rewrite). }
false;public;0;4;;@Override public String fieldName() {     return this.fieldName. }
false;public;0;3;;public Object value() {     return maybeConvertToString(this.value). }
false;public;1;4;;public FuzzyQueryBuilder fuzziness(Fuzziness fuzziness) {     this.fuzziness = (fuzziness == null) ? DEFAULT_FUZZINESS : fuzziness.     return this. }
false;public;0;3;;public Fuzziness fuzziness() {     return this.fuzziness. }
false;public;1;4;;public FuzzyQueryBuilder prefixLength(int prefixLength) {     this.prefixLength = prefixLength.     return this. }
false;public;0;3;;public int prefixLength() {     return this.prefixLength. }
false;public;1;4;;public FuzzyQueryBuilder maxExpansions(int maxExpansions) {     this.maxExpansions = maxExpansions.     return this. }
false;public;0;3;;public int maxExpansions() {     return this.maxExpansions. }
false;public;1;4;;public FuzzyQueryBuilder transpositions(boolean transpositions) {     this.transpositions = transpositions.     return this. }
false;public;0;3;;public boolean transpositions() {     return this.transpositions. }
false;public;1;4;;public FuzzyQueryBuilder rewrite(String rewrite) {     this.rewrite = rewrite.     return this. }
false;public;0;3;;public String rewrite() {     return this.rewrite. }
false;protected;2;16;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.startObject(fieldName).     builder.field(VALUE_FIELD.getPreferredName(), maybeConvertToString(this.value)).     fuzziness.toXContent(builder, params).     builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength).     builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions).     builder.field(TRANSPOSITIONS_FIELD.getPreferredName(), transpositions).     if (rewrite != null) {         builder.field(REWRITE_FIELD.getPreferredName(), rewrite).     }     printBoostAndQueryName(builder).     builder.endObject().     builder.endObject(). }
false;public,static;1;64;;public static FuzzyQueryBuilder fromXContent(XContentParser parser) throws IOException {     String fieldName = null.     Object value = null.     Fuzziness fuzziness = FuzzyQueryBuilder.DEFAULT_FUZZINESS.     int prefixLength = FuzzyQueryBuilder.DEFAULT_PREFIX_LENGTH.     int maxExpansions = FuzzyQueryBuilder.DEFAULT_MAX_EXPANSIONS.     boolean transpositions = FuzzyQueryBuilder.DEFAULT_TRANSPOSITIONS.     String rewrite = null.     String queryName = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName).             fieldName = currentFieldName.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else if (token.isValue()) {                     if (TERM_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = maybeConvertToBytesRef(parser.objectBytes()).                     } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = maybeConvertToBytesRef(parser.objectBytes()).                     } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         boost = parser.floatValue().                     } else if (Fuzziness.FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         fuzziness = Fuzziness.parse(parser).                     } else if (PREFIX_LENGTH_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         prefixLength = parser.intValue().                     } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         maxExpansions = parser.intValue().                     } else if (TRANSPOSITIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         transpositions = parser.booleanValue().                     } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         rewrite = parser.textOrNull().                     } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         queryName = parser.text().                     } else {                         throw new ParsingException(parser.getTokenLocation(), "[fuzzy] query does not support [" + currentFieldName + "]").                     }                 } else {                     throw new ParsingException(parser.getTokenLocation(), "[" + NAME + "] unexpected token [" + token + "] after [" + currentFieldName + "]").                 }             }         } else {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName()).             fieldName = parser.currentName().             value = maybeConvertToBytesRef(parser.objectBytes()).         }     }     return new FuzzyQueryBuilder(fieldName, value).fuzziness(fuzziness).prefixLength(prefixLength).maxExpansions(maxExpansions).transpositions(transpositions).rewrite(rewrite).boost(boost).queryName(queryName). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;1;19;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     Query query = null.     String rewrite = this.rewrite.     MappedFieldType fieldType = context.fieldMapper(fieldName).     if (fieldType != null) {         query = fieldType.fuzzyQuery(value, fuzziness, prefixLength, maxExpansions, transpositions).     }     if (query == null) {         int maxEdits = fuzziness.asDistance(BytesRefs.toString(value)).         query = new FuzzyQuery(new Term(fieldName, BytesRefs.toBytesRef(value)), maxEdits, prefixLength, maxExpansions, transpositions).     }     if (query instanceof MultiTermQuery) {         MultiTermQuery.RewriteMethod rewriteMethod = QueryParsers.parseRewriteMethod(rewrite, null, LoggingDeprecationHandler.INSTANCE).         QueryParsers.setRewriteMethod((MultiTermQuery) query, rewriteMethod).     }     return query. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(fieldName, value, fuzziness, prefixLength, maxExpansions, transpositions, rewrite). }
false;protected;1;10;;@Override protected boolean doEquals(FuzzyQueryBuilder other) {     return Objects.equals(fieldName, other.fieldName) && Objects.equals(value, other.value) && Objects.equals(fuzziness, other.fuzziness) && Objects.equals(prefixLength, other.prefixLength) && Objects.equals(maxExpansions, other.maxExpansions) && Objects.equals(transpositions, other.transpositions) && Objects.equals(rewrite, other.rewrite). }
