commented;modifiers;parameterAmount;loc;comment;code
false;private,static;3;7;;private static void logDeprecated(String key, String message, Object... params) {     // NOTE: we don't check SpecialPermission because this will be called (indirectly) from scripts     AccessController.doPrivileged((PrivilegedAction<Void>) () -> {         deprecationLogger.deprecatedAndMaybeLog(key, message, params).         return null.     }). }
false;private,static;2;3;;private static void logDeprecatedMethod(String oldMethod, String newMethod) {     logDeprecated(oldMethod, "Use of the joda time method [{}] is deprecated. Use [{}] instead.", oldMethod, newMethod). }
true;public;0;3;// access the underlying ZonedDateTime ;// access the underlying ZonedDateTime public ZonedDateTime getZonedDateTime() {     return dt. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     JodaCompatibleZonedDateTime that = (JodaCompatibleZonedDateTime) o.     return Objects.equals(dt, that.dt). }
false;public;0;4;;@Override public int hashCode() {     return dt.hashCode(). }
false;public;0;4;;@Override public String toString() {     return DATE_FORMATTER.format(dt). }
false;public;1;3;;public boolean isAfter(JodaCompatibleZonedDateTime o) {     return dt.isAfter(o.getZonedDateTime()). }
false;public;1;3;;public boolean isBefore(JodaCompatibleZonedDateTime o) {     return dt.isBefore(o.getZonedDateTime()). }
false;public;1;3;;public boolean isEqual(JodaCompatibleZonedDateTime o) {     return dt.isEqual(o.getZonedDateTime()). }
false;public;0;3;;public int getDayOfMonth() {     return dt.getDayOfMonth(). }
false;public;0;3;;public int getDayOfYear() {     return dt.getDayOfYear(). }
false;public;0;3;;public int getHour() {     return dt.getHour(). }
false;public;0;3;;public LocalDate toLocalDate() {     return dt.toLocalDate(). }
false;public;0;3;;public LocalDateTime toLocalDateTime() {     return dt.toLocalDateTime(). }
false;public;0;3;;public int getMinute() {     return dt.getMinute(). }
false;public;0;3;;public Month getMonth() {     return dt.getMonth(). }
false;public;0;3;;public int getMonthValue() {     return dt.getMonthValue(). }
false;public;0;3;;public int getNano() {     return dt.getNano(). }
false;public;0;3;;public int getSecond() {     return dt.getSecond(). }
false;public;0;3;;public int getYear() {     return dt.getYear(). }
false;public;0;3;;public ZoneId getZone() {     return dt.getZone(). }
false;public;1;3;;public ZonedDateTime minus(TemporalAmount delta) {     return dt.minus(delta). }
false;public;2;3;;public ZonedDateTime minus(long amount, TemporalUnit unit) {     return dt.minus(amount, unit). }
false;public;1;3;;public ZonedDateTime minusYears(long amount) {     return dt.minusYears(amount). }
false;public;1;3;;public ZonedDateTime minusMonths(long amount) {     return dt.minusMonths(amount). }
false;public;1;3;;public ZonedDateTime minusWeeks(long amount) {     return dt.minusWeeks(amount). }
false;public;1;3;;public ZonedDateTime minusDays(long amount) {     return dt.minusDays(amount). }
false;public;1;3;;public ZonedDateTime minusHours(long amount) {     return dt.minusHours(amount). }
false;public;1;3;;public ZonedDateTime minusMinutes(long amount) {     return dt.minusMinutes(amount). }
false;public;1;3;;public ZonedDateTime minusSeconds(long amount) {     return dt.minusSeconds(amount). }
false;public;1;3;;public ZonedDateTime minusNanos(long amount) {     return dt.minusNanos(amount). }
false;public;1;3;;public ZonedDateTime plus(TemporalAmount amount) {     return dt.plus(amount). }
false;public;2;3;;public ZonedDateTime plus(long amount, TemporalUnit unit) {     return dt.plus(amount, unit). }
false;public;1;3;;public ZonedDateTime plusDays(long amount) {     return dt.plusDays(amount). }
false;public;1;3;;public ZonedDateTime plusHours(long amount) {     return dt.plusHours(amount). }
false;public;1;3;;public ZonedDateTime plusMinutes(long amount) {     return dt.plusMinutes(amount). }
false;public;1;3;;public ZonedDateTime plusMonths(long amount) {     return dt.plusMonths(amount). }
false;public;1;3;;public ZonedDateTime plusNanos(long amount) {     return dt.plusNanos(amount). }
false;public;1;3;;public ZonedDateTime plusSeconds(long amount) {     return dt.plusSeconds(amount). }
false;public;1;3;;public ZonedDateTime plusWeeks(long amount) {     return dt.plusWeeks(amount). }
false;public;1;3;;public ZonedDateTime plusYears(long amount) {     return dt.plusYears(amount). }
false;public;0;3;;public Instant toInstant() {     return dt.toInstant(). }
false;public;0;3;;public OffsetDateTime toOffsetDateTime() {     return dt.toOffsetDateTime(). }
false;public;1;4;;@SuppressForbidden(reason = "only exposing the method as a passthrough") public ZonedDateTime truncatedTo(TemporalUnit unit) {     return dt.truncatedTo(unit). }
false;public;1;3;;public ZonedDateTime with(TemporalAdjuster adjuster) {     return dt.with(adjuster). }
false;public;2;3;;public ZonedDateTime with(TemporalField field, long newValue) {     return dt.with(field, newValue). }
false;public;1;3;;public ZonedDateTime withDayOfMonth(int value) {     return dt.withDayOfMonth(value). }
false;public;1;3;;public ZonedDateTime withDayOfYear(int value) {     return dt.withDayOfYear(value). }
false;public;0;3;;public ZonedDateTime withEarlierOffsetAtOverlap() {     return dt.withEarlierOffsetAtOverlap(). }
false;public;0;3;;public ZonedDateTime withFixedOffsetZone() {     return dt.withFixedOffsetZone(). }
false;public;1;3;;public ZonedDateTime withHour(int value) {     return dt.withHour(value). }
false;public;0;3;;public ZonedDateTime withLaterOffsetAtOverlap() {     return dt.withLaterOffsetAtOverlap(). }
false;public;1;3;;public ZonedDateTime withMinute(int value) {     return dt.withMinute(value). }
false;public;1;3;;public ZonedDateTime withMonth(int value) {     return dt.withMonth(value). }
false;public;1;3;;public ZonedDateTime withNano(int value) {     return dt.withNano(value). }
false;public;1;3;;public ZonedDateTime withSecond(int value) {     return dt.withSecond(value). }
false;public;1;3;;public ZonedDateTime withYear(int value) {     return dt.withYear(value). }
false;public;1;3;;public ZonedDateTime withZoneSameLocal(ZoneId zone) {     return dt.withZoneSameLocal(zone). }
false;public;1;3;;public ZonedDateTime withZoneSameInstant(ZoneId zone) {     return dt.withZoneSameInstant(zone). }
false;public;0;5;;@Deprecated public long getMillis() {     logDeprecatedMethod("getMillis()", "toInstant().toEpochMilli()").     return dt.toInstant().toEpochMilli(). }
false;public;0;5;;@Deprecated public int getCenturyOfEra() {     logDeprecatedMethod("getCenturyOfEra()", "get(ChronoField.YEAR_OF_ERA) / 100").     return dt.get(ChronoField.YEAR_OF_ERA) / 100. }
false;public;0;5;;@Deprecated public int getEra() {     logDeprecatedMethod("getEra()", "get(ChronoField.ERA)").     return dt.get(ChronoField.ERA). }
false;public;0;5;;@Deprecated public int getHourOfDay() {     logDeprecatedMethod("getHourOfDay()", "getHour()").     return dt.getHour(). }
false;public;0;5;;@Deprecated public int getMillisOfDay() {     logDeprecatedMethod("getMillisOfDay()", "get(ChronoField.MILLI_OF_DAY)").     return dt.get(ChronoField.MILLI_OF_DAY). }
false;public;0;5;;@Deprecated public int getMillisOfSecond() {     logDeprecatedMethod("getMillisOfSecond()", "get(ChronoField.MILLI_OF_SECOND)").     return dt.get(ChronoField.MILLI_OF_SECOND). }
false;public;0;5;;@Deprecated public int getMinuteOfDay() {     logDeprecatedMethod("getMinuteOfDay()", "get(ChronoField.MINUTE_OF_DAY)").     return dt.get(ChronoField.MINUTE_OF_DAY). }
false;public;0;5;;@Deprecated public int getMinuteOfHour() {     logDeprecatedMethod("getMinuteOfHour()", "getMinute()").     return dt.getMinute(). }
false;public;0;5;;@Deprecated public int getMonthOfYear() {     logDeprecatedMethod("getMonthOfYear()", "getMonthValue()").     return dt.getMonthValue(). }
false;public;0;5;;@Deprecated public int getSecondOfDay() {     logDeprecatedMethod("getSecondOfDay()", "get(ChronoField.SECOND_OF_DAY)").     return dt.get(ChronoField.SECOND_OF_DAY). }
false;public;0;5;;@Deprecated public int getSecondOfMinute() {     logDeprecatedMethod("getSecondOfMinute()", "getSecond()").     return dt.getSecond(). }
false;public;0;5;;@Deprecated public int getWeekOfWeekyear() {     logDeprecatedMethod("getWeekOfWeekyear()", "get(WeekFields.ISO.weekOfWeekBasedYear())").     return dt.get(WeekFields.ISO.weekOfWeekBasedYear()). }
false;public;0;5;;@Deprecated public int getWeekyear() {     logDeprecatedMethod("getWeekyear()", "get(WeekFields.ISO.weekBasedYear())").     return dt.get(WeekFields.ISO.weekBasedYear()). }
false;public;0;5;;@Deprecated public int getYearOfCentury() {     logDeprecatedMethod("getYearOfCentury()", "get(ChronoField.YEAR_OF_ERA) % 100").     return dt.get(ChronoField.YEAR_OF_ERA) % 100. }
false;public;0;5;;@Deprecated public int getYearOfEra() {     logDeprecatedMethod("getYearOfEra()", "get(ChronoField.YEAR_OF_ERA)").     return dt.get(ChronoField.YEAR_OF_ERA). }
false;public;1;6;;@Deprecated public String toString(String format) {     logDeprecatedMethod("toString(String)", "a DateTimeFormatter").     // TODO: replace with bwc formatter     return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format). }
false;public;2;6;;@Deprecated public String toString(String format, Locale locale) {     logDeprecatedMethod("toString(String,Locale)", "a DateTimeFormatter").     // TODO: replace with bwc formatter     return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format, locale). }
false;public;0;3;;public DayOfWeek getDayOfWeekEnum() {     return dt.getDayOfWeek(). }
false;public;0;6;;@Deprecated public int getDayOfWeek() {     logDeprecated("getDayOfWeek()", "The return type of [getDayOfWeek()] will change to an enum in 7.0. Use getDayOfWeekEnum().getValue().").     return dt.getDayOfWeek().getValue(). }
