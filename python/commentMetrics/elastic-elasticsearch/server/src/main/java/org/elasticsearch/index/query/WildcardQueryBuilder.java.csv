commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeString(fieldName).     out.writeString(value).     out.writeOptionalString(rewrite). }
false;public;0;4;;@Override public String fieldName() {     return fieldName. }
false;public;0;3;;public String value() {     return value. }
false;public;1;4;;public WildcardQueryBuilder rewrite(String rewrite) {     this.rewrite = rewrite.     return this. }
false;public;0;3;;public String rewrite() {     return this.rewrite. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;protected;2;12;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.startObject(fieldName).     builder.field(WILDCARD_FIELD.getPreferredName(), value).     if (rewrite != null) {         builder.field(REWRITE_FIELD.getPreferredName(), rewrite).     }     printBoostAndQueryName(builder).     builder.endObject().     builder.endObject(). }
false;public,static;1;46;;public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {     String fieldName = null.     String rewrite = null.     String value = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     String queryName = null.     String currentFieldName = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT) {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName).             fieldName = currentFieldName.             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {                 if (token == XContentParser.Token.FIELD_NAME) {                     currentFieldName = parser.currentName().                 } else {                     if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = parser.text().                     } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         value = parser.text().                     } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         boost = parser.floatValue().                     } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         rewrite = parser.textOrNull().                     } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                         queryName = parser.text().                     } else {                         throw new ParsingException(parser.getTokenLocation(), "[wildcard] query does not support [" + currentFieldName + "]").                     }                 }             }         } else {             throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName()).             fieldName = parser.currentName().             value = parser.text().         }     }     return new WildcardQueryBuilder(fieldName, value).rewrite(rewrite).boost(boost).queryName(queryName). }
false;protected;1;12;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     MappedFieldType fieldType = context.fieldMapper(fieldName).     if (fieldType == null) {         return new MatchNoDocsQuery("unknown field [" + fieldName + "]").     }     MultiTermQuery.RewriteMethod method = QueryParsers.parseRewriteMethod(rewrite, null, LoggingDeprecationHandler.INSTANCE).     return fieldType.wildcardQuery(value, method, context). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(fieldName, value, rewrite). }
false;protected;1;6;;@Override protected boolean doEquals(WildcardQueryBuilder other) {     return Objects.equals(fieldName, other.fieldName) && Objects.equals(value, other.value) && Objects.equals(rewrite, other.rewrite). }
