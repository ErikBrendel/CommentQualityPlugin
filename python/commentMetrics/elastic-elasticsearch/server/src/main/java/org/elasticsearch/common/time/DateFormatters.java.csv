# id;timestamp;commentText;codeText;commentWords;codeWords
DateFormatters -> public static ZonedDateTime from(TemporalAccessor accessor);1548921340;Convert a temporal accessor to a zoned date time object - as performant as possible._The .from() methods from the JDK are throwing exceptions when for example ZonedDateTime.from(accessor)_or Instant.from(accessor). This results in a huge performance penalty and should be prevented_This method prevents exceptions by querying the accessor for certain capabilities_and then act on it accordingly__This action assumes that we can reliably fall back to some defaults if not all parts of a_zoned date time are set__- If a zoned date time is passed, it is returned_- If no timezone is found, ZoneOffset.UTC is used_- If we find a time and a date, converting to a ZonedDateTime is straight forward,_no defaults will be applied_- If an accessor only containing of seconds and nanos is found (like epoch_millis/second)_an Instant is created out of that, that becomes a ZonedDateTime with a time zone_- If no time is given, the start of the day is used_- If no month of the year is found, the first day of the year is used_- If an iso based weekyear is found, but not week is specified, the first monday_of the new year is chosen (reataining BWC to joda time)_- If an iso based weekyear is found and an iso based weekyear week, the start_of the day is used__@param accessor The accessor returned from a parser__@return The converted zoned date time;public static ZonedDateTime from(TemporalAccessor accessor) {_        if (accessor instanceof ZonedDateTime) {_            return (ZonedDateTime) accessor__        }__        ZoneId zoneId = accessor.query(TemporalQueries.zone())__        if (zoneId == null) {_            zoneId = ZoneOffset.UTC__        }_        _        LocalDate localDate = accessor.query(TemporalQueries.localDate())__        LocalTime localTime = accessor.query(TemporalQueries.localTime())__        boolean isLocalDateSet = localDate != null__        boolean isLocalTimeSet = localTime != null___        _        if (isLocalDateSet && isLocalTimeSet) {_            return of(localDate, localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.INSTANT_SECONDS) && accessor.isSupported(NANO_OF_SECOND)) {_            return Instant.from(accessor).atZone(zoneId)__        } else if (isLocalDateSet) {_            return localDate.atStartOfDay(zoneId)__        } else if (isLocalTimeSet) {_            return of(LOCALDATE_EPOCH, localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.YEAR)) {_            if (accessor.isSupported(MONTH_OF_YEAR)) {_                return getFirstOfMonth(accessor).atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(ChronoField.YEAR)).atDay(1).atStartOfDay(zoneId)__            }_        } else if (accessor.isSupported(WeekFields.ISO.weekBasedYear())) {_            if (accessor.isSupported(WeekFields.ISO.weekOfWeekBasedYear())) {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(WeekFields.ISO.weekOfWeekBasedYear(), accessor.getLong(WeekFields.ISO.weekOfWeekBasedYear()))_                    .atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY))_                    .atStartOfDay(zoneId)__            }_        }__        _        _        throw new IllegalArgumentException("temporal accessor [" + accessor + "] cannot be converted to zoned date time")__    };convert,a,temporal,accessor,to,a,zoned,date,time,object,as,performant,as,possible,the,from,methods,from,the,jdk,are,throwing,exceptions,when,for,example,zoned,date,time,from,accessor,or,instant,from,accessor,this,results,in,a,huge,performance,penalty,and,should,be,prevented,this,method,prevents,exceptions,by,querying,the,accessor,for,certain,capabilities,and,then,act,on,it,accordingly,this,action,assumes,that,we,can,reliably,fall,back,to,some,defaults,if,not,all,parts,of,a,zoned,date,time,are,set,if,a,zoned,date,time,is,passed,it,is,returned,if,no,timezone,is,found,zone,offset,utc,is,used,if,we,find,a,time,and,a,date,converting,to,a,zoned,date,time,is,straight,forward,no,defaults,will,be,applied,if,an,accessor,only,containing,of,seconds,and,nanos,is,found,like,second,an,instant,is,created,out,of,that,that,becomes,a,zoned,date,time,with,a,time,zone,if,no,time,is,given,the,start,of,the,day,is,used,if,no,month,of,the,year,is,found,the,first,day,of,the,year,is,used,if,an,iso,based,weekyear,is,found,but,not,week,is,specified,the,first,monday,of,the,new,year,is,chosen,reataining,bwc,to,joda,time,if,an,iso,based,weekyear,is,found,and,an,iso,based,weekyear,week,the,start,of,the,day,is,used,param,accessor,the,accessor,returned,from,a,parser,return,the,converted,zoned,date,time;public,static,zoned,date,time,from,temporal,accessor,accessor,if,accessor,instanceof,zoned,date,time,return,zoned,date,time,accessor,zone,id,zone,id,accessor,query,temporal,queries,zone,if,zone,id,null,zone,id,zone,offset,utc,local,date,local,date,accessor,query,temporal,queries,local,date,local,time,local,time,accessor,query,temporal,queries,local,time,boolean,is,local,date,set,local,date,null,boolean,is,local,time,set,local,time,null,if,is,local,date,set,is,local,time,set,return,of,local,date,local,time,zone,id,else,if,accessor,is,supported,chrono,field,accessor,is,supported,return,instant,from,accessor,at,zone,zone,id,else,if,is,local,date,set,return,local,date,at,start,of,day,zone,id,else,if,is,local,time,set,return,of,local,time,zone,id,else,if,accessor,is,supported,chrono,field,year,if,accessor,is,supported,return,get,first,of,month,accessor,at,start,of,day,zone,id,else,return,year,of,accessor,get,chrono,field,year,at,day,1,at,start,of,day,zone,id,else,if,accessor,is,supported,week,fields,iso,week,based,year,if,accessor,is,supported,week,fields,iso,week,of,week,based,year,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,week,fields,iso,week,of,week,based,year,accessor,get,long,week,fields,iso,week,of,week,based,year,at,start,of,day,zone,id,else,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,temporal,adjusters,first,in,month,day,of,week,monday,at,start,of,day,zone,id,throw,new,illegal,argument,exception,temporal,accessor,accessor,cannot,be,converted,to,zoned,date,time
DateFormatters -> public static ZonedDateTime from(TemporalAccessor accessor);1549032176;Convert a temporal accessor to a zoned date time object - as performant as possible._The .from() methods from the JDK are throwing exceptions when for example ZonedDateTime.from(accessor)_or Instant.from(accessor). This results in a huge performance penalty and should be prevented_This method prevents exceptions by querying the accessor for certain capabilities_and then act on it accordingly__This action assumes that we can reliably fall back to some defaults if not all parts of a_zoned date time are set__- If a zoned date time is passed, it is returned_- If no timezone is found, ZoneOffset.UTC is used_- If we find a time and a date, converting to a ZonedDateTime is straight forward,_no defaults will be applied_- If an accessor only containing of seconds and nanos is found (like epoch_millis/second)_an Instant is created out of that, that becomes a ZonedDateTime with a time zone_- If no time is given, the start of the day is used_- If no month of the year is found, the first day of the year is used_- If an iso based weekyear is found, but not week is specified, the first monday_of the new year is chosen (reataining BWC to joda time)_- If an iso based weekyear is found and an iso based weekyear week, the start_of the day is used__@param accessor The accessor returned from a parser__@return The converted zoned date time;public static ZonedDateTime from(TemporalAccessor accessor) {_        if (accessor instanceof ZonedDateTime) {_            return (ZonedDateTime) accessor__        }__        ZoneId zoneId = accessor.query(TemporalQueries.zone())__        if (zoneId == null) {_            zoneId = ZoneOffset.UTC__        }_        _        LocalDate localDate = accessor.query(TemporalQueries.localDate())__        LocalTime localTime = accessor.query(TemporalQueries.localTime())__        boolean isLocalDateSet = localDate != null__        boolean isLocalTimeSet = localTime != null___        _        if (isLocalDateSet && isLocalTimeSet) {_            return of(localDate, localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.INSTANT_SECONDS) && accessor.isSupported(NANO_OF_SECOND)) {_            return Instant.from(accessor).atZone(zoneId)__        } else if (isLocalDateSet) {_            return localDate.atStartOfDay(zoneId)__        } else if (isLocalTimeSet) {_            return of(getLocaldate(accessor), localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.YEAR)) {_            if (accessor.isSupported(MONTH_OF_YEAR)) {_                return getFirstOfMonth(accessor).atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(ChronoField.YEAR)).atDay(1).atStartOfDay(zoneId)__            }_        } else if (accessor.isSupported(MONTH_OF_YEAR)) {_            _            return getLocaldate(accessor).atStartOfDay(zoneId)__        } else if (accessor.isSupported(WeekFields.ISO.weekBasedYear())) {_            if (accessor.isSupported(WeekFields.ISO.weekOfWeekBasedYear())) {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(WeekFields.ISO.weekOfWeekBasedYear(), accessor.getLong(WeekFields.ISO.weekOfWeekBasedYear()))_                    .atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY))_                    .atStartOfDay(zoneId)__            }_        }__        _        _        throw new IllegalArgumentException("temporal accessor [" + accessor + "] cannot be converted to zoned date time")__    };convert,a,temporal,accessor,to,a,zoned,date,time,object,as,performant,as,possible,the,from,methods,from,the,jdk,are,throwing,exceptions,when,for,example,zoned,date,time,from,accessor,or,instant,from,accessor,this,results,in,a,huge,performance,penalty,and,should,be,prevented,this,method,prevents,exceptions,by,querying,the,accessor,for,certain,capabilities,and,then,act,on,it,accordingly,this,action,assumes,that,we,can,reliably,fall,back,to,some,defaults,if,not,all,parts,of,a,zoned,date,time,are,set,if,a,zoned,date,time,is,passed,it,is,returned,if,no,timezone,is,found,zone,offset,utc,is,used,if,we,find,a,time,and,a,date,converting,to,a,zoned,date,time,is,straight,forward,no,defaults,will,be,applied,if,an,accessor,only,containing,of,seconds,and,nanos,is,found,like,second,an,instant,is,created,out,of,that,that,becomes,a,zoned,date,time,with,a,time,zone,if,no,time,is,given,the,start,of,the,day,is,used,if,no,month,of,the,year,is,found,the,first,day,of,the,year,is,used,if,an,iso,based,weekyear,is,found,but,not,week,is,specified,the,first,monday,of,the,new,year,is,chosen,reataining,bwc,to,joda,time,if,an,iso,based,weekyear,is,found,and,an,iso,based,weekyear,week,the,start,of,the,day,is,used,param,accessor,the,accessor,returned,from,a,parser,return,the,converted,zoned,date,time;public,static,zoned,date,time,from,temporal,accessor,accessor,if,accessor,instanceof,zoned,date,time,return,zoned,date,time,accessor,zone,id,zone,id,accessor,query,temporal,queries,zone,if,zone,id,null,zone,id,zone,offset,utc,local,date,local,date,accessor,query,temporal,queries,local,date,local,time,local,time,accessor,query,temporal,queries,local,time,boolean,is,local,date,set,local,date,null,boolean,is,local,time,set,local,time,null,if,is,local,date,set,is,local,time,set,return,of,local,date,local,time,zone,id,else,if,accessor,is,supported,chrono,field,accessor,is,supported,return,instant,from,accessor,at,zone,zone,id,else,if,is,local,date,set,return,local,date,at,start,of,day,zone,id,else,if,is,local,time,set,return,of,get,localdate,accessor,local,time,zone,id,else,if,accessor,is,supported,chrono,field,year,if,accessor,is,supported,return,get,first,of,month,accessor,at,start,of,day,zone,id,else,return,year,of,accessor,get,chrono,field,year,at,day,1,at,start,of,day,zone,id,else,if,accessor,is,supported,return,get,localdate,accessor,at,start,of,day,zone,id,else,if,accessor,is,supported,week,fields,iso,week,based,year,if,accessor,is,supported,week,fields,iso,week,of,week,based,year,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,week,fields,iso,week,of,week,based,year,accessor,get,long,week,fields,iso,week,of,week,based,year,at,start,of,day,zone,id,else,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,temporal,adjusters,first,in,month,day,of,week,monday,at,start,of,day,zone,id,throw,new,illegal,argument,exception,temporal,accessor,accessor,cannot,be,converted,to,zoned,date,time
DateFormatters -> public static ZonedDateTime from(TemporalAccessor accessor);1549894234;Convert a temporal accessor to a zoned date time object - as performant as possible._The .from() methods from the JDK are throwing exceptions when for example ZonedDateTime.from(accessor)_or Instant.from(accessor). This results in a huge performance penalty and should be prevented_This method prevents exceptions by querying the accessor for certain capabilities_and then act on it accordingly__This action assumes that we can reliably fall back to some defaults if not all parts of a_zoned date time are set__- If a zoned date time is passed, it is returned_- If no timezone is found, ZoneOffset.UTC is used_- If we find a time and a date, converting to a ZonedDateTime is straight forward,_no defaults will be applied_- If an accessor only containing of seconds and nanos is found (like epoch_millis/second)_an Instant is created out of that, that becomes a ZonedDateTime with a time zone_- If no time is given, the start of the day is used_- If no month of the year is found, the first day of the year is used_- If an iso based weekyear is found, but not week is specified, the first monday_of the new year is chosen (reataining BWC to joda time)_- If an iso based weekyear is found and an iso based weekyear week, the start_of the day is used__@param accessor The accessor returned from a parser__@return The converted zoned date time;public static ZonedDateTime from(TemporalAccessor accessor) {_        if (accessor instanceof ZonedDateTime) {_            return (ZonedDateTime) accessor__        }__        ZoneId zoneId = accessor.query(TemporalQueries.zone())__        if (zoneId == null) {_            zoneId = ZoneOffset.UTC__        }_        _        LocalDate localDate = accessor.query(TemporalQueries.localDate())__        LocalTime localTime = accessor.query(TemporalQueries.localTime())__        boolean isLocalDateSet = localDate != null__        boolean isLocalTimeSet = localTime != null___        _        if (isLocalDateSet && isLocalTimeSet) {_            return of(localDate, localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.INSTANT_SECONDS) && accessor.isSupported(NANO_OF_SECOND)) {_            return Instant.from(accessor).atZone(zoneId)__        } else if (isLocalDateSet) {_            return localDate.atStartOfDay(zoneId)__        } else if (isLocalTimeSet) {_            return of(getLocaldate(accessor), localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.YEAR)) {_            if (accessor.isSupported(MONTH_OF_YEAR)) {_                return getFirstOfMonth(accessor).atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(ChronoField.YEAR)).atDay(1).atStartOfDay(zoneId)__            }_        } else if (accessor.isSupported(MONTH_OF_YEAR)) {_            _            return getLocaldate(accessor).atStartOfDay(zoneId)__        } else if (accessor.isSupported(WeekFields.ISO.weekBasedYear())) {_            if (accessor.isSupported(WeekFields.ISO.weekOfWeekBasedYear())) {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(WeekFields.ISO.weekOfWeekBasedYear(), accessor.getLong(WeekFields.ISO.weekOfWeekBasedYear()))_                    .atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY))_                    .atStartOfDay(zoneId)__            }_        }__        _        _        throw new IllegalArgumentException("temporal accessor [" + accessor + "] cannot be converted to zoned date time")__    };convert,a,temporal,accessor,to,a,zoned,date,time,object,as,performant,as,possible,the,from,methods,from,the,jdk,are,throwing,exceptions,when,for,example,zoned,date,time,from,accessor,or,instant,from,accessor,this,results,in,a,huge,performance,penalty,and,should,be,prevented,this,method,prevents,exceptions,by,querying,the,accessor,for,certain,capabilities,and,then,act,on,it,accordingly,this,action,assumes,that,we,can,reliably,fall,back,to,some,defaults,if,not,all,parts,of,a,zoned,date,time,are,set,if,a,zoned,date,time,is,passed,it,is,returned,if,no,timezone,is,found,zone,offset,utc,is,used,if,we,find,a,time,and,a,date,converting,to,a,zoned,date,time,is,straight,forward,no,defaults,will,be,applied,if,an,accessor,only,containing,of,seconds,and,nanos,is,found,like,second,an,instant,is,created,out,of,that,that,becomes,a,zoned,date,time,with,a,time,zone,if,no,time,is,given,the,start,of,the,day,is,used,if,no,month,of,the,year,is,found,the,first,day,of,the,year,is,used,if,an,iso,based,weekyear,is,found,but,not,week,is,specified,the,first,monday,of,the,new,year,is,chosen,reataining,bwc,to,joda,time,if,an,iso,based,weekyear,is,found,and,an,iso,based,weekyear,week,the,start,of,the,day,is,used,param,accessor,the,accessor,returned,from,a,parser,return,the,converted,zoned,date,time;public,static,zoned,date,time,from,temporal,accessor,accessor,if,accessor,instanceof,zoned,date,time,return,zoned,date,time,accessor,zone,id,zone,id,accessor,query,temporal,queries,zone,if,zone,id,null,zone,id,zone,offset,utc,local,date,local,date,accessor,query,temporal,queries,local,date,local,time,local,time,accessor,query,temporal,queries,local,time,boolean,is,local,date,set,local,date,null,boolean,is,local,time,set,local,time,null,if,is,local,date,set,is,local,time,set,return,of,local,date,local,time,zone,id,else,if,accessor,is,supported,chrono,field,accessor,is,supported,return,instant,from,accessor,at,zone,zone,id,else,if,is,local,date,set,return,local,date,at,start,of,day,zone,id,else,if,is,local,time,set,return,of,get,localdate,accessor,local,time,zone,id,else,if,accessor,is,supported,chrono,field,year,if,accessor,is,supported,return,get,first,of,month,accessor,at,start,of,day,zone,id,else,return,year,of,accessor,get,chrono,field,year,at,day,1,at,start,of,day,zone,id,else,if,accessor,is,supported,return,get,localdate,accessor,at,start,of,day,zone,id,else,if,accessor,is,supported,week,fields,iso,week,based,year,if,accessor,is,supported,week,fields,iso,week,of,week,based,year,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,week,fields,iso,week,of,week,based,year,accessor,get,long,week,fields,iso,week,of,week,based,year,at,start,of,day,zone,id,else,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,temporal,adjusters,first,in,month,day,of,week,monday,at,start,of,day,zone,id,throw,new,illegal,argument,exception,temporal,accessor,accessor,cannot,be,converted,to,zoned,date,time
DateFormatters -> public static ZonedDateTime from(TemporalAccessor accessor);1551276355;Convert a temporal accessor to a zoned date time object - as performant as possible._The .from() methods from the JDK are throwing exceptions when for example ZonedDateTime.from(accessor)_or Instant.from(accessor). This results in a huge performance penalty and should be prevented_This method prevents exceptions by querying the accessor for certain capabilities_and then act on it accordingly__This action assumes that we can reliably fall back to some defaults if not all parts of a_zoned date time are set__- If a zoned date time is passed, it is returned_- If no timezone is found, ZoneOffset.UTC is used_- If we find a time and a date, converting to a ZonedDateTime is straight forward,_no defaults will be applied_- If an accessor only containing of seconds and nanos is found (like epoch_millis/second)_an Instant is created out of that, that becomes a ZonedDateTime with a time zone_- If no time is given, the start of the day is used_- If no month of the year is found, the first day of the year is used_- If an iso based weekyear is found, but not week is specified, the first monday_of the new year is chosen (reataining BWC to joda time)_- If an iso based weekyear is found and an iso based weekyear week, the start_of the day is used__@param accessor The accessor returned from a parser__@return The converted zoned date time;public static ZonedDateTime from(TemporalAccessor accessor) {_        if (accessor instanceof ZonedDateTime) {_            return (ZonedDateTime) accessor__        }__        ZoneId zoneId = accessor.query(TemporalQueries.zone())__        if (zoneId == null) {_            zoneId = ZoneOffset.UTC__        }_        _        LocalDate localDate = accessor.query(TemporalQueries.localDate())__        LocalTime localTime = accessor.query(TemporalQueries.localTime())__        boolean isLocalDateSet = localDate != null__        boolean isLocalTimeSet = localTime != null___        _        if (isLocalDateSet && isLocalTimeSet) {_            return of(localDate, localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.INSTANT_SECONDS) && accessor.isSupported(NANO_OF_SECOND)) {_            return Instant.from(accessor).atZone(zoneId)__        } else if (isLocalDateSet) {_            return localDate.atStartOfDay(zoneId)__        } else if (isLocalTimeSet) {_            return of(getLocaldate(accessor), localTime, zoneId)__        } else if (accessor.isSupported(ChronoField.YEAR)) {_            if (accessor.isSupported(MONTH_OF_YEAR)) {_                return getFirstOfMonth(accessor).atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(ChronoField.YEAR)).atDay(1).atStartOfDay(zoneId)__            }_        } else if (accessor.isSupported(MONTH_OF_YEAR)) {_            _            return getLocaldate(accessor).atStartOfDay(zoneId)__        } else if (accessor.isSupported(WeekFields.ISO.weekBasedYear())) {_            if (accessor.isSupported(WeekFields.ISO.weekOfWeekBasedYear())) {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(WeekFields.ISO.weekOfWeekBasedYear(), accessor.getLong(WeekFields.ISO.weekOfWeekBasedYear()))_                    .atStartOfDay(zoneId)__            } else {_                return Year.of(accessor.get(WeekFields.ISO.weekBasedYear()))_                    .atDay(1)_                    .with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY))_                    .atStartOfDay(zoneId)__            }_        }__        _        _        throw new IllegalArgumentException("temporal accessor [" + accessor + "] cannot be converted to zoned date time")__    };convert,a,temporal,accessor,to,a,zoned,date,time,object,as,performant,as,possible,the,from,methods,from,the,jdk,are,throwing,exceptions,when,for,example,zoned,date,time,from,accessor,or,instant,from,accessor,this,results,in,a,huge,performance,penalty,and,should,be,prevented,this,method,prevents,exceptions,by,querying,the,accessor,for,certain,capabilities,and,then,act,on,it,accordingly,this,action,assumes,that,we,can,reliably,fall,back,to,some,defaults,if,not,all,parts,of,a,zoned,date,time,are,set,if,a,zoned,date,time,is,passed,it,is,returned,if,no,timezone,is,found,zone,offset,utc,is,used,if,we,find,a,time,and,a,date,converting,to,a,zoned,date,time,is,straight,forward,no,defaults,will,be,applied,if,an,accessor,only,containing,of,seconds,and,nanos,is,found,like,second,an,instant,is,created,out,of,that,that,becomes,a,zoned,date,time,with,a,time,zone,if,no,time,is,given,the,start,of,the,day,is,used,if,no,month,of,the,year,is,found,the,first,day,of,the,year,is,used,if,an,iso,based,weekyear,is,found,but,not,week,is,specified,the,first,monday,of,the,new,year,is,chosen,reataining,bwc,to,joda,time,if,an,iso,based,weekyear,is,found,and,an,iso,based,weekyear,week,the,start,of,the,day,is,used,param,accessor,the,accessor,returned,from,a,parser,return,the,converted,zoned,date,time;public,static,zoned,date,time,from,temporal,accessor,accessor,if,accessor,instanceof,zoned,date,time,return,zoned,date,time,accessor,zone,id,zone,id,accessor,query,temporal,queries,zone,if,zone,id,null,zone,id,zone,offset,utc,local,date,local,date,accessor,query,temporal,queries,local,date,local,time,local,time,accessor,query,temporal,queries,local,time,boolean,is,local,date,set,local,date,null,boolean,is,local,time,set,local,time,null,if,is,local,date,set,is,local,time,set,return,of,local,date,local,time,zone,id,else,if,accessor,is,supported,chrono,field,accessor,is,supported,return,instant,from,accessor,at,zone,zone,id,else,if,is,local,date,set,return,local,date,at,start,of,day,zone,id,else,if,is,local,time,set,return,of,get,localdate,accessor,local,time,zone,id,else,if,accessor,is,supported,chrono,field,year,if,accessor,is,supported,return,get,first,of,month,accessor,at,start,of,day,zone,id,else,return,year,of,accessor,get,chrono,field,year,at,day,1,at,start,of,day,zone,id,else,if,accessor,is,supported,return,get,localdate,accessor,at,start,of,day,zone,id,else,if,accessor,is,supported,week,fields,iso,week,based,year,if,accessor,is,supported,week,fields,iso,week,of,week,based,year,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,week,fields,iso,week,of,week,based,year,accessor,get,long,week,fields,iso,week,of,week,based,year,at,start,of,day,zone,id,else,return,year,of,accessor,get,week,fields,iso,week,based,year,at,day,1,with,temporal,adjusters,first,in,month,day,of,week,monday,at,start,of,day,zone,id,throw,new,illegal,argument,exception,temporal,accessor,accessor,cannot,be,converted,to,zoned,date,time
