commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The position of the filter in the chain. Execution is done from lowest order to highest.  */ ;/**  * The position of the filter in the chain. Execution is done from lowest order to highest.  */ int order().
true;;5;2;/**  * Enables filtering the execution of an action on the request side, either by sending a response through the  * {@link ActionListener} or by continuing the execution through the given {@link ActionFilterChain chain}  */ ;/**  * Enables filtering the execution of an action on the request side, either by sending a response through the  * {@link ActionListener} or by continuing the execution through the given {@link ActionFilterChain chain}  */ <Request extends ActionRequest, Response extends ActionResponse> void apply(Task task, String action, Request request, ActionListener<Response> listener, ActionFilterChain<Request, Response> chain).
false;public,final;5;7;;@Override public final <Request extends ActionRequest, Response extends ActionResponse> void apply(Task task, String action, Request request, ActionListener<Response> listener, ActionFilterChain<Request, Response> chain) {     if (apply(action, request, listener)) {         chain.proceed(task, action, request, listener).     } }
true;protected,abstract;3;1;/**  * Applies this filter and returns {@code true} if the execution chain should proceed, or {@code false}  * if it should be aborted since the filter already handled the request and called the given listener.  */ ;/**  * Applies this filter and returns {@code true} if the execution chain should proceed, or {@code false}  * if it should be aborted since the filter already handled the request and called the given listener.  */ protected abstract boolean apply(String action, ActionRequest request, ActionListener<?> listener).
