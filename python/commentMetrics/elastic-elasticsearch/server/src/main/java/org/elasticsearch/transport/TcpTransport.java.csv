# id;timestamp;commentText;codeText;commentWords;codeWords
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1536218260;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1537300661;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1537806831;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1540583181;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1540847035;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1541008027;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1541197879;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1541552300;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1541698679;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1541783569;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1542646292;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1543334894;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1543506953;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1543602642;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1544554541;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1544569768;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1544632755;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1544823664;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1545412440;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1547625930;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1548103856;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1548105258;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1548953505;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1550509800;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1551232478;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,                              final String action, TransportResponseOptions options) throws IOException;1524684173;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,_                             final String action, TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,version,node,version,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,transport,response,options,options,throws,ioexception,send,response,node,version,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,                              final String action, TransportResponseOptions options) throws IOException;1525334055;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,_                             final String action, TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,version,node,version,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,transport,response,options,options,throws,ioexception,send,response,node,version,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,                              final String action, TransportResponseOptions options) throws IOException;1526981569;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,_                             final String action, TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,version,node,version,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,transport,response,options,options,throws,ioexception,send,response,node,version,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,                              final String action, TransportResponseOptions options) throws IOException;1527152864;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(Version nodeVersion, TcpChannel channel, final TransportResponse response, final long requestId,_                             final String action, TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,version,node,version,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,transport,response,options,options,throws,ioexception,send,response,node,version,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1541552300;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1541698679;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1541783569;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1542646292;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1543334894;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1543506953;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1543602642;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1544554541;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final TransportResponseOptions options) throws IOException;1544569768;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1524684173;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1525334055;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1526981569;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1527152864;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1527878678;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1528103657;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1529433467;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1529600205;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1531179852;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1533738061;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1534203100;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1534362961;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1534755962;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1534848846;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1536218260;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1537300661;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1537806831;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1540583181;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1540847035;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1541008027;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> private void cancelHandshakeForChannel(TcpChannel channel);1541197879;Called once the channel is closed for instance due to a disconnect or a closed socket etc.;private void cancelHandshakeForChannel(TcpChannel channel) {_        final Optional<Long> first = pendingHandshakes.entrySet().stream()_            .filter((entry) -> entry.getValue().channel == channel).map(Map.Entry::getKey).findFirst()__        if (first.isPresent()) {_            final Long requestId = first.get()__            final HandshakeResponseHandler handler = pendingHandshakes.remove(requestId)__            if (handler != null) {_                _                _                handler.handleException(new TransportException("connection reset"))__            }_        }_    };called,once,the,channel,is,closed,for,instance,due,to,a,disconnect,or,a,closed,socket,etc;private,void,cancel,handshake,for,channel,tcp,channel,channel,final,optional,long,first,pending,handshakes,entry,set,stream,filter,entry,entry,get,value,channel,channel,map,map,entry,get,key,find,first,if,first,is,present,final,long,request,id,first,get,final,handshake,response,handler,handler,pending,handshakes,remove,request,id,if,handler,null,handler,handle,exception,new,transport,exception,connection,reset
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1524684173;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1525334055;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1526981569;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1527152864;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1527878678;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1528103657;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1529433467;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1529600205;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1531179852;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1533738061;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1534203100;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1534362961;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1534755962;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1534848846;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1536218260;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1537300661;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1537806831;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1540583181;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1540847035;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1541008027;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1541197879;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1541552300;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1541698679;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1541783569;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1542646292;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1543334894;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1543506953;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1543602642;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1544554541;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1544569768;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1544632755;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1544823664;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1545412440;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1547625930;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1548103856;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1548105258;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1548953505;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1550509800;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> public static int readMessageLength(BytesReference networkBytes) throws IOException;1551232478;Validates the first 6 bytes of the message header and returns the length of the message. If 6 bytes_are not available, it returns -1.__@param networkBytes the will be read_@return the length of the message_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static int readMessageLength(BytesReference networkBytes) throws IOException {_        if (networkBytes.length() < BYTES_NEEDED_FOR_MESSAGE_SIZE) {_            return -1__        } else {_            return readHeaderBuffer(networkBytes)__        }_    };validates,the,first,6,bytes,of,the,message,header,and,returns,the,length,of,the,message,if,6,bytes,are,not,available,it,returns,1,param,network,bytes,the,will,be,read,return,the,length,of,the,message,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,int,read,message,length,bytes,reference,network,bytes,throws,ioexception,if,network,bytes,length,return,1,else,return,read,header,buffer,network,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1524684173;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1525334055;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1526981569;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1527152864;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1527878678;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1528103657;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1529433467;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1529600205;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1531179852;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1533738061;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1534203100;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1534362961;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1534755962;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1534848846;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1536218260;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1537300661;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1537806831;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1540583181;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1540847035;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1541008027;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1541197879;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1541552300;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1541698679;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1541783569;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1542646292;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1543334894;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1543506953;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1543602642;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1544554541;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1544569768;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1544632755;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1544823664;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1545412440;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1547625930;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException;1548103856;Writes the Tcp message header into a bytes reference.__@param requestId       the request ID_@param status          the request status_@param protocolVersion the protocol version used to serialize the data in the message_@param length          the payload length in bytes_@see TcpHeader;private BytesReference buildHeader(long requestId, byte status, Version protocolVersion, int length) throws IOException {_        try (BytesStreamOutput headerOutput = new BytesStreamOutput(TcpHeader.HEADER_SIZE)) {_            headerOutput.setVersion(protocolVersion)__            TcpHeader.writeHeader(headerOutput, requestId, status, protocolVersion, length)__            final BytesReference bytes = headerOutput.bytes()__            assert bytes.length() == TcpHeader.HEADER_SIZE : "header size mismatch expected: " + TcpHeader.HEADER_SIZE + " but was: "_                + bytes.length()__            return bytes__        }_    };writes,the,tcp,message,header,into,a,bytes,reference,param,request,id,the,request,id,param,status,the,request,status,param,protocol,version,the,protocol,version,used,to,serialize,the,data,in,the,message,param,length,the,payload,length,in,bytes,see,tcp,header;private,bytes,reference,build,header,long,request,id,byte,status,version,protocol,version,int,length,throws,ioexception,try,bytes,stream,output,header,output,new,bytes,stream,output,tcp,header,header,output,set,version,protocol,version,tcp,header,write,header,header,output,request,id,status,protocol,version,length,final,bytes,reference,bytes,header,output,bytes,assert,bytes,length,tcp,header,header,size,mismatch,expected,tcp,header,but,was,bytes,length,return,bytes
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1524684173;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1525334055;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1526981569;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1527152864;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1527878678;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1528103657;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1529433467;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1529600205;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1531179852;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> protected abstract void stopInternal()_;1529600205;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1531179852;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1533738061;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1534203100;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1534362961;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1534755962;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1534848846;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1536218260;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1537300661;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1537806831;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1540583181;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1540847035;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1541008027;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1541197879;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1541552300;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1541698679;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1541783569;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1542646292;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1543334894;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1543506953;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1543602642;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1544554541;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1544569768;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1544632755;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1544823664;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1545412440;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1547625930;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1548103856;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1548105258;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1548953505;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1550509800;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract void stopInternal()_;1551232478;Called to tear down internal resources;protected abstract void stopInternal()_;called,to,tear,down,internal,resources;protected,abstract,void,stop,internal
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1524684173;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1525334055;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1526981569;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1527152864;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1527878678;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1528103657;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1529433467;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1529600205;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1531179852;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1533738061;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1534203100;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1534362961;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;1534755962;Initiate a single tcp socket channel.__@param address address for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(InetSocketAddress address, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,address,address,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,inet,socket,address,address,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1524684173;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1525334055;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1526981569;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1527152864;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1527878678;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1528103657;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1529433467;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1529600205;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1531179852;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1533738061;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1534203100;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1534362961;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1534755962;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException;1534848846;Attempts to a decode a message from the provided bytes. If a full message is not available, null is_returned. If the message is a ping, an empty {@link BytesReference} will be returned.__@param networkBytes the will be read_@return the message decoded_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public static BytesReference decodeFrame(BytesReference networkBytes) throws IOException {_        int messageLength = readMessageLength(networkBytes)__        if (messageLength == -1) {_            return null__        } else {_            int totalLength = messageLength + BYTES_NEEDED_FOR_MESSAGE_SIZE__            if (totalLength > networkBytes.length()) {_                return null__            } else if (totalLength == 6) {_                return EMPTY_BYTES_REFERENCE__            } else {_                return networkBytes.slice(BYTES_NEEDED_FOR_MESSAGE_SIZE, messageLength)__            }_        }_    };attempts,to,a,decode,a,message,from,the,provided,bytes,if,a,full,message,is,not,available,null,is,returned,if,the,message,is,a,ping,an,empty,link,bytes,reference,will,be,returned,param,network,bytes,the,will,be,read,return,the,message,decoded,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,static,bytes,reference,decode,frame,bytes,reference,network,bytes,throws,ioexception,int,message,length,read,message,length,network,bytes,if,message,length,1,return,null,else,int,total,length,message,length,if,total,length,network,bytes,length,return,null,else,if,total,length,6,return,else,return,network,bytes,slice,message,length
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1536218260;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1537300661;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1537806831;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1540583181;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1540847035;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1541008027;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1541197879;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1541552300;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1541698679;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1541783569;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1542646292;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1543334894;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1543506953;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1543602642;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1544554541;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1544569768;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1544632755;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1544823664;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1545412440;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1547625930;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1548103856;Handles inbound message that has been decoded.__@param channel the channel the message if fomr_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,if,fomr,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1548105258;Handles inbound message that has been decoded.__@param channel the channel the message is from_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,is,from,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1548953505;Handles inbound message that has been decoded.__@param channel the channel the message is from_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,is,from,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1550509800;Handles inbound message that has been decoded.__@param channel the channel the message is from_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,is,from,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> public void inboundMessage(TcpChannel channel, BytesReference message);1551232478;Handles inbound message that has been decoded.__@param channel the channel the message is from_@param message the message;public void inboundMessage(TcpChannel channel, BytesReference message) {_        try {_            channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__            transportLogger.logInboundMessage(channel, message)__            _            if (message.length() != 0) {_                messageReceived(message, channel)__            } else {_                keepAlive.receiveKeepAlive(channel)__            }_        } catch (Exception e) {_            onException(channel, e)__        }_    };handles,inbound,message,that,has,been,decoded,param,channel,the,channel,the,message,is,from,param,message,the,message;public,void,inbound,message,tcp,channel,channel,bytes,reference,message,try,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,inbound,message,channel,message,if,message,length,0,message,received,message,channel,else,keep,alive,receive,keep,alive,channel,catch,exception,e,on,exception,channel,e
TcpTransport -> protected void stopInternal();1524684173;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1525334055;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1526981569;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1527152864;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1527878678;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1528103657;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> protected void stopInternal();1529433467;Called to tear down internal resources;protected void stopInternal() {_    };called,to,tear,down,internal,resources;protected,void,stop,internal
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1524684173;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1525334055;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1526981569;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1527152864;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1527878678;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1528103657;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1529433467;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1529600205;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = transportService.onResponseReceived(requestId)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,transport,service,on,response,received,request,id,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1531179852;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, transportListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,transport,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1533738061;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, transportListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,transport,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1534203100;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, transportListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,transport,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1534362961;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, transportListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,transport,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1534755962;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1534848846;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1536218260;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1537300661;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1537806831;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler theHandler = responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1540583181;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1540847035;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1541008027;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1541197879;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, getCurrentVersion(), isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = pendingHandshakes.remove(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = pendingHandshakes.remove(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,get,current,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,pending,handshakes,remove,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,pending,handshakes,remove,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1541552300;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1541698679;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1541783569;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1542646292;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1543334894;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1543506953;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1543602642;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1544554541;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1544569768;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1544632755;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1544823664;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1545412440;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1547625930;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1548103856;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        String profileName = channel.getProfile()__        InetSocketAddress remoteAddress = channel.getRemoteAddress()__        int messageLengthBytes = reference.length()__        final int totalMessageSize = messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE__        readBytesMetric.inc(totalMessageSize)__        _        boolean hasMessageBytesToRead = (totalMessageSize - TcpHeader.HEADER_SIZE) > 0__        StreamInput streamIn = reference.streamInput()__        boolean success = false__        try (ThreadContext.StoredContext tCtx = threadPool.getThreadContext().stashContext()) {_            long requestId = streamIn.readLong()__            byte status = streamIn.readByte()__            Version version = Version.fromId(streamIn.readInt())__            if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {_                Compressor compressor__                try {_                    final int bytesConsumed = TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE__                    compressor = CompressorFactory.compressor(reference.slice(bytesConsumed, reference.length() - bytesConsumed))__                } catch (NotCompressedException ex) {_                    int maxToRead = Math.min(reference.length(), 10)__                    StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead)_                        .append("] content bytes out of [").append(reference.length())_                        .append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [")__                    for (int i = 0_ i < maxToRead_ i++) {_                        sb.append(reference.get(i)).append(",")__                    }_                    sb.append("]")__                    throw new IllegalStateException(sb.toString())__                }_                streamIn = compressor.streamInput(streamIn)__            }_            final boolean isHandshake = TransportStatus.isHandshake(status)__            ensureVersionCompatibility(version, this.version, isHandshake)__            streamIn = new NamedWriteableAwareStreamInput(streamIn, namedWriteableRegistry)__            streamIn.setVersion(version)__            threadPool.getThreadContext().readHeaders(streamIn)__            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress)__            if (TransportStatus.isRequest(status)) {_                handleRequest(channel, profileName, streamIn, requestId, messageLengthBytes, version, remoteAddress, status)__            } else {_                final TransportResponseHandler<?> handler__                if (isHandshake) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && TransportStatus.isError(status)) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (TransportStatus.isError(status)) {_                        handlerResponseError(streamIn, handler)__                    } else {_                        handleResponse(remoteAddress, streamIn, handler)__                    }_                    _                    final int nextByte = streamIn.read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + TransportStatus.isError(status) + "]_ resetting")__                    }_                }_            }_            success = true__        } finally {_            if (success) {_                IOUtils.close(streamIn)__            } else {_                IOUtils.closeWhileHandlingException(streamIn)__            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,string,profile,name,channel,get,profile,inet,socket,address,remote,address,channel,get,remote,address,int,message,length,bytes,reference,length,final,int,total,message,size,message,length,bytes,tcp,header,tcp,header,read,bytes,metric,inc,total,message,size,boolean,has,message,bytes,to,read,total,message,size,tcp,header,0,stream,input,stream,in,reference,stream,input,boolean,success,false,try,thread,context,stored,context,t,ctx,thread,pool,get,thread,context,stash,context,long,request,id,stream,in,read,long,byte,status,stream,in,read,byte,version,version,version,from,id,stream,in,read,int,if,transport,status,is,compress,status,has,message,bytes,to,read,stream,in,available,0,compressor,compressor,try,final,int,bytes,consumed,tcp,header,tcp,header,tcp,header,compressor,compressor,factory,compressor,reference,slice,bytes,consumed,reference,length,bytes,consumed,catch,not,compressed,exception,ex,int,max,to,read,math,min,reference,length,10,string,builder,sb,new,string,builder,stream,marked,as,compressed,but,no,compressor,found,first,append,max,to,read,append,content,bytes,out,of,append,reference,length,append,readable,bytes,with,message,size,append,message,length,bytes,append,append,are,for,int,i,0,i,max,to,read,i,sb,append,reference,get,i,append,sb,append,throw,new,illegal,state,exception,sb,to,string,stream,in,compressor,stream,input,stream,in,final,boolean,is,handshake,transport,status,is,handshake,status,ensure,version,compatibility,version,this,version,is,handshake,stream,in,new,named,writeable,aware,stream,input,stream,in,named,writeable,registry,stream,in,set,version,version,thread,pool,get,thread,context,read,headers,stream,in,thread,pool,get,thread,context,put,transient,remote,address,if,transport,status,is,request,status,handle,request,channel,profile,name,stream,in,request,id,message,length,bytes,version,remote,address,status,else,final,transport,response,handler,handler,if,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,transport,status,is,error,status,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,transport,status,is,error,status,handler,response,error,stream,in,handler,else,handle,response,remote,address,stream,in,handler,final,int,next,byte,stream,in,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,transport,status,is,error,status,resetting,success,true,finally,if,success,ioutils,close,stream,in,else,ioutils,close,while,handling,exception,stream,in
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1548105258;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        readBytesMetric.inc(reference.length() + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE)__        InetSocketAddress remoteAddress = channel.getRemoteAddress()___        ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext existing = threadContext.stashContext()__             InboundMessage message = reader.deserialize(reference)) {_            _            message.getStoredContext().restore()__            threadContext.putTransient("_remote_address", remoteAddress)__            if (message.isRequest()) {_                handleRequest(channel, (InboundMessage.RequestMessage) message, reference.length())__            } else {_                final TransportResponseHandler<?> handler__                long requestId = message.getRequestId()__                if (message.isHandshake()) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && message.isError()) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (message.isError()) {_                        handlerResponseError(message.getStreamInput(), handler)__                    } else {_                        handleResponse(remoteAddress, message.getStreamInput(), handler)__                    }_                    _                    final int nextByte = message.getStreamInput().read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + message.isError() + "]_ resetting")__                    }_                }_            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,read,bytes,metric,inc,reference,length,tcp,header,tcp,header,inet,socket,address,remote,address,channel,get,remote,address,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,existing,thread,context,stash,context,inbound,message,message,reader,deserialize,reference,message,get,stored,context,restore,thread,context,put,transient,remote,address,if,message,is,request,handle,request,channel,inbound,message,request,message,message,reference,length,else,final,transport,response,handler,handler,long,request,id,message,get,request,id,if,message,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,message,is,error,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,message,is,error,handler,response,error,message,get,stream,input,handler,else,handle,response,remote,address,message,get,stream,input,handler,final,int,next,byte,message,get,stream,input,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,message,is,error,resetting
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1548953505;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        readBytesMetric.inc(reference.length() + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE)__        InetSocketAddress remoteAddress = channel.getRemoteAddress()___        ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext existing = threadContext.stashContext()__             InboundMessage message = reader.deserialize(reference)) {_            _            message.getStoredContext().restore()__            threadContext.putTransient("_remote_address", remoteAddress)__            if (message.isRequest()) {_                handleRequest(channel, (InboundMessage.RequestMessage) message, reference.length())__            } else {_                final TransportResponseHandler<?> handler__                long requestId = message.getRequestId()__                if (message.isHandshake()) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && message.isError()) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (message.isError()) {_                        handlerResponseError(message.getStreamInput(), handler)__                    } else {_                        handleResponse(remoteAddress, message.getStreamInput(), handler)__                    }_                    _                    final int nextByte = message.getStreamInput().read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + message.isError() + "]_ resetting")__                    }_                }_            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,read,bytes,metric,inc,reference,length,tcp,header,tcp,header,inet,socket,address,remote,address,channel,get,remote,address,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,existing,thread,context,stash,context,inbound,message,message,reader,deserialize,reference,message,get,stored,context,restore,thread,context,put,transient,remote,address,if,message,is,request,handle,request,channel,inbound,message,request,message,message,reference,length,else,final,transport,response,handler,handler,long,request,id,message,get,request,id,if,message,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,message,is,error,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,message,is,error,handler,response,error,message,get,stream,input,handler,else,handle,response,remote,address,message,get,stream,input,handler,final,int,next,byte,message,get,stream,input,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,message,is,error,resetting
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1550509800;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        readBytesMetric.inc(reference.length() + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE)__        InetSocketAddress remoteAddress = channel.getRemoteAddress()___        ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext existing = threadContext.stashContext()__             InboundMessage message = reader.deserialize(reference)) {_            _            message.getStoredContext().restore()__            threadContext.putTransient("_remote_address", remoteAddress)__            if (message.isRequest()) {_                handleRequest(channel, (InboundMessage.RequestMessage) message, reference.length())__            } else {_                final TransportResponseHandler<?> handler__                long requestId = message.getRequestId()__                if (message.isHandshake()) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && message.isError()) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (message.isError()) {_                        handlerResponseError(message.getStreamInput(), handler)__                    } else {_                        handleResponse(remoteAddress, message.getStreamInput(), handler)__                    }_                    _                    final int nextByte = message.getStreamInput().read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + message.isError() + "]_ resetting")__                    }_                }_            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,read,bytes,metric,inc,reference,length,tcp,header,tcp,header,inet,socket,address,remote,address,channel,get,remote,address,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,existing,thread,context,stash,context,inbound,message,message,reader,deserialize,reference,message,get,stored,context,restore,thread,context,put,transient,remote,address,if,message,is,request,handle,request,channel,inbound,message,request,message,message,reference,length,else,final,transport,response,handler,handler,long,request,id,message,get,request,id,if,message,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,message,is,error,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,message,is,error,handler,response,error,message,get,stream,input,handler,else,handle,response,remote,address,message,get,stream,input,handler,final,int,next,byte,message,get,stream,input,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,message,is,error,resetting
TcpTransport -> public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException;1551232478;This method handles the message receive part for both request and responses;public final void messageReceived(BytesReference reference, TcpChannel channel) throws IOException {_        readBytesMetric.inc(reference.length() + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE)__        InetSocketAddress remoteAddress = channel.getRemoteAddress()___        ThreadContext threadContext = threadPool.getThreadContext()__        try (ThreadContext.StoredContext existing = threadContext.stashContext()__             InboundMessage message = reader.deserialize(reference)) {_            _            message.getStoredContext().restore()__            threadContext.putTransient("_remote_address", remoteAddress)__            if (message.isRequest()) {_                handleRequest(channel, (InboundMessage.RequestMessage) message, reference.length())__            } else {_                final TransportResponseHandler<?> handler__                long requestId = message.getRequestId()__                if (message.isHandshake()) {_                    handler = handshaker.removeHandlerForHandshake(requestId)__                } else {_                    TransportResponseHandler<? extends TransportResponse> theHandler =_                        responseHandlers.onResponseReceived(requestId, messageListener)__                    if (theHandler == null && message.isError()) {_                        handler = handshaker.removeHandlerForHandshake(requestId)__                    } else {_                        handler = theHandler__                    }_                }_                _                if (handler != null) {_                    if (message.isError()) {_                        handlerResponseError(message.getStreamInput(), handler)__                    } else {_                        handleResponse(remoteAddress, message.getStreamInput(), handler)__                    }_                    _                    final int nextByte = message.getStreamInput().read()__                    _                    if (nextByte != -1) {_                        throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["_                            + handler + "], error [" + message.isError() + "]_ resetting")__                    }_                }_            }_        }_    };this,method,handles,the,message,receive,part,for,both,request,and,responses;public,final,void,message,received,bytes,reference,reference,tcp,channel,channel,throws,ioexception,read,bytes,metric,inc,reference,length,tcp,header,tcp,header,inet,socket,address,remote,address,channel,get,remote,address,thread,context,thread,context,thread,pool,get,thread,context,try,thread,context,stored,context,existing,thread,context,stash,context,inbound,message,message,reader,deserialize,reference,message,get,stored,context,restore,thread,context,put,transient,remote,address,if,message,is,request,handle,request,channel,inbound,message,request,message,message,reference,length,else,final,transport,response,handler,handler,long,request,id,message,get,request,id,if,message,is,handshake,handler,handshaker,remove,handler,for,handshake,request,id,else,transport,response,handler,extends,transport,response,the,handler,response,handlers,on,response,received,request,id,message,listener,if,the,handler,null,message,is,error,handler,handshaker,remove,handler,for,handshake,request,id,else,handler,the,handler,if,handler,null,if,message,is,error,handler,response,error,message,get,stream,input,handler,else,handle,response,remote,address,message,get,stream,input,handler,final,int,next,byte,message,get,stream,input,read,if,next,byte,1,throw,new,illegal,state,exception,message,not,fully,read,response,for,request,id,request,id,handler,handler,error,message,is,error,resetting
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1524684173;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1525334055;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1526981569;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1527152864;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1527878678;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1528103657;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1529433467;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1529600205;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1531179852;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1533738061;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1534203100;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1534362961;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1534755962;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1534848846;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1536218260;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1537300661;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1537806831;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1540583181;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1540847035;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1541008027;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1541197879;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1541552300;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1541698679;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1541783569;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1542646292;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1543334894;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1543506953;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1543602642;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1544554541;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1544569768;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1544632755;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1544823664;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1545412440;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1547625930;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1548103856;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1548105258;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1548953505;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1550509800;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> public static Set<ProfileSettings> getProfileSettings(Settings settings);1551232478;Returns all profile settings for the given settings object;public static Set<ProfileSettings> getProfileSettings(Settings settings) {_        HashSet<ProfileSettings> profiles = new HashSet<>()__        boolean isDefaultSet = false__        for (String profile : settings.getGroups("transport.profiles.", true).keySet()) {_            profiles.add(new ProfileSettings(settings, profile))__            if (TransportSettings.DEFAULT_PROFILE.equals(profile)) {_                isDefaultSet = true__            }_        }_        if (isDefaultSet == false) {_            profiles.add(new ProfileSettings(settings, TransportSettings.DEFAULT_PROFILE))__        }_        return Collections.unmodifiableSet(profiles)__    };returns,all,profile,settings,for,the,given,settings,object;public,static,set,profile,settings,get,profile,settings,settings,settings,hash,set,profile,settings,profiles,new,hash,set,boolean,is,default,set,false,for,string,profile,settings,get,groups,transport,profiles,true,key,set,profiles,add,new,profile,settings,settings,profile,if,transport,settings,equals,profile,is,default,set,true,if,is,default,set,false,profiles,add,new,profile,settings,settings,transport,settings,return,collections,unmodifiable,set,profiles
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1524684173;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1525334055;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1526981569;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1527152864;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1527878678;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1528103657;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;1529433467;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1524684173;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1525334055;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1526981569;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1527152864;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1527878678;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1528103657;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1529433467;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1529600205;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1531179852;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1533738061;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1534203100;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1534362961;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1534755962;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1534848846;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1536218260;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1537300661;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1537806831;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1540583181;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1540847035;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1541008027;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1541197879;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1541552300;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1541698679;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1541783569;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1542646292;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener);1543334894;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, SendMetricListener listener) {_        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, listener)__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,send,metric,listener,listener,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1524684173;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1525334055;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1526981569;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1527152864;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1527878678;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1528103657;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1529433467;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1529600205;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1531179852;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1533738061;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1534203100;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1534362961;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1534755962;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1534848846;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1536218260;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1537300661;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1537806831;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1540583181;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1540847035;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1541008027;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1541197879;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1541552300;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1541698679;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1541783569;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1542646292;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1543334894;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1543506953;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1543602642;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1544554541;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1544569768;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1544632755;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1544823664;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1545412440;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1547625930;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1548103856;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1548105258;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1548953505;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1550509800;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler);1551232478;Executed for a received response error;private void handlerResponseError(StreamInput stream, final TransportResponseHandler handler) {_        Exception error__        try {_            error = stream.readException()__        } catch (Exception e) {_            error = new TransportSerializationException("Failed to deserialize exception response from stream", e)__        }_        handleException(handler, error)__    };executed,for,a,received,response,error;private,void,handler,response,error,stream,input,stream,final,transport,response,handler,handler,exception,error,try,error,stream,read,exception,catch,exception,e,error,new,transport,serialization,exception,failed,to,deserialize,exception,response,from,stream,e,handle,exception,handler,error
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1529600205;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1531179852;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1533738061;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1534203100;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1534362961;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1534755962;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1534848846;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1536218260;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1537300661;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1537806831;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1540583181;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1540847035;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1541008027;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1541197879;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1541552300;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1541698679;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1541783569;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1542646292;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1543334894;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1543506953;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1543602642;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1544554541;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1544569768;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1544632755;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1544823664;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1545412440;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1547625930;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1548103856;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1548105258;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1548953505;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1550509800;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;1551232478;Binds to the given {@link InetSocketAddress}__@param name    the profile name_@param address the address to bind to;protected abstract TcpServerChannel bind(String name, InetSocketAddress address) throws IOException_;binds,to,the,given,link,inet,socket,address,param,name,the,profile,name,param,address,the,address,to,bind,to;protected,abstract,tcp,server,channel,bind,string,name,inet,socket,address,address,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1541552300;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1541698679;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1541783569;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1542646292;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1543334894;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1543506953;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1543602642;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1544554541;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1544569768;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1544632755;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1544823664;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1545412440;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1547625930;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1548103856;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1548105258;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1548953505;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1550509800;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;1551232478;Initiate a single tcp socket channel.__@param node for the initiated connection_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,throws,ioexception
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1527878678;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1528103657;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1529433467;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1529600205;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1531179852;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1533738061;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1534203100;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1534362961;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1534755962;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1534848846;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1536218260;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1537300661;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1537806831;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1540583181;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1540847035;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1541008027;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> public void sendResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final TransportResponse response,             final long requestId,             final String action,             final TransportResponseOptions options) throws IOException;1541197879;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final TransportResponse response,_            final long requestId,_            final String action,_            final TransportResponseOptions options) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, options, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,transport,response,options,options,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,options,byte,0
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1543506953;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1543602642;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1544554541;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1544569768;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1544632755;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1544823664;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1545412440;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1547625930;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener);1548103856;sends a message to the given channel, using the given callbacks.;private void internalSendMessage(TcpChannel channel, BytesReference message, ActionListener<Void> listener) {_        channel.getChannelStats().markAccessed(threadPool.relativeTimeInMillis())__        transportLogger.logOutboundMessage(channel, message)__        try {_            channel.sendMessage(message, new SendListener(channel, message.length(), listener))__        } catch (Exception ex) {_            _            listener.onFailure(ex)__            onException(channel, ex)__        }_    };sends,a,message,to,the,given,channel,using,the,given,callbacks;private,void,internal,send,message,tcp,channel,channel,bytes,reference,message,action,listener,void,listener,channel,get,channel,stats,mark,accessed,thread,pool,relative,time,in,millis,transport,logger,log,outbound,message,channel,message,try,channel,send,message,message,new,send,listener,channel,message,length,listener,catch,exception,ex,listener,on,failure,ex,on,exception,channel,ex
TcpTransport -> public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,                                   final String action) throws IOException;1524684173;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,_                                  final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,version,node,version,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,                                   final String action) throws IOException;1525334055;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,_                                  final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,version,node,version,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,                                   final String action) throws IOException;1526981569;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,_                                  final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,version,node,version,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,                                   final String action) throws IOException;1527152864;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(Version nodeVersion, TcpChannel channel, final Exception error, final long requestId,_                                  final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,version,node,version,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1527878678;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1528103657;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1529433467;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1529600205;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportService.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,service,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1531179852;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1533738061;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1534203100;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1534362961;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> transportListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,transport,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1534755962;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1534848846;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1536218260;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1537300661;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1537806831;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1540583181;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName(), new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1540847035;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1541008027;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(             final Version nodeVersion,             final Set<String> features,             final TcpChannel channel,             final Exception error,             final long requestId,             final String action) throws IOException;1541197879;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_            final Version nodeVersion,_            final Set<String> features,_            final TcpChannel channel,_            final Exception error,_            final long requestId,_            final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> protected final void ensureOpen();1524684173;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1525334055;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1526981569;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1527152864;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1527878678;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1528103657;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1529433467;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1529600205;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1531179852;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1533738061;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1534203100;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1534362961;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1534755962;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1534848846;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1536218260;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1537300661;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1537806831;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1540583181;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1540847035;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1541008027;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1541197879;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1541552300;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1541698679;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1541783569;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1542646292;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1543334894;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1543506953;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1543602642;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1544554541;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1544569768;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1544632755;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1544823664;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1545412440;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1547625930;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1548103856;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1548105258;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1548953505;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1550509800;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected final void ensureOpen();1551232478;Ensures this transport is still started / open__@throws IllegalStateException if the transport is not started / open;protected final void ensureOpen() {_        if (lifecycle.started() == false) {_            throw new IllegalStateException("transport has been stopped")__        }_    };ensures,this,transport,is,still,started,open,throws,illegal,state,exception,if,the,transport,is,not,started,open;protected,final,void,ensure,open,if,lifecycle,started,false,throw,new,illegal,state,exception,transport,has,been,stopped
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1534848846;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1536218260;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1537300661;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1537806831;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1540583181;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1540847035;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1541008027;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;1541197879;Initiate a single tcp socket channel.__@param node for the initiated connection_@param connectListener listener to be called when connection complete_@return the pending connection_@throws IOException if an I/O exception occurs while opening the channel;protected abstract TcpChannel initiateChannel(DiscoveryNode node, ActionListener<Void> connectListener) throws IOException_;initiate,a,single,tcp,socket,channel,param,node,for,the,initiated,connection,param,connect,listener,listener,to,be,called,when,connection,complete,return,the,pending,connection,throws,ioexception,if,an,i,o,exception,occurs,while,opening,the,channel;protected,abstract,tcp,channel,initiate,channel,discovery,node,node,action,listener,void,connect,listener,throws,ioexception
TcpTransport -> protected static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1533738061;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;protected static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;protected,static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> protected static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,                                                       ConnectionProfile defaultConnectionProfile);1534203100;takes a {@link ConnectionProfile} that have been passed as a parameter to the public methods_and resolves it to a fully specified (i.e., no nulls) profile;protected static ConnectionProfile resolveConnectionProfile(@Nullable ConnectionProfile connectionProfile,_                                                      ConnectionProfile defaultConnectionProfile) {_        Objects.requireNonNull(defaultConnectionProfile)__        if (connectionProfile == null) {_            return defaultConnectionProfile__        } else if (connectionProfile.getConnectTimeout() != null && connectionProfile.getHandshakeTimeout() != null) {_            return connectionProfile__        } else {_            ConnectionProfile.Builder builder = new ConnectionProfile.Builder(connectionProfile)__            if (connectionProfile.getConnectTimeout() == null) {_                builder.setConnectTimeout(defaultConnectionProfile.getConnectTimeout())__            }_            if (connectionProfile.getHandshakeTimeout() == null) {_                builder.setHandshakeTimeout(defaultConnectionProfile.getHandshakeTimeout())__            }_            return builder.build()__        }_    };takes,a,link,connection,profile,that,have,been,passed,as,a,parameter,to,the,public,methods,and,resolves,it,to,a,fully,specified,i,e,no,nulls,profile;protected,static,connection,profile,resolve,connection,profile,nullable,connection,profile,connection,profile,connection,profile,default,connection,profile,objects,require,non,null,default,connection,profile,if,connection,profile,null,return,default,connection,profile,else,if,connection,profile,get,connect,timeout,null,connection,profile,get,handshake,timeout,null,return,connection,profile,else,connection,profile,builder,builder,new,connection,profile,builder,connection,profile,if,connection,profile,get,connect,timeout,null,builder,set,connect,timeout,default,connection,profile,get,connect,timeout,if,connection,profile,get,handshake,timeout,null,builder,set,handshake,timeout,default,connection,profile,get,handshake,timeout,return,builder,build
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1541552300;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1541698679;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1541783569;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1542646292;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1543334894;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            SendListener onResponseSent = new SendListener(channel, null,_                () -> messageListener.onResponseSent(requestId, action, error), message.length())__            internalSendMessage(channel, message, onResponseSent)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,send,listener,on,response,sent,new,send,listener,channel,null,message,listener,on,response,sent,request,id,action,error,message,length,internal,send,message,channel,message,on,response,sent
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1543506953;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1543602642;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1544554541;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1544569768;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1544632755;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1544823664;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1545412440;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1547625930;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1548103856;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        try (BytesStreamOutput stream = new BytesStreamOutput()) {_            stream.setVersion(nodeVersion)__            stream.setFeatures(features)__            RemoteTransportException tx = new RemoteTransportException(_                nodeName, new TransportAddress(channel.getLocalAddress()), action, error)__            threadPool.getThreadContext().writeTo(stream)__            stream.writeException(tx)__            byte status = 0__            status = TransportStatus.setResponse(status)__            status = TransportStatus.setError(status)__            final BytesReference bytes = stream.bytes()__            final BytesReference header = buildHeader(requestId, status, nodeVersion, bytes.length())__            CompositeBytesReference message = new CompositeBytesReference(header, bytes)__            ReleaseListener releaseListener = new ReleaseListener(null,_                () -> messageListener.onResponseSent(requestId, action, error))__            internalSendMessage(channel, message, releaseListener)__        }_    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,try,bytes,stream,output,stream,new,bytes,stream,output,stream,set,version,node,version,stream,set,features,features,remote,transport,exception,tx,new,remote,transport,exception,node,name,new,transport,address,channel,get,local,address,action,error,thread,pool,get,thread,context,write,to,stream,stream,write,exception,tx,byte,status,0,status,transport,status,set,response,status,status,transport,status,set,error,status,final,bytes,reference,bytes,stream,bytes,final,bytes,reference,header,build,header,request,id,status,node,version,bytes,length,composite,bytes,reference,message,new,composite,bytes,reference,header,bytes,release,listener,release,listener,new,release,listener,null,message,listener,on,response,sent,request,id,action,error,internal,send,message,channel,message,release,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1548105258;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        Version version = Version.min(this.version, nodeVersion)__        TransportAddress address = new TransportAddress(channel.getLocalAddress())__        RemoteTransportException tx = new RemoteTransportException(nodeName, address, action, error)__        OutboundMessage.Response message = new OutboundMessage.Response(threadPool.getThreadContext(), features, tx, version, requestId,_            false, false)__        ActionListener<Void> listener = ActionListener.wrap(() -> messageListener.onResponseSent(requestId, action, error))__        outboundHandler.sendMessage(channel, message, listener)__    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,version,version,version,min,this,version,node,version,transport,address,address,new,transport,address,channel,get,local,address,remote,transport,exception,tx,new,remote,transport,exception,node,name,address,action,error,outbound,message,response,message,new,outbound,message,response,thread,pool,get,thread,context,features,tx,version,request,id,false,false,action,listener,void,listener,action,listener,wrap,message,listener,on,response,sent,request,id,action,error,outbound,handler,send,message,channel,message,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1548953505;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        Version version = Version.min(this.version, nodeVersion)__        TransportAddress address = new TransportAddress(channel.getLocalAddress())__        RemoteTransportException tx = new RemoteTransportException(nodeName, address, action, error)__        OutboundMessage.Response message = new OutboundMessage.Response(threadPool.getThreadContext(), features, tx, version, requestId,_            false, false)__        ActionListener<Void> listener = ActionListener.wrap(() -> messageListener.onResponseSent(requestId, action, error))__        outboundHandler.sendMessage(channel, message, listener)__    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,version,version,version,min,this,version,node,version,transport,address,address,new,transport,address,channel,get,local,address,remote,transport,exception,tx,new,remote,transport,exception,node,name,address,action,error,outbound,message,response,message,new,outbound,message,response,thread,pool,get,thread,context,features,tx,version,request,id,false,false,action,listener,void,listener,action,listener,wrap,message,listener,on,response,sent,request,id,action,error,outbound,handler,send,message,channel,message,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1550509800;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        Version version = Version.min(this.version, nodeVersion)__        TransportAddress address = new TransportAddress(channel.getLocalAddress())__        RemoteTransportException tx = new RemoteTransportException(nodeName, address, action, error)__        OutboundMessage.Response message = new OutboundMessage.Response(threadPool.getThreadContext(), features, tx, version, requestId,_            false, false)__        ActionListener<Void> listener = ActionListener.wrap(() -> messageListener.onResponseSent(requestId, action, error))__        outboundHandler.sendMessage(channel, message, listener)__    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,version,version,version,min,this,version,node,version,transport,address,address,new,transport,address,channel,get,local,address,remote,transport,exception,tx,new,remote,transport,exception,node,name,address,action,error,outbound,message,response,message,new,outbound,message,response,thread,pool,get,thread,context,features,tx,version,request,id,false,false,action,listener,void,listener,action,listener,wrap,message,listener,on,response,sent,request,id,action,error,outbound,handler,send,message,channel,message,listener
TcpTransport -> public void sendErrorResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final Exception error,         final long requestId,         final String action) throws IOException;1551232478;Sends back an error response to the caller via the given channel__@param nodeVersion the caller node version_@param features    the caller features_@param channel     the channel to send the response to_@param error       the error to return_@param requestId   the request ID this response replies to_@param action      the action this response replies to;public void sendErrorResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final Exception error,_        final long requestId,_        final String action) throws IOException {_        Version version = Version.min(this.version, nodeVersion)__        TransportAddress address = new TransportAddress(channel.getLocalAddress())__        RemoteTransportException tx = new RemoteTransportException(nodeName, address, action, error)__        OutboundMessage.Response message = new OutboundMessage.Response(threadPool.getThreadContext(), features, tx, version, requestId,_            false, false)__        ActionListener<Void> listener = ActionListener.wrap(() -> messageListener.onResponseSent(requestId, action, error))__        outboundHandler.sendMessage(channel, message, listener)__    };sends,back,an,error,response,to,the,caller,via,the,given,channel,param,node,version,the,caller,node,version,param,features,the,caller,features,param,channel,the,channel,to,send,the,response,to,param,error,the,error,to,return,param,request,id,the,request,id,this,response,replies,to,param,action,the,action,this,response,replies,to;public,void,send,error,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,exception,error,final,long,request,id,final,string,action,throws,ioexception,version,version,version,min,this,version,node,version,transport,address,address,new,transport,address,channel,get,local,address,remote,transport,exception,tx,new,remote,transport,exception,node,name,address,action,error,outbound,message,response,message,new,outbound,message,response,thread,pool,get,thread,context,features,tx,version,request,id,false,false,action,listener,void,listener,action,listener,wrap,message,listener,on,response,sent,request,id,action,error,outbound,handler,send,message,channel,message,listener
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1524684173;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1525334055;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1526981569;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1527152864;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1527878678;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1528103657;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1529433467;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1529600205;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1531179852;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1533738061;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1534203100;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1534362961;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1534755962;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1534848846;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1536218260;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1537300661;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1537806831;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1540583181;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1540847035;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1541008027;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1541197879;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1541552300;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1541698679;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1541783569;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1542646292;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1543334894;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1543506953;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1543602642;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1544554541;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1544569768;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1544632755;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1544823664;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1545412440;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1547625930;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1548103856;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1548105258;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1548953505;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1550509800;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException;1551232478;parse a hostname+port range spec into its equivalent addresses;static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException {_        Objects.requireNonNull(hostPortString)__        String host__        String portString = null___        if (hostPortString.startsWith("[")) {_            _            Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)__            if (!matcher.matches()) {_                throw new IllegalArgumentException("Invalid bracketed host/port range: " + hostPortString)__            }_            host = matcher.group(1)__            portString = matcher.group(2)_  _        } else {_            int colonPos = hostPortString.indexOf(':')__            if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) {_                _                host = hostPortString.substring(0, colonPos)__                portString = hostPortString.substring(colonPos + 1)__            } else {_                _                host = hostPortString__                _                if (colonPos >= 0) {_                    throw new IllegalArgumentException("IPv6 addresses must be bracketed: " + hostPortString)__                }_            }_        }__        _        if (portString == null || portString.isEmpty()) {_            portString = defaultPortRange__        }__        _        Set<InetAddress> addresses = new HashSet<>(Arrays.asList(InetAddress.getAllByName(host)))__        List<TransportAddress> transportAddresses = new ArrayList<>()__        int[] ports = new PortsRange(portString).ports()__        int limit = Math.min(ports.length, perAddressLimit)__        for (int i = 0_ i < limit_ i++) {_            for (InetAddress address : addresses) {_                transportAddresses.add(new TransportAddress(address, ports[i]))__            }_        }_        return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])__    };parse,a,hostname,port,range,spec,into,its,equivalent,addresses;static,transport,address,parse,string,host,port,string,string,default,port,range,int,per,address,limit,throws,unknown,host,exception,objects,require,non,null,host,port,string,string,host,string,port,string,null,if,host,port,string,starts,with,matcher,matcher,matcher,host,port,string,if,matcher,matches,throw,new,illegal,argument,exception,invalid,bracketed,host,port,range,host,port,string,host,matcher,group,1,port,string,matcher,group,2,else,int,colon,pos,host,port,string,index,of,if,colon,pos,0,host,port,string,index,of,colon,pos,1,1,host,host,port,string,substring,0,colon,pos,port,string,host,port,string,substring,colon,pos,1,else,host,host,port,string,if,colon,pos,0,throw,new,illegal,argument,exception,ipv6,addresses,must,be,bracketed,host,port,string,if,port,string,null,port,string,is,empty,port,string,default,port,range,set,inet,address,addresses,new,hash,set,arrays,as,list,inet,address,get,all,by,name,host,list,transport,address,transport,addresses,new,array,list,int,ports,new,ports,range,port,string,ports,int,limit,math,min,ports,length,per,address,limit,for,int,i,0,i,limit,i,for,inet,address,address,addresses,transport,addresses,add,new,transport,address,address,ports,i,return,transport,addresses,to,array,new,transport,address,transport,addresses,size
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1524684173;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1525334055;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1526981569;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1527152864;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1527878678;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1528103657;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1529433467;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1529600205;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1531179852;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1533738061;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1534203100;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1534362961;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1534755962;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1534848846;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else if (message.length() == 0) {_            _            return BYTES_NEEDED_FOR_MESSAGE_SIZE__        } else {_            try {_                messageReceived(message, channel)__            } catch (Exception e) {_                onException(channel, e)__            }_            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,if,message,length,0,return,else,try,message,received,message,channel,catch,exception,e,on,exception,channel,e,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1536218260;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be a HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,a,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1537300661;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1537806831;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1540583181;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1540847035;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1541008027;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1541197879;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1541552300;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1541698679;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1541783569;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1542646292;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1543334894;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1543506953;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1543602642;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1544554541;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1544569768;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1544632755;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1544823664;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1545412440;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1547625930;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1548103856;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1548105258;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1548953505;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1550509800;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException;1551232478;Consumes bytes that are available from network reads. This method returns the number of bytes consumed_in this call.__@param channel        the channel read from_@param bytesReference the bytes available to consume_@return the number of bytes consumed_@throws StreamCorruptedException              if the message header format is not recognized_@throws TcpTransport.HttpOnTransportException if the message header appears to be an HTTP message_@throws IllegalArgumentException              if the message length is greater that the maximum allowed frame size._This is dependent on the available memory.;public int consumeNetworkReads(TcpChannel channel, BytesReference bytesReference) throws IOException {_        BytesReference message = decodeFrame(bytesReference)___        if (message == null) {_            return 0__        } else {_            inboundMessage(channel, message)__            return message.length() + BYTES_NEEDED_FOR_MESSAGE_SIZE__        }_    };consumes,bytes,that,are,available,from,network,reads,this,method,returns,the,number,of,bytes,consumed,in,this,call,param,channel,the,channel,read,from,param,bytes,reference,the,bytes,available,to,consume,return,the,number,of,bytes,consumed,throws,stream,corrupted,exception,if,the,message,header,format,is,not,recognized,throws,tcp,transport,http,on,transport,exception,if,the,message,header,appears,to,be,an,http,message,throws,illegal,argument,exception,if,the,message,length,is,greater,that,the,maximum,allowed,frame,size,this,is,dependent,on,the,available,memory;public,int,consume,network,reads,tcp,channel,channel,bytes,reference,bytes,reference,throws,ioexception,bytes,reference,message,decode,frame,bytes,reference,if,message,null,return,0,else,inbound,message,channel,message,return,message,length
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1524684173;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1525334055;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1526981569;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1527152864;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1527878678;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1528103657;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1529433467;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1529600205;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1531179852;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1533738061;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1534203100;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1534362961;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1534755962;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1534848846;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1536218260;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1537300661;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1537806831;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1540583181;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1540847035;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1541008027;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1541197879;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1541552300;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1541698679;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1541783569;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1542646292;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1543334894;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1543506953;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1543602642;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1544554541;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1544569768;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1544632755;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1544823664;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1545412440;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1547625930;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,                                         CompressibleBytesOutputStream stream) throws IOException;1548103856;Serializes the given message into a bytes representation;private BytesReference buildMessage(long requestId, byte status, Version nodeVersion, TransportMessage message,_                                        CompressibleBytesOutputStream stream) throws IOException {_        final BytesReference zeroCopyBuffer__        if (message instanceof BytesTransportRequest) { _            BytesTransportRequest bRequest = (BytesTransportRequest) message__            assert nodeVersion.equals(bRequest.version())__            bRequest.writeThin(stream)__            zeroCopyBuffer = bRequest.bytes__        } else {_            message.writeTo(stream)__            zeroCopyBuffer = BytesArray.EMPTY__        }_        _        _        _        _        _        final BytesReference messageBody = stream.materializeBytes()__        final BytesReference header = buildHeader(requestId, status, stream.getVersion(), messageBody.length() + zeroCopyBuffer.length())__        return new CompositeBytesReference(header, messageBody, zeroCopyBuffer)__    };serializes,the,given,message,into,a,bytes,representation;private,bytes,reference,build,message,long,request,id,byte,status,version,node,version,transport,message,message,compressible,bytes,output,stream,stream,throws,ioexception,final,bytes,reference,zero,copy,buffer,if,message,instanceof,bytes,transport,request,bytes,transport,request,b,request,bytes,transport,request,message,assert,node,version,equals,b,request,version,b,request,write,thin,stream,zero,copy,buffer,b,request,bytes,else,message,write,to,stream,zero,copy,buffer,bytes,array,empty,final,bytes,reference,message,body,stream,materialize,bytes,final,bytes,reference,header,build,header,request,id,status,stream,get,version,message,body,length,zero,copy,buffer,length,return,new,composite,bytes,reference,header,message,body,zero,copy,buffer
TcpTransport -> protected void onNonChannelException(Exception exception);1526981569;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1527152864;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1527878678;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1528103657;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1529433467;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1529600205;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1531179852;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1533738061;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1534203100;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1534362961;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1534755962;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1534848846;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1536218260;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1537300661;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1537806831;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1540583181;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1540847035;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1541008027;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1541197879;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1541552300;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1541698679;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1541783569;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1542646292;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1543334894;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1543506953;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1543602642;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1544554541;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1544569768;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1544632755;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1544823664;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1545412440;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> protected void onNonChannelException(Exception exception);1547625930;Exception handler for exceptions that are not associated with a specific channel.__@param exception the exception;protected void onNonChannelException(Exception exception) {_        logger.warn(new ParameterizedMessage("exception caught on transport layer [thread={}]", Thread.currentThread().getName()),_            exception)__    };exception,handler,for,exceptions,that,are,not,associated,with,a,specific,channel,param,exception,the,exception;protected,void,on,non,channel,exception,exception,exception,logger,warn,new,parameterized,message,exception,caught,on,transport,layer,thread,thread,current,thread,get,name,exception
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1544632755;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1544823664;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1545412440;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1547625930;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1548103856;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, (byte) 0)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,byte,0
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1548105258;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, false)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,false
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1548953505;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, false)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,false
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1550509800;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, false)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,false
TcpTransport -> public void sendResponse(         final Version nodeVersion,         final Set<String> features,         final TcpChannel channel,         final TransportResponse response,         final long requestId,         final String action,         final boolean compress) throws IOException;1551232478;Sends the response to the given channel. This method should be used to send {@link TransportResponse} objects back to the caller.__@see #sendErrorResponse(Version, Set, TcpChannel, Exception, long, String) for sending back errors to the caller;public void sendResponse(_        final Version nodeVersion,_        final Set<String> features,_        final TcpChannel channel,_        final TransportResponse response,_        final long requestId,_        final String action,_        final boolean compress) throws IOException {_        sendResponse(nodeVersion, features, channel, response, requestId, action, compress, false)__    };sends,the,response,to,the,given,channel,this,method,should,be,used,to,send,link,transport,response,objects,back,to,the,caller,see,send,error,response,version,set,tcp,channel,exception,long,string,for,sending,back,errors,to,the,caller;public,void,send,response,final,version,node,version,final,set,string,features,final,tcp,channel,channel,final,transport,response,response,final,long,request,id,final,string,action,final,boolean,compress,throws,ioexception,send,response,node,version,features,channel,response,request,id,action,compress,false
