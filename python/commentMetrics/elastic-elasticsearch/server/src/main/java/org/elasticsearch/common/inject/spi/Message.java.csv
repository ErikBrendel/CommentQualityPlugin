commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public String getSource() {     return sources.isEmpty() ? SourceProvider.UNKNOWN_SOURCE.toString() : Errors.convert(sources.get(sources.size() - 1)).toString(). }
true;public;0;3;/**  * @since 2.0  */ ;/**  * @since 2.0  */ public List<Object> getSources() {     return sources. }
true;public;0;3;/**  * Gets the error message text.  */ ;/**  * Gets the error message text.  */ public String getMessage() {     return message. }
true;public;1;4;/**  * @since 2.0  */ ;/**  * @since 2.0  */ @Override public <T> T acceptVisitor(ElementVisitor<T> visitor) {     return visitor.visit(this). }
true;public;0;3;/**  * Returns the throwable that caused this message, or {@code null} if this  * message was not caused by a throwable.  *  * @since 2.0  */ ;/**  * Returns the throwable that caused this message, or {@code null} if this  * message was not caused by a throwable.  *  * @since 2.0  */ public Throwable getCause() {     return cause. }
false;public;0;4;;@Override public String toString() {     return message. }
false;public;0;4;;@Override public int hashCode() {     return message.hashCode(). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (!(o instanceof Message)) {         return false.     }     Message e = (Message) o.     return message.equals(e.message) && Objects.equals(cause, e.cause) && sources.equals(e.sources). }
true;public;1;4;/**  * @since 2.0  */ ;/**  * @since 2.0  */ @Override public void applyTo(Binder binder) {     binder.withSource(getSource()).addError(this). }
