commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void writeTermTypeInfoTo(StreamOutput out) throws IOException { // Nothing to write }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;4;;@Override public String getType() {     return StringTerms.NAME. }
false;public;1;4;;@Override public UnmappedTerms create(List<Bucket> buckets) {     return new UnmappedTerms(name, order, requiredSize, minDocCount, pipelineAggregators(), metaData). }
false;public;2;4;;@Override public Bucket createBucket(InternalAggregations aggregations, Bucket prototype) {     throw new UnsupportedOperationException("not supported for UnmappedTerms"). }
false;protected;4;4;;@Override protected UnmappedTerms create(String name, List<Bucket> buckets, long docCountError, long otherDocCount) {     throw new UnsupportedOperationException("not supported for UnmappedTerms"). }
false;public;2;4;;@Override public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     return new UnmappedTerms(name, order, requiredSize, minDocCount, pipelineAggregators(), metaData). }
false;public;0;4;;@Override public boolean isMapped() {     return false. }
false;public,final;2;4;;@Override public final XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     return doXContentCommon(builder, params, 0, 0, Collections.emptyList()). }
false;protected;1;3;;@Override protected void setDocCountError(long docCountError) { }
false;protected;0;4;;@Override protected int getShardSize() {     return 0. }
false;public;0;4;;@Override public long getDocCountError() {     return 0. }
false;public;0;4;;@Override public long getSumOfOtherDocCounts() {     return 0. }
false;public;0;4;;@Override public List<Bucket> getBuckets() {     return emptyList(). }
false;public;1;4;;@Override public Bucket getBucketByKey(String term) {     return null. }
false;protected;1;4;;@Override protected Bucket[] createBucketsArray(int size) {     return new Bucket[size]. }
