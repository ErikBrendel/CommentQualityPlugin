commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns a {@link Releasable} implementation of a  * {@link org.elasticsearch.common.bytes.BytesReference} that represents the current state of  * the bytes in the stream.  */ ;/**  * Returns a {@link Releasable} implementation of a  * {@link org.elasticsearch.common.bytes.BytesReference} that represents the current state of  * the bytes in the stream.  */ @Override public ReleasablePagedBytesReference bytes() {     return new ReleasablePagedBytesReference(bytes, count, releasable). }
false;public;0;4;;@Override public void close() {     Releasables.close(releasable). }
false;;1;9;;@Override void ensureCapacity(long offset) {     final ByteArray prevBytes = this.bytes.     super.ensureCapacity(offset).     if (prevBytes != this.bytes) {         // re-create the releasable with the new reference         releasable = Releasables.releaseOnce(this.bytes).     } }
false;public;0;9;;@Override public void reset() {     final ByteArray prevBytes = this.bytes.     super.reset().     if (prevBytes != this.bytes) {         // re-create the releasable with the new reference         releasable = Releasables.releaseOnce(this.bytes).     } }
