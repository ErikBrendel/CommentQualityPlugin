commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public void updateGlobalCheckpointForShard(final ShardId shardId) {     final ThreadContext threadContext = threadPool.getThreadContext().     try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {         threadContext.markAsSystemContext().         execute(new Request(shardId), ActionListener.wrap(r -> {         }, e -> {             if (ExceptionsHelper.unwrap(e, AlreadyClosedException.class, IndexShardClosedException.class) == null) {                 logger.info(new ParameterizedMessage("{} global checkpoint sync failed", shardId), e).             }         })).     } }
false;protected;0;4;;@Override protected ReplicationResponse newResponseInstance() {     return new ReplicationResponse(). }
false;protected;3;12;;@Override protected void sendReplicaRequest(final ConcreteReplicaRequest<Request> replicaRequest, final DiscoveryNode node, final ActionListener<ReplicationOperation.ReplicaResponse> listener) {     if (node.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         super.sendReplicaRequest(replicaRequest, node, listener).     } else {         final long pre60NodeCheckpoint = SequenceNumbers.PRE_60_NODE_CHECKPOINT.         listener.onResponse(new ReplicaResponse(pre60NodeCheckpoint, pre60NodeCheckpoint)).     } }
false;protected;2;6;;@Override protected PrimaryResult<Request, ReplicationResponse> shardOperationOnPrimary(final Request request, final IndexShard indexShard) throws Exception {     maybeSyncTranslog(indexShard).     return new PrimaryResult<>(request, new ReplicationResponse()). }
false;protected;2;5;;@Override protected ReplicaResult shardOperationOnReplica(final Request request, final IndexShard indexShard) throws Exception {     maybeSyncTranslog(indexShard).     return new ReplicaResult(). }
false;private;1;6;;private void maybeSyncTranslog(final IndexShard indexShard) throws IOException {     if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && indexShard.getLastSyncedGlobalCheckpoint() < indexShard.getGlobalCheckpoint()) {         indexShard.sync().     } }
false;public;0;9;;@Override public String toString() {     return "GlobalCheckpointSyncAction.Request{" + "shardId=" + shardId + ", timeout=" + timeout + ", index='" + index + '\'' + ", waitForActiveShards=" + waitForActiveShards + "}". }
