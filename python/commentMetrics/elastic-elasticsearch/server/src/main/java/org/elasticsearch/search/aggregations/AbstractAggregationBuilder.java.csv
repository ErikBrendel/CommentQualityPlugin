commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;7;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     factoriesBuilder.writeTo(out).     out.writeMap(metaData).     doWriteTo(out). }
false;protected,abstract;1;1;;protected abstract void doWriteTo(StreamOutput out) throws IOException.
false;public;1;9;;@SuppressWarnings("unchecked") @Override public AB subAggregation(AggregationBuilder aggregation) {     if (aggregation == null) {         throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]").     }     factoriesBuilder.addAggregator(aggregation).     return (AB) this. }
true;public;1;9;/**  * Add a sub aggregation to this aggregation.  */ ;/**  * Add a sub aggregation to this aggregation.  */ @SuppressWarnings("unchecked") @Override public AB subAggregation(PipelineAggregationBuilder aggregation) {     if (aggregation == null) {         throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]").     }     factoriesBuilder.addPipelineAggregator(aggregation).     return (AB) this. }
true;public;1;9;/**  * Registers sub-factories with this factory. The sub-factory will be  * responsible for the creation of sub-aggregators under the aggregator  * created by this factory.  *  * @param subFactories  *            The sub-factories  * @return this factory (fluent interface)  */ ;/**  * Registers sub-factories with this factory. The sub-factory will be  * responsible for the creation of sub-aggregators under the aggregator  * created by this factory.  *  * @param subFactories  *            The sub-factories  * @return this factory (fluent interface)  */ @SuppressWarnings("unchecked") @Override public AB subAggregations(AggregatorFactories.Builder subFactories) {     if (subFactories == null) {         throw new IllegalArgumentException("[subFactories] must not be null: [" + name + "]").     }     this.factoriesBuilder = subFactories.     return (AB) this. }
false;public;1;9;;@SuppressWarnings("unchecked") @Override public AB setMetaData(Map<String, Object> metaData) {     if (metaData == null) {         throw new IllegalArgumentException("[metaData] must not be null: [" + name + "]").     }     this.metaData = metaData.     return (AB) this. }
false;public;0;4;;@Override public Map<String, Object> getMetaData() {     return metaData == null ? Collections.emptyMap() : Collections.unmodifiableMap(metaData). }
false;public,final;0;5;;@Override public final String getWriteableName() {     // We always use the type of the aggregation as the writeable name     return getType(). }
false;public,final;2;5;;@Override public final AggregatorFactory<?> build(SearchContext context, AggregatorFactory<?> parent) throws IOException {     AggregatorFactory<?> factory = doBuild(context, parent, factoriesBuilder).     return factory. }
false;protected,abstract;3;2;;protected abstract AggregatorFactory<?> doBuild(SearchContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subfactoriesBuilder) throws IOException.
false;public,final;2;16;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(name).     if (this.metaData != null) {         builder.field("meta", this.metaData).     }     builder.field(getType()).     internalXContent(builder, params).     if (factoriesBuilder != null && (factoriesBuilder.count()) > 0) {         builder.field("aggregations").         factoriesBuilder.toXContent(builder, params).     }     return builder.endObject(). }
false;protected,abstract;2;1;;protected abstract XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException.
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(factoriesBuilder, metaData, name, doHashCode()). }
false;protected,abstract;0;1;;protected abstract int doHashCode().
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == null)         return false.     if (getClass() != obj.getClass())         return false.     @SuppressWarnings("unchecked")     AbstractAggregationBuilder<AB> other = (AbstractAggregationBuilder<AB>) obj.     if (!Objects.equals(name, other.name))         return false.     if (!Objects.equals(metaData, other.metaData))         return false.     if (!Objects.equals(factoriesBuilder, other.factoriesBuilder))         return false.     return doEquals(obj). }
false;protected,abstract;1;1;;protected abstract boolean doEquals(Object obj).
