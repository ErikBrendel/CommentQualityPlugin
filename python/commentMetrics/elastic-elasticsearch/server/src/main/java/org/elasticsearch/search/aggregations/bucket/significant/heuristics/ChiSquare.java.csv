commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean equals(Object other) {     if (!(other instanceof ChiSquare)) {         return false.     }     return super.equals(other). }
false;public;0;6;;@Override public int hashCode() {     int result = NAME.hashCode().     result = 31 * result + super.hashCode().     return result. }
true;public;4;11;/**  * Calculates Chi^2  * see "Information Retrieval", Manning et al., Eq. 13.19  */ ;/**  * Calculates Chi^2  * see "Information Retrieval", Manning et al., Eq. 13.19  */ @Override public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {     Frequencies frequencies = computeNxys(subsetFreq, subsetSize, supersetFreq, supersetSize, "ChiSquare").     // here we check if the term appears more often in subset than in background without subset.     if (!includeNegatives && frequencies.N11 / frequencies.N_1 < frequencies.N10 / frequencies.N_0) {         return Double.NEGATIVE_INFINITY.     }     return (frequencies.N * Math.pow((frequencies.N11 * frequencies.N00 - frequencies.N01 * frequencies.N10), 2.0) / ((frequencies.N_1) * (frequencies.N1_) * (frequencies.N0_) * (frequencies.N_0))). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     super.build(builder).     builder.endObject().     return builder. }
false;protected;2;4;;@Override protected SignificanceHeuristic newHeuristic(boolean includeNegatives, boolean backgroundIsSuperset) {     return new ChiSquare(includeNegatives, backgroundIsSuperset). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     super.build(builder).     builder.endObject().     return builder. }
