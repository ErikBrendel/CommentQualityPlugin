commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final Settings settings() {     return this.settings. }
false;public,final;0;4;;@Override public final ThreadPool threadPool() {     return this.threadPool. }
false;public,final;0;4;;@Override public final AdminClient admin() {     return admin. }
false;public,final;2;7;;@Override public final <Request extends ActionRequest, Response extends ActionResponse> ActionFuture<Response> execute(Action<Response> action, Request request) {     PlainActionFuture<Response> actionFuture = PlainActionFuture.newFuture().     execute(action, request, actionFuture).     return actionFuture. }
true;public,final;3;6;/**  * This is the single execution point of *all* clients.  */ ;/**  * This is the single execution point of *all* clients.  */ @Override public final <Request extends ActionRequest, Response extends ActionResponse> void execute(Action<Response> action, Request request, ActionListener<Response> listener) {     listener = threadedWrapper.wrap(listener).     doExecute(action, request, listener). }
false;protected,abstract;3;2;;protected abstract <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener).
false;public;1;4;;@Override public ActionFuture<IndexResponse> index(final IndexRequest request) {     return execute(IndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void index(final IndexRequest request, final ActionListener<IndexResponse> listener) {     execute(IndexAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public IndexRequestBuilder prepareIndex() {     return new IndexRequestBuilder(this, IndexAction.INSTANCE, null). }
false;public;2;4;;@Override public IndexRequestBuilder prepareIndex(String index, String type) {     return prepareIndex(index, type, null). }
false;public;3;4;;@Override public IndexRequestBuilder prepareIndex(String index, String type, @Nullable String id) {     return prepareIndex().setIndex(index).setType(type).setId(id). }
false;public;1;4;;@Override public ActionFuture<UpdateResponse> update(final UpdateRequest request) {     return execute(UpdateAction.INSTANCE, request). }
false;public;2;4;;@Override public void update(final UpdateRequest request, final ActionListener<UpdateResponse> listener) {     execute(UpdateAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public UpdateRequestBuilder prepareUpdate() {     return new UpdateRequestBuilder(this, UpdateAction.INSTANCE, null, null, null). }
false;public;3;4;;@Override public UpdateRequestBuilder prepareUpdate(String index, String type, String id) {     return new UpdateRequestBuilder(this, UpdateAction.INSTANCE, index, type, id). }
false;public;1;4;;@Override public ActionFuture<DeleteResponse> delete(final DeleteRequest request) {     return execute(DeleteAction.INSTANCE, request). }
false;public;2;4;;@Override public void delete(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {     execute(DeleteAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public DeleteRequestBuilder prepareDelete() {     return new DeleteRequestBuilder(this, DeleteAction.INSTANCE, null). }
false;public;3;4;;@Override public DeleteRequestBuilder prepareDelete(String index, String type, String id) {     return prepareDelete().setIndex(index).setType(type).setId(id). }
false;public;1;4;;@Override public ActionFuture<BulkResponse> bulk(final BulkRequest request) {     return execute(BulkAction.INSTANCE, request). }
false;public;2;4;;@Override public void bulk(final BulkRequest request, final ActionListener<BulkResponse> listener) {     execute(BulkAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public BulkRequestBuilder prepareBulk() {     return new BulkRequestBuilder(this, BulkAction.INSTANCE). }
false;public;2;4;;@Override public BulkRequestBuilder prepareBulk(@Nullable String globalIndex, @Nullable String globalType) {     return new BulkRequestBuilder(this, BulkAction.INSTANCE, globalIndex, globalType). }
false;public;1;4;;@Override public ActionFuture<GetResponse> get(final GetRequest request) {     return execute(GetAction.INSTANCE, request). }
false;public;2;4;;@Override public void get(final GetRequest request, final ActionListener<GetResponse> listener) {     execute(GetAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public GetRequestBuilder prepareGet() {     return new GetRequestBuilder(this, GetAction.INSTANCE, null). }
false;public;3;4;;@Override public GetRequestBuilder prepareGet(String index, String type, String id) {     return prepareGet().setIndex(index).setType(type).setId(id). }
false;public;1;4;;@Override public ActionFuture<MultiGetResponse> multiGet(final MultiGetRequest request) {     return execute(MultiGetAction.INSTANCE, request). }
false;public;2;4;;@Override public void multiGet(final MultiGetRequest request, final ActionListener<MultiGetResponse> listener) {     execute(MultiGetAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public MultiGetRequestBuilder prepareMultiGet() {     return new MultiGetRequestBuilder(this, MultiGetAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<SearchResponse> search(final SearchRequest request) {     return execute(SearchAction.INSTANCE, request). }
false;public;2;4;;@Override public void search(final SearchRequest request, final ActionListener<SearchResponse> listener) {     execute(SearchAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public SearchRequestBuilder prepareSearch(String... indices) {     return new SearchRequestBuilder(this, SearchAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<SearchResponse> searchScroll(final SearchScrollRequest request) {     return execute(SearchScrollAction.INSTANCE, request). }
false;public;2;4;;@Override public void searchScroll(final SearchScrollRequest request, final ActionListener<SearchResponse> listener) {     execute(SearchScrollAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public SearchScrollRequestBuilder prepareSearchScroll(String scrollId) {     return new SearchScrollRequestBuilder(this, SearchScrollAction.INSTANCE, scrollId). }
false;public;1;4;;@Override public ActionFuture<MultiSearchResponse> multiSearch(MultiSearchRequest request) {     return execute(MultiSearchAction.INSTANCE, request). }
false;public;2;4;;@Override public void multiSearch(MultiSearchRequest request, ActionListener<MultiSearchResponse> listener) {     execute(MultiSearchAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public MultiSearchRequestBuilder prepareMultiSearch() {     return new MultiSearchRequestBuilder(this, MultiSearchAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<TermVectorsResponse> termVectors(final TermVectorsRequest request) {     return execute(TermVectorsAction.INSTANCE, request). }
false;public;2;4;;@Override public void termVectors(final TermVectorsRequest request, final ActionListener<TermVectorsResponse> listener) {     execute(TermVectorsAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public TermVectorsRequestBuilder prepareTermVectors() {     return new TermVectorsRequestBuilder(this, TermVectorsAction.INSTANCE). }
false;public;3;4;;@Override public TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id) {     return new TermVectorsRequestBuilder(this, TermVectorsAction.INSTANCE, index, type, id). }
false;public;1;4;;@Override public ActionFuture<MultiTermVectorsResponse> multiTermVectors(final MultiTermVectorsRequest request) {     return execute(MultiTermVectorsAction.INSTANCE, request). }
false;public;2;4;;@Override public void multiTermVectors(final MultiTermVectorsRequest request, final ActionListener<MultiTermVectorsResponse> listener) {     execute(MultiTermVectorsAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public MultiTermVectorsRequestBuilder prepareMultiTermVectors() {     return new MultiTermVectorsRequestBuilder(this, MultiTermVectorsAction.INSTANCE). }
false;public;3;4;;@Override public ExplainRequestBuilder prepareExplain(String index, String type, String id) {     return new ExplainRequestBuilder(this, ExplainAction.INSTANCE, index, type, id). }
false;public;1;4;;@Override public ActionFuture<ExplainResponse> explain(ExplainRequest request) {     return execute(ExplainAction.INSTANCE, request). }
false;public;2;4;;@Override public void explain(ExplainRequest request, ActionListener<ExplainResponse> listener) {     execute(ExplainAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public void clearScroll(ClearScrollRequest request, ActionListener<ClearScrollResponse> listener) {     execute(ClearScrollAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<ClearScrollResponse> clearScroll(ClearScrollRequest request) {     return execute(ClearScrollAction.INSTANCE, request). }
false;public;0;4;;@Override public ClearScrollRequestBuilder prepareClearScroll() {     return new ClearScrollRequestBuilder(this, ClearScrollAction.INSTANCE). }
false;public;2;4;;@Override public void fieldCaps(FieldCapabilitiesRequest request, ActionListener<FieldCapabilitiesResponse> listener) {     execute(FieldCapabilitiesAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<FieldCapabilitiesResponse> fieldCaps(FieldCapabilitiesRequest request) {     return execute(FieldCapabilitiesAction.INSTANCE, request). }
false;public;1;4;;@Override public FieldCapabilitiesRequestBuilder prepareFieldCaps(String... indices) {     return new FieldCapabilitiesRequestBuilder(this, FieldCapabilitiesAction.INSTANCE, indices). }
false;public;0;4;;@Override public ClusterAdminClient cluster() {     return clusterAdmin. }
false;public;0;4;;@Override public IndicesAdminClient indices() {     return indicesAdmin. }
false;public;2;5;;@Override public <Request extends ActionRequest, Response extends ActionResponse> ActionFuture<Response> execute(Action<Response> action, Request request) {     return client.execute(action, request). }
false;public;3;5;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void execute(Action<Response> action, Request request, ActionListener<Response> listener) {     client.execute(action, request, listener). }
false;public;0;4;;@Override public ThreadPool threadPool() {     return client.threadPool(). }
false;public;1;4;;@Override public ActionFuture<ClusterHealthResponse> health(final ClusterHealthRequest request) {     return execute(ClusterHealthAction.INSTANCE, request). }
false;public;2;4;;@Override public void health(final ClusterHealthRequest request, final ActionListener<ClusterHealthResponse> listener) {     execute(ClusterHealthAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ClusterHealthRequestBuilder prepareHealth(String... indices) {     return new ClusterHealthRequestBuilder(this, ClusterHealthAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<ClusterStateResponse> state(final ClusterStateRequest request) {     return execute(ClusterStateAction.INSTANCE, request). }
false;public;2;4;;@Override public void state(final ClusterStateRequest request, final ActionListener<ClusterStateResponse> listener) {     execute(ClusterStateAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public ClusterStateRequestBuilder prepareState() {     return new ClusterStateRequestBuilder(this, ClusterStateAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<ClusterRerouteResponse> reroute(final ClusterRerouteRequest request) {     return execute(ClusterRerouteAction.INSTANCE, request). }
false;public;2;4;;@Override public void reroute(final ClusterRerouteRequest request, final ActionListener<ClusterRerouteResponse> listener) {     execute(ClusterRerouteAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public ClusterRerouteRequestBuilder prepareReroute() {     return new ClusterRerouteRequestBuilder(this, ClusterRerouteAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<ClusterUpdateSettingsResponse> updateSettings(final ClusterUpdateSettingsRequest request) {     return execute(ClusterUpdateSettingsAction.INSTANCE, request). }
false;public;2;5;;@Override public void updateSettings(final ClusterUpdateSettingsRequest request, final ActionListener<ClusterUpdateSettingsResponse> listener) {     execute(ClusterUpdateSettingsAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public ClusterUpdateSettingsRequestBuilder prepareUpdateSettings() {     return new ClusterUpdateSettingsRequestBuilder(this, ClusterUpdateSettingsAction.INSTANCE). }
false;public;0;4;;@Override public NodesReloadSecureSettingsRequestBuilder prepareReloadSecureSettings() {     return new NodesReloadSecureSettingsRequestBuilder(this, NodesReloadSecureSettingsAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<NodesInfoResponse> nodesInfo(final NodesInfoRequest request) {     return execute(NodesInfoAction.INSTANCE, request). }
false;public;2;4;;@Override public void nodesInfo(final NodesInfoRequest request, final ActionListener<NodesInfoResponse> listener) {     execute(NodesInfoAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public NodesInfoRequestBuilder prepareNodesInfo(String... nodesIds) {     return new NodesInfoRequestBuilder(this, NodesInfoAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<NodesStatsResponse> nodesStats(final NodesStatsRequest request) {     return execute(NodesStatsAction.INSTANCE, request). }
false;public;2;4;;@Override public void nodesStats(final NodesStatsRequest request, final ActionListener<NodesStatsResponse> listener) {     execute(NodesStatsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public NodesStatsRequestBuilder prepareNodesStats(String... nodesIds) {     return new NodesStatsRequestBuilder(this, NodesStatsAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<NodesUsageResponse> nodesUsage(final NodesUsageRequest request) {     return execute(NodesUsageAction.INSTANCE, request). }
false;public;2;4;;@Override public void nodesUsage(final NodesUsageRequest request, final ActionListener<NodesUsageResponse> listener) {     execute(NodesUsageAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public NodesUsageRequestBuilder prepareNodesUsage(String... nodesIds) {     return new NodesUsageRequestBuilder(this, NodesUsageAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<ClusterStatsResponse> clusterStats(ClusterStatsRequest request) {     return execute(ClusterStatsAction.INSTANCE, request). }
false;public;2;4;;@Override public void clusterStats(ClusterStatsRequest request, ActionListener<ClusterStatsResponse> listener) {     execute(ClusterStatsAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public ClusterStatsRequestBuilder prepareClusterStats() {     return new ClusterStatsRequestBuilder(this, ClusterStatsAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<NodesHotThreadsResponse> nodesHotThreads(NodesHotThreadsRequest request) {     return execute(NodesHotThreadsAction.INSTANCE, request). }
false;public;2;4;;@Override public void nodesHotThreads(NodesHotThreadsRequest request, ActionListener<NodesHotThreadsResponse> listener) {     execute(NodesHotThreadsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public NodesHotThreadsRequestBuilder prepareNodesHotThreads(String... nodesIds) {     return new NodesHotThreadsRequestBuilder(this, NodesHotThreadsAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<ListTasksResponse> listTasks(final ListTasksRequest request) {     return execute(ListTasksAction.INSTANCE, request). }
false;public;2;4;;@Override public void listTasks(final ListTasksRequest request, final ActionListener<ListTasksResponse> listener) {     execute(ListTasksAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ListTasksRequestBuilder prepareListTasks(String... nodesIds) {     return new ListTasksRequestBuilder(this, ListTasksAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<GetTaskResponse> getTask(final GetTaskRequest request) {     return execute(GetTaskAction.INSTANCE, request). }
false;public;2;4;;@Override public void getTask(final GetTaskRequest request, final ActionListener<GetTaskResponse> listener) {     execute(GetTaskAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetTaskRequestBuilder prepareGetTask(String taskId) {     return prepareGetTask(new TaskId(taskId)). }
false;public;1;4;;@Override public GetTaskRequestBuilder prepareGetTask(TaskId taskId) {     return new GetTaskRequestBuilder(this, GetTaskAction.INSTANCE).setTaskId(taskId). }
false;public;1;4;;@Override public ActionFuture<CancelTasksResponse> cancelTasks(CancelTasksRequest request) {     return execute(CancelTasksAction.INSTANCE, request). }
false;public;2;4;;@Override public void cancelTasks(CancelTasksRequest request, ActionListener<CancelTasksResponse> listener) {     execute(CancelTasksAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public CancelTasksRequestBuilder prepareCancelTasks(String... nodesIds) {     return new CancelTasksRequestBuilder(this, CancelTasksAction.INSTANCE).setNodesIds(nodesIds). }
false;public;1;4;;@Override public ActionFuture<ClusterSearchShardsResponse> searchShards(final ClusterSearchShardsRequest request) {     return execute(ClusterSearchShardsAction.INSTANCE, request). }
false;public;2;4;;@Override public void searchShards(final ClusterSearchShardsRequest request, final ActionListener<ClusterSearchShardsResponse> listener) {     execute(ClusterSearchShardsAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public ClusterSearchShardsRequestBuilder prepareSearchShards() {     return new ClusterSearchShardsRequestBuilder(this, ClusterSearchShardsAction.INSTANCE). }
false;public;1;4;;@Override public ClusterSearchShardsRequestBuilder prepareSearchShards(String... indices) {     return new ClusterSearchShardsRequestBuilder(this, ClusterSearchShardsAction.INSTANCE).setIndices(indices). }
false;public;0;4;;@Override public PendingClusterTasksRequestBuilder preparePendingClusterTasks() {     return new PendingClusterTasksRequestBuilder(this, PendingClusterTasksAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<PendingClusterTasksResponse> pendingClusterTasks(PendingClusterTasksRequest request) {     return execute(PendingClusterTasksAction.INSTANCE, request). }
false;public;2;4;;@Override public void pendingClusterTasks(PendingClusterTasksRequest request, ActionListener<PendingClusterTasksResponse> listener) {     execute(PendingClusterTasksAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> putRepository(PutRepositoryRequest request) {     return execute(PutRepositoryAction.INSTANCE, request). }
false;public;2;4;;@Override public void putRepository(PutRepositoryRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(PutRepositoryAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public PutRepositoryRequestBuilder preparePutRepository(String name) {     return new PutRepositoryRequestBuilder(this, PutRepositoryAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<CreateSnapshotResponse> createSnapshot(CreateSnapshotRequest request) {     return execute(CreateSnapshotAction.INSTANCE, request). }
false;public;2;4;;@Override public void createSnapshot(CreateSnapshotRequest request, ActionListener<CreateSnapshotResponse> listener) {     execute(CreateSnapshotAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public CreateSnapshotRequestBuilder prepareCreateSnapshot(String repository, String name) {     return new CreateSnapshotRequestBuilder(this, CreateSnapshotAction.INSTANCE, repository, name). }
false;public;1;4;;@Override public ActionFuture<GetSnapshotsResponse> getSnapshots(GetSnapshotsRequest request) {     return execute(GetSnapshotsAction.INSTANCE, request). }
false;public;2;4;;@Override public void getSnapshots(GetSnapshotsRequest request, ActionListener<GetSnapshotsResponse> listener) {     execute(GetSnapshotsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetSnapshotsRequestBuilder prepareGetSnapshots(String repository) {     return new GetSnapshotsRequestBuilder(this, GetSnapshotsAction.INSTANCE, repository). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> deleteSnapshot(DeleteSnapshotRequest request) {     return execute(DeleteSnapshotAction.INSTANCE, request). }
false;public;2;4;;@Override public void deleteSnapshot(DeleteSnapshotRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(DeleteSnapshotAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public DeleteSnapshotRequestBuilder prepareDeleteSnapshot(String repository, String name) {     return new DeleteSnapshotRequestBuilder(this, DeleteSnapshotAction.INSTANCE, repository, name). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> deleteRepository(DeleteRepositoryRequest request) {     return execute(DeleteRepositoryAction.INSTANCE, request). }
false;public;2;4;;@Override public void deleteRepository(DeleteRepositoryRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(DeleteRepositoryAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public DeleteRepositoryRequestBuilder prepareDeleteRepository(String name) {     return new DeleteRepositoryRequestBuilder(this, DeleteRepositoryAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<VerifyRepositoryResponse> verifyRepository(VerifyRepositoryRequest request) {     return execute(VerifyRepositoryAction.INSTANCE, request). }
false;public;2;4;;@Override public void verifyRepository(VerifyRepositoryRequest request, ActionListener<VerifyRepositoryResponse> listener) {     execute(VerifyRepositoryAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public VerifyRepositoryRequestBuilder prepareVerifyRepository(String name) {     return new VerifyRepositoryRequestBuilder(this, VerifyRepositoryAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<GetRepositoriesResponse> getRepositories(GetRepositoriesRequest request) {     return execute(GetRepositoriesAction.INSTANCE, request). }
false;public;2;4;;@Override public void getRepositories(GetRepositoriesRequest request, ActionListener<GetRepositoriesResponse> listener) {     execute(GetRepositoriesAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetRepositoriesRequestBuilder prepareGetRepositories(String... name) {     return new GetRepositoriesRequestBuilder(this, GetRepositoriesAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<RestoreSnapshotResponse> restoreSnapshot(RestoreSnapshotRequest request) {     return execute(RestoreSnapshotAction.INSTANCE, request). }
false;public;2;4;;@Override public void restoreSnapshot(RestoreSnapshotRequest request, ActionListener<RestoreSnapshotResponse> listener) {     execute(RestoreSnapshotAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public RestoreSnapshotRequestBuilder prepareRestoreSnapshot(String repository, String snapshot) {     return new RestoreSnapshotRequestBuilder(this, RestoreSnapshotAction.INSTANCE, repository, snapshot). }
false;public;1;4;;@Override public ActionFuture<SnapshotsStatusResponse> snapshotsStatus(SnapshotsStatusRequest request) {     return execute(SnapshotsStatusAction.INSTANCE, request). }
false;public;2;4;;@Override public void snapshotsStatus(SnapshotsStatusRequest request, ActionListener<SnapshotsStatusResponse> listener) {     execute(SnapshotsStatusAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository) {     return new SnapshotsStatusRequestBuilder(this, SnapshotsStatusAction.INSTANCE, repository). }
false;public;0;4;;@Override public SnapshotsStatusRequestBuilder prepareSnapshotStatus() {     return new SnapshotsStatusRequestBuilder(this, SnapshotsStatusAction.INSTANCE). }
false;public;2;4;;@Override public void putPipeline(PutPipelineRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(PutPipelineAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> putPipeline(PutPipelineRequest request) {     return execute(PutPipelineAction.INSTANCE, request). }
false;public;3;4;;@Override public PutPipelineRequestBuilder preparePutPipeline(String id, BytesReference source, XContentType xContentType) {     return new PutPipelineRequestBuilder(this, PutPipelineAction.INSTANCE, id, source, xContentType). }
false;public;2;4;;@Override public void deletePipeline(DeletePipelineRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(DeletePipelineAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> deletePipeline(DeletePipelineRequest request) {     return execute(DeletePipelineAction.INSTANCE, request). }
false;public;0;4;;@Override public DeletePipelineRequestBuilder prepareDeletePipeline() {     return new DeletePipelineRequestBuilder(this, DeletePipelineAction.INSTANCE). }
false;public;1;4;;@Override public DeletePipelineRequestBuilder prepareDeletePipeline(String id) {     return new DeletePipelineRequestBuilder(this, DeletePipelineAction.INSTANCE, id). }
false;public;2;4;;@Override public void getPipeline(GetPipelineRequest request, ActionListener<GetPipelineResponse> listener) {     execute(GetPipelineAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<GetPipelineResponse> getPipeline(GetPipelineRequest request) {     return execute(GetPipelineAction.INSTANCE, request). }
false;public;1;4;;@Override public GetPipelineRequestBuilder prepareGetPipeline(String... ids) {     return new GetPipelineRequestBuilder(this, GetPipelineAction.INSTANCE, ids). }
false;public;2;4;;@Override public void simulatePipeline(SimulatePipelineRequest request, ActionListener<SimulatePipelineResponse> listener) {     execute(SimulatePipelineAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<SimulatePipelineResponse> simulatePipeline(SimulatePipelineRequest request) {     return execute(SimulatePipelineAction.INSTANCE, request). }
false;public;2;4;;@Override public SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source, XContentType xContentType) {     return new SimulatePipelineRequestBuilder(this, SimulatePipelineAction.INSTANCE, source, xContentType). }
false;public;2;4;;@Override public void allocationExplain(ClusterAllocationExplainRequest request, ActionListener<ClusterAllocationExplainResponse> listener) {     execute(ClusterAllocationExplainAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<ClusterAllocationExplainResponse> allocationExplain(ClusterAllocationExplainRequest request) {     return execute(ClusterAllocationExplainAction.INSTANCE, request). }
false;public;0;4;;@Override public ClusterAllocationExplainRequestBuilder prepareAllocationExplain() {     return new ClusterAllocationExplainRequestBuilder(this, ClusterAllocationExplainAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<GetStoredScriptResponse> getStoredScript(final GetStoredScriptRequest request) {     return execute(GetStoredScriptAction.INSTANCE, request). }
false;public;2;4;;@Override public void getStoredScript(final GetStoredScriptRequest request, final ActionListener<GetStoredScriptResponse> listener) {     execute(GetStoredScriptAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public GetStoredScriptRequestBuilder prepareGetStoredScript() {     return new GetStoredScriptRequestBuilder(this, GetStoredScriptAction.INSTANCE). }
false;public;1;4;;@Override public GetStoredScriptRequestBuilder prepareGetStoredScript(String id) {     return prepareGetStoredScript().setId(id). }
false;public;0;4;;@Override public PutStoredScriptRequestBuilder preparePutStoredScript() {     return new PutStoredScriptRequestBuilder(this, PutStoredScriptAction.INSTANCE). }
false;public;2;5;;@Override public void putStoredScript(final PutStoredScriptRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(PutStoredScriptAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> putStoredScript(final PutStoredScriptRequest request) {     return execute(PutStoredScriptAction.INSTANCE, request). }
false;public;2;4;;@Override public void deleteStoredScript(DeleteStoredScriptRequest request, ActionListener<AcknowledgedResponse> listener) {     execute(DeleteStoredScriptAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> deleteStoredScript(DeleteStoredScriptRequest request) {     return execute(DeleteStoredScriptAction.INSTANCE, request). }
false;public;0;4;;@Override public DeleteStoredScriptRequestBuilder prepareDeleteStoredScript() {     return new DeleteStoredScriptRequestBuilder(client, DeleteStoredScriptAction.INSTANCE). }
false;public;1;4;;@Override public DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id) {     return prepareDeleteStoredScript().setId(id). }
false;public;2;5;;@Override public <Request extends ActionRequest, Response extends ActionResponse> ActionFuture<Response> execute(Action<Response> action, Request request) {     return client.execute(action, request). }
false;public;3;5;;@Override public <Request extends ActionRequest, Response extends ActionResponse> void execute(Action<Response> action, Request request, ActionListener<Response> listener) {     client.execute(action, request, listener). }
false;public;0;4;;@Override public ThreadPool threadPool() {     return client.threadPool(). }
false;public;1;4;;@Override public ActionFuture<IndicesExistsResponse> exists(final IndicesExistsRequest request) {     return execute(IndicesExistsAction.INSTANCE, request). }
false;public;2;4;;@Override public void exists(final IndicesExistsRequest request, final ActionListener<IndicesExistsResponse> listener) {     execute(IndicesExistsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public IndicesExistsRequestBuilder prepareExists(String... indices) {     return new IndicesExistsRequestBuilder(this, IndicesExistsAction.INSTANCE, indices). }
false;public;1;5;;@Deprecated @Override public ActionFuture<TypesExistsResponse> typesExists(TypesExistsRequest request) {     return execute(TypesExistsAction.INSTANCE, request). }
false;public;2;4;;@Override public void typesExists(TypesExistsRequest request, ActionListener<TypesExistsResponse> listener) {     execute(TypesExistsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public TypesExistsRequestBuilder prepareTypesExists(String... index) {     return new TypesExistsRequestBuilder(this, TypesExistsAction.INSTANCE, index). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> aliases(final IndicesAliasesRequest request) {     return execute(IndicesAliasesAction.INSTANCE, request). }
false;public;2;4;;@Override public void aliases(final IndicesAliasesRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(IndicesAliasesAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public IndicesAliasesRequestBuilder prepareAliases() {     return new IndicesAliasesRequestBuilder(this, IndicesAliasesAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<GetAliasesResponse> getAliases(GetAliasesRequest request) {     return execute(GetAliasesAction.INSTANCE, request). }
false;public;2;4;;@Override public void getAliases(GetAliasesRequest request, ActionListener<GetAliasesResponse> listener) {     execute(GetAliasesAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetAliasesRequestBuilder prepareGetAliases(String... aliases) {     return new GetAliasesRequestBuilder(this, GetAliasesAction.INSTANCE, aliases). }
false;public;1;4;;@Override public ActionFuture<ClearIndicesCacheResponse> clearCache(final ClearIndicesCacheRequest request) {     return execute(ClearIndicesCacheAction.INSTANCE, request). }
false;public;2;4;;@Override public void aliasesExist(GetAliasesRequest request, ActionListener<AliasesExistResponse> listener) {     execute(AliasesExistAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<AliasesExistResponse> aliasesExist(GetAliasesRequest request) {     return execute(AliasesExistAction.INSTANCE, request). }
false;public;1;4;;@Override public AliasesExistRequestBuilder prepareAliasesExist(String... aliases) {     return new AliasesExistRequestBuilder(this, AliasesExistAction.INSTANCE, aliases). }
false;public;1;4;;@Override public ActionFuture<GetIndexResponse> getIndex(GetIndexRequest request) {     return execute(GetIndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void getIndex(GetIndexRequest request, ActionListener<GetIndexResponse> listener) {     execute(GetIndexAction.INSTANCE, request, listener). }
false;public;0;4;;@Override public GetIndexRequestBuilder prepareGetIndex() {     return new GetIndexRequestBuilder(this, GetIndexAction.INSTANCE). }
false;public;2;4;;@Override public void clearCache(final ClearIndicesCacheRequest request, final ActionListener<ClearIndicesCacheResponse> listener) {     execute(ClearIndicesCacheAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ClearIndicesCacheRequestBuilder prepareClearCache(String... indices) {     return new ClearIndicesCacheRequestBuilder(this, ClearIndicesCacheAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<CreateIndexResponse> create(final CreateIndexRequest request) {     return execute(CreateIndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void create(final CreateIndexRequest request, final ActionListener<CreateIndexResponse> listener) {     execute(CreateIndexAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public CreateIndexRequestBuilder prepareCreate(String index) {     return new CreateIndexRequestBuilder(this, CreateIndexAction.INSTANCE, index). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> delete(final DeleteIndexRequest request) {     return execute(DeleteIndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void delete(final DeleteIndexRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(DeleteIndexAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public DeleteIndexRequestBuilder prepareDelete(String... indices) {     return new DeleteIndexRequestBuilder(this, DeleteIndexAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<CloseIndexResponse> close(final CloseIndexRequest request) {     return execute(CloseIndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void close(final CloseIndexRequest request, final ActionListener<CloseIndexResponse> listener) {     execute(CloseIndexAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public CloseIndexRequestBuilder prepareClose(String... indices) {     return new CloseIndexRequestBuilder(this, CloseIndexAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<OpenIndexResponse> open(final OpenIndexRequest request) {     return execute(OpenIndexAction.INSTANCE, request). }
false;public;2;4;;@Override public void open(final OpenIndexRequest request, final ActionListener<OpenIndexResponse> listener) {     execute(OpenIndexAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public OpenIndexRequestBuilder prepareOpen(String... indices) {     return new OpenIndexRequestBuilder(this, OpenIndexAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<FlushResponse> flush(final FlushRequest request) {     return execute(FlushAction.INSTANCE, request). }
false;public;2;4;;@Override public void flush(final FlushRequest request, final ActionListener<FlushResponse> listener) {     execute(FlushAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public FlushRequestBuilder prepareFlush(String... indices) {     return new FlushRequestBuilder(this, FlushAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<SyncedFlushResponse> syncedFlush(SyncedFlushRequest request) {     return execute(SyncedFlushAction.INSTANCE, request). }
false;public;2;4;;@Override public void syncedFlush(SyncedFlushRequest request, ActionListener<SyncedFlushResponse> listener) {     execute(SyncedFlushAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public SyncedFlushRequestBuilder prepareSyncedFlush(String... indices) {     return new SyncedFlushRequestBuilder(this, SyncedFlushAction.INSTANCE).setIndices(indices). }
false;public;2;4;;@Override public void getMappings(GetMappingsRequest request, ActionListener<GetMappingsResponse> listener) {     execute(GetMappingsAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public void getFieldMappings(GetFieldMappingsRequest request, ActionListener<GetFieldMappingsResponse> listener) {     execute(GetFieldMappingsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetMappingsRequestBuilder prepareGetMappings(String... indices) {     return new GetMappingsRequestBuilder(this, GetMappingsAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<GetMappingsResponse> getMappings(GetMappingsRequest request) {     return execute(GetMappingsAction.INSTANCE, request). }
false;public;1;4;;@Override public GetFieldMappingsRequestBuilder prepareGetFieldMappings(String... indices) {     return new GetFieldMappingsRequestBuilder(this, GetFieldMappingsAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<GetFieldMappingsResponse> getFieldMappings(GetFieldMappingsRequest request) {     return execute(GetFieldMappingsAction.INSTANCE, request). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> putMapping(final PutMappingRequest request) {     return execute(PutMappingAction.INSTANCE, request). }
false;public;2;4;;@Override public void putMapping(final PutMappingRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(PutMappingAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public PutMappingRequestBuilder preparePutMapping(String... indices) {     return new PutMappingRequestBuilder(this, PutMappingAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<ForceMergeResponse> forceMerge(final ForceMergeRequest request) {     return execute(ForceMergeAction.INSTANCE, request). }
false;public;2;4;;@Override public void forceMerge(final ForceMergeRequest request, final ActionListener<ForceMergeResponse> listener) {     execute(ForceMergeAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ForceMergeRequestBuilder prepareForceMerge(String... indices) {     return new ForceMergeRequestBuilder(this, ForceMergeAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<UpgradeResponse> upgrade(final UpgradeRequest request) {     return execute(UpgradeAction.INSTANCE, request). }
false;public;2;4;;@Override public void upgrade(final UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {     execute(UpgradeAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public UpgradeRequestBuilder prepareUpgrade(String... indices) {     return new UpgradeRequestBuilder(this, UpgradeAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<UpgradeStatusResponse> upgradeStatus(final UpgradeStatusRequest request) {     return execute(UpgradeStatusAction.INSTANCE, request). }
false;public;2;4;;@Override public void upgradeStatus(final UpgradeStatusRequest request, final ActionListener<UpgradeStatusResponse> listener) {     execute(UpgradeStatusAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public UpgradeStatusRequestBuilder prepareUpgradeStatus(String... indices) {     return new UpgradeStatusRequestBuilder(this, UpgradeStatusAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<RefreshResponse> refresh(final RefreshRequest request) {     return execute(RefreshAction.INSTANCE, request). }
false;public;2;4;;@Override public void refresh(final RefreshRequest request, final ActionListener<RefreshResponse> listener) {     execute(RefreshAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public RefreshRequestBuilder prepareRefresh(String... indices) {     return new RefreshRequestBuilder(this, RefreshAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<IndicesStatsResponse> stats(final IndicesStatsRequest request) {     return execute(IndicesStatsAction.INSTANCE, request). }
false;public;2;4;;@Override public void stats(final IndicesStatsRequest request, final ActionListener<IndicesStatsResponse> listener) {     execute(IndicesStatsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public IndicesStatsRequestBuilder prepareStats(String... indices) {     return new IndicesStatsRequestBuilder(this, IndicesStatsAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<RecoveryResponse> recoveries(final RecoveryRequest request) {     return execute(RecoveryAction.INSTANCE, request). }
false;public;2;4;;@Override public void recoveries(final RecoveryRequest request, final ActionListener<RecoveryResponse> listener) {     execute(RecoveryAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public RecoveryRequestBuilder prepareRecoveries(String... indices) {     return new RecoveryRequestBuilder(this, RecoveryAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<IndicesSegmentResponse> segments(final IndicesSegmentsRequest request) {     return execute(IndicesSegmentsAction.INSTANCE, request). }
false;public;2;4;;@Override public void segments(final IndicesSegmentsRequest request, final ActionListener<IndicesSegmentResponse> listener) {     execute(IndicesSegmentsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public IndicesSegmentsRequestBuilder prepareSegments(String... indices) {     return new IndicesSegmentsRequestBuilder(this, IndicesSegmentsAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<IndicesShardStoresResponse> shardStores(IndicesShardStoresRequest request) {     return execute(IndicesShardStoresAction.INSTANCE, request). }
false;public;2;4;;@Override public void shardStores(IndicesShardStoresRequest request, ActionListener<IndicesShardStoresResponse> listener) {     execute(IndicesShardStoresAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public IndicesShardStoreRequestBuilder prepareShardStores(String... indices) {     return new IndicesShardStoreRequestBuilder(this, IndicesShardStoresAction.INSTANCE, indices). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> updateSettings(final UpdateSettingsRequest request) {     return execute(UpdateSettingsAction.INSTANCE, request). }
false;public;2;4;;@Override public void updateSettings(final UpdateSettingsRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(UpdateSettingsAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public UpdateSettingsRequestBuilder prepareUpdateSettings(String... indices) {     return new UpdateSettingsRequestBuilder(this, UpdateSettingsAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public ActionFuture<AnalyzeResponse> analyze(final AnalyzeRequest request) {     return execute(AnalyzeAction.INSTANCE, request). }
false;public;2;4;;@Override public void analyze(final AnalyzeRequest request, final ActionListener<AnalyzeResponse> listener) {     execute(AnalyzeAction.INSTANCE, request, listener). }
false;public;2;4;;@Override public AnalyzeRequestBuilder prepareAnalyze(@Nullable String index, String text) {     return new AnalyzeRequestBuilder(this, AnalyzeAction.INSTANCE, index, text). }
false;public;1;4;;@Override public AnalyzeRequestBuilder prepareAnalyze(String text) {     return new AnalyzeRequestBuilder(this, AnalyzeAction.INSTANCE, null, text). }
false;public;0;4;;@Override public AnalyzeRequestBuilder prepareAnalyze() {     return new AnalyzeRequestBuilder(this, AnalyzeAction.INSTANCE). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> putTemplate(final PutIndexTemplateRequest request) {     return execute(PutIndexTemplateAction.INSTANCE, request). }
false;public;2;4;;@Override public void putTemplate(final PutIndexTemplateRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(PutIndexTemplateAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public PutIndexTemplateRequestBuilder preparePutTemplate(String name) {     return new PutIndexTemplateRequestBuilder(this, PutIndexTemplateAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<GetIndexTemplatesResponse> getTemplates(final GetIndexTemplatesRequest request) {     return execute(GetIndexTemplatesAction.INSTANCE, request). }
false;public;2;4;;@Override public void getTemplates(final GetIndexTemplatesRequest request, final ActionListener<GetIndexTemplatesResponse> listener) {     execute(GetIndexTemplatesAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public GetIndexTemplatesRequestBuilder prepareGetTemplates(String... names) {     return new GetIndexTemplatesRequestBuilder(this, GetIndexTemplatesAction.INSTANCE, names). }
false;public;1;4;;@Override public ActionFuture<AcknowledgedResponse> deleteTemplate(final DeleteIndexTemplateRequest request) {     return execute(DeleteIndexTemplateAction.INSTANCE, request). }
false;public;2;4;;@Override public void deleteTemplate(final DeleteIndexTemplateRequest request, final ActionListener<AcknowledgedResponse> listener) {     execute(DeleteIndexTemplateAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public DeleteIndexTemplateRequestBuilder prepareDeleteTemplate(String name) {     return new DeleteIndexTemplateRequestBuilder(this, DeleteIndexTemplateAction.INSTANCE, name). }
false;public;1;4;;@Override public ActionFuture<ValidateQueryResponse> validateQuery(final ValidateQueryRequest request) {     return execute(ValidateQueryAction.INSTANCE, request). }
false;public;2;4;;@Override public void validateQuery(final ValidateQueryRequest request, final ActionListener<ValidateQueryResponse> listener) {     execute(ValidateQueryAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ValidateQueryRequestBuilder prepareValidateQuery(String... indices) {     return new ValidateQueryRequestBuilder(this, ValidateQueryAction.INSTANCE).setIndices(indices). }
false;public;1;4;;@Override public GetSettingsRequestBuilder prepareGetSettings(String... indices) {     return new GetSettingsRequestBuilder(this, GetSettingsAction.INSTANCE, indices). }
false;public;2;5;;@Override public ResizeRequestBuilder prepareResizeIndex(String sourceIndex, String targetIndex) {     return new ResizeRequestBuilder(this, ResizeAction.INSTANCE).setSourceIndex(sourceIndex).setTargetIndex(new CreateIndexRequest(targetIndex)). }
false;public;1;4;;@Override public ActionFuture<ResizeResponse> resizeIndex(ResizeRequest request) {     return execute(ResizeAction.INSTANCE, request). }
false;public;2;4;;@Override public void resizeIndex(ResizeRequest request, ActionListener<ResizeResponse> listener) {     execute(ResizeAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public RolloverRequestBuilder prepareRolloverIndex(String alias) {     return new RolloverRequestBuilder(this, RolloverAction.INSTANCE).setAlias(alias). }
false;public;1;4;;@Override public ActionFuture<RolloverResponse> rolloversIndex(RolloverRequest request) {     return execute(RolloverAction.INSTANCE, request). }
false;public;2;4;;@Override public void rolloverIndex(RolloverRequest request, ActionListener<RolloverResponse> listener) {     execute(RolloverAction.INSTANCE, request, listener). }
false;public;1;4;;@Override public ActionFuture<GetSettingsResponse> getSettings(GetSettingsRequest request) {     return execute(GetSettingsAction.INSTANCE, request). }
false;public;2;4;;@Override public void getSettings(GetSettingsRequest request, ActionListener<GetSettingsResponse> listener) {     execute(GetSettingsAction.INSTANCE, request, listener). }
false;protected;3;8;;@Override protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {     ThreadContext threadContext = threadPool().getThreadContext().     try (ThreadContext.StoredContext ctx = threadContext.stashAndMergeHeaders(headers)) {         super.doExecute(action, request, listener).     } }
false;public;1;13;;@Override public Client filterWithHeader(Map<String, String> headers) {     return new FilterClient(this) {          @Override         protected <Request extends ActionRequest, Response extends ActionResponse> void doExecute(Action<Response> action, Request request, ActionListener<Response> listener) {             ThreadContext threadContext = threadPool().getThreadContext().             try (ThreadContext.StoredContext ctx = threadContext.stashAndMergeHeaders(headers)) {                 super.doExecute(action, request, listener).             }         }     }. }
