commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return this aggregation's name.  */ ;/**  * Return this aggregation's name.  */ public String getName() {     return name. }
true;protected,abstract;2;1;/**  * Internal: build an {@link AggregatorFactory} based on the configuration of this builder.  */ ;/**  * Internal: build an {@link AggregatorFactory} based on the configuration of this builder.  */ protected abstract AggregatorFactory<?> build(SearchContext context, AggregatorFactory<?> parent) throws IOException.
true;public,abstract;1;2;/**  * Associate metadata with this {@link AggregationBuilder}.  */ ;/**  * Associate metadata with this {@link AggregationBuilder}.  */ @Override public abstract AggregationBuilder setMetaData(Map<String, Object> metaData).
true;public,abstract;0;1;/**  * Return any associated metadata with this {@link AggregationBuilder}.  */ ;/**  * Return any associated metadata with this {@link AggregationBuilder}.  */ public abstract Map<String, Object> getMetaData().
true;public,abstract;1;1;/**  * Add a sub aggregation to this builder.  */ ;/**  * Add a sub aggregation to this builder.  */ public abstract AggregationBuilder subAggregation(AggregationBuilder aggregation).
true;public,abstract;1;1;/**  * Add a sub aggregation to this builder.  */ ;/**  * Add a sub aggregation to this builder.  */ public abstract AggregationBuilder subAggregation(PipelineAggregationBuilder aggregation).
true;public;0;3;/**  * Return the configured set of subaggregations *  */ ;/**  * Return the configured set of subaggregations *  */ public Collection<AggregationBuilder> getSubAggregations() {     return factoriesBuilder.getAggregatorFactories(). }
true;public;0;3;/**  * Return the configured set of pipeline aggregations *  */ ;/**  * Return the configured set of pipeline aggregations *  */ public Collection<PipelineAggregationBuilder> getPipelineAggregations() {     return factoriesBuilder.getPipelineAggregatorFactories(). }
true;public,abstract;1;2;/**  * Internal: Registers sub-factories with this factory. The sub-factory will  * be responsible for the creation of sub-aggregators under the aggregator  * created by this factory. This is only for use by  * {@link AggregatorFactories#parseAggregators(XContentParser)}.  *  * @param subFactories  *            The sub-factories  * @return this factory (fluent interface)  */ ;/**  * Internal: Registers sub-factories with this factory. The sub-factory will  * be responsible for the creation of sub-aggregators under the aggregator  * created by this factory. This is only for use by  * {@link AggregatorFactories#parseAggregators(XContentParser)}.  *  * @param subFactories  *            The sub-factories  * @return this factory (fluent interface)  */ @Override public abstract AggregationBuilder subAggregations(AggregatorFactories.Builder subFactories).
true;protected,abstract;2;1;/**  * Create a shallow copy of this builder and replacing {@link #factoriesBuilder} and <code>metaData</code>.  * Used by {@link #rewrite(QueryRewriteContext)}.  */ ;/**  * Create a shallow copy of this builder and replacing {@link #factoriesBuilder} and <code>metaData</code>.  * Used by {@link #rewrite(QueryRewriteContext)}.  */ protected abstract AggregationBuilder shallowCopy(AggregatorFactories.Builder factoriesBuilder, Map<String, Object> metaData).
false;public,final;1;11;;public final AggregationBuilder rewrite(QueryRewriteContext context) throws IOException {     AggregationBuilder rewritten = doRewrite(context).     AggregatorFactories.Builder rewrittenSubAggs = factoriesBuilder.rewrite(context).     if (rewritten != this) {         return rewritten.setMetaData(getMetaData()).subAggregations(rewrittenSubAggs).     } else if (rewrittenSubAggs != factoriesBuilder) {         return shallowCopy(rewrittenSubAggs, getMetaData()).     } else {         return this.     } }
true;protected;1;3;/**  * Rewrites this aggregation builder into its primitive form. By default  * this method return the builder itself. If the builder did not change the  * identity reference must be returned otherwise the builder will be  * rewritten infinitely.  */ ;/**  * Rewrites this aggregation builder into its primitive form. By default  * this method return the builder itself. If the builder did not change the  * identity reference must be returned otherwise the builder will be  * rewritten infinitely.  */ protected AggregationBuilder doRewrite(QueryRewriteContext queryShardContext) throws IOException {     return this. }
true;static;2;8;/**  * Rewrites the given aggregation into its primitive form. Aggregations that for instance fetch resources from remote hosts or  * can simplify / optimize itself should do their heavy lifting during {@link #rewrite(QueryRewriteContext)}. This method  * rewrites the aggregation until it doesn't change anymore.  * @throws IOException if an {@link IOException} occurs  */ ;/**  * Rewrites the given aggregation into its primitive form. Aggregations that for instance fetch resources from remote hosts or  * can simplify / optimize itself should do their heavy lifting during {@link #rewrite(QueryRewriteContext)}. This method  * rewrites the aggregation until it doesn't change anymore.  * @throws IOException if an {@link IOException} occurs  */ static AggregationBuilder rewriteAggregation(AggregationBuilder original, QueryRewriteContext context) throws IOException {     AggregationBuilder builder = original.     for (AggregationBuilder rewrittenBuilder = builder.rewrite(context). rewrittenBuilder != builder. rewrittenBuilder = builder.rewrite(context)) {         builder = rewrittenBuilder.     }     return builder. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
