commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeOptionalString(format).     gapPolicy.writeTo(out).     out.writeVInt(window).     out.writeNamedWriteable(model).     out.writeVInt(predict).     out.writeOptionalBoolean(minimize). }
true;public;1;7;/**  * Sets the format to use on the output of this aggregation.  */ ;/**  * Sets the format to use on the output of this aggregation.  */ public MovAvgPipelineAggregationBuilder format(String format) {     if (format == null) {         throw new IllegalArgumentException("[format] must not be null: [" + name + "]").     }     this.format = format.     return this. }
true;public;0;3;/**  * Gets the format to use on the output of this aggregation.  */ ;/**  * Gets the format to use on the output of this aggregation.  */ public String format() {     return format. }
true;public;1;7;/**  * Sets the GapPolicy to use on the output of this aggregation.  */ ;/**  * Sets the GapPolicy to use on the output of this aggregation.  */ public MovAvgPipelineAggregationBuilder gapPolicy(GapPolicy gapPolicy) {     if (gapPolicy == null) {         throw new IllegalArgumentException("[gapPolicy] must not be null: [" + name + "]").     }     this.gapPolicy = gapPolicy.     return this. }
true;public;0;3;/**  * Gets the GapPolicy to use on the output of this aggregation.  */ ;/**  * Gets the GapPolicy to use on the output of this aggregation.  */ public GapPolicy gapPolicy() {     return gapPolicy. }
false;protected;0;7;;protected DocValueFormat formatter() {     if (format != null) {         return new DocValueFormat.Decimal(format).     } else {         return DocValueFormat.RAW.     } }
true;public;1;7;/**  * Sets the window size for the moving average. This window will "slide"  * across the series, and the values inside that window will be used to  * calculate the moving avg value  *  * @param window  *            Size of window  */ ;/**  * Sets the window size for the moving average. This window will "slide"  * across the series, and the values inside that window will be used to  * calculate the moving avg value  *  * @param window  *            Size of window  */ public MovAvgPipelineAggregationBuilder window(int window) {     if (window <= 0) {         throw new IllegalArgumentException("[window] must be a positive integer: [" + name + "]").     }     this.window = window.     return this. }
true;public;0;3;/**  * Gets the window size for the moving average. This window will "slide"  * across the series, and the values inside that window will be used to  * calculate the moving avg value  */ ;/**  * Gets the window size for the moving average. This window will "slide"  * across the series, and the values inside that window will be used to  * calculate the moving avg value  */ public int window() {     return window. }
true;public;1;7;/**  * Sets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  *  * @param model  *            A MovAvgModel which has been prepopulated with settings  */ ;/**  * Sets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  *  * @param model  *            A MovAvgModel which has been prepopulated with settings  */ public MovAvgPipelineAggregationBuilder modelBuilder(MovAvgModelBuilder model) {     if (model == null) {         throw new IllegalArgumentException("[model] must not be null: [" + name + "]").     }     this.model = model.build().     return this. }
true;public;1;7;/**  * Sets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  *  * @param model  *            A MovAvgModel which has been prepopulated with settings  */ ;/**  * Sets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  *  * @param model  *            A MovAvgModel which has been prepopulated with settings  */ public MovAvgPipelineAggregationBuilder model(MovAvgModel model) {     if (model == null) {         throw new IllegalArgumentException("[model] must not be null: [" + name + "]").     }     this.model = model.     return this. }
true;public;0;3;/**  * Gets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  */ ;/**  * Gets a MovAvgModel for the Moving Average. The model is used to  * define what type of moving average you want to use on the series  */ public MovAvgModel model() {     return model. }
true;public;1;7;/**  * Sets the number of predictions that should be returned. Each  * prediction will be spaced at the intervals specified in the  * histogram. E.g "predict: 2" will return two new buckets at the end of  * the histogram with the predicted values.  *  * @param predict  *            Number of predictions to make  */ ;/**  * Sets the number of predictions that should be returned. Each  * prediction will be spaced at the intervals specified in the  * histogram. E.g "predict: 2" will return two new buckets at the end of  * the histogram with the predicted values.  *  * @param predict  *            Number of predictions to make  */ public MovAvgPipelineAggregationBuilder predict(int predict) {     if (predict <= 0) {         throw new IllegalArgumentException("predict must be greater than 0. Found [" + predict + "] in [" + name + "]").     }     this.predict = predict.     return this. }
true;public;0;3;/**  * Gets the number of predictions that should be returned. Each  * prediction will be spaced at the intervals specified in the  * histogram. E.g "predict: 2" will return two new buckets at the end of  * the histogram with the predicted values.  */ ;/**  * Gets the number of predictions that should be returned. Each  * prediction will be spaced at the intervals specified in the  * histogram. E.g "predict: 2" will return two new buckets at the end of  * the histogram with the predicted values.  */ public int predict() {     return predict. }
true;public;1;4;/**  * Sets whether the model should be fit to the data using a cost  * minimizing algorithm.  *  * @param minimize  *            If the model should be fit to the underlying data  */ ;/**  * Sets whether the model should be fit to the data using a cost  * minimizing algorithm.  *  * @param minimize  *            If the model should be fit to the underlying data  */ public MovAvgPipelineAggregationBuilder minimize(boolean minimize) {     this.minimize = minimize.     return this. }
true;public;0;3;/**  * Gets whether the model should be fit to the data using a cost  * minimizing algorithm.  */ ;/**  * Gets whether the model should be fit to the data using a cost  * minimizing algorithm.  */ public Boolean minimize() {     return minimize. }
false;protected;1;7;;@Override protected PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException {     // If the user doesn't set a preference for cost minimization, ask     // what the model prefers     boolean minimize = this.minimize == null ? model.minimizeByDefault() : this.minimize.     return new MovAvgPipelineAggregator(name, bucketsPaths, formatter(), gapPolicy, window, predict, model, minimize, metaData). }
false;public;3;15;;@Override public void doValidate(AggregatorFactory<?> parent, Collection<AggregationBuilder> aggFactories, Collection<PipelineAggregationBuilder> pipelineAggregatoractories) {     if (minimize != null && minimize && !model.canBeMinimized()) {         // it, throw exception         throw new IllegalStateException("The [" + model + "] model cannot be minimized for aggregation [" + name + "]").     }     if (bucketsPaths.length != 1) {         throw new IllegalStateException(PipelineAggregator.Parser.BUCKETS_PATH.getPreferredName() + " must contain a single entry for aggregation [" + name + "]").     }     validateSequentiallyOrderedParentAggs(parent, NAME, name). }
false;protected;2;16;;@Override protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {     if (format != null) {         builder.field(FORMAT.getPreferredName(), format).     }     builder.field(GAP_POLICY.getPreferredName(), gapPolicy.getName()).     model.toXContent(builder, params).     builder.field(WINDOW.getPreferredName(), window).     if (predict > 0) {         builder.field(PREDICT.getPreferredName(), predict).     }     if (minimize != null) {         builder.field(MINIMIZE.getPreferredName(), minimize).     }     return builder. }
false;public,static;3;117;;public static MovAvgPipelineAggregationBuilder parse(ParseFieldRegistry<MovAvgModel.AbstractModelParser> movingAverageMdelParserRegistry, String pipelineAggregatorName, XContentParser parser) throws IOException {     XContentParser.Token token.     String currentFieldName = null.     String[] bucketsPaths = null.     String format = null.     GapPolicy gapPolicy = null.     Integer window = null.     Map<String, Object> settings = null.     String model = null.     Integer predict = null.     Boolean minimize = null.     DEPRECATION_LOGGER.deprecated("The moving_avg aggregation has been deprecated in favor of the moving_fn aggregation.").     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.VALUE_NUMBER) {             if (WINDOW.match(currentFieldName, parser.getDeprecationHandler())) {                 window = parser.intValue().                 if (window <= 0) {                     throw new ParsingException(parser.getTokenLocation(), "[" + currentFieldName + "] value must be a positive, " + "non-zero integer.  Value supplied was [" + predict + "] in [" + pipelineAggregatorName + "].").                 }             } else if (PREDICT.match(currentFieldName, parser.getDeprecationHandler())) {                 predict = parser.intValue().                 if (predict <= 0) {                     throw new ParsingException(parser.getTokenLocation(), "[" + currentFieldName + "] value must be a positive integer." + "  Value supplied was [" + predict + "] in [" + pipelineAggregatorName + "].").                 }             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].").             }         } else if (token == XContentParser.Token.VALUE_STRING) {             if (FORMAT.match(currentFieldName, parser.getDeprecationHandler())) {                 format = parser.text().             } else if (BUCKETS_PATH.match(currentFieldName, parser.getDeprecationHandler())) {                 bucketsPaths = new String[] { parser.text() }.             } else if (GAP_POLICY.match(currentFieldName, parser.getDeprecationHandler())) {                 gapPolicy = GapPolicy.parse(parser.text(), parser.getTokenLocation()).             } else if (MODEL.match(currentFieldName, parser.getDeprecationHandler())) {                 model = parser.text().             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].").             }         } else if (token == XContentParser.Token.START_ARRAY) {             if (BUCKETS_PATH.match(currentFieldName, parser.getDeprecationHandler())) {                 List<String> paths = new ArrayList<>().                 while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {                     String path = parser.text().                     paths.add(path).                 }                 bucketsPaths = paths.toArray(new String[paths.size()]).             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].").             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (SETTINGS.match(currentFieldName, parser.getDeprecationHandler())) {                 settings = parser.map().             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].").             }         } else if (token == XContentParser.Token.VALUE_BOOLEAN) {             if (MINIMIZE.match(currentFieldName, parser.getDeprecationHandler())) {                 minimize = parser.booleanValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].").             }         } else {             throw new ParsingException(parser.getTokenLocation(), "Unexpected token " + token + " in [" + pipelineAggregatorName + "].").         }     }     if (bucketsPaths == null) {         throw new ParsingException(parser.getTokenLocation(), "Missing required field [" + BUCKETS_PATH.getPreferredName() + "] for movingAvg aggregation [" + pipelineAggregatorName + "]").     }     MovAvgPipelineAggregationBuilder factory = new MovAvgPipelineAggregationBuilder(pipelineAggregatorName, bucketsPaths[0]).     if (format != null) {         factory.format(format).     }     if (gapPolicy != null) {         factory.gapPolicy(gapPolicy).     }     if (window != null) {         factory.window(window).     }     if (predict != null) {         factory.predict(predict).     }     if (model != null) {         MovAvgModel.AbstractModelParser modelParser = movingAverageMdelParserRegistry.lookup(model, parser.getTokenLocation(), parser.getDeprecationHandler()).         MovAvgModel movAvgModel.         try {             movAvgModel = modelParser.parse(settings, pipelineAggregatorName, factory.window()).         } catch (ParseException exception) {             throw new ParsingException(parser.getTokenLocation(), "Could not parse settings for model [" + model + "].", exception).         }         factory.model(movAvgModel).     }     if (minimize != null) {         factory.minimize(minimize).     }     return factory. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(format, gapPolicy, window, model, predict, minimize). }
false;protected;1;10;;@Override protected boolean doEquals(Object obj) {     MovAvgPipelineAggregationBuilder other = (MovAvgPipelineAggregationBuilder) obj.     return Objects.equals(format, other.format) && Objects.equals(gapPolicy, other.gapPolicy) && Objects.equals(window, other.window) && Objects.equals(model, other.model) && Objects.equals(predict, other.predict) && Objects.equals(minimize, other.minimize). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
