commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public V txGet() {     try {         return get().     } catch (InterruptedException e) {         Thread.currentThread().interrupt().         throw new IllegalStateException("Future got interrupted", e).     } catch (ExecutionException e) {         if (e.getCause() instanceof ElasticsearchException) {             throw (ElasticsearchException) e.getCause().         } else {             throw new TransportException("Failed execution", e).         }     } }
false;public;2;16;;@Override public V txGet(long timeout, TimeUnit unit) {     try {         return get(timeout, unit).     } catch (TimeoutException e) {         throw new ElasticsearchTimeoutException(e).     } catch (InterruptedException e) {         throw new IllegalStateException("Future got interrupted", e).     } catch (ExecutionException e) {         if (e.getCause() instanceof ElasticsearchException) {             throw (ElasticsearchException) e.getCause().         } else {             throw new TransportException("Failed execution", e).         }     } }
false;public;1;4;;@Override public V read(StreamInput in) throws IOException {     return handler.read(in). }
false;public;0;4;;@Override public String executor() {     return handler.executor(). }
false;public;1;9;;@Override public void handleResponse(V response) {     try {         handler.handleResponse(response).         set(response).     } catch (Exception e) {         handleException(new ResponseHandlerFailureTransportException(e)).     } }
false;public;1;8;;@Override public void handleException(TransportException exp) {     try {         handler.handleException(exp).     } finally {         setException(exp).     } }
false;public;0;4;;@Override public String toString() {     return "future(" + handler.toString() + ")". }
