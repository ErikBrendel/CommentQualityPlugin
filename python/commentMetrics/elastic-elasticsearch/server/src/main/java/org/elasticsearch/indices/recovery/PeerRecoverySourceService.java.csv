# id;timestamp;commentText;codeText;commentWords;codeWords
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1524684173;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1529687475;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1535965276;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1541092382;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1542402632;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1542609384;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1547315388;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1547496886;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
PeerRecoverySourceService -> OngoingRecoveries -> ShardRecoveryContext -> synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard);1548558090;Adds recovery source handler.;synchronized RecoverySourceHandler addNewRecovery(StartRecoveryRequest request, IndexShard shard) {_                for (RecoverySourceHandler existingHandler : recoveryHandlers) {_                    if (existingHandler.getRequest().targetAllocationId().equals(request.targetAllocationId())) {_                        throw new DelayRecoveryException("recovery with same target already registered, waiting for " +_                            "previous recovery attempt to be cancelled or completed")__                    }_                }_                RecoverySourceHandler handler = createRecoverySourceHandler(request, shard)__                recoveryHandlers.add(handler)__                return handler__            };adds,recovery,source,handler;synchronized,recovery,source,handler,add,new,recovery,start,recovery,request,request,index,shard,shard,for,recovery,source,handler,existing,handler,recovery,handlers,if,existing,handler,get,request,target,allocation,id,equals,request,target,allocation,id,throw,new,delay,recovery,exception,recovery,with,same,target,already,registered,waiting,for,previous,recovery,attempt,to,be,cancelled,or,completed,recovery,source,handler,handler,create,recovery,source,handler,request,shard,recovery,handlers,add,handler,return,handler
