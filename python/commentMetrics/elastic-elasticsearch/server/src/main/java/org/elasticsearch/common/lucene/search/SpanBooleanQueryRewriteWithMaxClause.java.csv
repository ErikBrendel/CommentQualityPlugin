commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getMaxExpansions() {     return maxExpansions. }
false;public;0;3;;public boolean isHardLimit() {     return hardLimit. }
false;public;2;11;;@Override public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {     Collection<SpanQuery> queries = collectTerms(reader, query).     if (queries.size() == 0) {         return new SpanMatchNoDocsQuery(query.getField(), "no expansion found for " + query.toString()).     } else if (queries.size() == 1) {         return queries.iterator().next().     } else {         return new SpanOrQuery(queries.toArray(new SpanQuery[0])).     } }
false;private;2;31;;private Collection<SpanQuery> collectTerms(IndexReader reader, MultiTermQuery query) throws IOException {     Set<SpanQuery> queries = new HashSet<>().     IndexReaderContext topReaderContext = reader.getContext().     for (LeafReaderContext context : topReaderContext.leaves()) {         final Terms terms = context.reader().terms(query.getField()).         if (terms == null) {             // field does not exist             continue.         }         final TermsEnum termsEnum = getTermsEnum(query, terms, null).         assert termsEnum != null.         if (termsEnum == TermsEnum.EMPTY)             continue.         BytesRef bytes.         while ((bytes = termsEnum.next()) != null) {             if (queries.size() >= maxExpansions) {                 if (hardLimit) {                     throw new RuntimeException("[" + query.toString() + " ] " + "exceeds maxClauseCount [ Boolean maxClauseCount is set to " + BooleanQuery.getMaxClauseCount() + "]").                 } else {                     return queries.                 }             }             queries.add(new SpanTermQuery(new Term(query.getField(), bytes))).         }     }     return queries. }
false;public;2;49;;@Override public SpanQuery rewrite(IndexReader reader, MultiTermQuery query) throws IOException {     final MultiTermQuery.RewriteMethod delegate = new MultiTermQuery.RewriteMethod() {          @Override         public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {             Collection<SpanQuery> queries = collectTerms(reader, query).             if (queries.size() == 0) {                 return new SpanMatchNoDocsQuery(query.getField(), "no expansion found for " + query.toString()).             } else if (queries.size() == 1) {                 return queries.iterator().next().             } else {                 return new SpanOrQuery(queries.toArray(new SpanQuery[0])).             }         }          private Collection<SpanQuery> collectTerms(IndexReader reader, MultiTermQuery query) throws IOException {             Set<SpanQuery> queries = new HashSet<>().             IndexReaderContext topReaderContext = reader.getContext().             for (LeafReaderContext context : topReaderContext.leaves()) {                 final Terms terms = context.reader().terms(query.getField()).                 if (terms == null) {                     // field does not exist                     continue.                 }                 final TermsEnum termsEnum = getTermsEnum(query, terms, null).                 assert termsEnum != null.                 if (termsEnum == TermsEnum.EMPTY)                     continue.                 BytesRef bytes.                 while ((bytes = termsEnum.next()) != null) {                     if (queries.size() >= maxExpansions) {                         if (hardLimit) {                             throw new RuntimeException("[" + query.toString() + " ] " + "exceeds maxClauseCount [ Boolean maxClauseCount is set to " + BooleanQuery.getMaxClauseCount() + "]").                         } else {                             return queries.                         }                     }                     queries.add(new SpanTermQuery(new Term(query.getField(), bytes))).                 }             }             return queries.         }     }.     return (SpanQuery) delegate.rewrite(reader, query). }
