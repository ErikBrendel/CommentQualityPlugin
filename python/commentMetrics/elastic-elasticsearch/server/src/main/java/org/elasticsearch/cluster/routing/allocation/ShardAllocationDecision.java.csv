commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     allocateDecision.writeTo(out).     moveDecision.writeTo(out). }
true;public;0;3;/**  * Returns {@code true} if either an allocation decision or a move decision was taken  * for the shard.  If no decision was taken, as in the case of initializing or relocating  * shards, then this method returns {@code false}.  */ ;/**  * Returns {@code true} if either an allocation decision or a move decision was taken  * for the shard.  If no decision was taken, as in the case of initializing or relocating  * shards, then this method returns {@code false}.  */ public boolean isDecisionTaken() {     return allocateDecision.isDecisionTaken() || moveDecision.isDecisionTaken(). }
true;public;0;3;/**  * Gets the unassigned allocation decision for the shard.  If the shard was not in the unassigned state,  * the instance of {@link AllocateUnassignedDecision} that is returned will have {@link AllocateUnassignedDecision#isDecisionTaken()}  * return {@code false}.  */ ;/**  * Gets the unassigned allocation decision for the shard.  If the shard was not in the unassigned state,  * the instance of {@link AllocateUnassignedDecision} that is returned will have {@link AllocateUnassignedDecision#isDecisionTaken()}  * return {@code false}.  */ public AllocateUnassignedDecision getAllocateDecision() {     return allocateDecision. }
true;public;0;3;/**  * Gets the move decision for the shard.  If the shard was not in the started state,  * the instance of {@link MoveDecision} that is returned will have {@link MoveDecision#isDecisionTaken()}  * return {@code false}.  */ ;/**  * Gets the move decision for the shard.  If the shard was not in the started state,  * the instance of {@link MoveDecision} that is returned will have {@link MoveDecision#isDecisionTaken()}  * return {@code false}.  */ public MoveDecision getMoveDecision() {     return moveDecision. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (allocateDecision.isDecisionTaken()) {         allocateDecision.toXContent(builder, params).     }     if (moveDecision.isDecisionTaken()) {         moveDecision.toXContent(builder, params).     }     return builder. }
