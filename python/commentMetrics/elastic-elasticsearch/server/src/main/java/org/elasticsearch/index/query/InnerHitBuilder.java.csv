commented;modifiers;parameterAmount;loc;comment;code
false;public;1;47;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(name).     out.writeBoolean(ignoreUnmapped).     out.writeVInt(from).     out.writeVInt(size).     out.writeBoolean(explain).     out.writeBoolean(version).     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         out.writeBoolean(seqNoAndPrimaryTerm).     }     out.writeBoolean(trackScores).     out.writeOptionalWriteable(storedFieldsContext).     if (out.getVersion().before(Version.V_6_4_0)) {         out.writeGenericValue(docValueFields == null ? null : docValueFields.stream().map(ff -> ff.field).collect(Collectors.toList())).     } else {         out.writeBoolean(docValueFields != null).         if (docValueFields != null) {             out.writeList(docValueFields).         }     }     boolean hasScriptFields = scriptFields != null.     out.writeBoolean(hasScriptFields).     if (hasScriptFields) {         out.writeVInt(scriptFields.size()).         Iterator<ScriptField> iterator = scriptFields.stream().sorted(Comparator.comparing(ScriptField::fieldName)).iterator().         while (iterator.hasNext()) {             iterator.next().writeTo(out).         }     }     out.writeOptionalWriteable(fetchSourceContext).     boolean hasSorts = sorts != null.     out.writeBoolean(hasSorts).     if (hasSorts) {         out.writeVInt(sorts.size()).         for (SortBuilder<?> sort : sorts) {             out.writeNamedWriteable(sort).         }     }     out.writeOptionalWriteable(highlightBuilder).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalWriteable(innerCollapseBuilder).     } }
false;public;0;3;;public String getName() {     return name. }
false;public;1;4;;public InnerHitBuilder setName(String name) {     this.name = Objects.requireNonNull(name).     return this. }
false;public;1;4;;public InnerHitBuilder setIgnoreUnmapped(boolean value) {     this.ignoreUnmapped = value.     return this. }
true;public;0;3;/**  * Whether to include inner hits in the search response hits if required mappings is missing  */ ;/**  * Whether to include inner hits in the search response hits if required mappings is missing  */ public boolean isIgnoreUnmapped() {     return ignoreUnmapped. }
false;public;0;3;;public int getFrom() {     return from. }
false;public;1;7;;public InnerHitBuilder setFrom(int from) {     if (from < 0) {         throw new IllegalArgumentException("illegal from value, at least 0 or higher").     }     this.from = from.     return this. }
false;public;0;3;;public int getSize() {     return size. }
false;public;1;7;;public InnerHitBuilder setSize(int size) {     if (size < 0) {         throw new IllegalArgumentException("illegal size value, at least 0 or higher").     }     this.size = size.     return this. }
false;public;0;3;;public boolean isExplain() {     return explain. }
false;public;1;4;;public InnerHitBuilder setExplain(boolean explain) {     this.explain = explain.     return this. }
false;public;0;3;;public boolean isVersion() {     return version. }
false;public;1;4;;public InnerHitBuilder setVersion(boolean version) {     this.version = version.     return this. }
false;public;0;3;;public boolean isSeqNoAndPrimaryTerm() {     return seqNoAndPrimaryTerm. }
false;public;1;4;;public InnerHitBuilder setSeqNoAndPrimaryTerm(boolean seqNoAndPrimaryTerm) {     this.seqNoAndPrimaryTerm = seqNoAndPrimaryTerm.     return this. }
false;public;0;3;;public boolean isTrackScores() {     return trackScores. }
false;public;1;4;;public InnerHitBuilder setTrackScores(boolean trackScores) {     this.trackScores = trackScores.     return this. }
true;public;0;3;/**  * Gets the stored fields context.  */ ;/**  * Gets the stored fields context.  */ public StoredFieldsContext getStoredFieldsContext() {     return storedFieldsContext. }
true;public;1;8;/**  * Sets the stored fields to load and return.  * If none are specified, the source of the document will be returned.  */ ;/**  * Sets the stored fields to load and return.  * If none are specified, the source of the document will be returned.  */ public InnerHitBuilder setStoredFieldNames(List<String> fieldNames) {     if (storedFieldsContext == null) {         storedFieldsContext = StoredFieldsContext.fromList(fieldNames).     } else {         storedFieldsContext.addFieldNames(fieldNames).     }     return this. }
true;public;0;3;/**  * Gets the docvalue fields.  */ ;/**  * Gets the docvalue fields.  */ public List<FieldAndFormat> getDocValueFields() {     return docValueFields. }
true;public;1;4;/**  * Sets the stored fields to load from the docvalue and return.  */ ;/**  * Sets the stored fields to load from the docvalue and return.  */ public InnerHitBuilder setDocValueFields(List<FieldAndFormat> docValueFields) {     this.docValueFields = docValueFields.     return this. }
true;public;2;7;/**  * Adds a field to load from the docvalue and return.  */ ;/**  * Adds a field to load from the docvalue and return.  */ public InnerHitBuilder addDocValueField(String field, String format) {     if (docValueFields == null) {         docValueFields = new ArrayList<>().     }     docValueFields.add(new FieldAndFormat(field, format)).     return this. }
true;public;1;3;/**  * Adds a field to load from doc values and return.  */ ;/**  * Adds a field to load from doc values and return.  */ public InnerHitBuilder addDocValueField(String field) {     return addDocValueField(field, null). }
false;public;0;3;;public Set<ScriptField> getScriptFields() {     return scriptFields. }
false;public;1;4;;public InnerHitBuilder setScriptFields(Set<ScriptField> scriptFields) {     this.scriptFields = scriptFields.     return this. }
false;public;2;7;;public InnerHitBuilder addScriptField(String name, Script script) {     if (scriptFields == null) {         scriptFields = new HashSet<>().     }     scriptFields.add(new ScriptField(name, script, false)).     return this. }
false;public;0;3;;public FetchSourceContext getFetchSourceContext() {     return fetchSourceContext. }
false;public;1;4;;public InnerHitBuilder setFetchSourceContext(FetchSourceContext fetchSourceContext) {     this.fetchSourceContext = fetchSourceContext.     return this. }
false;public;0;3;;public List<SortBuilder<?>> getSorts() {     return sorts. }
false;public;1;4;;public InnerHitBuilder setSorts(List<SortBuilder<?>> sorts) {     this.sorts = sorts.     return this. }
false;public;1;7;;public InnerHitBuilder addSort(SortBuilder<?> sort) {     if (sorts == null) {         sorts = new ArrayList<>().     }     sorts.add(sort).     return this. }
false;public;0;3;;public HighlightBuilder getHighlightBuilder() {     return highlightBuilder. }
false;public;1;4;;public InnerHitBuilder setHighlightBuilder(HighlightBuilder highlightBuilder) {     this.highlightBuilder = highlightBuilder.     return this. }
false;;0;3;;QueryBuilder getQuery() {     return query. }
false;public;1;4;;public InnerHitBuilder setInnerCollapse(CollapseBuilder innerCollapseBuilder) {     this.innerCollapseBuilder = innerCollapseBuilder.     return this. }
false;public;0;3;;public CollapseBuilder getInnerCollapseBuilder() {     return innerCollapseBuilder. }
false;public;2;56;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (name != null) {         builder.field(NAME_FIELD.getPreferredName(), name).     }     builder.field(IGNORE_UNMAPPED.getPreferredName(), ignoreUnmapped).     builder.field(SearchSourceBuilder.FROM_FIELD.getPreferredName(), from).     builder.field(SearchSourceBuilder.SIZE_FIELD.getPreferredName(), size).     builder.field(SearchSourceBuilder.VERSION_FIELD.getPreferredName(), version).     builder.field(SearchSourceBuilder.SEQ_NO_PRIMARY_TERM_FIELD.getPreferredName(), seqNoAndPrimaryTerm).     builder.field(SearchSourceBuilder.EXPLAIN_FIELD.getPreferredName(), explain).     builder.field(SearchSourceBuilder.TRACK_SCORES_FIELD.getPreferredName(), trackScores).     if (fetchSourceContext != null) {         builder.field(SearchSourceBuilder._SOURCE_FIELD.getPreferredName(), fetchSourceContext, params).     }     if (storedFieldsContext != null) {         storedFieldsContext.toXContent(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), builder).     }     if (docValueFields != null) {         builder.startArray(SearchSourceBuilder.DOCVALUE_FIELDS_FIELD.getPreferredName()).         for (FieldAndFormat docValueField : docValueFields) {             if (docValueField.format == null) {                 builder.value(docValueField.field).             } else {                 builder.startObject().field("field", docValueField.field).field("format", docValueField.format).endObject().             }         }         builder.endArray().     }     if (scriptFields != null) {         builder.startObject(SearchSourceBuilder.SCRIPT_FIELDS_FIELD.getPreferredName()).         for (ScriptField scriptField : scriptFields) {             scriptField.toXContent(builder, params).         }         builder.endObject().     }     if (sorts != null) {         builder.startArray(SearchSourceBuilder.SORT_FIELD.getPreferredName()).         for (SortBuilder<?> sort : sorts) {             sort.toXContent(builder, params).         }         builder.endArray().     }     if (highlightBuilder != null) {         builder.field(SearchSourceBuilder.HIGHLIGHT_FIELD.getPreferredName(), highlightBuilder, params).     }     if (innerCollapseBuilder != null) {         builder.field(COLLAPSE_FIELD.getPreferredName(), innerCollapseBuilder).     }     builder.endObject().     return builder. }
false;public;1;22;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     InnerHitBuilder that = (InnerHitBuilder) o.     return Objects.equals(name, that.name) && Objects.equals(ignoreUnmapped, that.ignoreUnmapped) && Objects.equals(from, that.from) && Objects.equals(size, that.size) && Objects.equals(explain, that.explain) && Objects.equals(version, that.version) && Objects.equals(seqNoAndPrimaryTerm, that.seqNoAndPrimaryTerm) && Objects.equals(trackScores, that.trackScores) && Objects.equals(storedFieldsContext, that.storedFieldsContext) && Objects.equals(docValueFields, that.docValueFields) && Objects.equals(scriptFields, that.scriptFields) && Objects.equals(fetchSourceContext, that.fetchSourceContext) && Objects.equals(sorts, that.sorts) && Objects.equals(highlightBuilder, that.highlightBuilder) && Objects.equals(innerCollapseBuilder, that.innerCollapseBuilder). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(name, ignoreUnmapped, from, size, explain, version, seqNoAndPrimaryTerm, trackScores, storedFieldsContext, docValueFields, scriptFields, fetchSourceContext, sorts, highlightBuilder, innerCollapseBuilder). }
false;public,static;1;3;;public static InnerHitBuilder fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, new InnerHitBuilder(), null). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
