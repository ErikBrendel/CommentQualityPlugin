# id;timestamp;commentText;codeText;commentWords;codeWords
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, boolean trackTotalHits);1542402699;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, boolean trackTotalHits);1544035746;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, boolean trackTotalHits);1544556269;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, boolean trackTotalHits);1544786574;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1546630609;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1547037408;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1547071054;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1548067907;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1548420339;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1549019502;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1549276276;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce);1551177682;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs, int trackTotalHitsUpTo, boolean performFinalReduce) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__            this.topDocsStats = new TopDocsStats(trackTotalHitsUpTo)__            this.performFinalReduce = performFinalReduce__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,int,track,total,hits,up,to,boolean,perform,final,reduce,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size,this,top,docs,stats,new,top,docs,stats,track,total,hits,up,to,this,perform,final,reduce,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1524684173;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1528762805;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1536314350;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1539615817;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1541092382;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1542402699;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest);1544035746;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest) {_        return reducedQueryPhase(queryResults, isScrollRequest, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,return,reduced,query,phase,query,results,is,scroll,request,true
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1524684173;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1528762805;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1536314350;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1539615817;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1541092382;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1542402699;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1544035746;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1544556269;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1544786574;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1546005500;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1546630609;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1547037408;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1547071054;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1548067907;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1548420339;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1549019502;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1549276276;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs);1551177682;Builds an array, with potential null elements, with docs to load.;public IntArrayList[] fillDocIdsToLoad(int numShards, ScoreDoc[] shardDocs) {_        IntArrayList[] docIdsToLoad = new IntArrayList[numShards]__        for (ScoreDoc shardDoc : shardDocs) {_            IntArrayList shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex]__            if (shardDocIdsToLoad == null) {_                shardDocIdsToLoad = docIdsToLoad[shardDoc.shardIndex] = new IntArrayList()__            }_            shardDocIdsToLoad.add(shardDoc.doc)__        }_        return docIdsToLoad__    };builds,an,array,with,potential,null,elements,with,docs,to,load;public,int,array,list,fill,doc,ids,to,load,int,num,shards,score,doc,shard,docs,int,array,list,doc,ids,to,load,new,int,array,list,num,shards,for,score,doc,shard,doc,shard,docs,int,array,list,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,if,shard,doc,ids,to,load,null,shard,doc,ids,to,load,doc,ids,to,load,shard,doc,shard,index,new,int,array,list,shard,doc,ids,to,load,add,shard,doc,doc,return,doc,ids,to,load
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1546005500;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, true, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,true,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1546630609;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1547037408;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1547071054;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1548067907;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1548420339;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1549019502;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1549276276;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1551177682;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, SearchContext.TRACK_TOTAL_HITS_ACCURATE, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,search,context,true
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1544556269;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1544786574;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1546005500;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1546630609;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1547037408;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1547071054;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1548067907;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly())__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,query,result,search,timed,out,query,result,terminated,early,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1548420339;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly())__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,query,result,search,timed,out,query,result,terminated,early,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1549019502;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly())__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,query,result,search,timed,out,query,result,terminated,early,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1549276276;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;static SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly())__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            boolean isSortedByField = false__            SortField[] sortFields = null__            String collapseField = null__            Object[] collapseValues = null__            if (mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                sortFields = fieldDocs.fields__                if (fieldDocs instanceof CollapseTopFieldDocs) {_                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs__                    collapseField = collapseTopFieldDocs.field__                    collapseValues = collapseTopFieldDocs.collapseValues__                } else {_                    isSortedByField = true__                }_            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;static,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,query,result,search,timed,out,query,result,terminated,early,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,boolean,is,sorted,by,field,false,sort,field,sort,fields,null,string,collapse,field,null,object,collapse,values,null,if,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,sort,fields,field,docs,fields,if,field,docs,instanceof,collapse,top,field,docs,is,sorted,by,field,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,collapse,top,field,docs,collapse,top,field,docs,collapse,top,field,docs,field,docs,collapse,field,collapse,top,field,docs,field,collapse,values,collapse,top,field,docs,collapse,values,else,is,sorted,by,field,true,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,collapse,field,collapse,values,else,return,sorted,top,docs,empty
SearchPhaseController -> public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1544556269;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,true
SearchPhaseController -> public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults);1544786574;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {_        return reducedQueryPhase(queryResults, true, true)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,scroll,query,phase,collection,extends,search,phase,result,query,results,return,reduced,query,phase,query,results,true,true
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1546630609;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1547037408;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1547071054;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1548067907;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1548420339;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1549019502;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1549276276;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce);1551177682;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                               boolean isScrollRequest, int trackTotalHitsUpTo, boolean performFinalReduce) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHitsUpTo),_            0, isScrollRequest, performFinalReduce)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,int,track,total,hits,up,to,boolean,perform,final,reduce,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,up,to,0,is,scroll,request,perform,final,reduce
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1524684173;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                               final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocs td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                if (td.scoreDocs.length > 0) { _                    setShardIndex(td, queryResult.getShardIndex())__                    topDocs.add(td)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,score,docs,length,0,set,shard,index,td,query,result,get,shard,index,top,docs,add,td,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1528762805;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                               final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocs td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                if (td.scoreDocs.length > 0) { _                    setShardIndex(td, queryResult.getShardIndex())__                    topDocs.add(td)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,score,docs,length,0,set,shard,index,td,query,result,get,shard,index,top,docs,add,td,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1541092382;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1542402699;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1544035746;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1544556269;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1544786574;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1546005500;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1546630609;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1547037408;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1547071054;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1548067907;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1548420339;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1549019502;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1549276276;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction);1551177682;Constructor._@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Function<Boolean, ReduceContext> reduceContextFunction) {_        this.reduceContextFunction = reduceContextFunction__    };constructor,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,function,boolean,reduce,context,reduce,context,function,this,reduce,context,function,reduce,context,function
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1524684173;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1528762805;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1536314350;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1539615817;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1541092382;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1542402699;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1544035746;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1544556269;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1544786574;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1546005500;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1546630609;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1547037408;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1547071054;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1548067907;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1548420339;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1549019502;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1549276276;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> QueryPhaseResultConsumer -> int getNumBuffered();1551177682;Returns the number of buffered results;int getNumBuffered() {_            return index__        };returns,the,number,of,buffered,results;int,get,num,buffered,return,index
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1524684173;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null, null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1528762805;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null, null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1536314350;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null, null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1539615817;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null, null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1541092382;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null, null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1542402699;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null,_                null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        return new ReducedQueryPhase(topDocsStats.totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,return,new,reduced,query,phase,top,docs,stats,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1544035746;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null,_                null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = this.sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult != null ? firstResult.sortValueFormats() : null,_            numReducePhases, scoreDocs.isSortedByField, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,this,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,null,first,result,sort,value,formats,null,num,reduce,phases,score,docs,is,sorted,by,field,size,from,first,result,null
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1544556269;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, EMPTY_DOCS, null,_                null, numReducePhases, false, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs scoreDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, scoreDocs.scoreDocs, scoreDocs.sortFields,_            firstResult.sortValueFormats(), numReducePhases, scoreDocs.isSortedByField, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,null,null,num,reduce,phases,false,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,score,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,score,docs,score,docs,score,docs,sort,fields,first,result,sort,value,formats,num,reduce,phases,score,docs,is,sorted,by,field,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest);1544786574;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(true)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, firstResult == null)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,true,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,first,result,null
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1524684173;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1528762805;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1536314350;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1539615817;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1541092382;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1542402699;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1544035746;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1544556269;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1544786574;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1546005500;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1546630609;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1547037408;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1547071054;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1548067907;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1548420339;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1549019502;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1549276276;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList);1551177682;Performs an intermediate reduce phase on the aggregations. For instance with this reduce phase never prune information_that relevant for the final reduce step. For final reduce see {@link #reduceAggs(List, List, ReduceContext)};private InternalAggregations reduceAggsIncrementally(List<InternalAggregations> aggregationsList) {_        ReduceContext reduceContext = reduceContextFunction.apply(false)__        return aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            null, reduceContext)__    };performs,an,intermediate,reduce,phase,on,the,aggregations,for,instance,with,this,reduce,phase,never,prune,information,that,relevant,for,the,final,reduce,step,for,final,reduce,see,link,reduce,aggs,list,list,reduce,context;private,internal,aggregations,reduce,aggs,incrementally,list,internal,aggregations,aggregations,list,reduce,context,reduce,context,reduce,context,function,apply,false,return,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,null,reduce,context
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1524684173;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1528762805;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1536314350;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1539615817;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1541092382;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1542402699;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1544035746;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize___        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1544556269;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> QueryPhaseResultConsumer -> private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,                                          boolean hasTopDocs, boolean hasAggs);1544786574;Creates a new {@link QueryPhaseResultConsumer}_@param controller a controller instance to reduce the query response objects_@param expectedResultSize the expected number of query results. Corresponds to the number of shards queried_@param bufferSize the size of the reduce buffer. if the buffer size is smaller than the number of expected results_the buffer is used to incrementally reduce aggregation results before all shards responded.;private QueryPhaseResultConsumer(SearchPhaseController controller, int expectedResultSize, int bufferSize,_                                         boolean hasTopDocs, boolean hasAggs) {_            super(expectedResultSize)__            if (expectedResultSize != 1 && bufferSize < 2) {_                throw new IllegalArgumentException("buffer size must be >= 2 if there is more than one expected result")__            }_            if (expectedResultSize <= bufferSize) {_                throw new IllegalArgumentException("buffer size must be less than the expected result size")__            }_            if (hasAggs == false && hasTopDocs == false) {_                throw new IllegalArgumentException("either aggs or top docs must be present")__            }_            this.controller = controller__            _            this.aggsBuffer = new InternalAggregations[hasAggs ? bufferSize : 0]__            this.topDocsBuffer = new TopDocs[hasTopDocs ? bufferSize : 0]__            this.hasTopDocs = hasTopDocs__            this.hasAggs = hasAggs__            this.bufferSize = bufferSize__        };creates,a,new,link,query,phase,result,consumer,param,controller,a,controller,instance,to,reduce,the,query,response,objects,param,expected,result,size,the,expected,number,of,query,results,corresponds,to,the,number,of,shards,queried,param,buffer,size,the,size,of,the,reduce,buffer,if,the,buffer,size,is,smaller,than,the,number,of,expected,results,the,buffer,is,used,to,incrementally,reduce,aggregation,results,before,all,shards,responded;private,query,phase,result,consumer,search,phase,controller,controller,int,expected,result,size,int,buffer,size,boolean,has,top,docs,boolean,has,aggs,super,expected,result,size,if,expected,result,size,1,buffer,size,2,throw,new,illegal,argument,exception,buffer,size,must,be,2,if,there,is,more,than,one,expected,result,if,expected,result,size,buffer,size,throw,new,illegal,argument,exception,buffer,size,must,be,less,than,the,expected,result,size,if,has,aggs,false,has,top,docs,false,throw,new,illegal,argument,exception,either,aggs,or,top,docs,must,be,present,this,controller,controller,this,aggs,buffer,new,internal,aggregations,has,aggs,buffer,size,0,this,top,docs,buffer,new,top,docs,has,top,docs,buffer,size,0,this,has,top,docs,has,top,docs,this,has,aggs,has,aggs,this,buffer,size,buffer,size
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup);1524684173;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup);1528762805;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup);1536314350;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup);1539615817;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup);1541092382;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1542402699;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1544035746;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1544556269;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1544786574;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1546005500;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1546630609;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1547037408;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1547071054;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1548067907;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1548420339;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1549019502;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1549276276;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,                                         Collection<? extends SearchPhaseResult> fetchResults,                                         IntFunction<SearchPhaseResult> resultsLookup);1551177682;Enriches search hits and completion suggestion hits from <code>sortedDocs</code> using <code>fetchResultsArr</code>,_merges suggestions, aggregations and profile results__Expects sortedDocs to have top search docs across all shards, optionally followed by top suggest docs for each named_completion suggestion ordered by suggestion name;public InternalSearchResponse merge(boolean ignoreFrom, ReducedQueryPhase reducedQueryPhase,_                                        Collection<? extends SearchPhaseResult> fetchResults,_                                        IntFunction<SearchPhaseResult> resultsLookup) {_        if (reducedQueryPhase.isEmptyResult) {_            return InternalSearchResponse.empty()__        }_        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs__        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, fetchResults, resultsLookup)__        if (reducedQueryPhase.suggest != null) {_            if (!fetchResults.isEmpty()) {_                int currentOffset = hits.getHits().length__                for (CompletionSuggestion suggestion : reducedQueryPhase.suggest.filter(CompletionSuggestion.class)) {_                    final List<CompletionSuggestion.Entry.Option> suggestionOptions = suggestion.getOptions()__                    for (int scoreDocIndex = currentOffset_ scoreDocIndex < currentOffset + suggestionOptions.size()_ scoreDocIndex++) {_                        ScoreDoc shardDoc = sortedDocs[scoreDocIndex]__                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex)__                        if (searchResultProvider == null) {_                            _                            _                            _                            _                            continue__                        }_                        FetchSearchResult fetchResult = searchResultProvider.fetchResult()__                        final int index = fetchResult.counterGetAndIncrement()__                        assert index < fetchResult.hits().getHits().length : "not enough hits fetched. index [" + index + "] length: "_                            + fetchResult.hits().getHits().length__                        SearchHit hit = fetchResult.hits().getHits()[index]__                        CompletionSuggestion.Entry.Option suggestOption =_                            suggestionOptions.get(scoreDocIndex - currentOffset)__                        hit.score(shardDoc.score)__                        hit.shard(fetchResult.getSearchShardTarget())__                        suggestOption.setHit(hit)__                    }_                    currentOffset += suggestionOptions.size()__                }_                assert currentOffset == sortedDocs.length : "expected no more score doc slices"__            }_        }_        return reducedQueryPhase.buildResponse(hits)__    };enriches,search,hits,and,completion,suggestion,hits,from,code,sorted,docs,code,using,code,fetch,results,arr,code,merges,suggestions,aggregations,and,profile,results,expects,sorted,docs,to,have,top,search,docs,across,all,shards,optionally,followed,by,top,suggest,docs,for,each,named,completion,suggestion,ordered,by,suggestion,name;public,internal,search,response,merge,boolean,ignore,from,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,fetch,results,int,function,search,phase,result,results,lookup,if,reduced,query,phase,is,empty,result,return,internal,search,response,empty,score,doc,sorted,docs,reduced,query,phase,sorted,top,docs,score,docs,search,hits,hits,get,hits,reduced,query,phase,ignore,from,fetch,results,results,lookup,if,reduced,query,phase,suggest,null,if,fetch,results,is,empty,int,current,offset,hits,get,hits,length,for,completion,suggestion,suggestion,reduced,query,phase,suggest,filter,completion,suggestion,class,final,list,completion,suggestion,entry,option,suggestion,options,suggestion,get,options,for,int,score,doc,index,current,offset,score,doc,index,current,offset,suggestion,options,size,score,doc,index,score,doc,shard,doc,sorted,docs,score,doc,index,search,phase,result,search,result,provider,results,lookup,apply,shard,doc,shard,index,if,search,result,provider,null,continue,fetch,search,result,fetch,result,search,result,provider,fetch,result,final,int,index,fetch,result,counter,get,and,increment,assert,index,fetch,result,hits,get,hits,length,not,enough,hits,fetched,index,index,length,fetch,result,hits,get,hits,length,search,hit,hit,fetch,result,hits,get,hits,index,completion,suggestion,entry,option,suggest,option,suggestion,options,get,score,doc,index,current,offset,hit,score,shard,doc,score,hit,shard,fetch,result,get,search,shard,target,suggest,option,set,hit,hit,current,offset,suggestion,options,size,assert,current,offset,sorted,docs,length,expected,no,more,score,doc,slices,return,reduced,query,phase,build,response,hits
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1536314350;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                if (td.topDocs.scoreDocs.length > 0) { _                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1539615817;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                if (td.topDocs.scoreDocs.length > 0) { _                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1541092382;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                if (td.topDocs.scoreDocs.length > 0) { _                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1542402699;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,                                   final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size);1544035746;Returns a score doc array of top N search docs across all shards, followed by top suggest docs for each_named completion suggestion across all shards. If more than one named completion suggestion is specified in the_request, the suggest docs for a named suggestion are ordered by the suggestion name.__Note: The order of the sorted score docs depends on the shard index in the result array if the merge process needs to disambiguate_the result. In oder to obtain stable results the shard index (index of the result in the result array) must be the same.__@param ignoreFrom Whether to ignore the from and sort all hits in each shard result._Enabled only for scroll search, because that only retrieves hits of length 'size' in the query phase._@param results the search phase results to obtain the sort docs from_@param bufferedTopDocs the pre-consumed buffered top docs_@param topDocsStats the top docs stats to fill_@param from the offset into the search results top docs_@param size the number of hits to return from the merged top docs;public SortedTopDocs sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results,_                                  final Collection<TopDocs> bufferedTopDocs, final TopDocsStats topDocsStats, int from, int size) {_        if (results.isEmpty()) {_            return SortedTopDocs.EMPTY__        }_        final Collection<TopDocs> topDocs = bufferedTopDocs == null ? new ArrayList<>() : bufferedTopDocs__        final Map<String, List<Suggestion<CompletionSuggestion.Entry>>> groupedCompletionSuggestions = new HashMap<>()__        for (SearchPhaseResult sortedResult : results) { _            _            QuerySearchResult queryResult = sortedResult.queryResult()__            if (queryResult.hasConsumedTopDocs() == false) { _                final TopDocsAndMaxScore td = queryResult.consumeTopDocs()__                assert td != null__                topDocsStats.add(td)__                _                if (td.topDocs.scoreDocs.length > 0) {_                    setShardIndex(td.topDocs, queryResult.getShardIndex())__                    topDocs.add(td.topDocs)__                }_            }_            if (queryResult.hasSuggestHits()) {_                Suggest shardSuggest = queryResult.suggest()__                for (CompletionSuggestion suggestion : shardSuggest.filter(CompletionSuggestion.class)) {_                    suggestion.setShardIndex(sortedResult.getShardIndex())__                    List<Suggestion<CompletionSuggestion.Entry>> suggestions =_                        groupedCompletionSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestions.add(suggestion)__                }_            }_        }_        final boolean hasHits = (groupedCompletionSuggestions.isEmpty() && topDocs.isEmpty()) == false__        if (hasHits) {_            final TopDocs mergedTopDocs = mergeTopDocs(topDocs, size, ignoreFrom ? 0 : from)__            final ScoreDoc[] mergedScoreDocs = mergedTopDocs == null ? EMPTY_DOCS : mergedTopDocs.scoreDocs__            ScoreDoc[] scoreDocs = mergedScoreDocs__            if (groupedCompletionSuggestions.isEmpty() == false) {_                int numSuggestDocs = 0__                List<Suggestion<? extends Entry<? extends Entry.Option>>> completionSuggestions =_                    new ArrayList<>(groupedCompletionSuggestions.size())__                for (List<Suggestion<CompletionSuggestion.Entry>> groupedSuggestions : groupedCompletionSuggestions.values()) {_                    final CompletionSuggestion completionSuggestion = CompletionSuggestion.reduceTo(groupedSuggestions)__                    assert completionSuggestion != null__                    numSuggestDocs += completionSuggestion.getOptions().size()__                    completionSuggestions.add(completionSuggestion)__                }_                scoreDocs = new ScoreDoc[mergedScoreDocs.length + numSuggestDocs]__                System.arraycopy(mergedScoreDocs, 0, scoreDocs, 0, mergedScoreDocs.length)__                int offset = mergedScoreDocs.length__                Suggest suggestions = new Suggest(completionSuggestions)__                for (CompletionSuggestion completionSuggestion : suggestions.filter(CompletionSuggestion.class)) {_                    for (CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {_                        scoreDocs[offset++] = option.getDoc()__                    }_                }_            }_            final boolean isSortedByField__            final SortField[] sortFields__            if (mergedTopDocs != null && mergedTopDocs instanceof TopFieldDocs) {_                TopFieldDocs fieldDocs = (TopFieldDocs) mergedTopDocs__                isSortedByField = (fieldDocs instanceof CollapseTopFieldDocs &&_                    fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false__                sortFields = fieldDocs.fields__            } else {_                isSortedByField = false__                sortFields = null__            }_            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields)__        } else {_            _            return SortedTopDocs.EMPTY__        }_    };returns,a,score,doc,array,of,top,n,search,docs,across,all,shards,followed,by,top,suggest,docs,for,each,named,completion,suggestion,across,all,shards,if,more,than,one,named,completion,suggestion,is,specified,in,the,request,the,suggest,docs,for,a,named,suggestion,are,ordered,by,the,suggestion,name,note,the,order,of,the,sorted,score,docs,depends,on,the,shard,index,in,the,result,array,if,the,merge,process,needs,to,disambiguate,the,result,in,oder,to,obtain,stable,results,the,shard,index,index,of,the,result,in,the,result,array,must,be,the,same,param,ignore,from,whether,to,ignore,the,from,and,sort,all,hits,in,each,shard,result,enabled,only,for,scroll,search,because,that,only,retrieves,hits,of,length,size,in,the,query,phase,param,results,the,search,phase,results,to,obtain,the,sort,docs,from,param,buffered,top,docs,the,pre,consumed,buffered,top,docs,param,top,docs,stats,the,top,docs,stats,to,fill,param,from,the,offset,into,the,search,results,top,docs,param,size,the,number,of,hits,to,return,from,the,merged,top,docs;public,sorted,top,docs,sort,docs,boolean,ignore,from,collection,extends,search,phase,result,results,final,collection,top,docs,buffered,top,docs,final,top,docs,stats,top,docs,stats,int,from,int,size,if,results,is,empty,return,sorted,top,docs,empty,final,collection,top,docs,top,docs,buffered,top,docs,null,new,array,list,buffered,top,docs,final,map,string,list,suggestion,completion,suggestion,entry,grouped,completion,suggestions,new,hash,map,for,search,phase,result,sorted,result,results,query,search,result,query,result,sorted,result,query,result,if,query,result,has,consumed,top,docs,false,final,top,docs,and,max,score,td,query,result,consume,top,docs,assert,td,null,top,docs,stats,add,td,if,td,top,docs,score,docs,length,0,set,shard,index,td,top,docs,query,result,get,shard,index,top,docs,add,td,top,docs,if,query,result,has,suggest,hits,suggest,shard,suggest,query,result,suggest,for,completion,suggestion,suggestion,shard,suggest,filter,completion,suggestion,class,suggestion,set,shard,index,sorted,result,get,shard,index,list,suggestion,completion,suggestion,entry,suggestions,grouped,completion,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestions,add,suggestion,final,boolean,has,hits,grouped,completion,suggestions,is,empty,top,docs,is,empty,false,if,has,hits,final,top,docs,merged,top,docs,merge,top,docs,top,docs,size,ignore,from,0,from,final,score,doc,merged,score,docs,merged,top,docs,null,merged,top,docs,score,docs,score,doc,score,docs,merged,score,docs,if,grouped,completion,suggestions,is,empty,false,int,num,suggest,docs,0,list,suggestion,extends,entry,extends,entry,option,completion,suggestions,new,array,list,grouped,completion,suggestions,size,for,list,suggestion,completion,suggestion,entry,grouped,suggestions,grouped,completion,suggestions,values,final,completion,suggestion,completion,suggestion,completion,suggestion,reduce,to,grouped,suggestions,assert,completion,suggestion,null,num,suggest,docs,completion,suggestion,get,options,size,completion,suggestions,add,completion,suggestion,score,docs,new,score,doc,merged,score,docs,length,num,suggest,docs,system,arraycopy,merged,score,docs,0,score,docs,0,merged,score,docs,length,int,offset,merged,score,docs,length,suggest,suggestions,new,suggest,completion,suggestions,for,completion,suggestion,completion,suggestion,suggestions,filter,completion,suggestion,class,for,completion,suggestion,entry,option,option,completion,suggestion,get,options,score,docs,offset,option,get,doc,final,boolean,is,sorted,by,field,final,sort,field,sort,fields,if,merged,top,docs,null,merged,top,docs,instanceof,top,field,docs,top,field,docs,field,docs,top,field,docs,merged,top,docs,is,sorted,by,field,field,docs,instanceof,collapse,top,field,docs,field,docs,fields,length,1,field,docs,fields,0,get,type,sort,field,type,score,false,sort,fields,field,docs,fields,else,is,sorted,by,field,false,sort,fields,null,return,new,sorted,top,docs,score,docs,is,sorted,by,field,sort,fields,else,return,sorted,top,docs,empty
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1546005500;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1546630609;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1547037408;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1547071054;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        boolean timedOut = false__        Boolean terminatedEarly = null__        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (result.searchTimedOut()) {_                timedOut = true__            }_            if (result.terminatedEarly() != null) {_                if (terminatedEarly == null) {_                    terminatedEarly = result.terminatedEarly()__                } else if (result.terminatedEarly()) {_                    terminatedEarly = true__                }_            }_            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.maxScore,_            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,boolean,timed,out,false,boolean,terminated,early,null,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,result,search,timed,out,timed,out,true,if,result,terminated,early,null,if,terminated,early,null,terminated,early,result,terminated,early,else,if,result,terminated,early,terminated,early,true,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,max,score,timed,out,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1548067907;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,false,null,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,top,docs,stats,timed,out,top,docs,stats,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1548420339;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,false,null,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,top,docs,stats,timed,out,top,docs,stats,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1549019502;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,false,null,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,top,docs,stats,timed,out,top,docs,stats,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1549276276;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest suggest = groupedSuggestions.isEmpty() ? null : new Suggest(Suggest.reduce(groupedSuggestions))__        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,false,null,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,suggest,grouped,suggestions,is,empty,null,new,suggest,suggest,reduce,grouped,suggestions,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,top,docs,stats,timed,out,top,docs,stats,terminated,early,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,                                                 List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,                                                 TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,                                                 boolean performFinalReduce);1551177682;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results_@param bufferedAggs a list of pre-collected / buffered aggregations. if this list is non-null all aggregations have been consumed_from all non-null query results._@param bufferedTopDocs a list of pre-collected / buffered top docs. if this list is non-null all top docs have been consumed_from all non-null query results._@param numReducePhases the number of non-final reduce phases applied to the query results._@see QuerySearchResult#consumeAggs()_@see QuerySearchResult#consumeProfileResult();private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,_                                                List<InternalAggregations> bufferedAggs, List<TopDocs> bufferedTopDocs,_                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,_                                                boolean performFinalReduce) {_        assert numReducePhases >= 0 : "num reduce phases must be >= 0 but was: " + numReducePhases__        numReducePhases++_ _        if (queryResults.isEmpty()) { _            final TotalHits totalHits = topDocsStats.getTotalHits()__            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true)__        }_        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult()__        final boolean hasSuggest = firstResult.suggest() != null__        final boolean hasProfileResults = firstResult.hasProfileResults()__        final boolean consumeAggs__        final List<InternalAggregations> aggregationsList__        if (bufferedAggs != null) {_            consumeAggs = false__            _            assert firstResult.hasAggs() : "firstResult has no aggs but we got non null buffered aggs?"__            aggregationsList = bufferedAggs__        } else if (firstResult.hasAggs()) {_            _            aggregationsList = new ArrayList<>(queryResults.size())__            consumeAggs = true__        } else {_            _            aggregationsList = Collections.emptyList()__            consumeAggs = false__        }__        _        final Map<String, List<Suggestion>> groupedSuggestions = hasSuggest ? new HashMap<>() : Collections.emptyMap()__        final Map<String, ProfileShardResult> profileResults = hasProfileResults ? new HashMap<>(queryResults.size())_            : Collections.emptyMap()__        int from = 0__        int size = 0__        for (SearchPhaseResult entry : queryResults) {_            QuerySearchResult result = entry.queryResult()__            from = result.from()__            size = result.size()__            if (hasSuggest) {_                assert result.suggest() != null__                for (Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> suggestion : result.suggest()) {_                    List<Suggestion> suggestionList = groupedSuggestions.computeIfAbsent(suggestion.getName(), s -> new ArrayList<>())__                    suggestionList.add(suggestion)__                    if (suggestion instanceof CompletionSuggestion) {_                        CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion__                        completionSuggestion.setShardIndex(result.getShardIndex())__                    }_                }_            }_            if (consumeAggs) {_                aggregationsList.add((InternalAggregations) result.consumeAggs())__            }_            if (hasProfileResults) {_                String key = result.getSearchShardTarget().toString()__                profileResults.put(key, result.consumeProfileResult())__            }_        }_        final Suggest reducedSuggest__        final List<CompletionSuggestion> reducedCompletionSuggestions__        if (groupedSuggestions.isEmpty()) {_            reducedSuggest = null__            reducedCompletionSuggestions = Collections.emptyList()__        } else {_            reducedSuggest = new Suggest(Suggest.reduce(groupedSuggestions))__            reducedCompletionSuggestions = reducedSuggest.filter(CompletionSuggestion.class)__        }_        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce)__        final InternalAggregations aggregations = aggregationsList.isEmpty() ? null : reduceAggs(aggregationsList,_            firstResult.pipelineAggregators(), reduceContext)__        final SearchProfileShardResults shardResults = profileResults.isEmpty() ? null : new SearchProfileShardResults(profileResults)__        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size,_            reducedCompletionSuggestions)__        final TotalHits totalHits = topDocsStats.getTotalHits()__        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),_            topDocsStats.timedOut, topDocsStats.terminatedEarly, reducedSuggest, aggregations, shardResults, sortedTopDocs,_            firstResult.sortValueFormats(), numReducePhases, size, from, false)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results,param,buffered,aggs,a,list,of,pre,collected,buffered,aggregations,if,this,list,is,non,null,all,aggregations,have,been,consumed,from,all,non,null,query,results,param,buffered,top,docs,a,list,of,pre,collected,buffered,top,docs,if,this,list,is,non,null,all,top,docs,have,been,consumed,from,all,non,null,query,results,param,num,reduce,phases,the,number,of,non,final,reduce,phases,applied,to,the,query,results,see,query,search,result,consume,aggs,see,query,search,result,consume,profile,result;private,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,list,internal,aggregations,buffered,aggs,list,top,docs,buffered,top,docs,top,docs,stats,top,docs,stats,int,num,reduce,phases,boolean,is,scroll,request,boolean,perform,final,reduce,assert,num,reduce,phases,0,num,reduce,phases,must,be,0,but,was,num,reduce,phases,num,reduce,phases,if,query,results,is,empty,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,false,null,null,null,null,sorted,top,docs,empty,null,num,reduce,phases,0,0,true,final,query,search,result,first,result,query,results,stream,find,first,get,query,result,final,boolean,has,suggest,first,result,suggest,null,final,boolean,has,profile,results,first,result,has,profile,results,final,boolean,consume,aggs,final,list,internal,aggregations,aggregations,list,if,buffered,aggs,null,consume,aggs,false,assert,first,result,has,aggs,first,result,has,no,aggs,but,we,got,non,null,buffered,aggs,aggregations,list,buffered,aggs,else,if,first,result,has,aggs,aggregations,list,new,array,list,query,results,size,consume,aggs,true,else,aggregations,list,collections,empty,list,consume,aggs,false,final,map,string,list,suggestion,grouped,suggestions,has,suggest,new,hash,map,collections,empty,map,final,map,string,profile,shard,result,profile,results,has,profile,results,new,hash,map,query,results,size,collections,empty,map,int,from,0,int,size,0,for,search,phase,result,entry,query,results,query,search,result,result,entry,query,result,from,result,from,size,result,size,if,has,suggest,assert,result,suggest,null,for,suggestion,extends,suggestion,entry,extends,suggestion,entry,option,suggestion,result,suggest,list,suggestion,suggestion,list,grouped,suggestions,compute,if,absent,suggestion,get,name,s,new,array,list,suggestion,list,add,suggestion,if,suggestion,instanceof,completion,suggestion,completion,suggestion,completion,suggestion,completion,suggestion,suggestion,completion,suggestion,set,shard,index,result,get,shard,index,if,consume,aggs,aggregations,list,add,internal,aggregations,result,consume,aggs,if,has,profile,results,string,key,result,get,search,shard,target,to,string,profile,results,put,key,result,consume,profile,result,final,suggest,reduced,suggest,final,list,completion,suggestion,reduced,completion,suggestions,if,grouped,suggestions,is,empty,reduced,suggest,null,reduced,completion,suggestions,collections,empty,list,else,reduced,suggest,new,suggest,suggest,reduce,grouped,suggestions,reduced,completion,suggestions,reduced,suggest,filter,completion,suggestion,class,reduce,context,reduce,context,reduce,context,function,apply,perform,final,reduce,final,internal,aggregations,aggregations,aggregations,list,is,empty,null,reduce,aggs,aggregations,list,first,result,pipeline,aggregators,reduce,context,final,search,profile,shard,results,shard,results,profile,results,is,empty,null,new,search,profile,shard,results,profile,results,final,sorted,top,docs,sorted,top,docs,sort,docs,is,scroll,request,query,results,buffered,top,docs,top,docs,stats,from,size,reduced,completion,suggestions,final,total,hits,total,hits,top,docs,stats,get,total,hits,return,new,reduced,query,phase,total,hits,top,docs,stats,fetch,hits,top,docs,stats,get,max,score,top,docs,stats,timed,out,top,docs,stats,terminated,early,reduced,suggest,aggregations,shard,results,sorted,top,docs,first,result,sort,value,formats,num,reduce,phases,size,from,false
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1524684173;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1528762805;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1536314350;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1539615817;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1541092382;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1542402699;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1544035746;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1544556269;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1544786574;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1546005500;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1546630609;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1547037408;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1547071054;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1548067907;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1548420339;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1549019502;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1549276276;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> ReducedQueryPhase -> public InternalSearchResponse buildResponse(SearchHits hits);1551177682;Creates a new search response from the given merged hits._@see #merge(boolean, ReducedQueryPhase, Collection, IntFunction);public InternalSearchResponse buildResponse(SearchHits hits) {_            return new InternalSearchResponse(hits, aggregations, suggest, shardResults, timedOut, terminatedEarly, numReducePhases)__        };creates,a,new,search,response,from,the,given,merged,hits,see,merge,boolean,reduced,query,phase,collection,int,function;public,internal,search,response,build,response,search,hits,hits,return,new,internal,search,response,hits,aggregations,suggest,shard,results,timed,out,terminated,early,num,reduce,phases
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits);1524684173;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits);1528762805;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits);1536314350;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits);1539615817;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits);1541092382;Reduces the given query results and consumes all aggregations and profile results._@param queryResults a list of non-null query shard results;public ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults, boolean isScrollRequest, boolean trackTotalHits) {_        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest)__    };reduces,the,given,query,results,and,consumes,all,aggregations,and,profile,results,param,query,results,a,list,of,non,null,query,shard,results;public,reduced,query,phase,reduced,query,phase,collection,extends,search,phase,result,query,results,boolean,is,scroll,request,boolean,track,total,hits,return,reduced,query,phase,query,results,null,new,array,list,new,top,docs,stats,track,total,hits,0,is,scroll,request
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1524684173;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1528762805;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1536314350;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1539615817;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1541092382;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1542402699;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1544035746;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1544556269;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            public ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,public,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1544786574;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1546005500;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final boolean trackTotalHits = source == null || source.trackTotalHits()__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,boolean,track,total,hits,source,null,source,track,total,hits,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1546630609;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = source == null ? SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : source.trackTotalHitsUpTo()__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,source,null,search,context,source,track,total,hits,up,to,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1547037408;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = source == null ? SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : source.trackTotalHitsUpTo()__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,source,null,search,context,source,track,total,hits,up,to,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1547071054;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = source == null ? SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : source.trackTotalHitsUpTo()__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,source,null,search,context,source,track,total,hits,up,to,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1548067907;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = source == null ? SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO : source.trackTotalHitsUpTo()__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,source,null,search,context,source,track,total,hits,up,to,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1548420339;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = resolveTrackTotalHits(request)__        final boolean finalReduce = request.getLocalClusterAlias() == null___        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, finalReduce)__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, finalReduce)__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,resolve,track,total,hits,request,final,boolean,final,reduce,request,get,local,cluster,alias,null,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1549019502;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = resolveTrackTotalHits(request)__        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, request.isFinalReduce())__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, request.isFinalReduce())__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,resolve,track,total,hits,request,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,request,is,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,request,is,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1549276276;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = resolveTrackTotalHits(request)__        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, request.isFinalReduce())__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, request.isFinalReduce())__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,resolve,track,total,hits,request,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,request,is,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,request,is,final,reduce
SearchPhaseController -> InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards);1551177682;Returns a new ArraySearchPhaseResults instance. This might return an instance that reduces search responses incrementally.;InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> newSearchPhaseResults(SearchRequest request, int numShards) {_        SearchSourceBuilder source = request.source()__        boolean isScrollRequest = request.scroll() != null__        final boolean hasAggs = source != null && source.aggregations() != null__        final boolean hasTopDocs = source == null || source.size() != 0__        final int trackTotalHitsUpTo = resolveTrackTotalHits(request)__        if (isScrollRequest == false && (hasAggs || hasTopDocs)) {_            _            if (request.getBatchedReduceSize() < numShards) {_                _                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs,_                    trackTotalHitsUpTo, request.isFinalReduce())__            }_        }_        return new InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult>(numShards) {_            @Override_            ReducedQueryPhase reduce() {_                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHitsUpTo, request.isFinalReduce())__            }_        }__    };returns,a,new,array,search,phase,results,instance,this,might,return,an,instance,that,reduces,search,responses,incrementally;initial,search,phase,array,search,phase,results,search,phase,result,new,search,phase,results,search,request,request,int,num,shards,search,source,builder,source,request,source,boolean,is,scroll,request,request,scroll,null,final,boolean,has,aggs,source,null,source,aggregations,null,final,boolean,has,top,docs,source,null,source,size,0,final,int,track,total,hits,up,to,resolve,track,total,hits,request,if,is,scroll,request,false,has,aggs,has,top,docs,if,request,get,batched,reduce,size,num,shards,return,new,query,phase,result,consumer,this,num,shards,request,get,batched,reduce,size,has,top,docs,has,aggs,track,total,hits,up,to,request,is,final,reduce,return,new,initial,search,phase,array,search,phase,results,search,phase,result,num,shards,override,reduced,query,phase,reduce,return,reduced,query,phase,results,as,list,is,scroll,request,track,total,hits,up,to,request,is,final,reduce
SearchPhaseController -> public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction);1524684173;Constructor._@param settings Node settings_@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction) {_        super(settings)__        this.reduceContextFunction = reduceContextFunction__    };constructor,param,settings,node,settings,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,settings,settings,function,boolean,reduce,context,reduce,context,function,super,settings,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction);1528762805;Constructor._@param settings Node settings_@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction) {_        super(settings)__        this.reduceContextFunction = reduceContextFunction__    };constructor,param,settings,node,settings,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,settings,settings,function,boolean,reduce,context,reduce,context,function,super,settings,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction);1536314350;Constructor._@param settings Node settings_@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction) {_        super(settings)__        this.reduceContextFunction = reduceContextFunction__    };constructor,param,settings,node,settings,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,settings,settings,function,boolean,reduce,context,reduce,context,function,super,settings,this,reduce,context,function,reduce,context,function
SearchPhaseController -> public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction);1539615817;Constructor._@param settings Node settings_@param reduceContextFunction A function that builds a context for the reduce of an {@link InternalAggregation};public SearchPhaseController(Settings settings, Function<Boolean, ReduceContext> reduceContextFunction) {_        super(settings)__        this.reduceContextFunction = reduceContextFunction__    };constructor,param,settings,node,settings,param,reduce,context,function,a,function,that,builds,a,context,for,the,reduce,of,an,link,internal,aggregation;public,search,phase,controller,settings,settings,function,boolean,reduce,context,reduce,context,function,super,settings,this,reduce,context,function,reduce,context,function
