commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;double trigramLambda() {     return this.trigramLambda. }
false;;0;3;;double bigramLambda() {     return this.bigramLambda. }
false;;0;3;;double unigramLambda() {     return this.unigramLambda. }
false;protected;2;9;;@Override protected double scoreBigram(Candidate word, Candidate w_1) throws IOException {     join(separator, spare, w_1.term, word.term).     final long count = frequency(spare.get()).     if (count < 1) {         return unigramLambda * scoreUnigram(word).     }     return bigramLambda * (count / (0.5d + w_1.termStats.totalTermFreq)) + unigramLambda * scoreUnigram(word). }
false;protected;3;10;;@Override protected double scoreTrigram(Candidate w, Candidate w_1, Candidate w_2) throws IOException {     join(separator, spare, w.term, w_1.term, w_2.term).     final long count = frequency(spare.get()).     if (count < 1) {         return scoreBigram(w, w_1).     }     join(separator, spare, w.term, w_1.term).     return trigramLambda * (count / (1.d + frequency(spare.get()))) + scoreBigram(w, w_1). }
