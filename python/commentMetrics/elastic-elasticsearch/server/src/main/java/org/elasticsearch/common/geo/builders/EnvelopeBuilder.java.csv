commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     writeCoordinateTo(topLeft, out).     writeCoordinateTo(bottomRight, out). }
false;public;0;3;;public Coordinate topLeft() {     return this.topLeft. }
false;public;0;3;;public Coordinate bottomRight() {     return this.bottomRight. }
false;protected;0;21;;@Override protected StringBuilder contentToWKT() {     StringBuilder sb = new StringBuilder().     sb.append(GeoWKTParser.LPAREN).     // minX, maxX, maxY, minY     sb.append(topLeft.x).     sb.append(GeoWKTParser.COMMA).     sb.append(GeoWKTParser.SPACE).     sb.append(bottomRight.x).     sb.append(GeoWKTParser.COMMA).     sb.append(GeoWKTParser.SPACE).     // TODO support Z??     sb.append(topLeft.y).     sb.append(GeoWKTParser.COMMA).     sb.append(GeoWKTParser.SPACE).     sb.append(bottomRight.y).     sb.append(GeoWKTParser.RPAREN).     return sb. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ShapeParser.FIELD_TYPE.getPreferredName(), TYPE.shapeName()).     builder.startArray(ShapeParser.FIELD_COORDINATES.getPreferredName()).     toXContent(builder, topLeft).     toXContent(builder, bottomRight).     builder.endArray().     return builder.endObject(). }
false;public;0;4;;@Override public Rectangle buildS4J() {     return SPATIAL_CONTEXT.makeRectangle(topLeft.x, bottomRight.x, bottomRight.y, topLeft.y). }
false;public;0;4;;@Override public org.elasticsearch.geo.geometry.Rectangle buildGeometry() {     return new org.elasticsearch.geo.geometry.Rectangle(bottomRight.y, topLeft.y, topLeft.x, bottomRight.x). }
false;public;0;4;;@Override public GeoShapeType type() {     return TYPE. }
false;public;0;4;;@Override public int numDimensions() {     return Double.isNaN(topLeft.z) ? 2 : 3. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(topLeft, bottomRight). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     EnvelopeBuilder other = (EnvelopeBuilder) obj.     return Objects.equals(topLeft, other.topLeft) && Objects.equals(bottomRight, other.bottomRight). }
