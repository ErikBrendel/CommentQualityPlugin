# id;timestamp;commentText;codeText;commentWords;codeWords
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1524684173;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1528706846;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1531910483;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1533641732;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1534848846;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1535723122;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> Checkpoint getLastSyncedCheckpoint();1542697754;The last synced checkpoint for this translog.__@return the last synced checkpoint;Checkpoint getLastSyncedCheckpoint() {_        return lastSyncedCheckpoint__    };the,last,synced,checkpoint,for,this,translog,return,the,last,synced,checkpoint;checkpoint,get,last,synced,checkpoint,return,last,synced,checkpoint
TranslogWriter -> public void sync() throws IOException;1524684173;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1528706846;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1531910483;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1533641732;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1534848846;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1535723122;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public void sync() throws IOException;1542697754;write all buffered ops to disk and fsync file.__Note: any exception during the sync process will be interpreted as a tragic exception and the writer will be closed before_raising the exception.;public void sync() throws IOException {_        syncUpTo(Long.MAX_VALUE)__    };write,all,buffered,ops,to,disk,and,fsync,file,note,any,exception,during,the,sync,process,will,be,interpreted,as,a,tragic,exception,and,the,writer,will,be,closed,before,raising,the,exception;public,void,sync,throws,ioexception,sync,up,to,long
TranslogWriter -> public Exception getTragicException();1524684173;If this {@code TranslogWriter} was closed as a side-effect of a tragic exception,_e.g. disk full while flushing a new segment, this returns the root cause exception._Otherwise (no tragic exception has occurred) it returns null.;public Exception getTragicException() {_        return tragedy__    };if,this,code,translog,writer,was,closed,as,a,side,effect,of,a,tragic,exception,e,g,disk,full,while,flushing,a,new,segment,this,returns,the,root,cause,exception,otherwise,no,tragic,exception,has,occurred,it,returns,null;public,exception,get,tragic,exception,return,tragedy
TranslogWriter -> public Exception getTragicException();1528706846;If this {@code TranslogWriter} was closed as a side-effect of a tragic exception,_e.g. disk full while flushing a new segment, this returns the root cause exception._Otherwise (no tragic exception has occurred) it returns null.;public Exception getTragicException() {_        return tragedy__    };if,this,code,translog,writer,was,closed,as,a,side,effect,of,a,tragic,exception,e,g,disk,full,while,flushing,a,new,segment,this,returns,the,root,cause,exception,otherwise,no,tragic,exception,has,occurred,it,returns,null;public,exception,get,tragic,exception,return,tragedy
TranslogWriter -> public Exception getTragicException();1531910483;If this {@code TranslogWriter} was closed as a side-effect of a tragic exception,_e.g. disk full while flushing a new segment, this returns the root cause exception._Otherwise (no tragic exception has occurred) it returns null.;public Exception getTragicException() {_        return tragedy__    };if,this,code,translog,writer,was,closed,as,a,side,effect,of,a,tragic,exception,e,g,disk,full,while,flushing,a,new,segment,this,returns,the,root,cause,exception,otherwise,no,tragic,exception,has,occurred,it,returns,null;public,exception,get,tragic,exception,return,tragedy
TranslogWriter -> public Exception getTragicException();1533641732;If this {@code TranslogWriter} was closed as a side-effect of a tragic exception,_e.g. disk full while flushing a new segment, this returns the root cause exception._Otherwise (no tragic exception has occurred) it returns null.;public Exception getTragicException() {_        return tragedy__    };if,this,code,translog,writer,was,closed,as,a,side,effect,of,a,tragic,exception,e,g,disk,full,while,flushing,a,new,segment,this,returns,the,root,cause,exception,otherwise,no,tragic,exception,has,occurred,it,returns,null;public,exception,get,tragic,exception,return,tragedy
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1524684173;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1528706846;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1531910483;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1533641732;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1534848846;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1535723122;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException;1542697754;Add the given bytes to the translog with the specified sequence number_ returns the location the bytes were written to.__@param data  the bytes to write_@param seqNo the sequence number associated with the operation_@return the location the bytes were written to_@throws IOException if writing to the translog resulted in an I/O exception;public synchronized Translog.Location add(final BytesReference data, final long seqNo) throws IOException {_        ensureOpen()__        final long offset = totalOffset__        try {_            data.writeTo(outputStream)__        } catch (final Exception ex) {_            closeWithTragicEvent(ex)__            throw ex__        }_        totalOffset += data.length()___        if (minSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }_        if (maxSeqNo == SequenceNumbers.NO_OPS_PERFORMED) {_            assert operationCounter == 0__        }__        minSeqNo = SequenceNumbers.min(minSeqNo, seqNo)__        maxSeqNo = SequenceNumbers.max(maxSeqNo, seqNo)___        operationCounter++___        assert assertNoSeqNumberConflict(seqNo, data)___        return new Translog.Location(generation, offset, data.length())__    };add,the,given,bytes,to,the,translog,with,the,specified,sequence,number,returns,the,location,the,bytes,were,written,to,param,data,the,bytes,to,write,param,seq,no,the,sequence,number,associated,with,the,operation,return,the,location,the,bytes,were,written,to,throws,ioexception,if,writing,to,the,translog,resulted,in,an,i,o,exception;public,synchronized,translog,location,add,final,bytes,reference,data,final,long,seq,no,throws,ioexception,ensure,open,final,long,offset,total,offset,try,data,write,to,output,stream,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,total,offset,data,length,if,min,seq,no,sequence,numbers,assert,operation,counter,0,if,max,seq,no,sequence,numbers,assert,operation,counter,0,min,seq,no,sequence,numbers,min,min,seq,no,seq,no,max,seq,no,sequence,numbers,max,max,seq,no,seq,no,operation,counter,assert,assert,no,seq,number,conflict,seq,no,data,return,new,translog,location,generation,offset,data,length
TranslogWriter -> public boolean syncNeeded();1524684173;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1528706846;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1531910483;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1533641732;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1534848846;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1535723122;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncNeeded();1542697754;Returns <code>true</code> if there are buffered operations that have not been flushed and fsynced to disk or if the latest global_checkpoint has not yet been fsynced;public boolean syncNeeded() {_        return totalOffset != lastSyncedCheckpoint.offset ||_            globalCheckpointSupplier.getAsLong() != lastSyncedCheckpoint.globalCheckpoint ||_            minTranslogGenerationSupplier.getAsLong() != lastSyncedCheckpoint.minTranslogGeneration__    };returns,code,true,code,if,there,are,buffered,operations,that,have,not,been,flushed,and,fsynced,to,disk,or,if,the,latest,global,checkpoint,has,not,yet,been,fsynced;public,boolean,sync,needed,return,total,offset,last,synced,checkpoint,offset,global,checkpoint,supplier,get,as,long,last,synced,checkpoint,global,checkpoint,min,translog,generation,supplier,get,as,long,last,synced,checkpoint,min,translog,generation
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1524684173;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1528706846;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1531910483;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1533641732;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1534848846;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1535723122;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public boolean syncUpTo(long offset) throws IOException;1542697754;Syncs the translog up to at least the given offset unless already synced__@return <code>true</code> if this call caused an actual sync operation;public boolean syncUpTo(long offset) throws IOException {_        if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_            synchronized (syncLock) { _                if (lastSyncedCheckpoint.offset < offset && syncNeeded()) {_                    _                    _                    final Checkpoint checkpointToSync__                    synchronized (this) {_                        ensureOpen()__                        try {_                            outputStream.flush()__                            checkpointToSync = getCheckpoint()__                        } catch (final Exception ex) {_                            closeWithTragicEvent(ex)__                            throw ex__                        }_                    }_                    _                    _                    try {_                        channel.force(false)__                        writeCheckpoint(channelFactory, path.getParent(), checkpointToSync)__                    } catch (final Exception ex) {_                        closeWithTragicEvent(ex)__                        throw ex__                    }_                    assert lastSyncedCheckpoint.offset <= checkpointToSync.offset :_                        "illegal state: " + lastSyncedCheckpoint.offset + " <= " + checkpointToSync.offset__                    lastSyncedCheckpoint = checkpointToSync_ _                    return true__                }_            }_        }_        return false__    };syncs,the,translog,up,to,at,least,the,given,offset,unless,already,synced,return,code,true,code,if,this,call,caused,an,actual,sync,operation;public,boolean,sync,up,to,long,offset,throws,ioexception,if,last,synced,checkpoint,offset,offset,sync,needed,synchronized,sync,lock,if,last,synced,checkpoint,offset,offset,sync,needed,final,checkpoint,checkpoint,to,sync,synchronized,this,ensure,open,try,output,stream,flush,checkpoint,to,sync,get,checkpoint,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,try,channel,force,false,write,checkpoint,channel,factory,path,get,parent,checkpoint,to,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,assert,last,synced,checkpoint,offset,checkpoint,to,sync,offset,illegal,state,last,synced,checkpoint,offset,checkpoint,to,sync,offset,last,synced,checkpoint,checkpoint,to,sync,return,true,return,false
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1524684173;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]", tragedy)__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1528706846;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]", tragedy)__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1531910483;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]", tragedy)__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1533641732;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]", tragedy)__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1534848846;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]",_                            tragedy.get())__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy,get
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1535723122;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]",_                            tragedy.get())__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy,get
TranslogWriter -> public TranslogReader closeIntoReader() throws IOException;1542697754;Closes this writer and transfers its underlying file channel to a new immutable {@link TranslogReader}_@return a new {@link TranslogReader}_@throws IOException if any of the file operations resulted in an I/O exception;public TranslogReader closeIntoReader() throws IOException {_        _        _        _        _        _        synchronized (syncLock) {_            synchronized (this) {_                try {_                    sync()_ _                } catch (final Exception ex) {_                    closeWithTragicEvent(ex)__                    throw ex__                }_                if (closed.compareAndSet(false, true)) {_                    return new TranslogReader(getLastSyncedCheckpoint(), channel, path, header)__                } else {_                    throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]",_                            tragedy.get())__                }_            }_        }_    };closes,this,writer,and,transfers,its,underlying,file,channel,to,a,new,immutable,link,translog,reader,return,a,new,link,translog,reader,throws,ioexception,if,any,of,the,file,operations,resulted,in,an,i,o,exception;public,translog,reader,close,into,reader,throws,ioexception,synchronized,sync,lock,synchronized,this,try,sync,catch,final,exception,ex,close,with,tragic,event,ex,throw,ex,if,closed,compare,and,set,false,true,return,new,translog,reader,get,last,synced,checkpoint,channel,path,header,else,throw,new,already,closed,exception,translog,get,generation,is,already,closed,path,path,tragedy,get
