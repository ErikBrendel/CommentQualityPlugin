commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;4;;private static Result assertDeletedOrNotFound(Result result) {     assert result == Result.DELETED || result == Result.NOT_FOUND.     return result. }
false;public;0;4;;@Override public RestStatus status() {     return result == Result.DELETED ? super.status() : RestStatus.NOT_FOUND. }
false;public;0;12;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("DeleteResponse[").     builder.append("index=").append(getIndex()).     builder.append(",type=").append(getType()).     builder.append(",id=").append(getId()).     builder.append(",version=").append(getVersion()).     builder.append(",result=").append(getResult().getLowercase()).     builder.append(",shards=").append(getShardInfo()).     return builder.append("]").toString(). }
false;public,static;1;9;;public static DeleteResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     Builder context = new Builder().     while (parser.nextToken() != XContentParser.Token.END_OBJECT) {         parseXContentFields(parser, context).     }     return context.build(). }
true;public,static;2;3;/**  * Parse the current token and update the parsing context appropriately.  */ ;/**  * Parse the current token and update the parsing context appropriately.  */ public static void parseXContentFields(XContentParser parser, Builder context) throws IOException {     DocWriteResponse.parseInnerToXContent(parser, context). }
false;public;0;9;;@Override public DeleteResponse build() {     DeleteResponse deleteResponse = new DeleteResponse(shardId, type, id, seqNo, primaryTerm, version, result).     deleteResponse.setForcedRefresh(forcedRefresh).     if (shardInfo != null) {         deleteResponse.setShardInfo(shardInfo).     }     return deleteResponse. }
