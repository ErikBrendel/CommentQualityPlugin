commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeNamedWriteable(format).     out.writeDouble(sum). }
false;public;0;4;;@Override public String getWriteableName() {     return SumAggregationBuilder.NAME. }
false;public;0;4;;@Override public double value() {     return sum. }
false;public;0;4;;@Override public double getValue() {     return sum. }
false;public;2;19;;@Override public InternalSum doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {     // Compute the sum of double values with Kahan summation algorithm which is more     // accurate than naive summation.     double sum = 0.     double compensation = 0.     for (InternalAggregation aggregation : aggregations) {         double value = ((InternalSum) aggregation).sum.         if (Double.isFinite(value) == false) {             sum += value.         } else if (Double.isFinite(sum)) {             double corrected = value - compensation.             double newSum = sum + corrected.             compensation = (newSum - sum) - corrected.             sum = newSum.         }     }     return new InternalSum(name, sum, format, pipelineAggregators(), getMetaData()). }
false;public;2;8;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(CommonFields.VALUE.getPreferredName(), sum).     if (format != DocValueFormat.RAW) {         builder.field(CommonFields.VALUE_AS_STRING.getPreferredName(), format.format(sum).toString()).     }     return builder. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hashCode(sum). }
false;protected;1;5;;@Override protected boolean doEquals(Object obj) {     InternalSum that = (InternalSum) obj.     return Objects.equals(sum, that.sum). }
