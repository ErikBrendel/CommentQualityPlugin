# id;timestamp;commentText;codeText;commentWords;codeWords
FieldMapper -> public Mapper parse(ParseContext context) throws IOException;1524684173;Parse using the provided {@link ParseContext} and return a mapping_update if dynamic mappings modified the mappings, or {@code null} if_mappings were not modified.;public Mapper parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse [" + fieldType().name() + "]", e)__        }_        multiFields.parse(this, context)__        return null__    };parse,using,the,provided,link,parse,context,and,return,a,mapping,update,if,dynamic,mappings,modified,the,mappings,or,code,null,if,mappings,were,not,modified;public,mapper,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,type,name,e,multi,fields,parse,this,context,return,null
FieldMapper -> public Mapper parse(ParseContext context) throws IOException;1528706846;Parse using the provided {@link ParseContext} and return a mapping_update if dynamic mappings modified the mappings, or {@code null} if_mappings were not modified.;public Mapper parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse [" + fieldType().name() + "]", e)__        }_        multiFields.parse(this, context)__        return null__    };parse,using,the,provided,link,parse,context,and,return,a,mapping,update,if,dynamic,mappings,modified,the,mappings,or,code,null,if,mappings,were,not,modified;public,mapper,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,type,name,e,multi,fields,parse,this,context,return,null
FieldMapper -> public Mapper parse(ParseContext context) throws IOException;1531937412;Parse using the provided {@link ParseContext} and return a mapping_update if dynamic mappings modified the mappings, or {@code null} if_mappings were not modified.;public Mapper parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse [" + fieldType().name() + "]", e)__        }_        multiFields.parse(this, context)__        return null__    };parse,using,the,provided,link,parse,context,and,return,a,mapping,update,if,dynamic,mappings,modified,the,mappings,or,code,null,if,mappings,were,not,modified;public,mapper,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,type,name,e,multi,fields,parse,this,context,return,null
FieldMapper -> public Mapper parse(ParseContext context) throws IOException;1533862840;Parse using the provided {@link ParseContext} and return a mapping_update if dynamic mappings modified the mappings, or {@code null} if_mappings were not modified.;public Mapper parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),_                    fieldType().typeName())__        }_        multiFields.parse(this, context)__        return null__    };parse,using,the,provided,link,parse,context,and,return,a,mapping,update,if,dynamic,mappings,modified,the,mappings,or,code,null,if,mappings,were,not,modified;public,mapper,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,of,type,e,field,type,name,field,type,type,name,multi,fields,parse,this,context,return,null
FieldMapper -> public CopyTo copyTo();1524684173;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1528706846;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1531937412;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1533862840;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1536137328;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1541008027;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> public CopyTo copyTo();1548970393;List of fields where this field should be copied to;public CopyTo copyTo() {_        return copyTo__    };list,of,fields,where,this,field,should,be,copied,to;public,copy,to,copy,to,return,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1524684173;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType() + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1528706846;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType() + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1531937412;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType() + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1533862840;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType() + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1536137328;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType() + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1541008027;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType()_                + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected void doMerge(Mapper mergeWith);1548970393;Merge changes coming from {@code mergeWith} in place.;protected void doMerge(Mapper mergeWith) {_        if (!this.getClass().equals(mergeWith.getClass())) {_            String mergedType = mergeWith.getClass().getSimpleName()__            if (mergeWith instanceof FieldMapper) {_                mergedType = ((FieldMapper) mergeWith).contentType()__            }_            throw new IllegalArgumentException("mapper [" + fieldType().name() + "] of different type, current_type [" + contentType()_                + "], merged_type [" + mergedType + "]")__        }_        FieldMapper fieldMergeWith = (FieldMapper) mergeWith__        multiFields = multiFields.merge(fieldMergeWith.multiFields)___        _        this.fieldType = fieldMergeWith.fieldType__        this.copyTo = fieldMergeWith.copyTo__    };merge,changes,coming,from,code,merge,with,in,place;protected,void,do,merge,mapper,merge,with,if,this,get,class,equals,merge,with,get,class,string,merged,type,merge,with,get,class,get,simple,name,if,merge,with,instanceof,field,mapper,merged,type,field,mapper,merge,with,content,type,throw,new,illegal,argument,exception,mapper,field,type,name,of,different,type,content,type,merged,type,field,mapper,field,merge,with,field,mapper,merge,with,multi,fields,multi,fields,merge,field,merge,with,multi,fields,this,field,type,field,merge,with,field,type,this,copy,to,field,merge,with,copy,to
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1524684173;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1528706846;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1531937412;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1533862840;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1536137328;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1541008027;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;1548970393;Parse the field value and populate <code>fields</code>.;protected abstract void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException_;parse,the,field,value,and,populate,code,fields,code;protected,abstract,void,parse,create,field,parse,context,context,list,indexable,field,fields,throws,ioexception
FieldMapper -> public void parse(ParseContext context) throws IOException;1536137328;Parse the field value using the provided {@link ParseContext}.;public void parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),_                    fieldType().typeName())__        }_        multiFields.parse(this, context)__    };parse,the,field,value,using,the,provided,link,parse,context;public,void,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,of,type,e,field,type,name,field,type,type,name,multi,fields,parse,this,context
FieldMapper -> public void parse(ParseContext context) throws IOException;1541008027;Parse the field value using the provided {@link ParseContext}.;public void parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),_                    fieldType().typeName())__        }_        multiFields.parse(this, context)__    };parse,the,field,value,using,the,provided,link,parse,context;public,void,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,of,type,e,field,type,name,field,type,type,name,multi,fields,parse,this,context
FieldMapper -> public void parse(ParseContext context) throws IOException;1548970393;Parse the field value using the provided {@link ParseContext}.;public void parse(ParseContext context) throws IOException {_        final List<IndexableField> fields = new ArrayList<>(2)__        try {_            parseCreateField(context, fields)__            for (IndexableField field : fields) {_                context.doc().add(field)__            }_        } catch (Exception e) {_            throw new MapperParsingException("failed to parse field [{}] of type [{}] in document with id '{}'", e, fieldType().name(),_                    fieldType().typeName(), context.sourceToParse().id())__        }_        multiFields.parse(this, context)__    };parse,the,field,value,using,the,provided,link,parse,context;public,void,parse,parse,context,context,throws,ioexception,final,list,indexable,field,fields,new,array,list,2,try,parse,create,field,context,fields,for,indexable,field,field,fields,context,doc,add,field,catch,exception,e,throw,new,mapper,parsing,exception,failed,to,parse,field,of,type,in,document,with,id,e,field,type,name,field,type,type,name,context,source,to,parse,id,multi,fields,parse,this,context
