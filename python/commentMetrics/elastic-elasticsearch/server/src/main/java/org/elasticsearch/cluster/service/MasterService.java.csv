# id;timestamp;commentText;codeText;commentWords;codeWords
MasterService -> public List<PendingClusterTask> pendingTasks();1524684173;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1526029249;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1527096592;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1529015561;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1529341607;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1529433467;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1540486836;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1540847035;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1541008027;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1542646292;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1544081506;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1545319912;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1547625930;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1548953505;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public List<PendingClusterTask> pendingTasks();1549302240;Returns the tasks that are pending.;public List<PendingClusterTask> pendingTasks() {_        return Arrays.stream(threadPoolExecutor.getPending()).map(pending -> {_            assert pending.task instanceof SourcePrioritizedRunnable :_                "thread pool executor should only use SourcePrioritizedRunnable instances but found: " + pending.task.getClass().getName()__            SourcePrioritizedRunnable task = (SourcePrioritizedRunnable) pending.task__            return new PendingClusterTask(pending.insertionOrder, pending.priority, new Text(task.source()),_                task.getAgeInMillis(), pending.executing)__        }).collect(Collectors.toList())__    };returns,the,tasks,that,are,pending;public,list,pending,cluster,task,pending,tasks,return,arrays,stream,thread,pool,executor,get,pending,map,pending,assert,pending,task,instanceof,source,prioritized,runnable,thread,pool,executor,should,only,use,source,prioritized,runnable,instances,but,found,pending,task,get,class,get,name,source,prioritized,runnable,task,source,prioritized,runnable,pending,task,return,new,pending,cluster,task,pending,insertion,order,pending,priority,new,text,task,source,task,get,age,in,millis,pending,executing,collect,collectors,to,list
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1524684173;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        try {_            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue()), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,try,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1526029249;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        try {_            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue()), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,try,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1527096592;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        try {_            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue()), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,try,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1529015561;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        try {_            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue()), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,try,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1529341607;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(false)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,false,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1529433467;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1540486836;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1540847035;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1541008027;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1542646292;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1544081506;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1545319912;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1547625930;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1548953505;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T> void submitStateUpdateTasks(final String source,                                            final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,                                            final ClusterStateTaskExecutor<T> executor);1549302240;Submits a batch of cluster state update tasks_ submitted updates are guaranteed to be processed together,_potentially with more tasks of the same executor.__@param source   the source of the cluster state update task_@param tasks    a map of update tasks and their corresponding listeners_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTasks(final String source,_                                           final Map<T, ClusterStateTaskListener> tasks, final ClusterStateTaskConfig config,_                                           final ClusterStateTaskExecutor<T> executor) {_        if (!lifecycle.started()) {_            return__        }_        final ThreadContext threadContext = threadPool.getThreadContext()__        final Supplier<ThreadContext.StoredContext> supplier = threadContext.newRestorableContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            threadContext.markAsSystemContext()___            List<Batcher.UpdateTask> safeTasks = tasks.entrySet().stream()_                .map(e -> taskBatcher.new UpdateTask(config.priority(), source, e.getKey(), safe(e.getValue(), supplier), executor))_                .collect(Collectors.toList())__            taskBatcher.submitTasks(safeTasks, config.timeout())__        } catch (EsRejectedExecutionException e) {_            _            _            if (!lifecycle.stoppedOrClosed()) {_                throw e__            }_        }_    };submits,a,batch,of,cluster,state,update,tasks,submitted,updates,are,guaranteed,to,be,processed,together,potentially,with,more,tasks,of,the,same,executor,param,source,the,source,of,the,cluster,state,update,task,param,tasks,a,map,of,update,tasks,and,their,corresponding,listeners,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,tasks,final,string,source,final,map,t,cluster,state,task,listener,tasks,final,cluster,state,task,config,config,final,cluster,state,task,executor,t,executor,if,lifecycle,started,return,final,thread,context,thread,context,thread,pool,get,thread,context,final,supplier,thread,context,stored,context,supplier,thread,context,new,restorable,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,thread,context,mark,as,system,context,list,batcher,update,task,safe,tasks,tasks,entry,set,stream,map,e,task,batcher,new,update,task,config,priority,source,e,get,key,safe,e,get,value,supplier,executor,collect,collectors,to,list,task,batcher,submit,tasks,safe,tasks,config,timeout,catch,es,rejected,execution,exception,e,if,lifecycle,stopped,or,closed,throw,e
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1524684173;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1526029249;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1527096592;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1529015561;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1529341607;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1529433467;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1540486836;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1540847035;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1541008027;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1542646292;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1544081506;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1545319912;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1547625930;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1548953505;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>         void submitStateUpdateTask(         String source, T updateTask);1549302240;Submits a cluster state update task_ unlike {@link #submitStateUpdateTask(String, Object, ClusterStateTaskConfig,_ClusterStateTaskExecutor, ClusterStateTaskListener)}, submitted updates will not be batched.__@param source     the source of the cluster state update task_@param updateTask the full context for the cluster state update_task;public <T extends ClusterStateTaskConfig & ClusterStateTaskExecutor<T> & ClusterStateTaskListener>_        void submitStateUpdateTask(_        String source, T updateTask) {_        submitStateUpdateTask(source, updateTask, updateTask, updateTask, updateTask)__    };submits,a,cluster,state,update,task,unlike,link,submit,state,update,task,string,object,cluster,state,task,config,cluster,state,task,executor,cluster,state,task,listener,submitted,updates,will,not,be,batched,param,source,the,source,of,the,cluster,state,update,task,param,update,task,the,full,context,for,the,cluster,state,update,task;public,t,extends,cluster,state,task,config,cluster,state,task,executor,t,cluster,state,task,listener,void,submit,state,update,task,string,source,t,update,task,submit,state,update,task,source,update,task,update,task,update,task,update,task
MasterService -> public int numberOfPendingTasks();1524684173;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1526029249;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1527096592;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1529015561;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1529341607;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1529433467;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1540486836;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1540847035;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1541008027;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1542646292;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1544081506;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1545319912;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1547625930;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1548953505;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public int numberOfPendingTasks();1549302240;Returns the number of currently pending tasks.;public int numberOfPendingTasks() {_        return threadPoolExecutor.getNumberOfPendingTasks()__    };returns,the,number,of,currently,pending,tasks;public,int,number,of,pending,tasks,return,thread,pool,executor,get,number,of,pending,tasks
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1524684173;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1526029249;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1527096592;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1529015561;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1529341607;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1529433467;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1540486836;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1540847035;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1541008027;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1542646292;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1544081506;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1545319912;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1547625930;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1548953505;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> public <T> void submitStateUpdateTask(String source, T task,                                           ClusterStateTaskConfig config,                                           ClusterStateTaskExecutor<T> executor,                                           ClusterStateTaskListener listener);1549302240;Submits a cluster state update task_ submitted updates will be_batched across the same instance of executor. The exact batching_semantics depend on the underlying implementation but a rough_guideline is that if the update task is submitted while there_are pending update tasks for the same executor, these update_tasks will all be executed on the executor in a single batch__@param source   the source of the cluster state update task_@param task     the state needed for the cluster state update task_@param config   the cluster state update task configuration_@param executor the cluster state update task executor_ tasks_that share the same executor will be executed_batches on this executor_@param listener callback after the cluster state update task_completes_@param <T>      the type of the cluster state update task state;public <T> void submitStateUpdateTask(String source, T task,_                                          ClusterStateTaskConfig config,_                                          ClusterStateTaskExecutor<T> executor,_                                          ClusterStateTaskListener listener) {_        submitStateUpdateTasks(source, Collections.singletonMap(task, listener), config, executor)__    };submits,a,cluster,state,update,task,submitted,updates,will,be,batched,across,the,same,instance,of,executor,the,exact,batching,semantics,depend,on,the,underlying,implementation,but,a,rough,guideline,is,that,if,the,update,task,is,submitted,while,there,are,pending,update,tasks,for,the,same,executor,these,update,tasks,will,all,be,executed,on,the,executor,in,a,single,batch,param,source,the,source,of,the,cluster,state,update,task,param,task,the,state,needed,for,the,cluster,state,update,task,param,config,the,cluster,state,update,task,configuration,param,executor,the,cluster,state,update,task,executor,tasks,that,share,the,same,executor,will,be,executed,batches,on,this,executor,param,listener,callback,after,the,cluster,state,update,task,completes,param,t,the,type,of,the,cluster,state,update,task,state;public,t,void,submit,state,update,task,string,source,t,task,cluster,state,task,config,config,cluster,state,task,executor,t,executor,cluster,state,task,listener,listener,submit,state,update,tasks,source,collections,singleton,map,task,listener,config,executor
MasterService -> ClusterState state();1524684173;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1526029249;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1527096592;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1529015561;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1529341607;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1529433467;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1540486836;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1540847035;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1541008027;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1542646292;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1544081506;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1545319912;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1547625930;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1548953505;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> ClusterState state();1549302240;The current cluster state exposed by the discovery layer. Package-visible for tests.;ClusterState state() {_        return clusterStateSupplier.get()__    };the,current,cluster,state,exposed,by,the,discovery,layer,package,visible,for,tests;cluster,state,state,return,cluster,state,supplier,get
MasterService -> public TimeValue getMaxTaskWaitTime();1524684173;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1526029249;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1527096592;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1529015561;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1529341607;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1529433467;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1540486836;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1540847035;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1541008027;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1542646292;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1544081506;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1545319912;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1547625930;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1548953505;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
MasterService -> public TimeValue getMaxTaskWaitTime();1549302240;Returns the maximum wait time for tasks in the queue__@return A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue;public TimeValue getMaxTaskWaitTime() {_        return threadPoolExecutor.getMaxTaskWaitTime()__    };returns,the,maximum,wait,time,for,tasks,in,the,queue,return,a,zero,time,value,if,the,queue,is,empty,otherwise,the,time,value,oldest,task,waiting,in,the,queue;public,time,value,get,max,task,wait,time,return,thread,pool,executor,get,max,task,wait,time
