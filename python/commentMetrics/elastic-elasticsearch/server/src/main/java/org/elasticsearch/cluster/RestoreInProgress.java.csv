commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     RestoreInProgress that = (RestoreInProgress) o.     if (!entries.equals(that.entries))         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return entries.hashCode(). }
false;public;0;4;;@Override public String toString() {     return new StringBuilder("RestoreInProgress[").append(entries).append("]").toString(). }
false;public;1;3;;public Entry get(String restoreUUID) {     return entries.get(restoreUUID). }
false;public;0;3;;public boolean isEmpty() {     return entries.isEmpty(). }
false;public;0;4;;@Override public Iterator<Entry> iterator() {     return entries.valuesIt(). }
false;public;1;4;;public Builder add(Entry entry) {     entries.put(entry.uuid, entry).     return this. }
false;public;0;3;;public RestoreInProgress build() {     return new RestoreInProgress(entries.build()). }
true;public;0;3;/**  * Returns restore uuid  * @return restore uuid  */ ;/**  * Returns restore uuid  * @return restore uuid  */ public String uuid() {     return uuid. }
true;public;0;3;/**  * Returns snapshot  *  * @return snapshot  */ ;/**  * Returns snapshot  *  * @return snapshot  */ public Snapshot snapshot() {     return this.snapshot. }
true;public;0;3;/**  * Returns list of shards that being restore and their status  *  * @return list of shards  */ ;/**  * Returns list of shards that being restore and their status  *  * @return list of shards  */ public ImmutableOpenMap<ShardId, ShardRestoreStatus> shards() {     return this.shards. }
true;public;0;3;/**  * Returns current restore state  *  * @return restore state  */ ;/**  * Returns current restore state  *  * @return restore state  */ public State state() {     return state. }
true;public;0;3;/**  * Returns list of indices  *  * @return list of indices  */ ;/**  * Returns list of indices  *  * @return list of indices  */ public List<String> indices() {     return indices. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Entry entry = (Entry) o.     return uuid.equals(entry.uuid) && snapshot.equals(entry.snapshot) && state == entry.state && indices.equals(entry.indices) && shards.equals(entry.shards). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(uuid, snapshot, state, indices, shards). }
true;public;0;3;/**  * Returns current state  *  * @return current state  */ ;/**  * Returns current state  *  * @return current state  */ public State state() {     return state. }
true;public;0;3;/**  * Returns node id of the node where shared is getting restored  *  * @return node id  */ ;/**  * Returns node id of the node where shared is getting restored  *  * @return node id  */ public String nodeId() {     return nodeId. }
true;public;0;3;/**  * Returns failure reason  *  * @return failure reason  */ ;/**  * Returns failure reason  *  * @return failure reason  */ public String reason() {     return reason. }
true;public,static;1;5;/**  * Reads restore status from stream input  *  * @param in stream input  * @return restore status  */ ;/**  * Reads restore status from stream input  *  * @param in stream input  * @return restore status  */ public static ShardRestoreStatus readShardRestoreStatus(StreamInput in) throws IOException {     ShardRestoreStatus shardSnapshotStatus = new ShardRestoreStatus().     shardSnapshotStatus.readFrom(in).     return shardSnapshotStatus. }
true;public;1;5;/**  * Reads restore status from stream input  *  * @param in stream input  */ ;/**  * Reads restore status from stream input  *  * @param in stream input  */ public void readFrom(StreamInput in) throws IOException {     nodeId = in.readOptionalString().     state = State.fromValue(in.readByte()).     reason = in.readOptionalString(). }
true;public;1;5;/**  * Writes restore status to stream output  *  * @param out stream input  */ ;/**  * Writes restore status to stream output  *  * @param out stream input  */ public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(nodeId).     out.writeByte(state.value).     out.writeOptionalString(reason). }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ShardRestoreStatus status = (ShardRestoreStatus) o.     return state == status.state && Objects.equals(nodeId, status.nodeId) && Objects.equals(reason, status.reason). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(state, nodeId, reason). }
true;public;0;3;/**  * Returns state code  *  * @return state code  */ ;/**  * Returns state code  *  * @return state code  */ public byte value() {     return value. }
true;public;0;3;/**  * Returns true if restore process completed (either successfully or with failure)  *  * @return true if restore process completed  */ ;/**  * Returns true if restore process completed (either successfully or with failure)  *  * @return true if restore process completed  */ public boolean completed() {     return this == SUCCESS || this == FAILURE. }
true;public,static;1;14;/**  * Returns state corresponding to state code  *  * @param value stat code  * @return state  */ ;/**  * Returns state corresponding to state code  *  * @param value stat code  * @return state  */ public static State fromValue(byte value) {     switch(value) {         case 0:             return INIT.         case 1:             return STARTED.         case 2:             return SUCCESS.         case 3:             return FAILURE.         default:             throw new IllegalArgumentException("No snapshot state for value [" + value + "]").     } }
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public String getWriteableName() {     return TYPE. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public,static;1;3;;public static NamedDiff<Custom> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(Custom.class, TYPE, in). }
true;public;1;21;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(entries.size()).     for (ObjectCursor<Entry> v : entries.values()) {         Entry entry = v.value.         if (out.getVersion().onOrAfter(Version.V_6_6_0)) {             out.writeString(entry.uuid).         }         entry.snapshot().writeTo(out).         out.writeByte(entry.state().value()).         out.writeVInt(entry.indices().size()).         for (String index : entry.indices()) {             out.writeString(index).         }         out.writeVInt(entry.shards().size()).         for (ObjectObjectCursor<ShardId, ShardRestoreStatus> shardEntry : entry.shards()) {             shardEntry.key.writeTo(out).             shardEntry.value.writeTo(out).         }     } }
true;public;2;9;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startArray("snapshots").     for (ObjectCursor<Entry> entry : entries.values()) {         toXContent(entry.value, builder, params).     }     builder.endArray().     return builder. }
true;public;3;30;/**  * Serializes single restore operation  *  * @param entry   restore operation metadata  * @param builder XContent builder  * @param params  serialization parameters  */ ;/**  * Serializes single restore operation  *  * @param entry   restore operation metadata  * @param builder XContent builder  * @param params  serialization parameters  */ public void toXContent(Entry entry, XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field("snapshot", entry.snapshot().getSnapshotId().getName()).     builder.field("repository", entry.snapshot().getRepository()).     builder.field("state", entry.state()).     builder.startArray("indices").     {         for (String index : entry.indices()) {             builder.value(index).         }     }     builder.endArray().     builder.startArray("shards").     {         for (ObjectObjectCursor<ShardId, ShardRestoreStatus> shardEntry : entry.shards) {             ShardId shardId = shardEntry.key.             ShardRestoreStatus status = shardEntry.value.             builder.startObject().             {                 builder.field("index", shardId.getIndex()).                 builder.field("shard", shardId.getId()).                 builder.field("state", status.state()).             }             builder.endObject().         }     }     builder.endArray().     builder.endObject(). }
