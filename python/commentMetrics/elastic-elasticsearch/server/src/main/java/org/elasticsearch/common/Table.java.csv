commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public Table startHeaders() {     inHeaders = true.     currentCells = new ArrayList<>().     return this. }
false;public;0;7;;public Table startHeadersWithTimestamp() {     startHeaders().     this.withTime = true.     addCell("epoch", "alias:t,time.desc:seconds since 1970-01-01 00:00:00").     addCell("timestamp", "alias:ts,hms,hhmmss.desc:time in HH:MM:SS").     return this. }
false;public;0;25;;public Table endHeaders() {     if (currentCells == null || currentCells.isEmpty()) {         throw new IllegalStateException("no headers added...").     }     inHeaders = false.     headers = currentCells.     currentCells = null.     /* Create associative structure for columns that          * contain the same cells as the rows:          *          *     header1 => [Cell, Cell, ...]          *     header2 => [Cell, Cell, ...]          *     header3 => [Cell, Cell, ...]          *          * Also populate map to look up headers by name.          *          */     for (Cell header : headers) {         map.put(header.value.toString(), new ArrayList<Cell>()).         headerMap.put(header.value.toString(), header).     }     return this. }
false;public;0;12;;public Table startRow() {     if (headers.isEmpty()) {         throw new IllegalStateException("no headers added...").     }     currentCells = new ArrayList<>(headers.size()).     if (withTime) {         long time = System.currentTimeMillis().         addCell(TimeUnit.SECONDS.convert(time, TimeUnit.MILLISECONDS)).         addCell(FORMATTER.format(Instant.ofEpochMilli(time))).     }     return this. }
false;public;1;16;;public Table endRow(boolean check) {     if (currentCells == null) {         throw new IllegalStateException("no row started...").     }     if (check && (currentCells.size() != headers.size())) {         StringBuilder s = new StringBuilder().         s.append("mismatch on number of cells ").         s.append(currentCells.size()).         s.append(" in a row compared to header ").         s.append(headers.size()).         throw new IllegalStateException(s.toString()).     }     rows.add(currentCells).     currentCells = null.     return this. }
false;public;0;4;;public Table endRow() {     endRow(true).     return this. }
false;public;1;3;;public Table addCell(Object value) {     return addCell(value, ""). }
false;public;2;45;;public Table addCell(Object value, String attributes) {     if (currentCells == null) {         throw new IllegalStateException("no block started...").     }     if (!inHeaders) {         if (currentCells.size() == headers.size()) {             throw new IllegalStateException("can't add more cells to a row than the header").         }     }     Map<String, String> mAttr.     if (attributes.length() == 0) {         if (inHeaders) {             mAttr = emptyMap().         } else {             // get the attributes of the header cell we are going to add to             mAttr = headers.get(currentCells.size()).attr.         }     } else {         mAttr = new HashMap<>().         if (!inHeaders) {             // get the attributes of the header cell we are going to add             mAttr.putAll(headers.get(currentCells.size()).attr).         }         String[] sAttrs = attributes.split(".").         for (String sAttr : sAttrs) {             if (sAttr.length() == 0) {                 continue.             }             int idx = sAttr.indexOf(':').             mAttr.put(sAttr.substring(0, idx), sAttr.substring(idx + 1)).         }     }     Cell cell = new Cell(value, mAttr).     int cellIndex = currentCells.size().     currentCells.add(cell).     // If we're in a value row, also populate the named column.     if (!inHeaders) {         String hdr = (String) headers.get(cellIndex).value.         map.get(hdr).add(cell).     }     return this. }
false;public;0;3;;public List<Cell> getHeaders() {     return this.headers. }
false;public;0;3;;public List<List<Cell>> getRows() {     return rows. }
false;public;0;3;;public Map<String, List<Cell>> getAsMap() {     return this.map. }
false;public;0;3;;public Map<String, Cell> getHeaderMap() {     return this.headerMap. }
false;public;1;8;;public Cell findHeaderByName(String header) {     for (Cell cell : headers) {         if (cell.value.toString().equals(header)) {             return cell.         }     }     return null. }
false;public;0;15;;public Map<String, String> getAliasMap() {     Map<String, String> headerAliasMap = new HashMap<>().     for (int i = 0. i < headers.size(). i++) {         Cell headerCell = headers.get(i).         String headerName = headerCell.value.toString().         if (headerCell.attr.containsKey("alias")) {             String[] aliases = Strings.splitStringByCommaToArray(headerCell.attr.get("alias")).             for (String alias : aliases) {                 headerAliasMap.put(alias, headerName).             }         }         headerAliasMap.put(headerName, headerName).     }     return headerAliasMap. }
