# id;timestamp;commentText;codeText;commentWords;codeWords
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1524684173;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            persistentTasksService.sendTaskManagerCancellation(task.getId(), new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,persistent,tasks,service,send,task,manager,cancellation,task,get,id,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1527583663;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            persistentTasksService.sendTaskManagerCancellation(task.getId(), new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,persistent,tasks,service,send,task,manager,cancellation,task,get,id,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1527773340;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            String reason = "task has been removed, cancelling locally"__            persistentTasksService.sendCancelRequest(task.getId(), reason, new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,string,reason,task,has,been,removed,cancelling,locally,persistent,tasks,service,send,cancel,request,task,get,id,reason,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1529076503;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            String reason = "task has been removed, cancelling locally"__            persistentTasksService.sendCancelRequest(task.getId(), reason, new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,string,reason,task,has,been,removed,cancelling,locally,persistent,tasks,service,send,cancel,request,task,get,id,reason,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1541092382;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            String reason = "task has been removed, cancelling locally"__            persistentTasksService.sendCancelRequest(task.getId(), reason, new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,string,reason,task,has,been,removed,cancelling,locally,persistent,tasks,service,send,cancel,request,task,get,id,reason,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
PersistentTasksNodeService -> private void cancelTask(Long allocationId);1542402632;Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon_cancellation.;private void cancelTask(Long allocationId) {_        AllocatedPersistentTask task = runningTasks.remove(allocationId)__        if (task.markAsCancelled()) {_            _            String reason = "task has been removed, cancelling locally"__            persistentTasksService.sendCancelRequest(task.getId(), reason, new ActionListener<CancelTasksResponse>() {_                @Override_                public void onResponse(CancelTasksResponse cancelTasksResponse) {_                    logger.trace("Persistent task [{}] with id [{}] and allocation id [{}] was cancelled", task.getAction(),_                            task.getPersistentTaskId(), task.getAllocationId())__                }__                @Override_                public void onFailure(Exception e) {_                    _                    logger.warn(() -> new ParameterizedMessage(_                        "failed to cancel task [{}] with id [{}] and allocation id [{}]",_                        task.getAction(), task.getPersistentTaskId(), task.getAllocationId()), e)__                }_            })__        }_    };unregisters,and,then,cancels,the,locally,running,task,using,the,task,manager,no,notification,to,master,will,be,send,upon,cancellation;private,void,cancel,task,long,allocation,id,allocated,persistent,task,task,running,tasks,remove,allocation,id,if,task,mark,as,cancelled,string,reason,task,has,been,removed,cancelling,locally,persistent,tasks,service,send,cancel,request,task,get,id,reason,new,action,listener,cancel,tasks,response,override,public,void,on,response,cancel,tasks,response,cancel,tasks,response,logger,trace,persistent,task,with,id,and,allocation,id,was,cancelled,task,get,action,task,get,persistent,task,id,task,get,allocation,id,override,public,void,on,failure,exception,e,logger,warn,new,parameterized,message,failed,to,cancel,task,with,id,and,allocation,id,task,get,action,task,get,persistent,task,id,task,get,allocation,id,e
