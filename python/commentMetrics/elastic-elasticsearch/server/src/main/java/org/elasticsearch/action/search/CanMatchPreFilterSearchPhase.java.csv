commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected void executePhaseOnShard(SearchShardIterator shardIt, ShardRouting shard, SearchActionListener<SearchService.CanMatchResponse> listener) {     getSearchTransport().sendCanMatch(getConnection(shardIt.getClusterAlias(), shard.currentNodeId()), buildShardSearchRequest(shardIt), getTask(), listener). }
false;protected;2;6;;@Override protected SearchPhase getNextPhase(SearchPhaseResults<SearchService.CanMatchResponse> results, SearchPhaseContext context) {     return phaseFactory.apply(getIterator((BitSetSearchPhaseResults) results, shardsIts)). }
false;private;2;19;;private GroupShardsIterator<SearchShardIterator> getIterator(BitSetSearchPhaseResults results, GroupShardsIterator<SearchShardIterator> shardsIts) {     int cardinality = results.getNumPossibleMatches().     FixedBitSet possibleMatches = results.getPossibleMatches().     if (cardinality == 0) {         // this is a special case where we have no hit but we need to get at least one search response in order         // to produce a valid search result with all the aggs etc.         possibleMatches.set(0).     }     int i = 0.     for (SearchShardIterator iter : shardsIts) {         if (possibleMatches.get(i++)) {             iter.reset().         } else {             iter.resetAndSkip().         }     }     return shardsIts. }
false;;1;6;;@Override void consumeResult(SearchService.CanMatchResponse result) {     if (result.canMatch()) {         consumeShardFailure(result.getShardIndex()).     } }
false;;1;4;;@Override boolean hasResult(int shardIndex) {     // unneeded     return false. }
false;synchronized;1;6;;@Override synchronized void consumeShardFailure(int shardIndex) {     // we have to carry over shard failures in order to account for them in the response.     possibleMatches.set(shardIndex).     numPossibleMatches++. }
false;synchronized;0;3;;synchronized int getNumPossibleMatches() {     return numPossibleMatches. }
false;synchronized;0;3;;synchronized FixedBitSet getPossibleMatches() {     return possibleMatches. }
false;;0;4;;@Override Stream<SearchService.CanMatchResponse> getSuccessfulResults() {     return Stream.empty(). }
