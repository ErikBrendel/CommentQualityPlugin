commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeByte(id). }
false;public,static;1;23;;public static AllocationDecision readFrom(StreamInput in) throws IOException {     byte id = in.readByte().     switch(id) {         case 0:             return YES.         case 1:             return THROTTLED.         case 2:             return NO.         case 3:             return WORSE_BALANCE.         case 4:             return AWAITING_INFO.         case 5:             return ALLOCATION_DELAYED.         case 6:             return NO_VALID_SHARD_COPY.         case 7:             return NO_ATTEMPT.         default:             throw new IllegalArgumentException("Unknown value [" + id + "]").     } }
true;public,static;1;21;/**  * Gets an {@link AllocationDecision} from a {@link AllocationStatus}.  */ ;/**  * Gets an {@link AllocationDecision} from a {@link AllocationStatus}.  */ public static AllocationDecision fromAllocationStatus(AllocationStatus allocationStatus) {     if (allocationStatus == null) {         return YES.     } else {         switch(allocationStatus) {             case DECIDERS_THROTTLED:                 return THROTTLED.             case FETCHING_SHARD_DATA:                 return AWAITING_INFO.             case DELAYED_ALLOCATION:                 return ALLOCATION_DELAYED.             case NO_VALID_SHARD_COPY:                 return NO_VALID_SHARD_COPY.             case NO_ATTEMPT:                 return NO_ATTEMPT.             default:                 assert allocationStatus == AllocationStatus.DECIDERS_NO : "unhandled AllocationStatus type [" + allocationStatus + "]".                 return NO.         }     } }
true;public,static;1;11;/**  * Gets an {@link AllocationDecision} from a {@link Decision.Type}  */ ;/**  * Gets an {@link AllocationDecision} from a {@link Decision.Type}  */ public static AllocationDecision fromDecisionType(Decision.Type type) {     switch(type) {         case YES:             return YES.         case THROTTLE:             return THROTTLED.         default:             assert type == Decision.Type.NO.             return NO.     } }
false;public;0;4;;@Override public String toString() {     return super.toString().toLowerCase(Locale.ROOT). }
