commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected void swap(int i, int j) {     ArrayUtil.swap(values, i, j). }
false;protected;2;4;;@Override protected int compare(int i, int j) {     return values[i].get().compareTo(values[j].get()). }
true;protected,final;0;10;/**  * Make sure the {@link #values} array can store at least {@link #count} entries.  */ ;/**  * Make sure the {@link #values} array can store at least {@link #count} entries.  */ protected final void grow() {     if (values.length < count) {         final int oldLen = values.length.         final int newLen = ArrayUtil.oversize(count, RamUsageEstimator.NUM_BYTES_OBJECT_REF).         values = Arrays.copyOf(values, newLen).         for (int i = oldLen. i < newLen. ++i) {             values[i] = new BytesRefBuilder().         }     } }
true;protected,final;0;4;/**  * Sort values that are stored between offsets <code>0</code> and  * {@link #count} of {@link #values}.  */ ;/**  * Sort values that are stored between offsets <code>0</code> and  * {@link #count} of {@link #values}.  */ protected final void sort() {     sorter.sort(0, count).     index = 0. }
false;public;0;4;;@Override public int docValueCount() {     return count. }
false;public,final;0;5;;@Override public final BytesRef nextValue() {     assert index < count.     return values[index++].get(). }
