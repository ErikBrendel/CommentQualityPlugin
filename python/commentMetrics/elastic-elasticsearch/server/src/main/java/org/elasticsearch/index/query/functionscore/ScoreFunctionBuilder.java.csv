commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;5;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeOptionalFloat(weight).     doWriteTo(out). }
true;protected,abstract;1;1;/**  * Write the subclass's components into the stream.  */ ;/**  * Write the subclass's components into the stream.  */ protected abstract void doWriteTo(StreamOutput out) throws IOException.
true;public,abstract;0;1;/**  * The name of this score function.  */ ;/**  * The name of this score function.  */ public abstract String getName().
true;public,final;1;5;/**  * Set the weight applied to the function before combining.  */ ;/**  * Set the weight applied to the function before combining.  */ @SuppressWarnings("unchecked") public final FB setWeight(float weight) {     this.weight = checkWeight(weight).     return (FB) this. }
false;private;1;6;;private Float checkWeight(Float weight) {     if (weight != null && Float.compare(weight, 0) < 0) {         throw new IllegalArgumentException("[weight] cannot be negative for a filtering function").     }     return weight. }
true;public,final;0;3;/**  * The weight applied to the function before combining.  */ ;/**  * The weight applied to the function before combining.  */ public final Float getWeight() {     return weight. }
false;public,final;2;8;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (weight != null) {         builder.field(FunctionScoreQueryBuilder.WEIGHT_FIELD.getPreferredName(), weight).     }     doXContent(builder, params).     return builder. }
true;protected,abstract;2;1;/**  * Convert this subclass's data into XContent.  */ ;/**  * Convert this subclass's data into XContent.  */ protected abstract void doXContent(XContentBuilder builder, Params params) throws IOException.
false;public;0;4;;@Override public String getWriteableName() {     return getName(). }
false;public,final;1;12;;@Override public final boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     @SuppressWarnings("unchecked")     FB other = (FB) obj.     return Objects.equals(weight, other.getWeight()) && doEquals(other). }
true;protected,abstract;1;1;/**  * Check that two instances of the same subclass of ScoreFunctionBuilder are equal. Implementers don't need to check any fields in  * ScoreFunctionBuilder, just fields that they define.  */ ;/**  * Check that two instances of the same subclass of ScoreFunctionBuilder are equal. Implementers don't need to check any fields in  * ScoreFunctionBuilder, just fields that they define.  */ protected abstract boolean doEquals(FB functionBuilder).
false;public,final;0;4;;@Override public final int hashCode() {     return Objects.hash(getClass(), weight, doHashCode()). }
true;protected,abstract;0;1;/**  * Hashcode for fields defined in this subclass of ScoreFunctionBuilder. Implementers should ignore fields defined in  * ScoreFunctionBuilder because they will already be in the hashCode.  */ ;/**  * Hashcode for fields defined in this subclass of ScoreFunctionBuilder. Implementers should ignore fields defined in  * ScoreFunctionBuilder because they will already be in the hashCode.  */ protected abstract int doHashCode().
true;public,final;1;7;/**  * Called on a data node, converts this ScoreFunctionBuilder into its corresponding Lucene function object.  */ ;/**  * Called on a data node, converts this ScoreFunctionBuilder into its corresponding Lucene function object.  */ public final ScoreFunction toFunction(QueryShardContext context) throws IOException {     ScoreFunction scoreFunction = doToFunction(context).     if (weight == null) {         return scoreFunction.     }     return new WeightFactorFunction(weight, scoreFunction). }
true;protected,abstract;1;1;/**  * Build the Lucene ScoreFunction for this builder. Implementers should ignore things defined in ScoreFunctionBuilder like weight as  * they will be handled by the function that calls this one.  */ ;/**  * Build the Lucene ScoreFunction for this builder. Implementers should ignore things defined in ScoreFunctionBuilder like weight as  * they will be handled by the function that calls this one.  */ protected abstract ScoreFunction doToFunction(QueryShardContext context) throws IOException.
