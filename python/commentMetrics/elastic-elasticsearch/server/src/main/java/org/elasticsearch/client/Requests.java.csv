commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static IndexRequest indexRequest() {     return new IndexRequest(). }
true;public,static;1;3;/**  * Create an index request against a specific index. Note the {@link IndexRequest#type(String)} must be  * set as well and optionally the {@link IndexRequest#id(String)}.  *  * @param index The index name to index the request against  * @return The index request  * @see org.elasticsearch.client.Client#index(org.elasticsearch.action.index.IndexRequest)  */ ;/**  * Create an index request against a specific index. Note the {@link IndexRequest#type(String)} must be  * set as well and optionally the {@link IndexRequest#id(String)}.  *  * @param index The index name to index the request against  * @return The index request  * @see org.elasticsearch.client.Client#index(org.elasticsearch.action.index.IndexRequest)  */ public static IndexRequest indexRequest(String index) {     return new IndexRequest(index). }
true;public,static;1;3;/**  * Creates a delete request against a specific index. Note the {@link DeleteRequest#type(String)} and  * {@link DeleteRequest#id(String)} must be set.  *  * @param index The index name to delete from  * @return The delete request  * @see org.elasticsearch.client.Client#delete(org.elasticsearch.action.delete.DeleteRequest)  */ ;/**  * Creates a delete request against a specific index. Note the {@link DeleteRequest#type(String)} and  * {@link DeleteRequest#id(String)} must be set.  *  * @param index The index name to delete from  * @return The delete request  * @see org.elasticsearch.client.Client#delete(org.elasticsearch.action.delete.DeleteRequest)  */ public static DeleteRequest deleteRequest(String index) {     return new DeleteRequest(index). }
true;public,static;0;3;/**  * Creates a new bulk request.  */ ;/**  * Creates a new bulk request.  */ public static BulkRequest bulkRequest() {     return new BulkRequest(). }
true;public,static;1;3;/**  * Creates a get request to get the JSON source from an index based on a type and id. Note, the  * {@link GetRequest#type(String)} and {@link GetRequest#id(String)} must be set.  *  * @param index The index to get the JSON source from  * @return The get request  * @see org.elasticsearch.client.Client#get(org.elasticsearch.action.get.GetRequest)  */ ;/**  * Creates a get request to get the JSON source from an index based on a type and id. Note, the  * {@link GetRequest#type(String)} and {@link GetRequest#id(String)} must be set.  *  * @param index The index to get the JSON source from  * @return The get request  * @see org.elasticsearch.client.Client#get(org.elasticsearch.action.get.GetRequest)  */ public static GetRequest getRequest(String index) {     return new GetRequest(index). }
true;public,static;1;3;/**  * Creates a search request against one or more indices. Note, the search source must be set either using the  * actual JSON search source, or the {@link org.elasticsearch.search.builder.SearchSourceBuilder}.  *  * @param indices The indices to search against. Use {@code null} or {@code _all} to execute against all indices  * @return The search request  * @see org.elasticsearch.client.Client#search(org.elasticsearch.action.search.SearchRequest)  */ ;/**  * Creates a search request against one or more indices. Note, the search source must be set either using the  * actual JSON search source, or the {@link org.elasticsearch.search.builder.SearchSourceBuilder}.  *  * @param indices The indices to search against. Use {@code null} or {@code _all} to execute against all indices  * @return The search request  * @see org.elasticsearch.client.Client#search(org.elasticsearch.action.search.SearchRequest)  */ public static SearchRequest searchRequest(String... indices) {     return new SearchRequest(indices). }
true;public,static;1;3;/**  * Creates a search scroll request allowing to continue searching a previous search request.  *  * @param scrollId The scroll id representing the scrollable search  * @return The search scroll request  * @see org.elasticsearch.client.Client#searchScroll(org.elasticsearch.action.search.SearchScrollRequest)  */ ;/**  * Creates a search scroll request allowing to continue searching a previous search request.  *  * @param scrollId The scroll id representing the scrollable search  * @return The search scroll request  * @see org.elasticsearch.client.Client#searchScroll(org.elasticsearch.action.search.SearchScrollRequest)  */ public static SearchScrollRequest searchScrollRequest(String scrollId) {     return new SearchScrollRequest(scrollId). }
false;public,static;1;3;;public static IndicesSegmentsRequest indicesSegmentsRequest(String... indices) {     return new IndicesSegmentsRequest(indices). }
true;public,static;1;3;/**  * Creates an indices shard stores info request.  * @param indices The indices to get shard store information on  * @return The indices shard stores request  * @see org.elasticsearch.client.IndicesAdminClient#shardStores(IndicesShardStoresRequest)  */ ;/**  * Creates an indices shard stores info request.  * @param indices The indices to get shard store information on  * @return The indices shard stores request  * @see org.elasticsearch.client.IndicesAdminClient#shardStores(IndicesShardStoresRequest)  */ public static IndicesShardStoresRequest indicesShardStoresRequest(String... indices) {     return new IndicesShardStoresRequest(indices). }
true;public,static;1;3;/**  * Creates an indices exists request.  *  * @param indices The indices to check if they exists or not.  * @return The indices exists request  * @see org.elasticsearch.client.IndicesAdminClient#exists(org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest)  */ ;/**  * Creates an indices exists request.  *  * @param indices The indices to check if they exists or not.  * @return The indices exists request  * @see org.elasticsearch.client.IndicesAdminClient#exists(org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest)  */ public static IndicesExistsRequest indicesExistsRequest(String... indices) {     return new IndicesExistsRequest(indices). }
true;public,static;1;3;/**  * Creates a create index request.  *  * @param index The index to create  * @return The index create request  * @see org.elasticsearch.client.IndicesAdminClient#create(org.elasticsearch.action.admin.indices.create.CreateIndexRequest)  */ ;/**  * Creates a create index request.  *  * @param index The index to create  * @return The index create request  * @see org.elasticsearch.client.IndicesAdminClient#create(org.elasticsearch.action.admin.indices.create.CreateIndexRequest)  */ public static CreateIndexRequest createIndexRequest(String index) {     return new CreateIndexRequest(index). }
true;public,static;1;3;/**  * Creates a delete index request.  *  * @param index The index to delete  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#delete(org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest)  */ ;/**  * Creates a delete index request.  *  * @param index The index to delete  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#delete(org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest)  */ public static DeleteIndexRequest deleteIndexRequest(String index) {     return new DeleteIndexRequest(index). }
true;public,static;1;3;/**  * Creates a close index request.  *  * @param index The index to close  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#close(org.elasticsearch.action.admin.indices.close.CloseIndexRequest)  */ ;/**  * Creates a close index request.  *  * @param index The index to close  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#close(org.elasticsearch.action.admin.indices.close.CloseIndexRequest)  */ public static CloseIndexRequest closeIndexRequest(String index) {     return new CloseIndexRequest(index). }
true;public,static;1;3;/**  * Creates an open index request.  *  * @param index The index to open  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#open(org.elasticsearch.action.admin.indices.open.OpenIndexRequest)  */ ;/**  * Creates an open index request.  *  * @param index The index to open  * @return The delete index request  * @see org.elasticsearch.client.IndicesAdminClient#open(org.elasticsearch.action.admin.indices.open.OpenIndexRequest)  */ public static OpenIndexRequest openIndexRequest(String index) {     return new OpenIndexRequest(index). }
true;public,static;1;3;/**  * Create a create mapping request against one or more indices.  *  * @param indices The indices to create mapping. Use {@code null} or {@code _all} to execute against all indices  * @return The create mapping request  * @see org.elasticsearch.client.IndicesAdminClient#putMapping(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest)  */ ;/**  * Create a create mapping request against one or more indices.  *  * @param indices The indices to create mapping. Use {@code null} or {@code _all} to execute against all indices  * @return The create mapping request  * @see org.elasticsearch.client.IndicesAdminClient#putMapping(org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest)  */ public static PutMappingRequest putMappingRequest(String... indices) {     return new PutMappingRequest(indices). }
true;public,static;0;3;/**  * Creates an index aliases request allowing to add and remove aliases.  *  * @return The index aliases request  */ ;/**  * Creates an index aliases request allowing to add and remove aliases.  *  * @return The index aliases request  */ public static IndicesAliasesRequest indexAliasesRequest() {     return new IndicesAliasesRequest(). }
true;public,static;1;3;/**  * Creates a refresh indices request.  *  * @param indices The indices to refresh. Use {@code null} or {@code _all} to execute against all indices  * @return The refresh request  * @see org.elasticsearch.client.IndicesAdminClient#refresh(org.elasticsearch.action.admin.indices.refresh.RefreshRequest)  */ ;/**  * Creates a refresh indices request.  *  * @param indices The indices to refresh. Use {@code null} or {@code _all} to execute against all indices  * @return The refresh request  * @see org.elasticsearch.client.IndicesAdminClient#refresh(org.elasticsearch.action.admin.indices.refresh.RefreshRequest)  */ public static RefreshRequest refreshRequest(String... indices) {     return new RefreshRequest(indices). }
true;public,static;1;3;/**  * Creates a flush indices request.  *  * @param indices The indices to flush. Use {@code null} or {@code _all} to execute against all indices  * @return The flush request  * @see org.elasticsearch.client.IndicesAdminClient#flush(org.elasticsearch.action.admin.indices.flush.FlushRequest)  */ ;/**  * Creates a flush indices request.  *  * @param indices The indices to flush. Use {@code null} or {@code _all} to execute against all indices  * @return The flush request  * @see org.elasticsearch.client.IndicesAdminClient#flush(org.elasticsearch.action.admin.indices.flush.FlushRequest)  */ public static FlushRequest flushRequest(String... indices) {     return new FlushRequest(indices). }
true;public,static;1;3;/**  * Creates a synced flush indices request.  *  * @param indices The indices to sync flush. Use {@code null} or {@code _all} to execute against all indices  * @return The synced flush request  * @see org.elasticsearch.client.IndicesAdminClient#syncedFlush(SyncedFlushRequest)  */ ;/**  * Creates a synced flush indices request.  *  * @param indices The indices to sync flush. Use {@code null} or {@code _all} to execute against all indices  * @return The synced flush request  * @see org.elasticsearch.client.IndicesAdminClient#syncedFlush(SyncedFlushRequest)  */ public static SyncedFlushRequest syncedFlushRequest(String... indices) {     return new SyncedFlushRequest(indices). }
true;public,static;1;3;/**  * Creates a force merge request.  *  * @param indices The indices to force merge. Use {@code null} or {@code _all} to execute against all indices  * @return The force merge request  * @see org.elasticsearch.client.IndicesAdminClient#forceMerge(org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest)  */ ;/**  * Creates a force merge request.  *  * @param indices The indices to force merge. Use {@code null} or {@code _all} to execute against all indices  * @return The force merge request  * @see org.elasticsearch.client.IndicesAdminClient#forceMerge(org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest)  */ public static ForceMergeRequest forceMergeRequest(String... indices) {     return new ForceMergeRequest(indices). }
true;public,static;1;3;/**  * Creates an upgrade request.  *  * @param indices The indices to upgrade. Use {@code null} or {@code _all} to execute against all indices  * @return The upgrade request  * @see org.elasticsearch.client.IndicesAdminClient#upgrade(UpgradeRequest)  */ ;/**  * Creates an upgrade request.  *  * @param indices The indices to upgrade. Use {@code null} or {@code _all} to execute against all indices  * @return The upgrade request  * @see org.elasticsearch.client.IndicesAdminClient#upgrade(UpgradeRequest)  */ public static UpgradeRequest upgradeRequest(String... indices) {     return new UpgradeRequest(indices). }
true;public,static;1;3;/**  * Creates a clean indices cache request.  *  * @param indices The indices to clean their caches. Use {@code null} or {@code _all} to execute against all indices  * @return The request  */ ;/**  * Creates a clean indices cache request.  *  * @param indices The indices to clean their caches. Use {@code null} or {@code _all} to execute against all indices  * @return The request  */ public static ClearIndicesCacheRequest clearIndicesCacheRequest(String... indices) {     return new ClearIndicesCacheRequest(indices). }
true;public,static;1;3;/**  * A request to update indices settings.  *  * @param indices The indices to update the settings for. Use {@code null} or {@code _all} to executed against all indices.  * @return The request  */ ;/**  * A request to update indices settings.  *  * @param indices The indices to update the settings for. Use {@code null} or {@code _all} to executed against all indices.  * @return The request  */ public static UpdateSettingsRequest updateSettingsRequest(String... indices) {     return new UpdateSettingsRequest(indices). }
true;public,static;0;3;/**  * Creates a cluster state request.  *  * @return The cluster state request.  * @see org.elasticsearch.client.ClusterAdminClient#state(org.elasticsearch.action.admin.cluster.state.ClusterStateRequest)  */ ;/**  * Creates a cluster state request.  *  * @return The cluster state request.  * @see org.elasticsearch.client.ClusterAdminClient#state(org.elasticsearch.action.admin.cluster.state.ClusterStateRequest)  */ public static ClusterStateRequest clusterStateRequest() {     return new ClusterStateRequest(). }
false;public,static;0;3;;public static ClusterRerouteRequest clusterRerouteRequest() {     return new ClusterRerouteRequest(). }
false;public,static;0;3;;public static ClusterUpdateSettingsRequest clusterUpdateSettingsRequest() {     return new ClusterUpdateSettingsRequest(). }
true;public,static;1;3;/**  * Creates a cluster health request.  *  * @param indices The indices to provide additional cluster health information for.  *                Use {@code null} or {@code _all} to execute against all indices  * @return The cluster health request  * @see org.elasticsearch.client.ClusterAdminClient#health(org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest)  */ ;/**  * Creates a cluster health request.  *  * @param indices The indices to provide additional cluster health information for.  *                Use {@code null} or {@code _all} to execute against all indices  * @return The cluster health request  * @see org.elasticsearch.client.ClusterAdminClient#health(org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest)  */ public static ClusterHealthRequest clusterHealthRequest(String... indices) {     return new ClusterHealthRequest(indices). }
true;public,static;0;3;/**  * List all shards for the give search  */ ;/**  * List all shards for the give search  */ public static ClusterSearchShardsRequest clusterSearchShardsRequest() {     return new ClusterSearchShardsRequest(). }
true;public,static;1;3;/**  * List all shards for the give search  */ ;/**  * List all shards for the give search  */ public static ClusterSearchShardsRequest clusterSearchShardsRequest(String... indices) {     return new ClusterSearchShardsRequest(indices). }
true;public,static;0;3;/**  * Creates a nodes info request against all the nodes.  *  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesInfo(org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest)  */ ;/**  * Creates a nodes info request against all the nodes.  *  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesInfo(org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest)  */ public static NodesInfoRequest nodesInfoRequest() {     return new NodesInfoRequest(). }
true;public,static;1;3;/**  * Creates a nodes info request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @param nodesIds The nodes ids to get the status for  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesStats(org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest)  */ ;/**  * Creates a nodes info request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @param nodesIds The nodes ids to get the status for  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesStats(org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest)  */ public static NodesInfoRequest nodesInfoRequest(String... nodesIds) {     return new NodesInfoRequest(nodesIds). }
true;public,static;1;3;/**  * Creates a nodes stats request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @param nodesIds The nodes ids to get the stats for  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesStats(org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest)  */ ;/**  * Creates a nodes stats request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @param nodesIds The nodes ids to get the stats for  * @return The nodes info request  * @see org.elasticsearch.client.ClusterAdminClient#nodesStats(org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest)  */ public static NodesStatsRequest nodesStatsRequest(String... nodesIds) {     return new NodesStatsRequest(nodesIds). }
true;public,static;1;3;/**  * Creates a nodes usage request against one or more nodes. Pass  * {@code null} or an empty array for all nodes.  *  * @param nodesIds  *            The nodes ids to get the usage for  * @return The nodes usage request  * @see org.elasticsearch.client.ClusterAdminClient#nodesUsage(org.elasticsearch.action.admin.cluster.node.usage.NodesUsageRequest)  */ ;/**  * Creates a nodes usage request against one or more nodes. Pass  * {@code null} or an empty array for all nodes.  *  * @param nodesIds  *            The nodes ids to get the usage for  * @return The nodes usage request  * @see org.elasticsearch.client.ClusterAdminClient#nodesUsage(org.elasticsearch.action.admin.cluster.node.usage.NodesUsageRequest)  */ public static NodesUsageRequest nodesUsageRequest(String... nodesIds) {     return new NodesUsageRequest(nodesIds). }
true;public,static;0;3;/**  * Creates a cluster stats request.  *  * @return The cluster stats request  * @see org.elasticsearch.client.ClusterAdminClient#clusterStats(org.elasticsearch.action.admin.cluster.stats.ClusterStatsRequest)  */ ;/**  * Creates a cluster stats request.  *  * @return The cluster stats request  * @see org.elasticsearch.client.ClusterAdminClient#clusterStats(org.elasticsearch.action.admin.cluster.stats.ClusterStatsRequest)  */ public static ClusterStatsRequest clusterStatsRequest() {     return new ClusterStatsRequest(). }
true;public,static;0;3;/**  * Creates a nodes tasks request against all the nodes.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#listTasks(ListTasksRequest)  */ ;/**  * Creates a nodes tasks request against all the nodes.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#listTasks(ListTasksRequest)  */ public static ListTasksRequest listTasksRequest() {     return new ListTasksRequest(). }
true;public,static;0;3;/**  * Creates a get task request.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#getTask(GetTaskRequest)  */ ;/**  * Creates a get task request.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#getTask(GetTaskRequest)  */ public static GetTaskRequest getTaskRequest() {     return new GetTaskRequest(). }
true;public,static;0;3;/**  * Creates a nodes tasks request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#cancelTasks(CancelTasksRequest)  */ ;/**  * Creates a nodes tasks request against one or more nodes. Pass {@code null} or an empty array for all nodes.  *  * @return The nodes tasks request  * @see org.elasticsearch.client.ClusterAdminClient#cancelTasks(CancelTasksRequest)  */ public static CancelTasksRequest cancelTasksRequest() {     return new CancelTasksRequest(). }
true;public,static;1;3;/**  * Registers snapshot repository  *  * @param name repository name  * @return repository registration request  */ ;/**  * Registers snapshot repository  *  * @param name repository name  * @return repository registration request  */ public static PutRepositoryRequest putRepositoryRequest(String name) {     return new PutRepositoryRequest(name). }
true;public,static;1;3;/**  * Gets snapshot repository  *  * @param repositories names of repositories  * @return get repository request  */ ;/**  * Gets snapshot repository  *  * @param repositories names of repositories  * @return get repository request  */ public static GetRepositoriesRequest getRepositoryRequest(String... repositories) {     return new GetRepositoriesRequest(repositories). }
true;public,static;1;3;/**  * Deletes registration for snapshot repository  *  * @param name repository name  * @return delete repository request  */ ;/**  * Deletes registration for snapshot repository  *  * @param name repository name  * @return delete repository request  */ public static DeleteRepositoryRequest deleteRepositoryRequest(String name) {     return new DeleteRepositoryRequest(name). }
true;public,static;1;3;/**  * Verifies snapshot repository  *  * @param name repository name  * @return repository verification request  */ ;/**  * Verifies snapshot repository  *  * @param name repository name  * @return repository verification request  */ public static VerifyRepositoryRequest verifyRepositoryRequest(String name) {     return new VerifyRepositoryRequest(name). }
true;public,static;2;3;/**  * Creates new snapshot  *  * @param repository repository name  * @param snapshot   snapshot name  * @return create snapshot request  */ ;/**  * Creates new snapshot  *  * @param repository repository name  * @param snapshot   snapshot name  * @return create snapshot request  */ public static CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot) {     return new CreateSnapshotRequest(repository, snapshot). }
true;public,static;1;3;/**  * Gets snapshots from repository  *  * @param repository repository name  * @return get snapshot  request  */ ;/**  * Gets snapshots from repository  *  * @param repository repository name  * @return get snapshot  request  */ public static GetSnapshotsRequest getSnapshotsRequest(String repository) {     return new GetSnapshotsRequest(repository). }
true;public,static;2;3;/**  * Restores new snapshot  *  * @param repository repository name  * @param snapshot   snapshot name  * @return snapshot creation request  */ ;/**  * Restores new snapshot  *  * @param repository repository name  * @param snapshot   snapshot name  * @return snapshot creation request  */ public static RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot) {     return new RestoreSnapshotRequest(repository, snapshot). }
true;public,static;2;3;/**  * Deletes a snapshot  *  * @param snapshot   snapshot name  * @param repository repository name  * @return delete snapshot request  */ ;/**  * Deletes a snapshot  *  * @param snapshot   snapshot name  * @param repository repository name  * @return delete snapshot request  */ public static DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot) {     return new DeleteSnapshotRequest(repository, snapshot). }
true;public,static;1;3;/**  *  Get status of snapshots  *  * @param repository repository name  * @return snapshot status request  */ ;/**  *  Get status of snapshots  *  * @param repository repository name  * @return snapshot status request  */ public static SnapshotsStatusRequest snapshotsStatusRequest(String repository) {     return new SnapshotsStatusRequest(repository). }
