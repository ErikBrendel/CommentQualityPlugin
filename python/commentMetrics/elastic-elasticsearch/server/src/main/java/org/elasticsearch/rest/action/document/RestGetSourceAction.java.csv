commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "document_get_source_action". }
false;public;2;26;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final GetRequest getRequest.     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("get_source_with_types", TYPES_DEPRECATION_MESSAGE).         getRequest = new GetRequest(request.param("index"), request.param("type"), request.param("id")).     } else {         getRequest = new GetRequest(request.param("index"), request.param("id")).     }     getRequest.refresh(request.paramAsBoolean("refresh", getRequest.refresh())).     getRequest.routing(request.param("routing")).     getRequest.preference(request.param("preference")).     getRequest.realtime(request.paramAsBoolean("realtime", getRequest.realtime())).     getRequest.fetchSourceContext(FetchSourceContext.parseFromRestRequest(request)).     return channel -> {         if (getRequest.fetchSourceContext() != null && !getRequest.fetchSourceContext().fetchSource()) {             final ActionRequestValidationException validationError = new ActionRequestValidationException().             validationError.addValidationError("fetching source can not be disabled").             channel.sendResponse(new BytesRestResponse(channel, validationError)).         } else {             client.get(getRequest, new RestGetSourceResponseListener(channel, request)).         }     }. }
false;public;1;11;;@Override public RestResponse buildResponse(final GetResponse response) throws Exception {     checkResource(response).     final XContentBuilder builder = channel.newBuilder(request.getXContentType(), false).     final BytesReference source = response.getSourceInternal().     try (InputStream stream = source.streamInput()) {         builder.rawValue(stream, XContentHelper.xContentType(source)).     }     return new BytesRestResponse(OK, builder). }
true;private;1;11;/**  * Checks if the requested document or source is missing.  *  * @param response a response  * @throws ResourceNotFoundException if the document or source is missing  */ ;/**  * Checks if the requested document or source is missing.  *  * @param response a response  * @throws ResourceNotFoundException if the document or source is missing  */ private void checkResource(final GetResponse response) {     final String index = response.getIndex().     final String type = response.getType().     final String id = response.getId().     if (response.isExists() == false) {         throw new ResourceNotFoundException("Document not found [" + index + "]/[" + type + "]/[" + id + "]").     } else if (response.isSourceEmpty()) {         throw new ResourceNotFoundException("Source not found [" + index + "]/[" + type + "]/[" + id + "]").     } }
