commented;modifiers;parameterAmount;loc;comment;code
true;default;1;1;/**  * Executed before the query phase is executed  * @param searchContext the current search context  */ ;/**  * Executed before the query phase is executed  * @param searchContext the current search context  */ default void onPreQueryPhase(SearchContext searchContext) { }
true;default;1;1;/**  * Executed if a query phased failed.  * @param searchContext the current search context  */ ;/**  * Executed if a query phased failed.  * @param searchContext the current search context  */ default void onFailedQueryPhase(SearchContext searchContext) { }
true;default;2;1;/**  * Executed after the query phase successfully finished.  * Note: this is not invoked if the query phase execution failed.  * @param searchContext the current search context  * @param tookInNanos the number of nanoseconds the query execution took  *  * @see #onFailedQueryPhase(SearchContext)  */ ;/**  * Executed after the query phase successfully finished.  * Note: this is not invoked if the query phase execution failed.  * @param searchContext the current search context  * @param tookInNanos the number of nanoseconds the query execution took  *  * @see #onFailedQueryPhase(SearchContext)  */ default void onQueryPhase(SearchContext searchContext, long tookInNanos) { }
true;default;1;1;/**  * Executed before the fetch phase is executed  * @param searchContext the current search context  */ ;/**  * Executed before the fetch phase is executed  * @param searchContext the current search context  */ default void onPreFetchPhase(SearchContext searchContext) { }
true;default;1;1;/**  * Executed if a fetch phased failed.  * @param searchContext the current search context  */ ;/**  * Executed if a fetch phased failed.  * @param searchContext the current search context  */ default void onFailedFetchPhase(SearchContext searchContext) { }
true;default;2;1;/**  * Executed after the fetch phase successfully finished.  * Note: this is not invoked if the fetch phase execution failed.  * @param searchContext the current search context  * @param tookInNanos the number of nanoseconds the fetch execution took  *  * @see #onFailedFetchPhase(SearchContext)  */ ;/**  * Executed after the fetch phase successfully finished.  * Note: this is not invoked if the fetch phase execution failed.  * @param searchContext the current search context  * @param tookInNanos the number of nanoseconds the fetch execution took  *  * @see #onFailedFetchPhase(SearchContext)  */ default void onFetchPhase(SearchContext searchContext, long tookInNanos) { }
true;default;1;1;/**  * Executed when a new search context was created  * @param context the created context  */ ;/**  * Executed when a new search context was created  * @param context the created context  */ default void onNewContext(SearchContext context) { }
true;default;1;1;/**  * Executed when a previously created search context is freed.  * This happens either when the search execution finishes, if the  * execution failed or if the search context as idle for and needs to be  * cleaned up.  * @param context the freed search context  */ ;/**  * Executed when a previously created search context is freed.  * This happens either when the search execution finishes, if the  * execution failed or if the search context as idle for and needs to be  * cleaned up.  * @param context the freed search context  */ default void onFreeContext(SearchContext context) { }
true;default;1;1;/**  * Executed when a new scroll search {@link SearchContext} was created  * @param context the created search context  */ ;/**  * Executed when a new scroll search {@link SearchContext} was created  * @param context the created search context  */ default void onNewScrollContext(SearchContext context) { }
true;default;1;1;/**  * Executed when a scroll search {@link SearchContext} is freed.  * This happens either when the scroll search execution finishes, if the  * execution failed or if the search context as idle for and needs to be  * cleaned up.  * @param context the freed search context  */ ;/**  * Executed when a scroll search {@link SearchContext} is freed.  * This happens either when the scroll search execution finishes, if the  * execution failed or if the search context as idle for and needs to be  * cleaned up.  * @param context the freed search context  */ default void onFreeScrollContext(SearchContext context) { }
true;default;2;1;/**  * Executed prior to using a {@link SearchContext} that has been retrieved  * from the active contexts. If the context is deemed invalid a runtime  * exception can be thrown, which will prevent the context from being used.  * @param context the context retrieved from the active contexts  * @param transportRequest the request that is going to use the search context  */ ;/**  * Executed prior to using a {@link SearchContext} that has been retrieved  * from the active contexts. If the context is deemed invalid a runtime  * exception can be thrown, which will prevent the context from being used.  * @param context the context retrieved from the active contexts  * @param transportRequest the request that is going to use the search context  */ default void validateSearchContext(SearchContext context, TransportRequest transportRequest) { }
false;public;1;10;;@Override public void onPreQueryPhase(SearchContext searchContext) {     for (SearchOperationListener listener : listeners) {         try {             listener.onPreQueryPhase(searchContext).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onPreQueryPhase listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onFailedQueryPhase(SearchContext searchContext) {     for (SearchOperationListener listener : listeners) {         try {             listener.onFailedQueryPhase(searchContext).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onFailedQueryPhase listener [{}] failed", listener), e).         }     } }
false;public;2;10;;@Override public void onQueryPhase(SearchContext searchContext, long tookInNanos) {     for (SearchOperationListener listener : listeners) {         try {             listener.onQueryPhase(searchContext, tookInNanos).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onQueryPhase listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onPreFetchPhase(SearchContext searchContext) {     for (SearchOperationListener listener : listeners) {         try {             listener.onPreFetchPhase(searchContext).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onPreFetchPhase listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onFailedFetchPhase(SearchContext searchContext) {     for (SearchOperationListener listener : listeners) {         try {             listener.onFailedFetchPhase(searchContext).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onFailedFetchPhase listener [{}] failed", listener), e).         }     } }
false;public;2;10;;@Override public void onFetchPhase(SearchContext searchContext, long tookInNanos) {     for (SearchOperationListener listener : listeners) {         try {             listener.onFetchPhase(searchContext, tookInNanos).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onFetchPhase listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onNewContext(SearchContext context) {     for (SearchOperationListener listener : listeners) {         try {             listener.onNewContext(context).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onNewContext listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onFreeContext(SearchContext context) {     for (SearchOperationListener listener : listeners) {         try {             listener.onFreeContext(context).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onFreeContext listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onNewScrollContext(SearchContext context) {     for (SearchOperationListener listener : listeners) {         try {             listener.onNewScrollContext(context).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onNewScrollContext listener [{}] failed", listener), e).         }     } }
false;public;1;10;;@Override public void onFreeScrollContext(SearchContext context) {     for (SearchOperationListener listener : listeners) {         try {             listener.onFreeScrollContext(context).         } catch (Exception e) {             logger.warn(() -> new ParameterizedMessage("onFreeScrollContext listener [{}] failed", listener), e).         }     } }
false;public;2;12;;@Override public void validateSearchContext(SearchContext context, TransportRequest request) {     Exception exception = null.     for (SearchOperationListener listener : listeners) {         try {             listener.validateSearchContext(context, request).         } catch (Exception e) {             exception = ExceptionsHelper.useOrSuppress(exception, e).         }     }     ExceptionsHelper.reThrowIfNotNull(exception). }
