commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public Map<ShardRouting, ShardStats> asMap() {     if (this.shardStatsMap == null) {         Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>().         for (ShardStats ss : shards) {             shardStatsMap.put(ss.getShardRouting(), ss).         }         this.shardStatsMap = unmodifiableMap(shardStatsMap).     }     return this.shardStatsMap. }
false;public;0;3;;public ShardStats[] getShards() {     return this.shards. }
false;public;1;3;;public ShardStats getAt(int position) {     return shards[position]. }
false;public;1;3;;public IndexStats getIndex(String index) {     return getIndices().get(index). }
false;public;0;26;;public Map<String, IndexStats> getIndices() {     if (indicesStats != null) {         return indicesStats.     }     Map<String, IndexStats> indicesStats = new HashMap<>().     Set<Index> indices = new HashSet<>().     for (ShardStats shard : shards) {         indices.add(shard.getShardRouting().index()).     }     for (Index index : indices) {         List<ShardStats> shards = new ArrayList<>().         String indexName = index.getName().         for (ShardStats shard : this.shards) {             if (shard.getShardRouting().getIndexName().equals(indexName)) {                 shards.add(shard).             }         }         indicesStats.put(indexName, new IndexStats(indexName, index.getUUID(), shards.toArray(new ShardStats[shards.size()]))).     }     this.indicesStats = indicesStats.     return indicesStats. }
false;public;0;11;;public CommonStats getTotal() {     if (total != null) {         return total.     }     CommonStats stats = new CommonStats().     for (ShardStats shard : shards) {         stats.add(shard.getStats()).     }     total = stats.     return stats. }
false;public;0;13;;public CommonStats getPrimaries() {     if (primary != null) {         return primary.     }     CommonStats stats = new CommonStats().     for (ShardStats shard : shards) {         if (shard.getShardRouting().primary()) {             stats.add(shard.getStats()).         }     }     primary = stats.     return stats. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     shards = in.readArray(ShardStats::readShardStats, (size) -> new ShardStats[size]). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeArray(shards). }
false;protected;2;52;;@Override protected void addCustomXContentFields(XContentBuilder builder, Params params) throws IOException {     final String level = params.param("level", "indices").     final boolean isLevelValid = "cluster".equalsIgnoreCase(level) || "indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level).     if (!isLevelValid) {         throw new IllegalArgumentException("level parameter must be one of [cluster] or [indices] or [shards] but was [" + level + "]").     }     builder.startObject("_all").     builder.startObject("primaries").     getPrimaries().toXContent(builder, params).     builder.endObject().     builder.startObject("total").     getTotal().toXContent(builder, params).     builder.endObject().     builder.endObject().     if ("indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level)) {         builder.startObject(Fields.INDICES).         for (IndexStats indexStats : getIndices().values()) {             builder.startObject(indexStats.getIndex()).             builder.field("uuid", indexStats.getUuid()).             builder.startObject("primaries").             indexStats.getPrimaries().toXContent(builder, params).             builder.endObject().             builder.startObject("total").             indexStats.getTotal().toXContent(builder, params).             builder.endObject().             if ("shards".equalsIgnoreCase(level)) {                 builder.startObject(Fields.SHARDS).                 for (IndexShardStats indexShardStats : indexStats) {                     builder.startArray(Integer.toString(indexShardStats.getShardId().id())).                     for (ShardStats shardStats : indexShardStats) {                         builder.startObject().                         shardStats.toXContent(builder, params).                         builder.endObject().                     }                     builder.endArray().                 }                 builder.endObject().             }             builder.endObject().         }         builder.endObject().     } }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, false). }
