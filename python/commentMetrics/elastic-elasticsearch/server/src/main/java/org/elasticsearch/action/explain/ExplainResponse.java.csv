commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getIndex() {     return index. }
true;public;0;4;/**  * @deprecated Types are in the process of being removed.  */ ;/**  * @deprecated Types are in the process of being removed.  */ @Deprecated public String getType() {     return type. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public Explanation getExplanation() {     return explanation. }
false;public;0;3;;public boolean isMatch() {     return explanation != null && explanation.isMatch(). }
false;public;0;3;;public boolean hasExplanation() {     return explanation != null. }
false;public;0;3;;public boolean isExists() {     return exists. }
false;public;0;3;;public GetResult getGetResult() {     return getResult. }
false;public;0;4;;@Override public RestStatus status() {     return exists ? RestStatus.OK : RestStatus.NOT_FOUND. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     index = in.readString().     type = in.readString().     id = in.readString().     exists = in.readBoolean().     if (in.readBoolean()) {         explanation = readExplanation(in).     }     if (in.readBoolean()) {         getResult = GetResult.readGetResult(in).     } }
false;public;1;20;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(index).     out.writeString(type).     out.writeString(id).     out.writeBoolean(exists).     if (explanation == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         writeExplanation(out, explanation).     }     if (getResult == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         getResult.writeTo(out).     } }
false;public,static;2;3;;public static ExplainResponse fromXContent(XContentParser parser, boolean exists) {     return PARSER.apply(parser, exists). }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(_INDEX.getPreferredName(), index).     builder.field(_TYPE.getPreferredName(), type).     builder.field(_ID.getPreferredName(), id).     builder.field(MATCHED.getPreferredName(), isMatch()).     if (hasExplanation()) {         builder.startObject(EXPLANATION.getPreferredName()).         buildExplanation(builder, explanation).         builder.endObject().     }     if (getResult != null) {         builder.startObject(GET.getPreferredName()).         getResult.toXContentEmbedded(builder, params).         builder.endObject().     }     builder.endObject().     return builder. }
false;private;2;14;;private void buildExplanation(XContentBuilder builder, Explanation explanation) throws IOException {     builder.field(VALUE.getPreferredName(), explanation.getValue()).     builder.field(DESCRIPTION.getPreferredName(), explanation.getDescription()).     Explanation[] innerExps = explanation.getDetails().     if (innerExps != null) {         builder.startArray(DETAILS.getPreferredName()).         for (Explanation exp : innerExps) {             builder.startObject().             buildExplanation(builder, exp).             builder.endObject().         }         builder.endArray().     } }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ExplainResponse other = (ExplainResponse) obj.     return index.equals(other.index) && type.equals(other.type) && id.equals(other.id) && Objects.equals(explanation, other.explanation) && getResult.isExists() == other.getResult.isExists() && Objects.equals(getResult.sourceAsMap(), other.getResult.sourceAsMap()) && Objects.equals(getResult.getFields(), other.getResult.getFields()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index, type, id, explanation, getResult.isExists(), getResult.sourceAsMap(), getResult.getFields()). }
