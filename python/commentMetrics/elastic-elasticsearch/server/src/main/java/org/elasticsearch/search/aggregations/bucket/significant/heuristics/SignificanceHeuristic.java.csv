commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;4;1;/**  * @param subsetFreq   The frequency of the term in the selected sample  * @param subsetSize   The size of the selected sample (typically number of docs)  * @param supersetFreq The frequency of the term in the superset from which the sample was taken  * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)  * @return a "significance" score  */ ;/**  * @param subsetFreq   The frequency of the term in the selected sample  * @param subsetSize   The size of the selected sample (typically number of docs)  * @param supersetFreq The frequency of the term in the superset from which the sample was taken  * @param supersetSize The size of the superset from which the sample was taken  (typically number of docs)  * @return a "significance" score  */ public abstract double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize).
false;protected;5;13;;protected void checkFrequencyValidity(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize, String scoreFunctionName) {     if (subsetFreq < 0 || subsetSize < 0 || supersetFreq < 0 || supersetSize < 0) {         throw new IllegalArgumentException("Frequencies of subset and superset must be positive in " + scoreFunctionName + ".getScore()").     }     if (subsetFreq > subsetSize) {         throw new IllegalArgumentException("subsetFreq > subsetSize, in " + scoreFunctionName).     }     if (supersetFreq > supersetSize) {         throw new IllegalArgumentException("supersetFreq > supersetSize, in " + scoreFunctionName).     } }
true;public;1;3;/**  * Provides a hook for subclasses to provide a version of the heuristic  * prepared for execution on data on the coordinating node.  * @param reduceContext the reduce context on the coordinating node  * @return a version of this heuristic suitable for execution  */ ;/**  * Provides a hook for subclasses to provide a version of the heuristic  * prepared for execution on data on the coordinating node.  * @param reduceContext the reduce context on the coordinating node  * @return a version of this heuristic suitable for execution  */ public SignificanceHeuristic rewrite(InternalAggregation.ReduceContext reduceContext) {     return this. }
true;public;1;3;/**  * Provides a hook for subclasses to provide a version of the heuristic  * prepared for execution on data on a shard.  * @param context the search context on the data node  * @return a version of this heuristic suitable for execution  */ ;/**  * Provides a hook for subclasses to provide a version of the heuristic  * prepared for execution on data on a shard.  * @param context the search context on the data node  * @return a version of this heuristic suitable for execution  */ public SignificanceHeuristic rewrite(SearchContext context) {     return this. }
