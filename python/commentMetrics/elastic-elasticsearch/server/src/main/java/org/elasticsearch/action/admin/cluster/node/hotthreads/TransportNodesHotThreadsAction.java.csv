commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;5;;@Override protected NodesHotThreadsResponse newResponse(NodesHotThreadsRequest request, List<NodeHotThreads> responses, List<FailedNodeException> failures) {     return new NodesHotThreadsResponse(clusterService.getClusterName(), responses, failures). }
false;protected;2;4;;@Override protected NodeRequest newNodeRequest(String nodeId, NodesHotThreadsRequest request) {     return new NodeRequest(nodeId, request). }
false;protected;0;4;;@Override protected NodeHotThreads newNodeResponse() {     return new NodeHotThreads(). }
false;protected;1;14;;@Override protected NodeHotThreads nodeOperation(NodeRequest request) {     HotThreads hotThreads = new HotThreads().busiestThreads(request.request.threads).type(request.request.type).interval(request.request.interval).threadElementsSnapshotCount(request.request.snapshots).ignoreIdleThreads(request.request.ignoreIdleThreads).     try {         return new NodeHotThreads(clusterService.localNode(), hotThreads.detect()).     } catch (Exception e) {         throw new ElasticsearchException("failed to detect hot threads", e).     } }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     request = new NodesHotThreadsRequest().     request.readFrom(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     request.writeTo(out). }
