commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;1;4;;protected static void declareAggregationFields(ObjectParser<? extends ParsedAggregation, Void> objectParser) {     objectParser.declareObject((parsedAgg, metadata) -> parsedAgg.metadata = Collections.unmodifiableMap(metadata), (parser, context) -> parser.map(), InternalAggregation.CommonFields.META). }
false;public,final;0;4;;@Override public final String getName() {     return name. }
false;protected;1;3;;protected void setName(String name) {     this.name = name. }
false;public,final;0;4;;@Override public final Map<String, Object> getMetaData() {     return metadata. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     // Concatenates the type and the name of the aggregation (ex: top_hits#foo)     builder.startObject(String.join(InternalAggregation.TYPED_KEYS_DELIMITER, getType(), name)).     if (this.metadata != null) {         builder.field(InternalAggregation.CommonFields.META.getPreferredName()).         builder.map(this.metadata).     }     doXContentBody(builder, params).     builder.endObject().     return builder. }
false;protected,abstract;2;1;;protected abstract XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException.
true;protected,static;2;8;/**  * Parse a token of type XContentParser.Token.VALUE_NUMBER or XContentParser.Token.STRING to a double.  * In other cases the default value is returned instead.  */ ;/**  * Parse a token of type XContentParser.Token.VALUE_NUMBER or XContentParser.Token.STRING to a double.  * In other cases the default value is returned instead.  */ protected static double parseDouble(XContentParser parser, double defaultNullValue) throws IOException {     Token currentToken = parser.currentToken().     if (currentToken == XContentParser.Token.VALUE_NUMBER || currentToken == XContentParser.Token.VALUE_STRING) {         return parser.doubleValue().     } else {         return defaultNullValue.     } }
