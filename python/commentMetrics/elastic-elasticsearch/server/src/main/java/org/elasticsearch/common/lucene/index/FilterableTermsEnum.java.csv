commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected boolean match(int doc) {     return liveDocs.get(doc). }
false;public;0;4;;@Override public BytesRef term() throws IOException {     return current. }
false;public;0;4;;@Override public AttributeSource attributes() {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;1;53;;@Override public boolean seekExact(BytesRef text) throws IOException {     int docFreq = 0.     long totalTermFreq = 0.     for (Holder anEnum : enums) {         if (anEnum.termsEnum.seekExact(text)) {             if (anEnum.bits == null) {                 docFreq += anEnum.termsEnum.docFreq().                 if (docsEnumFlag == PostingsEnum.FREQS) {                     long leafTotalTermFreq = anEnum.termsEnum.totalTermFreq().                     if (totalTermFreq == -1 || leafTotalTermFreq == -1) {                         totalTermFreq = -1.                         continue.                     }                     totalTermFreq += leafTotalTermFreq.                 }             } else {                 final PostingsEnum docsEnum = anEnum.docsEnum = anEnum.termsEnum.postings(anEnum.docsEnum, docsEnumFlag).                 // 2 choices for performing same heavy loop - one attempts to calculate totalTermFreq and other does not                 if (docsEnumFlag == PostingsEnum.FREQS) {                     for (int docId = docsEnum.nextDoc(). docId != DocIdSetIterator.NO_MORE_DOCS. docId = docsEnum.nextDoc()) {                         if (anEnum.bits != null && anEnum.bits.get(docId) == false) {                             continue.                         }                         docFreq++.                         // docsEnum.freq() returns 1 if doc indexed with IndexOptions.DOCS_ONLY so no way of knowing if value                         // is really 1 or unrecorded when filtering like this                         totalTermFreq += docsEnum.freq().                     }                 } else {                     for (int docId = docsEnum.nextDoc(). docId != DocIdSetIterator.NO_MORE_DOCS. docId = docsEnum.nextDoc()) {                         if (anEnum.bits != null && anEnum.bits.get(docId) == false) {                             continue.                         }                         // docsEnum.freq() behaviour is undefined if docsEnumFlag==PostingsEnum.FLAG_NONE so don't bother with call                         docFreq++.                     }                 }             }         }     }     if (docFreq > 0) {         currentDocFreq = docFreq.         currentTotalTermFreq = totalTermFreq.         current = text.         return true.     } else {         currentDocFreq = NOT_FOUND.         currentTotalTermFreq = NOT_FOUND.         current = null.         return false.     } }
false;public;0;4;;@Override public int docFreq() throws IOException {     return currentDocFreq. }
false;public;0;4;;@Override public long totalTermFreq() throws IOException {     return currentTotalTermFreq. }
false;public;1;4;;@Override public void seekExact(long ord) throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;2;4;;@Override public void seekExact(BytesRef term, TermState state) throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;0;4;;@Override public TermState termState() throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;1;4;;@Override public SeekStatus seekCeil(BytesRef text) throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;0;4;;@Override public long ord() throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;2;4;;@Override public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;1;4;;@Override public ImpactsEnum impacts(int flags) throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
false;public;0;4;;@Override public BytesRef next() throws IOException {     throw new UnsupportedOperationException(UNSUPPORTED_MESSAGE). }
