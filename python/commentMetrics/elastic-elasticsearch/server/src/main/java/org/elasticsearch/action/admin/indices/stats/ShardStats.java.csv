commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the current retention lease stats.  *  * @return the current retention lease stats  */ ;/**  * Gets the current retention lease stats.  *  * @return the current retention lease stats  */ public RetentionLeaseStats getRetentionLeaseStats() {     return retentionLeaseStats. }
true;public;0;3;/**  * The shard routing information (cluster wide shard state).  */ ;/**  * The shard routing information (cluster wide shard state).  */ public ShardRouting getShardRouting() {     return this.shardRouting. }
false;public;0;3;;public CommonStats getStats() {     return this.commonStats. }
false;public;0;4;;@Nullable public CommitStats getCommitStats() {     return this.commitStats. }
false;public;0;4;;@Nullable public SeqNoStats getSeqNoStats() {     return this.seqNoStats. }
false;public;0;3;;public String getDataPath() {     return dataPath. }
false;public;0;3;;public String getStatePath() {     return statePath. }
false;public;0;3;;public boolean isCustomDataPath() {     return isCustomDataPath. }
false;public,static;1;5;;public static ShardStats readShardStats(StreamInput in) throws IOException {     ShardStats stats = new ShardStats().     stats.readFrom(in).     return stats. }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     shardRouting = new ShardRouting(in).     commonStats = new CommonStats(in).     commitStats = CommitStats.readOptionalCommitStatsFrom(in).     statePath = in.readString().     dataPath = in.readString().     isCustomDataPath = in.readBoolean().     if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         seqNoStats = in.readOptionalWriteable(SeqNoStats::new).     }     if (in.getVersion().onOrAfter(Version.V_6_7_0)) {         retentionLeaseStats = in.readOptionalWriteable(RetentionLeaseStats::new).     } }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     shardRouting.writeTo(out).     commonStats.writeTo(out).     out.writeOptionalStreamable(commitStats).     out.writeString(statePath).     out.writeString(dataPath).     out.writeBoolean(isCustomDataPath).     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         out.writeOptionalWriteable(seqNoStats).     }     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         out.writeOptionalWriteable(retentionLeaseStats).     } }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Fields.ROUTING).field(Fields.STATE, shardRouting.state()).field(Fields.PRIMARY, shardRouting.primary()).field(Fields.NODE, shardRouting.currentNodeId()).field(Fields.RELOCATING_NODE, shardRouting.relocatingNodeId()).endObject().     commonStats.toXContent(builder, params).     if (commitStats != null) {         commitStats.toXContent(builder, params).     }     if (seqNoStats != null) {         seqNoStats.toXContent(builder, params).     }     if (retentionLeaseStats != null) {         retentionLeaseStats.toXContent(builder, params).     }     builder.startObject(Fields.SHARD_PATH).     builder.field(Fields.STATE_PATH, statePath).     builder.field(Fields.DATA_PATH, dataPath).     builder.field(Fields.IS_CUSTOM_DATA_PATH, isCustomDataPath).     builder.endObject().     return builder. }
