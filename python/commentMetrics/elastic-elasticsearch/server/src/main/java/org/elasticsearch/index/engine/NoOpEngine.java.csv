commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected DirectoryReader doOpenIfChanged() throws IOException {     return null. }
false;protected;1;4;;@Override protected DirectoryReader doOpenIfChanged(IndexCommit commit) throws IOException {     return null. }
false;protected;2;4;;@Override protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {     return null. }
false;public;0;4;;@Override public long getVersion() {     return 0. }
false;public;0;4;;@Override public boolean isCurrent() throws IOException {     return true. }
false;public;0;4;;@Override public IndexCommit getIndexCommit() throws IOException {     return indexCommit. }
false;protected;0;3;;@Override protected void doClose() throws IOException { }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return null. }
false;protected;1;46;;@Override protected DirectoryReader open(final IndexCommit commit) throws IOException {     final Directory directory = commit.getDirectory().     final List<IndexCommit> indexCommits = DirectoryReader.listCommits(directory).     final IndexCommit indexCommit = indexCommits.get(indexCommits.size() - 1).     return new DirectoryReader(directory, new LeafReader[0]) {          @Override         protected DirectoryReader doOpenIfChanged() throws IOException {             return null.         }          @Override         protected DirectoryReader doOpenIfChanged(IndexCommit commit) throws IOException {             return null.         }          @Override         protected DirectoryReader doOpenIfChanged(IndexWriter writer, boolean applyAllDeletes) throws IOException {             return null.         }          @Override         public long getVersion() {             return 0.         }          @Override         public boolean isCurrent() throws IOException {             return true.         }          @Override         public IndexCommit getIndexCommit() throws IOException {             return indexCommit.         }          @Override         protected void doClose() throws IOException {         }          @Override         public CacheHelper getReaderCacheHelper() {             return null.         }     }. }
