commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the snapshot name  *  * @param snapshot snapshot name  * @return this builder  */ ;/**  * Sets the snapshot name  *  * @param snapshot snapshot name  * @return this builder  */ public CreateSnapshotRequestBuilder setSnapshot(String snapshot) {     request.snapshot(snapshot).     return this. }
true;public;1;4;/**  * Sets the repository name  *  * @param repository repository name  * @return this builder  */ ;/**  * Sets the repository name  *  * @param repository repository name  * @return this builder  */ public CreateSnapshotRequestBuilder setRepository(String repository) {     request.repository(repository).     return this. }
true;public;1;4;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this builder  */ ;/**  * Sets a list of indices that should be included into the snapshot  * <p>  * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with  * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open  * indices in the cluster.  *  * @return this builder  */ public CreateSnapshotRequestBuilder setIndices(String... indices) {     request.indices(indices).     return this. }
true;public;1;4;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices options  * @return this request  */ ;/**  * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.  *  * @param indicesOptions the desired behaviour regarding indices options  * @return this request  */ public CreateSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions) {     request.indicesOptions(indicesOptions).     return this. }
true;public;1;4;/**  * If set to true the request should wait for the snapshot completion before returning.  *  * @param waitForCompletion true if  * @return this builder  */ ;/**  * If set to true the request should wait for the snapshot completion before returning.  *  * @param waitForCompletion true if  * @return this builder  */ public CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion) {     request.waitForCompletion(waitForCompletion).     return this. }
true;public;1;4;/**  * If set to true the request should snapshot indices with unavailable shards  *  * @param partial true if request should snapshot indices with unavailable shards  * @return this builder  */ ;/**  * If set to true the request should snapshot indices with unavailable shards  *  * @param partial true if request should snapshot indices with unavailable shards  * @return this builder  */ public CreateSnapshotRequestBuilder setPartial(boolean partial) {     request.partial(partial).     return this. }
true;public;1;4;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ public CreateSnapshotRequestBuilder setSettings(Settings settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ public CreateSnapshotRequestBuilder setSettings(Settings.Builder settings) {     request.settings(settings).     return this. }
true;public;2;4;/**  * Sets repository-specific snapshot settings in YAML or JSON format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this builder  */ ;/**  * Sets repository-specific snapshot settings in YAML or JSON format  * <p>  * See repository documentation for more information.  *  * @param source repository-specific snapshot settings  * @param xContentType the content type of the source  * @return this builder  */ public CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType) {     request.settings(source, xContentType).     return this. }
true;public;1;4;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ ;/**  * Sets repository-specific snapshot settings.  * <p>  * See repository documentation for more information.  *  * @param settings repository-specific snapshot settings  * @return this builder  */ public CreateSnapshotRequestBuilder setSettings(Map<String, Object> settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * Set to true if snapshot should include global cluster state  *  * @param includeGlobalState true if snapshot should include global cluster state  * @return this builder  */ ;/**  * Set to true if snapshot should include global cluster state  *  * @param includeGlobalState true if snapshot should include global cluster state  * @return this builder  */ public CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState) {     request.includeGlobalState(includeGlobalState).     return this. }
