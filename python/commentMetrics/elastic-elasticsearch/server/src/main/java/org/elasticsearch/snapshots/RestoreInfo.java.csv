commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Snapshot name  *  * @return snapshot name  */ ;/**  * Snapshot name  *  * @return snapshot name  */ public String name() {     return name. }
true;public;0;3;/**  * List of restored indices  *  * @return list of restored indices  */ ;/**  * List of restored indices  *  * @return list of restored indices  */ public List<String> indices() {     return indices. }
true;public;0;3;/**  * Number of shards being restored  *  * @return number of being restored  */ ;/**  * Number of shards being restored  *  * @return number of being restored  */ public int totalShards() {     return totalShards. }
true;public;0;3;/**  * Number of failed shards  *  * @return number of failed shards  */ ;/**  * Number of failed shards  *  * @return number of failed shards  */ public int failedShards() {     return totalShards - successfulShards. }
true;public;0;3;/**  * Number of successful shards  *  * @return number of successful shards  */ ;/**  * Number of successful shards  *  * @return number of successful shards  */ public int successfulShards() {     return successfulShards. }
true;public;0;3;/**  * REST status of the operation  *  * @return REST status  */ ;/**  * REST status of the operation  *  * @return REST status  */ public RestStatus status() {     return RestStatus.OK. }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Fields.SNAPSHOT, name).     builder.startArray(Fields.INDICES).     for (String index : indices) {         builder.value(index).     }     builder.endArray().     builder.startObject(Fields.SHARDS).     builder.field(Fields.TOTAL, totalShards).     builder.field(Fields.FAILED, failedShards()).     builder.field(Fields.SUCCESSFUL, successfulShards).     builder.endObject().     builder.endObject().     return builder. }
false;public,static;1;3;;public static RestoreInfo fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     name = in.readString().     int size = in.readVInt().     List<String> indicesListBuilder = new ArrayList<>().     for (int i = 0. i < size. i++) {         indicesListBuilder.add(in.readString()).     }     indices = Collections.unmodifiableList(indicesListBuilder).     totalShards = in.readVInt().     successfulShards = in.readVInt(). }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeVInt(indices.size()).     for (String index : indices) {         out.writeString(index).     }     out.writeVInt(totalShards).     out.writeVInt(successfulShards). }
true;public,static;1;3;/**  * Reads optional restore info from {@link StreamInput}  *  * @param in stream input  * @return restore info  */ ;/**  * Reads optional restore info from {@link StreamInput}  *  * @param in stream input  * @return restore info  */ public static RestoreInfo readOptionalRestoreInfo(StreamInput in) throws IOException {     return in.readOptionalStreamable(RestoreInfo::new). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     RestoreInfo that = (RestoreInfo) o.     return totalShards == that.totalShards && successfulShards == that.successfulShards && Objects.equals(name, that.name) && Objects.equals(indices, that.indices). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, indices, totalShards, successfulShards). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
