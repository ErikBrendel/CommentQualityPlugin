# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteClusterConnection -> boolean isSkipUnavailable();1548248017;Returns whether this cluster is configured to be skipped when unavailable;boolean isSkipUnavailable() {_        return skipUnavailable__    };returns,whether,this,cluster,is,configured,to,be,skipped,when,unavailable;boolean,is,skip,unavailable,return,skip,unavailable
RemoteClusterConnection -> boolean isSkipUnavailable();1548402798;Returns whether this cluster is configured to be skipped when unavailable;boolean isSkipUnavailable() {_        return skipUnavailable__    };returns,whether,this,cluster,is,configured,to,be,skipped,when,unavailable;boolean,is,skip,unavailable,return,skip,unavailable
RemoteClusterConnection -> boolean isSkipUnavailable();1550601141;Returns whether this cluster is configured to be skipped when unavailable;boolean isSkipUnavailable() {_        return skipUnavailable__    };returns,whether,this,cluster,is,configured,to,be,skipped,when,unavailable;boolean,is,skip,unavailable,return,skip,unavailable
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1524684173;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1525076988;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1528762805;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1528917185;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1529341607;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1531179852;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1534203100;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1534362961;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1534755962;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1535046779;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1535383145;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1539796943;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1540583181;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1541008027;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1541092382;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1541698679;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1542402632;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1543506953;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1544823664;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> public void ensureConnected(ActionListener<Void> voidActionListener);1545071071;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;public void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;public,void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate);1535046779;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        this.threadPool = transportService.threadPool__        this.connectionManager = connectionManager__        connectionManager.addListener(this)__        _        connectionManager.addListener(transportService)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,this,thread,pool,transport,service,thread,pool,this,connection,manager,connection,manager,connection,manager,add,listener,this,connection,manager,add,listener,transport,service
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate);1535383145;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate) {_        this(settings, clusterAlias, seedNodes, transportService, connectionManager, maxNumRemoteConnections, nodePredicate, null)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,this,settings,cluster,alias,seed,nodes,transport,service,connection,manager,max,num,remote,connections,node,predicate,null
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate);1539796943;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate) {_        this(settings, clusterAlias, seedNodes, transportService, connectionManager, maxNumRemoteConnections, nodePredicate, null)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,this,settings,cluster,alias,seed,nodes,transport,service,connection,manager,max,num,remote,connections,node,predicate,null
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate);1540583181;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate) {_        this(settings, clusterAlias, seedNodes, transportService, connectionManager, maxNumRemoteConnections, nodePredicate, null)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,this,settings,cluster,alias,seed,nodes,transport,service,connection,manager,max,num,remote,connections,node,predicate,null
RemoteClusterConnection -> synchronized void updateSeedNodes(List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1534755962;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1535046779;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1524684173;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.get()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1525076988;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.get()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1528762805;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.get()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1528917185;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1529341607;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1531179852;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1534203100;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1534362961;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1534755962;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = connectedNodes.getAny()__            transportService.sendRequest(node, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {_                    @Override_                    public ClusterStateResponse newInstance() {_                        return new ClusterStateResponse()__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,connected,nodes,get,any,transport,service,send,request,node,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,new,instance,return,new,cluster,state,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1535046779;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1535383145;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1539796943;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1540583181;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1541008027;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1541092382;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1541698679;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1542402632;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1543506953;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1544823664;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1545071071;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1548248017;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1548402798;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener);1550601141;Collects all nodes on the connected cluster and returns / passes a nodeID to {@link DiscoveryNode} lookup function_that returns <code>null</code> if the node ID is not found.;void collectNodes(ActionListener<Function<String, DiscoveryNode>> listener) {_        Runnable runnable = () -> {_            final ClusterStateRequest request = new ClusterStateRequest()__            request.clear()__            request.nodes(true)__            request.local(true)_ _            final DiscoveryNode node = getAnyConnectedNode()__            Transport.Connection connection = connectionManager.getConnection(node)__            transportService.sendRequest(connection, ClusterStateAction.NAME, request, TransportRequestOptions.EMPTY,_                new TransportResponseHandler<ClusterStateResponse>() {__                    @Override_                    public ClusterStateResponse read(StreamInput in) throws IOException {_                        ClusterStateResponse response = new ClusterStateResponse()__                        response.readFrom(in)__                        return response__                    }__                    @Override_                    public void handleResponse(ClusterStateResponse response) {_                        DiscoveryNodes nodes = response.getState().nodes()__                        listener.onResponse(nodes::get)__                    }__                    @Override_                    public void handleException(TransportException exp) {_                        listener.onFailure(exp)__                    }__                    @Override_                    public String executor() {_                        return ThreadPool.Names.SAME__                    }_                })__        }__        try {_            _            _            _            _            _            ensureConnected(ActionListener.wrap((x) -> runnable.run(), listener::onFailure))__        } catch (Exception ex) {_            listener.onFailure(ex)__        }_    };collects,all,nodes,on,the,connected,cluster,and,returns,passes,a,node,id,to,link,discovery,node,lookup,function,that,returns,code,null,code,if,the,node,id,is,not,found;void,collect,nodes,action,listener,function,string,discovery,node,listener,runnable,runnable,final,cluster,state,request,request,new,cluster,state,request,request,clear,request,nodes,true,request,local,true,final,discovery,node,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,node,transport,service,send,request,connection,cluster,state,action,name,request,transport,request,options,empty,new,transport,response,handler,cluster,state,response,override,public,cluster,state,response,read,stream,input,in,throws,ioexception,cluster,state,response,response,new,cluster,state,response,response,read,from,in,return,response,override,public,void,handle,response,cluster,state,response,response,discovery,nodes,nodes,response,get,state,nodes,listener,on,response,nodes,get,override,public,void,handle,exception,transport,exception,exp,listener,on,failure,exp,override,public,string,executor,return,thread,pool,names,same,try,ensure,connected,action,listener,wrap,x,runnable,run,listener,on,failure,catch,exception,ex,listener,on,failure,ex
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1524684173;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1525076988;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1528762805;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1528917185;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1529341607;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1531179852;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1534203100;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1534362961;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1534755962;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1535046779;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1535383145;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1539796943;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1540583181;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1541008027;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1541092382;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1541698679;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1542402632;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1543506953;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1544823664;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1545071071;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1548248017;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1548402798;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void maybeConnect();1550601141;Triggers a connect round iff there are pending requests queued up and if there is no_connect round currently running.;void maybeConnect() {_            connect(null)__        };triggers,a,connect,round,iff,there,are,pending,requests,queued,up,and,if,there,is,no,connect,round,currently,running;void,maybe,connect,connect,null
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1524684173;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1525076988;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1528762805;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1528917185;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1529341607;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1531179852;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1534203100;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1534362961;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1534755962;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1535046779;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1535383145;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1539796943;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1540583181;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1541008027;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1541092382;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1541698679;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1542402632;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1543506953;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1544823664;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1545071071;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1548248017;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1548402798;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> ConnectHandler -> void forceConnect();1550601141;Triggers a connect round unless there is one already running. In contrast to {@link #maybeConnect()} will this method also_trigger a connect round if there is no listener queued up.;void forceConnect() {_            connect(null, true)__        };triggers,a,connect,round,unless,there,is,one,already,running,in,contrast,to,link,maybe,connect,will,this,method,also,trigger,a,connect,round,if,there,is,no,listener,queued,up;void,force,connect,connect,null,true
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,                             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate, String proxyAddress);1541698679;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_                            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate, String proxyAddress) {_        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        this.compress = REMOTE_CLUSTER_COMPRESS.getConcreteSettingForNamespace(clusterAlias).get(settings)__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        builder.setCompressionEnabled(compress)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        this.threadPool = transportService.threadPool__        this.connectionManager = connectionManager__        connectionManager.addListener(this)__        _        connectionManager.addListener(transportService)__        this.proxyAddress = proxyAddress__        initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,this,compress,get,concrete,setting,for,namespace,cluster,alias,get,settings,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,builder,set,compression,enabled,compress,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,this,thread,pool,transport,service,thread,pool,this,connection,manager,connection,manager,connection,manager,add,listener,this,connection,manager,add,listener,transport,service,this,proxy,address,proxy,address,initial,connection,timeout,remote,cluster,service,get,settings
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,                             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,                             Predicate<DiscoveryNode> nodePredicate, String proxyAddress);1542402632;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_                            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_                            Predicate<DiscoveryNode> nodePredicate, String proxyAddress) {_        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        this.compress = REMOTE_CLUSTER_COMPRESS.getConcreteSettingForNamespace(clusterAlias).get(settings)__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        builder.setCompressionEnabled(compress)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        this.threadPool = transportService.threadPool__        this.connectionManager = connectionManager__        connectionManager.addListener(this)__        _        connectionManager.addListener(transportService)__        this.proxyAddress = proxyAddress__        initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,this,compress,get,concrete,setting,for,namespace,cluster,alias,get,settings,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,builder,set,compression,enabled,compress,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,this,thread,pool,transport,service,thread,pool,this,connection,manager,connection,manager,connection,manager,add,listener,this,connection,manager,add,listener,transport,service,this,proxy,address,proxy,address,initial,connection,timeout,remote,cluster,service,get,settings
RemoteClusterConnection -> void ensureConnected(ActionListener<Void> voidActionListener);1548248017;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> void ensureConnected(ActionListener<Void> voidActionListener);1548402798;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> void ensureConnected(ActionListener<Void> voidActionListener);1550601141;Ensures that this cluster is connected. If the cluster is connected this operation_will invoke the listener immediately.;void ensureConnected(ActionListener<Void> voidActionListener) {_        if (connectedNodes.size() == 0) {_            connectHandler.connect(voidActionListener)__        } else {_            voidActionListener.onResponse(null)__        }_    };ensures,that,this,cluster,is,connected,if,the,cluster,is,connected,this,operation,will,invoke,the,listener,immediately;void,ensure,connected,action,listener,void,void,action,listener,if,connected,nodes,size,0,connect,handler,connect,void,action,listener,else,void,action,listener,on,response,null
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1524684173;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1525076988;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1528762805;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1528917185;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1529341607;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.localClusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,local,cluster,name,cluster,name,get,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1531179852;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.localClusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,local,cluster,name,cluster,name,get,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1534203100;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.localClusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TcpTransport.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,local,cluster,name,cluster,name,get,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,tcp,transport,get,settings,builder,set,handshake,timeout,tcp,transport,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate);1534362961;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to;RemoteClusterConnection(Settings settings, String clusterAlias, List<DiscoveryNode> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate) {_        super(settings)__        this.localClusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        transportService.addConnectionListener(this)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to;remote,cluster,connection,settings,settings,string,cluster,alias,list,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,super,settings,this,local,cluster,name,cluster,name,get,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,transport,service,add,connection,listener,this
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1524684173;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1525076988;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1528762805;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1528917185;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1529341607;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1531179852;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1534203100;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1534362961;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1534755962;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1535046779;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1535383145;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1539796943;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1540583181;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1541008027;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1541092382;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1541698679;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1542402632;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1543506953;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1544823664;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,                                   ActionListener<ClusterSearchShardsResponse> listener);1545071071;Fetches all shards for the search request from this remote connection. This is used to later run the search on the remote end.;public void fetchSearchShards(ClusterSearchShardsRequest searchRequest,_                                  ActionListener<ClusterSearchShardsResponse> listener) {__        final ActionListener<ClusterSearchShardsResponse> searchShardsListener__        final Consumer<Exception> onConnectFailure__        if (skipUnavailable) {_            onConnectFailure = (exception) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY)__            searchShardsListener = ActionListener.wrap(listener::onResponse, (e) -> listener.onResponse(ClusterSearchShardsResponse.EMPTY))__        } else {_            onConnectFailure = listener::onFailure__            searchShardsListener = listener__        }_        _        _        ensureConnected(ActionListener.wrap((x) -> fetchShardsInternal(searchRequest, searchShardsListener), onConnectFailure))__    };fetches,all,shards,for,the,search,request,from,this,remote,connection,this,is,used,to,later,run,the,search,on,the,remote,end;public,void,fetch,search,shards,cluster,search,shards,request,search,request,action,listener,cluster,search,shards,response,listener,final,action,listener,cluster,search,shards,response,search,shards,listener,final,consumer,exception,on,connect,failure,if,skip,unavailable,on,connect,failure,exception,listener,on,response,cluster,search,shards,response,empty,search,shards,listener,action,listener,wrap,listener,on,response,e,listener,on,response,cluster,search,shards,response,empty,else,on,connect,failure,listener,on,failure,search,shards,listener,listener,ensure,connected,action,listener,wrap,x,fetch,shards,internal,search,request,search,shards,listener,on,connect,failure
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,                             String proxyAddress);1545071071;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,_                            String proxyAddress) {_        this(settings, clusterAlias, seedNodes, transportService, maxNumRemoteConnections, nodePredicate, proxyAddress,_            createConnectionManager(settings, clusterAlias, transportService))__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,tuple,string,supplier,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,settings,cluster,alias,seed,nodes,transport,service,max,num,remote,connections,node,predicate,proxy,address,create,connection,manager,settings,cluster,alias,transport,service
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,                             String proxyAddress);1548248017;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,_                            String proxyAddress) {_        this(settings, clusterAlias, seedNodes, transportService, maxNumRemoteConnections, nodePredicate, proxyAddress,_            createConnectionManager(settings, clusterAlias, transportService))__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,tuple,string,supplier,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,settings,cluster,alias,seed,nodes,transport,service,max,num,remote,connections,node,predicate,proxy,address,create,connection,manager,settings,cluster,alias,transport,service
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,                             String proxyAddress);1548402798;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,_                            String proxyAddress) {_        this(settings, clusterAlias, seedNodes, transportService, maxNumRemoteConnections, nodePredicate, proxyAddress,_            createConnectionManager(settings, clusterAlias, transportService))__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,tuple,string,supplier,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,settings,cluster,alias,seed,nodes,transport,service,max,num,remote,connections,node,predicate,proxy,address,create,connection,manager,settings,cluster,alias,transport,service
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1535383145;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1539796943;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1540583181;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1541008027;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1541092382;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1541698679;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1542402632;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1543506953;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener);1544823664;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(String proxyAddress, List<Supplier<DiscoveryNode>> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,string,proxy,address,list,supplier,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1524684173;Returns a connection to the remote cluster. This connection might be a proxy connection that redirects internally to the_given node.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        DiscoveryNode discoveryNode = connectedNodes.get()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new Transport.Connection() {_            @Override_            public DiscoveryNode getNode() {_                return remoteClusterNode__            }__            @Override_            public void sendRequest(long requestId, String action, TransportRequest request, TransportRequestOptions options)_                throws IOException, TransportException {_                connection.sendRequest(requestId, TransportActionProxy.getProxyAction(action),_                    TransportActionProxy.wrapRequest(remoteClusterNode, request), options)__            }__            @Override_            public void close() throws IOException {_                assert false: "proxy connections must not be closed"__            }__            @Override_            public Version getVersion() {_                return connection.getVersion()__            }_        }__    };returns,a,connection,to,the,remote,cluster,this,connection,might,be,a,proxy,connection,that,redirects,internally,to,the,given,node;transport,connection,get,connection,discovery,node,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,transport,connection,override,public,discovery,node,get,node,return,remote,cluster,node,override,public,void,send,request,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,transport,exception,connection,send,request,request,id,transport,action,proxy,get,proxy,action,action,transport,action,proxy,wrap,request,remote,cluster,node,request,options,override,public,void,close,throws,ioexception,assert,false,proxy,connections,must,not,be,closed,override,public,version,get,version,return,connection,get,version
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1525076988;Returns a connection to the remote cluster. This connection might be a proxy connection that redirects internally to the_given node.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        DiscoveryNode discoveryNode = connectedNodes.get()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new Transport.Connection() {_            @Override_            public DiscoveryNode getNode() {_                return remoteClusterNode__            }__            @Override_            public void sendRequest(long requestId, String action, TransportRequest request, TransportRequestOptions options)_                throws IOException, TransportException {_                connection.sendRequest(requestId, TransportActionProxy.getProxyAction(action),_                    TransportActionProxy.wrapRequest(remoteClusterNode, request), options)__            }__            @Override_            public void close() throws IOException {_                assert false: "proxy connections must not be closed"__            }__            @Override_            public Version getVersion() {_                return connection.getVersion()__            }_        }__    };returns,a,connection,to,the,remote,cluster,this,connection,might,be,a,proxy,connection,that,redirects,internally,to,the,given,node;transport,connection,get,connection,discovery,node,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,transport,connection,override,public,discovery,node,get,node,return,remote,cluster,node,override,public,void,send,request,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,transport,exception,connection,send,request,request,id,transport,action,proxy,get,proxy,action,action,transport,action,proxy,wrap,request,remote,cluster,node,request,options,override,public,void,close,throws,ioexception,assert,false,proxy,connections,must,not,be,closed,override,public,version,get,version,return,connection,get,version
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1528762805;Returns a connection to the remote cluster. This connection might be a proxy connection that redirects internally to the_given node.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        DiscoveryNode discoveryNode = connectedNodes.get()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new Transport.Connection() {_            @Override_            public DiscoveryNode getNode() {_                return remoteClusterNode__            }__            @Override_            public void sendRequest(long requestId, String action, TransportRequest request, TransportRequestOptions options)_                throws IOException, TransportException {_                connection.sendRequest(requestId, TransportActionProxy.getProxyAction(action),_                    TransportActionProxy.wrapRequest(remoteClusterNode, request), options)__            }__            @Override_            public void close() throws IOException {_                assert false: "proxy connections must not be closed"__            }__            @Override_            public Version getVersion() {_                return connection.getVersion()__            }_        }__    };returns,a,connection,to,the,remote,cluster,this,connection,might,be,a,proxy,connection,that,redirects,internally,to,the,given,node;transport,connection,get,connection,discovery,node,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,transport,connection,override,public,discovery,node,get,node,return,remote,cluster,node,override,public,void,send,request,long,request,id,string,action,transport,request,request,transport,request,options,options,throws,ioexception,transport,exception,connection,send,request,request,id,transport,action,proxy,get,proxy,action,action,transport,action,proxy,wrap,request,remote,cluster,node,request,options,override,public,void,close,throws,ioexception,assert,false,proxy,connections,must,not,be,closed,override,public,version,get,version,return,connection,get,version
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1528917185;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1529341607;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1531179852;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1534203100;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1534362961;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1534755962;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (transportService.nodeConnected(remoteClusterNode)) {_            return transportService.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = connectedNodes.getAny()__        Transport.Connection connection = transportService.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,transport,service,node,connected,remote,cluster,node,return,transport,service,get,connection,remote,cluster,node,discovery,node,discovery,node,connected,nodes,get,any,transport,connection,connection,transport,service,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1535046779;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1535383145;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1539796943;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1540583181;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1541008027;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1541092382;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1541698679;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1542402632;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1543506953;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1544823664;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1545071071;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1548248017;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1548402798;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> Transport.Connection getConnection(DiscoveryNode remoteClusterNode);1550601141;Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}._If such node is not connected, the returned connection will be a proxy connection that redirects to it.;Transport.Connection getConnection(DiscoveryNode remoteClusterNode) {_        if (connectionManager.nodeConnected(remoteClusterNode)) {_            return connectionManager.getConnection(remoteClusterNode)__        }_        DiscoveryNode discoveryNode = getAnyConnectedNode()__        Transport.Connection connection = connectionManager.getConnection(discoveryNode)__        return new ProxyConnection(connection, remoteClusterNode)__    };returns,a,connection,to,the,remote,cluster,preferably,a,direct,connection,to,the,provided,link,discovery,node,if,such,node,is,not,connected,the,returned,connection,will,be,a,proxy,connection,that,redirects,to,it;transport,connection,get,connection,discovery,node,remote,cluster,node,if,connection,manager,node,connected,remote,cluster,node,return,connection,manager,get,connection,remote,cluster,node,discovery,node,discovery,node,get,any,connected,node,transport,connection,connection,connection,manager,get,connection,discovery,node,return,new,proxy,connection,connection,remote,cluster,node
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1524684173;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1525076988;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1528762805;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1528917185;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1529341607;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1531179852;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1534203100;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1534362961;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1534755962;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1535046779;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1535383145;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1539796943;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1540583181;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1541008027;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1541092382;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1541698679;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1542402632;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1543506953;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1544823664;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1545071071;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1548248017;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1548402798;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> void updateSkipUnavailable(boolean skipUnavailable);1550601141;Updates the skipUnavailable flag that can be dynamically set for each remote cluster;void updateSkipUnavailable(boolean skipUnavailable) {_        this.skipUnavailable = skipUnavailable__    };updates,the,skip,unavailable,flag,that,can,be,dynamically,set,for,each,remote,cluster;void,update,skip,unavailable,boolean,skip,unavailable,this,skip,unavailable,skip,unavailable
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1524684173;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1525076988;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1528762805;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1528917185;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1529341607;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1531179852;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1534203100;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1534362961;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1534755962;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1535046779;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1535383145;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1539796943;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1540583181;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1541008027;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1541092382;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1541698679;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1542402632;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1543506953;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1544823664;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1545071071;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1548248017;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1548402798;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> ConnectHandler -> void connect(ActionListener<Void> connectListener);1550601141;Triggers a connect round unless there is one running already. If there is a connect round running, the listener will either_be queued or rejected and failed.;void connect(ActionListener<Void> connectListener) {_            connect(connectListener, false)__        };triggers,a,connect,round,unless,there,is,one,running,already,if,there,is,a,connect,round,running,the,listener,will,either,be,queued,or,rejected,and,failed;void,connect,action,listener,void,connect,listener,connect,connect,listener,false
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1525076988;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1528762805;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1528917185;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1529341607;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1531179852;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1534203100;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1534362961;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(DiscoveryNode::getAddress).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,discovery,node,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1534755962;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1535046779;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect(Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1535383145;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1539796943;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1540583181;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        TimeValue initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,time,value,initial,connection,timeout,remote,cluster,service,get,settings,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1541008027;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1541092382;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1541698679;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1542402632;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1543506953;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1544823664;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        List<TransportAddress> seedNodeAddresses = seedNodes.stream().map(node -> node.get().getAddress()).collect_            (Collectors.toList())__        return new RemoteConnectionInfo(clusterAlias, seedNodeAddresses, maxNumRemoteConnections, connectedNodes.size(),_                initialConnectionTimeout, skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,list,transport,address,seed,node,addresses,seed,nodes,stream,map,node,node,get,get,address,collect,collectors,to,list,return,new,remote,connection,info,cluster,alias,seed,node,addresses,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1545071071;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        return new RemoteConnectionInfo(_                clusterAlias,_                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),_                maxNumRemoteConnections,_                connectedNodes.size(),_                initialConnectionTimeout,_                skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,return,new,remote,connection,info,cluster,alias,seed,nodes,stream,map,tuple,v1,collect,collectors,to,list,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1548248017;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        return new RemoteConnectionInfo(_                clusterAlias,_                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),_                maxNumRemoteConnections,_                connectedNodes.size(),_                initialConnectionTimeout,_                skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,return,new,remote,connection,info,cluster,alias,seed,nodes,stream,map,tuple,v1,collect,collectors,to,list,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1548402798;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        return new RemoteConnectionInfo(_                clusterAlias,_                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),_                maxNumRemoteConnections,_                connectedNodes.size(),_                initialConnectionTimeout,_                skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,return,new,remote,connection,info,cluster,alias,seed,nodes,stream,map,tuple,v1,collect,collectors,to,list,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> public RemoteConnectionInfo getConnectionInfo();1550601141;Get the information about remote nodes to be rendered on {@code _remote/info} requests.;public RemoteConnectionInfo getConnectionInfo() {_        return new RemoteConnectionInfo(_                clusterAlias,_                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),_                maxNumRemoteConnections,_                connectedNodes.size(),_                initialConnectionTimeout,_                skipUnavailable)__    };get,the,information,about,remote,nodes,to,be,rendered,on,code,info,requests;public,remote,connection,info,get,connection,info,return,new,remote,connection,info,cluster,alias,seed,nodes,stream,map,tuple,v1,collect,collectors,to,list,max,num,remote,connections,connected,nodes,size,initial,connection,timeout,skip,unavailable
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1524684173;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1525076988;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1528762805;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1528917185;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1529341607;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1531179852;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1534203100;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener);1534362961;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(List<DiscoveryNode> seedNodes, ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,list,discovery,node,seed,nodes,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,connect,handler,connect,connect,listener
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,                             String proxyAddress);1543506953;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,_                            String proxyAddress) {_        this(settings, clusterAlias, seedNodes, transportService, maxNumRemoteConnections, nodePredicate, proxyAddress,_            createConnectionManager(settings, clusterAlias, transportService))__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,settings,cluster,alias,seed,nodes,transport,service,max,num,remote,connections,node,predicate,proxy,address,create,connection,manager,settings,cluster,alias,transport,service
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,                             TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,                             String proxyAddress);1544823664;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_                            TransportService transportService, int maxNumRemoteConnections, Predicate<DiscoveryNode> nodePredicate,_                            String proxyAddress) {_        this(settings, clusterAlias, seedNodes, transportService, maxNumRemoteConnections, nodePredicate, proxyAddress,_            createConnectionManager(settings, clusterAlias, transportService))__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,settings,cluster,alias,seed,nodes,transport,service,max,num,remote,connections,node,predicate,proxy,address,create,connection,manager,settings,cluster,alias,transport,service
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,             Predicate<DiscoveryNode> nodePredicate, String proxyAddress);1541008027;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_            Predicate<DiscoveryNode> nodePredicate, String proxyAddress) {_        super(settings)__        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        this.threadPool = transportService.threadPool__        this.connectionManager = connectionManager__        connectionManager.addListener(this)__        _        connectionManager.addListener(transportService)__        this.proxyAddress = proxyAddress__        initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,super,settings,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,this,thread,pool,transport,service,thread,pool,this,connection,manager,connection,manager,connection,manager,add,listener,this,connection,manager,add,listener,transport,service,this,proxy,address,proxy,address,initial,connection,timeout,remote,cluster,service,get,settings
RemoteClusterConnection -> RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,             TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,             Predicate<DiscoveryNode> nodePredicate, String proxyAddress);1541092382;Creates a new {@link RemoteClusterConnection}_@param settings the nodes settings object_@param clusterAlias the configured alias of the cluster to connect to_@param seedNodes a list of seed nodes to discover eligible nodes from_@param transportService the local nodes transport service_@param connectionManager the connection manager to use for this remote connection_@param maxNumRemoteConnections the maximum number of connections to the remote cluster_@param nodePredicate a predicate to filter eligible remote nodes to connect to_@param proxyAddress the proxy address;RemoteClusterConnection(Settings settings, String clusterAlias, List<Supplier<DiscoveryNode>> seedNodes,_            TransportService transportService, ConnectionManager connectionManager, int maxNumRemoteConnections,_            Predicate<DiscoveryNode> nodePredicate, String proxyAddress) {_        this.transportService = transportService__        this.maxNumRemoteConnections = maxNumRemoteConnections__        this.nodePredicate = nodePredicate__        this.clusterAlias = clusterAlias__        ConnectionProfile.Builder builder = new ConnectionProfile.Builder()__        builder.setConnectTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.setHandshakeTimeout(TransportService.TCP_CONNECT_TIMEOUT.get(settings))__        builder.addConnections(6, TransportRequestOptions.Type.REG, TransportRequestOptions.Type.PING)_ _        builder.addConnections(0, _            TransportRequestOptions.Type.BULK,_            TransportRequestOptions.Type.STATE,_            TransportRequestOptions.Type.RECOVERY)__        remoteProfile = builder.build()__        connectedNodes = new ConnectedNodes(clusterAlias)__        this.seedNodes = Collections.unmodifiableList(seedNodes)__        this.skipUnavailable = RemoteClusterService.REMOTE_CLUSTER_SKIP_UNAVAILABLE_                .getConcreteSettingForNamespace(clusterAlias).get(settings)__        this.connectHandler = new ConnectHandler()__        this.threadPool = transportService.threadPool__        this.connectionManager = connectionManager__        connectionManager.addListener(this)__        _        connectionManager.addListener(transportService)__        this.proxyAddress = proxyAddress__        initialConnectionTimeout = RemoteClusterService.REMOTE_INITIAL_CONNECTION_TIMEOUT_SETTING.get(settings)__    };creates,a,new,link,remote,cluster,connection,param,settings,the,nodes,settings,object,param,cluster,alias,the,configured,alias,of,the,cluster,to,connect,to,param,seed,nodes,a,list,of,seed,nodes,to,discover,eligible,nodes,from,param,transport,service,the,local,nodes,transport,service,param,connection,manager,the,connection,manager,to,use,for,this,remote,connection,param,max,num,remote,connections,the,maximum,number,of,connections,to,the,remote,cluster,param,node,predicate,a,predicate,to,filter,eligible,remote,nodes,to,connect,to,param,proxy,address,the,proxy,address;remote,cluster,connection,settings,settings,string,cluster,alias,list,supplier,discovery,node,seed,nodes,transport,service,transport,service,connection,manager,connection,manager,int,max,num,remote,connections,predicate,discovery,node,node,predicate,string,proxy,address,this,transport,service,transport,service,this,max,num,remote,connections,max,num,remote,connections,this,node,predicate,node,predicate,this,cluster,alias,cluster,alias,connection,profile,builder,builder,new,connection,profile,builder,builder,set,connect,timeout,transport,service,get,settings,builder,set,handshake,timeout,transport,service,get,settings,builder,add,connections,6,transport,request,options,type,reg,transport,request,options,type,ping,builder,add,connections,0,transport,request,options,type,bulk,transport,request,options,type,state,transport,request,options,type,recovery,remote,profile,builder,build,connected,nodes,new,connected,nodes,cluster,alias,this,seed,nodes,collections,unmodifiable,list,seed,nodes,this,skip,unavailable,remote,cluster,service,get,concrete,setting,for,namespace,cluster,alias,get,settings,this,connect,handler,new,connect,handler,this,thread,pool,transport,service,thread,pool,this,connection,manager,connection,manager,connection,manager,add,listener,this,connection,manager,add,listener,transport,service,this,proxy,address,proxy,address,initial,connection,timeout,remote,cluster,service,get,settings
RemoteClusterConnection -> synchronized void updateSeedNodes(             final String proxyAddress,             final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,             final ActionListener<Void> connectListener);1545071071;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(_            final String proxyAddress,_            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_            final ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,final,string,proxy,address,final,list,tuple,string,supplier,discovery,node,seed,nodes,final,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(             final String proxyAddress,             final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,             final ActionListener<Void> connectListener);1548248017;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(_            final String proxyAddress,_            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_            final ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,final,string,proxy,address,final,list,tuple,string,supplier,discovery,node,seed,nodes,final,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(             final String proxyAddress,             final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,             final ActionListener<Void> connectListener);1548402798;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(_            final String proxyAddress,_            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_            final ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,final,string,proxy,address,final,list,tuple,string,supplier,discovery,node,seed,nodes,final,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
RemoteClusterConnection -> synchronized void updateSeedNodes(             final String proxyAddress,             final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,             final ActionListener<Void> connectListener);1550601141;Updates the list of seed nodes for this cluster connection;synchronized void updateSeedNodes(_            final String proxyAddress,_            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,_            final ActionListener<Void> connectListener) {_        this.seedNodes = Collections.unmodifiableList(new ArrayList<>(seedNodes))__        this.proxyAddress = proxyAddress__        connectHandler.connect(connectListener)__    };updates,the,list,of,seed,nodes,for,this,cluster,connection;synchronized,void,update,seed,nodes,final,string,proxy,address,final,list,tuple,string,supplier,discovery,node,seed,nodes,final,action,listener,void,connect,listener,this,seed,nodes,collections,unmodifiable,list,new,array,list,seed,nodes,this,proxy,address,proxy,address,connect,handler,connect,connect,listener
