commented;modifiers;parameterAmount;loc;comment;code
false;private;1;8;;private boolean assertAllowedProperties(Setting.Property... properties) {     for (Setting.Property property : properties) {         if (ALLOWED_PROPERTIES.contains(property) == false) {             return false.         }     }     return true. }
false;public;1;4;;@Override public String getDefaultRaw(Settings settings) {     throw new UnsupportedOperationException("secure settings are not strings"). }
false;public;1;4;;@Override public T getDefault(Settings settings) {     throw new UnsupportedOperationException("secure settings are not strings"). }
false;;1;4;;@Override String innerGetRaw(final Settings settings) {     throw new UnsupportedOperationException("secure settings are not strings"). }
false;public;1;5;;@Override public boolean exists(Settings settings) {     final SecureSettings secureSettings = settings.getSecureSettings().     return secureSettings != null && secureSettings.getSettingNames().contains(getKey()). }
false;public;1;17;;@Override public T get(Settings settings) {     checkDeprecation(settings).     final SecureSettings secureSettings = settings.getSecureSettings().     if (secureSettings == null || secureSettings.getSettingNames().contains(getKey()) == false) {         if (super.exists(settings)) {             throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" + " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml").         }         return getFallback(settings).     }     try {         return getSecret(secureSettings).     } catch (GeneralSecurityException e) {         throw new RuntimeException("failed to read secure setting " + getKey(), e).     } }
true;abstract;1;1;/**  * Returns the secret setting from the keyStoreReader store.  */ ;/**  * Returns the secret setting from the keyStoreReader store.  */ abstract T getSecret(SecureSettings secureSettings) throws GeneralSecurityException.
true;abstract;1;1;/**  * Returns the value from a fallback setting. Returns null if no fallback exists.  */ ;/**  * Returns the value from a fallback setting. Returns null if no fallback exists.  */ abstract T getFallback(Settings settings).
true;public;3;3;/**  * Overrides the diff operation to make this a no-op for secure settings as they shouldn't be returned in a diff  */ ;// TODO: override toXContent /**  * Overrides the diff operation to make this a no-op for secure settings as they shouldn't be returned in a diff  */ @Override public void diff(Settings.Builder builder, Settings source, Settings defaultSettings) { }
true;public,static;3;4;/**  * A setting which contains a sensitive string.  *  * This may be any sensitive string, e.g. a username, a password, an auth token, etc.  */ ;/**  * A setting which contains a sensitive string.  *  * This may be any sensitive string, e.g. a username, a password, an auth token, etc.  */ public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback, Property... properties) {     return new SecureStringSetting(name, fallback, properties). }
true;public,static;1;3;/**  * A setting which contains a sensitive string, but which for legacy reasons must be found outside secure settings.  * @see #secureString(String, Setting, Property...)  */ ;/**  * A setting which contains a sensitive string, but which for legacy reasons must be found outside secure settings.  * @see #secureString(String, Setting, Property...)  */ public static Setting<SecureString> insecureString(String name) {     return new InsecureStringSetting(name). }
true;public,static;3;4;/**  * A setting which contains a file. Reading the setting opens an input stream to the file.  *  * This may be any sensitive file, e.g. a set of credentials normally in plaintext.  */ ;/**  * A setting which contains a file. Reading the setting opens an input stream to the file.  *  * This may be any sensitive file, e.g. a set of credentials normally in plaintext.  */ public static Setting<InputStream> secureFile(String name, Setting<InputStream> fallback, Property... properties) {     return new SecureFileSetting(name, fallback, properties). }
false;protected;1;4;;@Override protected SecureString getSecret(SecureSettings secureSettings) throws GeneralSecurityException {     return secureSettings.getString(getKey()). }
false;;1;7;;@Override SecureString getFallback(Settings settings) {     if (fallback != null) {         return fallback.get(settings).     }     // this means "setting does not exist"     return new SecureString(new char[0]). }
false;public;1;8;;@Override public SecureString get(Settings settings) {     if (ALLOW_INSECURE_SETTINGS == false && exists(settings)) {         throw new IllegalArgumentException("Setting [" + name + "] is insecure, " + "but property [allow_insecure_settings] is not set").     }     return super.get(settings). }
false;protected;1;4;;@Override protected InputStream getSecret(SecureSettings secureSettings) throws GeneralSecurityException {     return secureSettings.getFile(getKey()). }
false;;1;7;;@Override InputStream getFallback(Settings settings) {     if (fallback != null) {         return fallback.get(settings).     }     return null. }
