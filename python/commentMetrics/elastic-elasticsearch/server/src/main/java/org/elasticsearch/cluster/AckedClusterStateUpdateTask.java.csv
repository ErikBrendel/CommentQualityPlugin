commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Called to determine which nodes the acknowledgement is expected from  *  * @param discoveryNode a node  * @return true if the node is expected to send ack back, false otherwise  */ ;/**  * Called to determine which nodes the acknowledgement is expected from  *  * @param discoveryNode a node  * @return true if the node is expected to send ack back, false otherwise  */ public boolean mustAck(DiscoveryNode discoveryNode) {     return true. }
true;public;1;3;/**  * Called once all the nodes have acknowledged the cluster state update request. Must be  * very lightweight execution, since it gets executed on the cluster service thread.  *  * @param e optional error that might have been thrown  */ ;/**  * Called once all the nodes have acknowledged the cluster state update request. Must be  * very lightweight execution, since it gets executed on the cluster service thread.  *  * @param e optional error that might have been thrown  */ public void onAllNodesAcked(@Nullable Exception e) {     listener.onResponse(newResponse(e == null)). }
false;protected,abstract;1;1;;protected abstract Response newResponse(boolean acknowledged).
true;public;0;3;/**  * Called once the acknowledgement timeout defined by  * {@link AckedClusterStateUpdateTask#ackTimeout()} has expired  */ ;/**  * Called once the acknowledgement timeout defined by  * {@link AckedClusterStateUpdateTask#ackTimeout()} has expired  */ public void onAckTimeout() {     listener.onResponse(newResponse(false)). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     listener.onFailure(e). }
true;public;0;3;/**  * Acknowledgement timeout, maximum time interval to wait for acknowledgements  */ ;/**  * Acknowledgement timeout, maximum time interval to wait for acknowledgements  */ public TimeValue ackTimeout() {     return request.ackTimeout(). }
false;public;0;4;;@Override public TimeValue timeout() {     return request.masterNodeTimeout(). }
