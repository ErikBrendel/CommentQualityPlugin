commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void checkPermission(Permission perm) { // grant all permissions so that we can later set the security manager to the one that we want }
true;public,static;1;22;/**  * Main entry point for starting elasticsearch  */ ;/**  * Main entry point for starting elasticsearch  */ public static void main(final String[] args) throws Exception {     overrideDnsCachePolicyProperties().     /*          * We want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the          * presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy). This          * forces such policies to take effect immediately.          */     System.setSecurityManager(new SecurityManager() {          @Override         public void checkPermission(Permission perm) {         // grant all permissions so that we can later set the security manager to the one that we want         }     }).     LogConfigurator.registerErrorListener().     final Elasticsearch elasticsearch = new Elasticsearch().     int status = main(args, elasticsearch, Terminal.DEFAULT).     if (status != ExitCodes.OK) {         exit(status).     } }
false;private,static;0;15;;private static void overrideDnsCachePolicyProperties() {     for (final String property : new String[] { "networkaddress.cache.ttl", "networkaddress.cache.negative.ttl" }) {         final String overrideProperty = "es." + property.         final String overrideValue = System.getProperty(overrideProperty).         if (overrideValue != null) {             try {                 // round-trip the property to an integer and back to a string to ensure that it parses properly                 Security.setProperty(property, Integer.toString(Integer.valueOf(overrideValue))).             } catch (final NumberFormatException e) {                 throw new IllegalArgumentException("failed to parse [" + overrideProperty + "] with value [" + overrideValue + "]", e).             }         }     } }
false;static;3;3;;static int main(final String[] args, final Elasticsearch elasticsearch, final Terminal terminal) throws Exception {     return elasticsearch.main(args, terminal). }
false;protected;3;37;;@Override protected void execute(Terminal terminal, OptionSet options, Environment env) throws UserException {     if (options.nonOptionArguments().isEmpty() == false) {         throw new UserException(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments()).     }     if (options.has(versionOption)) {         final String versionOutput = String.format(Locale.ROOT, "Version: %s, Build: %s/%s/%s/%s, JVM: %s", Build.CURRENT.getQualifiedVersion(), Build.CURRENT.flavor().displayName(), Build.CURRENT.type().displayName(), Build.CURRENT.shortHash(), Build.CURRENT.date(), JvmInfo.jvmInfo().version()).         terminal.println(versionOutput).         return.     }     final boolean daemonize = options.has(daemonizeOption).     final Path pidFile = pidfileOption.value(options).     final boolean quiet = options.has(quietOption).     // a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately     try {         env.validateTmpFile().     } catch (IOException e) {         throw new UserException(ExitCodes.CONFIG, e.getMessage()).     }     try {         init(daemonize, pidFile, quiet, env).     } catch (NodeValidationException e) {         throw new UserException(ExitCodes.CONFIG, e.getMessage()).     } }
false;;4;10;;void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv) throws NodeValidationException, UserException {     try {         Bootstrap.init(!daemonize, pidFile, quiet, initialEnv).     } catch (BootstrapException | RuntimeException e) {         // to avoid 2MB stacktraces from guice, etc.         throw new StartupException(e).     } }
true;static;1;3;/**  * Required method that's called by Apache Commons procrun when  * running as a service on Windows, when the service is stopped.  *  * http://commons.apache.org/proper/commons-daemon/procrun.html  *  * NOTE: If this method is renamed and/or moved, make sure to  * update elasticsearch-service.bat!  */ ;/**  * Required method that's called by Apache Commons procrun when  * running as a service on Windows, when the service is stopped.  *  * http://commons.apache.org/proper/commons-daemon/procrun.html  *  * NOTE: If this method is renamed and/or moved, make sure to  * update elasticsearch-service.bat!  */ static void close(String[] args) throws IOException {     Bootstrap.stop(). }
