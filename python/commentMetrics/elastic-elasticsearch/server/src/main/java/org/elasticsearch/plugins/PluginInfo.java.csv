# id;timestamp;commentText;codeText;commentWords;codeWords
PluginInfo -> public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,                       String classname, List<String> extendedPlugins, boolean hasNativeController);1524684173;Construct plugin info.__@param name                  the name of the plugin_@param description           a description of the plugin_@param version               an opaque version identifier for the plugin_@param elasticsearchVersion  the version of Elasticsearch the plugin was built for_@param javaVersion           the version of Java the plugin was built with_@param classname             the entry point to the plugin_@param extendedPlugins       other plugins this plugin extends through SPI_@param hasNativeController   whether or not the plugin has a native controller;public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,_                      String classname, List<String> extendedPlugins, boolean hasNativeController) {_        this.name = name__        this.description = description__        this.version = version__        this.elasticsearchVersion = elasticsearchVersion__        this.javaVersion = javaVersion__        this.classname = classname__        this.extendedPlugins = Collections.unmodifiableList(extendedPlugins)__        this.hasNativeController = hasNativeController__    };construct,plugin,info,param,name,the,name,of,the,plugin,param,description,a,description,of,the,plugin,param,version,an,opaque,version,identifier,for,the,plugin,param,elasticsearch,version,the,version,of,elasticsearch,the,plugin,was,built,for,param,java,version,the,version,of,java,the,plugin,was,built,with,param,classname,the,entry,point,to,the,plugin,param,extended,plugins,other,plugins,this,plugin,extends,through,spi,param,has,native,controller,whether,or,not,the,plugin,has,a,native,controller;public,plugin,info,string,name,string,description,string,version,version,elasticsearch,version,string,java,version,string,classname,list,string,extended,plugins,boolean,has,native,controller,this,name,name,this,description,description,this,version,version,this,elasticsearch,version,elasticsearch,version,this,java,version,java,version,this,classname,classname,this,extended,plugins,collections,unmodifiable,list,extended,plugins,this,has,native,controller,has,native,controller
PluginInfo -> public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,                       String classname, List<String> extendedPlugins, boolean hasNativeController);1528762805;Construct plugin info.__@param name                  the name of the plugin_@param description           a description of the plugin_@param version               an opaque version identifier for the plugin_@param elasticsearchVersion  the version of Elasticsearch the plugin was built for_@param javaVersion           the version of Java the plugin was built with_@param classname             the entry point to the plugin_@param extendedPlugins       other plugins this plugin extends through SPI_@param hasNativeController   whether or not the plugin has a native controller;public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,_                      String classname, List<String> extendedPlugins, boolean hasNativeController) {_        this.name = name__        this.description = description__        this.version = version__        this.elasticsearchVersion = elasticsearchVersion__        this.javaVersion = javaVersion__        this.classname = classname__        this.extendedPlugins = Collections.unmodifiableList(extendedPlugins)__        this.hasNativeController = hasNativeController__    };construct,plugin,info,param,name,the,name,of,the,plugin,param,description,a,description,of,the,plugin,param,version,an,opaque,version,identifier,for,the,plugin,param,elasticsearch,version,the,version,of,elasticsearch,the,plugin,was,built,for,param,java,version,the,version,of,java,the,plugin,was,built,with,param,classname,the,entry,point,to,the,plugin,param,extended,plugins,other,plugins,this,plugin,extends,through,spi,param,has,native,controller,whether,or,not,the,plugin,has,a,native,controller;public,plugin,info,string,name,string,description,string,version,version,elasticsearch,version,string,java,version,string,classname,list,string,extended,plugins,boolean,has,native,controller,this,name,name,this,description,description,this,version,version,this,elasticsearch,version,elasticsearch,version,this,java,version,java,version,this,classname,classname,this,extended,plugins,collections,unmodifiable,list,extended,plugins,this,has,native,controller,has,native,controller
PluginInfo -> public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,                       String classname, List<String> extendedPlugins, boolean hasNativeController);1535139672;Construct plugin info.__@param name                  the name of the plugin_@param description           a description of the plugin_@param version               an opaque version identifier for the plugin_@param elasticsearchVersion  the version of Elasticsearch the plugin was built for_@param javaVersion           the version of Java the plugin was built with_@param classname             the entry point to the plugin_@param extendedPlugins       other plugins this plugin extends through SPI_@param hasNativeController   whether or not the plugin has a native controller;public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,_                      String classname, List<String> extendedPlugins, boolean hasNativeController) {_        this.name = name__        this.description = description__        this.version = version__        this.elasticsearchVersion = elasticsearchVersion__        this.javaVersion = javaVersion__        this.classname = classname__        this.extendedPlugins = Collections.unmodifiableList(extendedPlugins)__        this.hasNativeController = hasNativeController__    };construct,plugin,info,param,name,the,name,of,the,plugin,param,description,a,description,of,the,plugin,param,version,an,opaque,version,identifier,for,the,plugin,param,elasticsearch,version,the,version,of,elasticsearch,the,plugin,was,built,for,param,java,version,the,version,of,java,the,plugin,was,built,with,param,classname,the,entry,point,to,the,plugin,param,extended,plugins,other,plugins,this,plugin,extends,through,spi,param,has,native,controller,whether,or,not,the,plugin,has,a,native,controller;public,plugin,info,string,name,string,description,string,version,version,elasticsearch,version,string,java,version,string,classname,list,string,extended,plugins,boolean,has,native,controller,this,name,name,this,description,description,this,version,version,this,elasticsearch,version,elasticsearch,version,this,java,version,java,version,this,classname,classname,this,extended,plugins,collections,unmodifiable,list,extended,plugins,this,has,native,controller,has,native,controller
PluginInfo -> public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,                       String classname, List<String> extendedPlugins, boolean hasNativeController);1548265937;Construct plugin info.__@param name                  the name of the plugin_@param description           a description of the plugin_@param version               an opaque version identifier for the plugin_@param elasticsearchVersion  the version of Elasticsearch the plugin was built for_@param javaVersion           the version of Java the plugin was built with_@param classname             the entry point to the plugin_@param extendedPlugins       other plugins this plugin extends through SPI_@param hasNativeController   whether or not the plugin has a native controller;public PluginInfo(String name, String description, String version, Version elasticsearchVersion, String javaVersion,_                      String classname, List<String> extendedPlugins, boolean hasNativeController) {_        this.name = name__        this.description = description__        this.version = version__        this.elasticsearchVersion = elasticsearchVersion__        this.javaVersion = javaVersion__        this.classname = classname__        this.extendedPlugins = Collections.unmodifiableList(extendedPlugins)__        this.hasNativeController = hasNativeController__    };construct,plugin,info,param,name,the,name,of,the,plugin,param,description,a,description,of,the,plugin,param,version,an,opaque,version,identifier,for,the,plugin,param,elasticsearch,version,the,version,of,elasticsearch,the,plugin,was,built,for,param,java,version,the,version,of,java,the,plugin,was,built,with,param,classname,the,entry,point,to,the,plugin,param,extended,plugins,other,plugins,this,plugin,extends,through,spi,param,has,native,controller,whether,or,not,the,plugin,has,a,native,controller;public,plugin,info,string,name,string,description,string,version,version,elasticsearch,version,string,java,version,string,classname,list,string,extended,plugins,boolean,has,native,controller,this,name,name,this,description,description,this,version,version,this,elasticsearch,version,elasticsearch,version,this,java,version,java,version,this,classname,classname,this,extended,plugins,collections,unmodifiable,list,extended,plugins,this,has,native,controller,has,native,controller
PluginInfo -> public List<String> getExtendedPlugins();1524684173;Other plugins this plugin extends through SPI.__@return the names of the plugins extended;public List<String> getExtendedPlugins() {_        return extendedPlugins__    };other,plugins,this,plugin,extends,through,spi,return,the,names,of,the,plugins,extended;public,list,string,get,extended,plugins,return,extended,plugins
PluginInfo -> public List<String> getExtendedPlugins();1528762805;Other plugins this plugin extends through SPI.__@return the names of the plugins extended;public List<String> getExtendedPlugins() {_        return extendedPlugins__    };other,plugins,this,plugin,extends,through,spi,return,the,names,of,the,plugins,extended;public,list,string,get,extended,plugins,return,extended,plugins
PluginInfo -> public List<String> getExtendedPlugins();1535139672;Other plugins this plugin extends through SPI.__@return the names of the plugins extended;public List<String> getExtendedPlugins() {_        return extendedPlugins__    };other,plugins,this,plugin,extends,through,spi,return,the,names,of,the,plugins,extended;public,list,string,get,extended,plugins,return,extended,plugins
PluginInfo -> public List<String> getExtendedPlugins();1548265937;Other plugins this plugin extends through SPI.__@return the names of the plugins extended;public List<String> getExtendedPlugins() {_        return extendedPlugins__    };other,plugins,this,plugin,extends,through,spi,return,the,names,of,the,plugins,extended;public,list,string,get,extended,plugins,return,extended,plugins
PluginInfo -> public static PluginInfo readFromProperties(final Path path) throws IOException;1524684173;Reads the plugin descriptor file.__@param path           the path to the root directory for the plugin_@return the plugin info_@throws IOException if an I/O exception occurred reading the plugin descriptor;public static PluginInfo readFromProperties(final Path path) throws IOException {_        final Path descriptor = path.resolve(ES_PLUGIN_PROPERTIES)___        final Map<String, String> propsMap__        {_            final Properties props = new Properties()__            try (InputStream stream = Files.newInputStream(descriptor)) {_                props.load(stream)__            }_            propsMap = props.stringPropertyNames().stream().collect(Collectors.toMap(Function.identity(), props::getProperty))__        }__        final String name = propsMap.remove("name")__        if (name == null || name.isEmpty()) {_            throw new IllegalArgumentException(_                    "property [name] is missing in [" + descriptor + "]")__        }_        final String description = propsMap.remove("description")__        if (description == null) {_            throw new IllegalArgumentException(_                    "property [description] is missing for plugin [" + name + "]")__        }_        final String version = propsMap.remove("version")__        if (version == null) {_            throw new IllegalArgumentException(_                    "property [version] is missing for plugin [" + name + "]")__        }__        final String esVersionString = propsMap.remove("elasticsearch.version")__        if (esVersionString == null) {_            throw new IllegalArgumentException(_                    "property [elasticsearch.version] is missing for plugin [" + name + "]")__        }_        final Version esVersion = Version.fromString(esVersionString)__        final String javaVersionString = propsMap.remove("java.version")__        if (javaVersionString == null) {_            throw new IllegalArgumentException(_                    "property [java.version] is missing for plugin [" + name + "]")__        }_        JarHell.checkVersionFormat(javaVersionString)__        final String classname = propsMap.remove("classname")__        if (classname == null) {_            throw new IllegalArgumentException(_                    "property [classname] is missing for plugin [" + name + "]")__        }__        final String extendedString = propsMap.remove("extended.plugins")__        final List<String> extendedPlugins__        if (extendedString == null) {_            extendedPlugins = Collections.emptyList()__        } else {_            extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, ","))__        }__        final String hasNativeControllerValue = propsMap.remove("has.native.controller")__        final boolean hasNativeController__        if (hasNativeControllerValue == null) {_            hasNativeController = false__        } else {_            switch (hasNativeControllerValue) {_                case "true":_                    hasNativeController = true__                    break__                case "false":_                    hasNativeController = false__                    break__                default:_                    final String message = String.format(_                            Locale.ROOT,_                            "property [%s] must be [%s], [%s], or unspecified but was [%s]",_                            "has_native_controller",_                            "true",_                            "false",_                            hasNativeControllerValue)__                    throw new IllegalArgumentException(message)__            }_        }__        if (esVersion.before(Version.V_6_3_0) && esVersion.onOrAfter(Version.V_6_0_0_beta2)) {_            propsMap.remove("requires.keystore")__        }__        if (propsMap.isEmpty() == false) {_            throw new IllegalArgumentException("Unknown properties in plugin descriptor: " + propsMap.keySet())__        }__        return new PluginInfo(name, description, version, esVersion, javaVersionString,_                              classname, extendedPlugins, hasNativeController)__    };reads,the,plugin,descriptor,file,param,path,the,path,to,the,root,directory,for,the,plugin,return,the,plugin,info,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,descriptor;public,static,plugin,info,read,from,properties,final,path,path,throws,ioexception,final,path,descriptor,path,resolve,final,map,string,string,props,map,final,properties,props,new,properties,try,input,stream,stream,files,new,input,stream,descriptor,props,load,stream,props,map,props,string,property,names,stream,collect,collectors,to,map,function,identity,props,get,property,final,string,name,props,map,remove,name,if,name,null,name,is,empty,throw,new,illegal,argument,exception,property,name,is,missing,in,descriptor,final,string,description,props,map,remove,description,if,description,null,throw,new,illegal,argument,exception,property,description,is,missing,for,plugin,name,final,string,version,props,map,remove,version,if,version,null,throw,new,illegal,argument,exception,property,version,is,missing,for,plugin,name,final,string,es,version,string,props,map,remove,elasticsearch,version,if,es,version,string,null,throw,new,illegal,argument,exception,property,elasticsearch,version,is,missing,for,plugin,name,final,version,es,version,version,from,string,es,version,string,final,string,java,version,string,props,map,remove,java,version,if,java,version,string,null,throw,new,illegal,argument,exception,property,java,version,is,missing,for,plugin,name,jar,hell,check,version,format,java,version,string,final,string,classname,props,map,remove,classname,if,classname,null,throw,new,illegal,argument,exception,property,classname,is,missing,for,plugin,name,final,string,extended,string,props,map,remove,extended,plugins,final,list,string,extended,plugins,if,extended,string,null,extended,plugins,collections,empty,list,else,extended,plugins,arrays,as,list,strings,delimited,list,to,string,array,extended,string,final,string,has,native,controller,value,props,map,remove,has,native,controller,final,boolean,has,native,controller,if,has,native,controller,value,null,has,native,controller,false,else,switch,has,native,controller,value,case,true,has,native,controller,true,break,case,false,has,native,controller,false,break,default,final,string,message,string,format,locale,root,property,s,must,be,s,s,or,unspecified,but,was,s,true,false,has,native,controller,value,throw,new,illegal,argument,exception,message,if,es,version,before,version,es,version,on,or,after,version,props,map,remove,requires,keystore,if,props,map,is,empty,false,throw,new,illegal,argument,exception,unknown,properties,in,plugin,descriptor,props,map,key,set,return,new,plugin,info,name,description,version,es,version,java,version,string,classname,extended,plugins,has,native,controller
PluginInfo -> public static PluginInfo readFromProperties(final Path path) throws IOException;1528762805;Reads the plugin descriptor file.__@param path           the path to the root directory for the plugin_@return the plugin info_@throws IOException if an I/O exception occurred reading the plugin descriptor;public static PluginInfo readFromProperties(final Path path) throws IOException {_        final Path descriptor = path.resolve(ES_PLUGIN_PROPERTIES)___        final Map<String, String> propsMap__        {_            final Properties props = new Properties()__            try (InputStream stream = Files.newInputStream(descriptor)) {_                props.load(stream)__            }_            propsMap = props.stringPropertyNames().stream().collect(Collectors.toMap(Function.identity(), props::getProperty))__        }__        final String name = propsMap.remove("name")__        if (name == null || name.isEmpty()) {_            throw new IllegalArgumentException(_                    "property [name] is missing in [" + descriptor + "]")__        }_        final String description = propsMap.remove("description")__        if (description == null) {_            throw new IllegalArgumentException(_                    "property [description] is missing for plugin [" + name + "]")__        }_        final String version = propsMap.remove("version")__        if (version == null) {_            throw new IllegalArgumentException(_                    "property [version] is missing for plugin [" + name + "]")__        }__        final String esVersionString = propsMap.remove("elasticsearch.version")__        if (esVersionString == null) {_            throw new IllegalArgumentException(_                    "property [elasticsearch.version] is missing for plugin [" + name + "]")__        }_        final Version esVersion = Version.fromString(esVersionString)__        final String javaVersionString = propsMap.remove("java.version")__        if (javaVersionString == null) {_            throw new IllegalArgumentException(_                    "property [java.version] is missing for plugin [" + name + "]")__        }_        JarHell.checkVersionFormat(javaVersionString)__        final String classname = propsMap.remove("classname")__        if (classname == null) {_            throw new IllegalArgumentException(_                    "property [classname] is missing for plugin [" + name + "]")__        }__        final String extendedString = propsMap.remove("extended.plugins")__        final List<String> extendedPlugins__        if (extendedString == null) {_            extendedPlugins = Collections.emptyList()__        } else {_            extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, ","))__        }__        final String hasNativeControllerValue = propsMap.remove("has.native.controller")__        final boolean hasNativeController__        if (hasNativeControllerValue == null) {_            hasNativeController = false__        } else {_            switch (hasNativeControllerValue) {_                case "true":_                    hasNativeController = true__                    break__                case "false":_                    hasNativeController = false__                    break__                default:_                    final String message = String.format(_                            Locale.ROOT,_                            "property [%s] must be [%s], [%s], or unspecified but was [%s]",_                            "has_native_controller",_                            "true",_                            "false",_                            hasNativeControllerValue)__                    throw new IllegalArgumentException(message)__            }_        }__        if (esVersion.before(Version.V_6_3_0) && esVersion.onOrAfter(Version.V_6_0_0_beta2)) {_            propsMap.remove("requires.keystore")__        }__        if (propsMap.isEmpty() == false) {_            throw new IllegalArgumentException("Unknown properties in plugin descriptor: " + propsMap.keySet())__        }__        return new PluginInfo(name, description, version, esVersion, javaVersionString,_                              classname, extendedPlugins, hasNativeController)__    };reads,the,plugin,descriptor,file,param,path,the,path,to,the,root,directory,for,the,plugin,return,the,plugin,info,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,descriptor;public,static,plugin,info,read,from,properties,final,path,path,throws,ioexception,final,path,descriptor,path,resolve,final,map,string,string,props,map,final,properties,props,new,properties,try,input,stream,stream,files,new,input,stream,descriptor,props,load,stream,props,map,props,string,property,names,stream,collect,collectors,to,map,function,identity,props,get,property,final,string,name,props,map,remove,name,if,name,null,name,is,empty,throw,new,illegal,argument,exception,property,name,is,missing,in,descriptor,final,string,description,props,map,remove,description,if,description,null,throw,new,illegal,argument,exception,property,description,is,missing,for,plugin,name,final,string,version,props,map,remove,version,if,version,null,throw,new,illegal,argument,exception,property,version,is,missing,for,plugin,name,final,string,es,version,string,props,map,remove,elasticsearch,version,if,es,version,string,null,throw,new,illegal,argument,exception,property,elasticsearch,version,is,missing,for,plugin,name,final,version,es,version,version,from,string,es,version,string,final,string,java,version,string,props,map,remove,java,version,if,java,version,string,null,throw,new,illegal,argument,exception,property,java,version,is,missing,for,plugin,name,jar,hell,check,version,format,java,version,string,final,string,classname,props,map,remove,classname,if,classname,null,throw,new,illegal,argument,exception,property,classname,is,missing,for,plugin,name,final,string,extended,string,props,map,remove,extended,plugins,final,list,string,extended,plugins,if,extended,string,null,extended,plugins,collections,empty,list,else,extended,plugins,arrays,as,list,strings,delimited,list,to,string,array,extended,string,final,string,has,native,controller,value,props,map,remove,has,native,controller,final,boolean,has,native,controller,if,has,native,controller,value,null,has,native,controller,false,else,switch,has,native,controller,value,case,true,has,native,controller,true,break,case,false,has,native,controller,false,break,default,final,string,message,string,format,locale,root,property,s,must,be,s,s,or,unspecified,but,was,s,true,false,has,native,controller,value,throw,new,illegal,argument,exception,message,if,es,version,before,version,es,version,on,or,after,version,props,map,remove,requires,keystore,if,props,map,is,empty,false,throw,new,illegal,argument,exception,unknown,properties,in,plugin,descriptor,props,map,key,set,return,new,plugin,info,name,description,version,es,version,java,version,string,classname,extended,plugins,has,native,controller
PluginInfo -> public static PluginInfo readFromProperties(final Path path) throws IOException;1535139672;Reads the plugin descriptor file.__@param path           the path to the root directory for the plugin_@return the plugin info_@throws IOException if an I/O exception occurred reading the plugin descriptor;public static PluginInfo readFromProperties(final Path path) throws IOException {_        final Path descriptor = path.resolve(ES_PLUGIN_PROPERTIES)___        final Map<String, String> propsMap__        {_            final Properties props = new Properties()__            try (InputStream stream = Files.newInputStream(descriptor)) {_                props.load(stream)__            }_            propsMap = props.stringPropertyNames().stream().collect(Collectors.toMap(Function.identity(), props::getProperty))__        }__        final String name = propsMap.remove("name")__        if (name == null || name.isEmpty()) {_            throw new IllegalArgumentException(_                    "property [name] is missing in [" + descriptor + "]")__        }_        final String description = propsMap.remove("description")__        if (description == null) {_            throw new IllegalArgumentException(_                    "property [description] is missing for plugin [" + name + "]")__        }_        final String version = propsMap.remove("version")__        if (version == null) {_            throw new IllegalArgumentException(_                    "property [version] is missing for plugin [" + name + "]")__        }__        final String esVersionString = propsMap.remove("elasticsearch.version")__        if (esVersionString == null) {_            throw new IllegalArgumentException(_                    "property [elasticsearch.version] is missing for plugin [" + name + "]")__        }_        final Version esVersion = Version.fromString(esVersionString)__        final String javaVersionString = propsMap.remove("java.version")__        if (javaVersionString == null) {_            throw new IllegalArgumentException(_                    "property [java.version] is missing for plugin [" + name + "]")__        }_        JarHell.checkVersionFormat(javaVersionString)__        final String classname = propsMap.remove("classname")__        if (classname == null) {_            throw new IllegalArgumentException(_                    "property [classname] is missing for plugin [" + name + "]")__        }__        final String extendedString = propsMap.remove("extended.plugins")__        final List<String> extendedPlugins__        if (extendedString == null) {_            extendedPlugins = Collections.emptyList()__        } else {_            extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, ","))__        }__        final String hasNativeControllerValue = propsMap.remove("has.native.controller")__        final boolean hasNativeController__        if (hasNativeControllerValue == null) {_            hasNativeController = false__        } else {_            switch (hasNativeControllerValue) {_                case "true":_                    hasNativeController = true__                    break__                case "false":_                    hasNativeController = false__                    break__                default:_                    final String message = String.format(_                            Locale.ROOT,_                            "property [%s] must be [%s], [%s], or unspecified but was [%s]",_                            "has_native_controller",_                            "true",_                            "false",_                            hasNativeControllerValue)__                    throw new IllegalArgumentException(message)__            }_        }__        if (esVersion.before(Version.V_6_3_0) && esVersion.onOrAfter(Version.V_6_0_0_beta2)) {_            propsMap.remove("requires.keystore")__        }__        if (propsMap.isEmpty() == false) {_            throw new IllegalArgumentException("Unknown properties in plugin descriptor: " + propsMap.keySet())__        }__        return new PluginInfo(name, description, version, esVersion, javaVersionString,_                              classname, extendedPlugins, hasNativeController)__    };reads,the,plugin,descriptor,file,param,path,the,path,to,the,root,directory,for,the,plugin,return,the,plugin,info,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,descriptor;public,static,plugin,info,read,from,properties,final,path,path,throws,ioexception,final,path,descriptor,path,resolve,final,map,string,string,props,map,final,properties,props,new,properties,try,input,stream,stream,files,new,input,stream,descriptor,props,load,stream,props,map,props,string,property,names,stream,collect,collectors,to,map,function,identity,props,get,property,final,string,name,props,map,remove,name,if,name,null,name,is,empty,throw,new,illegal,argument,exception,property,name,is,missing,in,descriptor,final,string,description,props,map,remove,description,if,description,null,throw,new,illegal,argument,exception,property,description,is,missing,for,plugin,name,final,string,version,props,map,remove,version,if,version,null,throw,new,illegal,argument,exception,property,version,is,missing,for,plugin,name,final,string,es,version,string,props,map,remove,elasticsearch,version,if,es,version,string,null,throw,new,illegal,argument,exception,property,elasticsearch,version,is,missing,for,plugin,name,final,version,es,version,version,from,string,es,version,string,final,string,java,version,string,props,map,remove,java,version,if,java,version,string,null,throw,new,illegal,argument,exception,property,java,version,is,missing,for,plugin,name,jar,hell,check,version,format,java,version,string,final,string,classname,props,map,remove,classname,if,classname,null,throw,new,illegal,argument,exception,property,classname,is,missing,for,plugin,name,final,string,extended,string,props,map,remove,extended,plugins,final,list,string,extended,plugins,if,extended,string,null,extended,plugins,collections,empty,list,else,extended,plugins,arrays,as,list,strings,delimited,list,to,string,array,extended,string,final,string,has,native,controller,value,props,map,remove,has,native,controller,final,boolean,has,native,controller,if,has,native,controller,value,null,has,native,controller,false,else,switch,has,native,controller,value,case,true,has,native,controller,true,break,case,false,has,native,controller,false,break,default,final,string,message,string,format,locale,root,property,s,must,be,s,s,or,unspecified,but,was,s,true,false,has,native,controller,value,throw,new,illegal,argument,exception,message,if,es,version,before,version,es,version,on,or,after,version,props,map,remove,requires,keystore,if,props,map,is,empty,false,throw,new,illegal,argument,exception,unknown,properties,in,plugin,descriptor,props,map,key,set,return,new,plugin,info,name,description,version,es,version,java,version,string,classname,extended,plugins,has,native,controller
PluginInfo -> public static PluginInfo readFromProperties(final Path path) throws IOException;1548265937;Reads the plugin descriptor file.__@param path           the path to the root directory for the plugin_@return the plugin info_@throws IOException if an I/O exception occurred reading the plugin descriptor;public static PluginInfo readFromProperties(final Path path) throws IOException {_        final Path descriptor = path.resolve(ES_PLUGIN_PROPERTIES)___        final Map<String, String> propsMap__        {_            final Properties props = new Properties()__            try (InputStream stream = Files.newInputStream(descriptor)) {_                props.load(stream)__            }_            propsMap = props.stringPropertyNames().stream().collect(Collectors.toMap(Function.identity(), props::getProperty))__        }__        final String name = propsMap.remove("name")__        if (name == null || name.isEmpty()) {_            throw new IllegalArgumentException(_                    "property [name] is missing in [" + descriptor + "]")__        }_        final String description = propsMap.remove("description")__        if (description == null) {_            throw new IllegalArgumentException(_                    "property [description] is missing for plugin [" + name + "]")__        }_        final String version = propsMap.remove("version")__        if (version == null) {_            throw new IllegalArgumentException(_                    "property [version] is missing for plugin [" + name + "]")__        }__        final String esVersionString = propsMap.remove("elasticsearch.version")__        if (esVersionString == null) {_            throw new IllegalArgumentException(_                    "property [elasticsearch.version] is missing for plugin [" + name + "]")__        }_        final Version esVersion = Version.fromString(esVersionString)__        final String javaVersionString = propsMap.remove("java.version")__        if (javaVersionString == null) {_            throw new IllegalArgumentException(_                    "property [java.version] is missing for plugin [" + name + "]")__        }_        JarHell.checkVersionFormat(javaVersionString)__        final String classname = propsMap.remove("classname")__        if (classname == null) {_            throw new IllegalArgumentException(_                    "property [classname] is missing for plugin [" + name + "]")__        }__        final String extendedString = propsMap.remove("extended.plugins")__        final List<String> extendedPlugins__        if (extendedString == null) {_            extendedPlugins = Collections.emptyList()__        } else {_            extendedPlugins = Arrays.asList(Strings.delimitedListToStringArray(extendedString, ","))__        }__        final String hasNativeControllerValue = propsMap.remove("has.native.controller")__        final boolean hasNativeController__        if (hasNativeControllerValue == null) {_            hasNativeController = false__        } else {_            switch (hasNativeControllerValue) {_                case "true":_                    hasNativeController = true__                    break__                case "false":_                    hasNativeController = false__                    break__                default:_                    final String message = String.format(_                            Locale.ROOT,_                            "property [%s] must be [%s], [%s], or unspecified but was [%s]",_                            "has_native_controller",_                            "true",_                            "false",_                            hasNativeControllerValue)__                    throw new IllegalArgumentException(message)__            }_        }__        if (esVersion.before(Version.V_6_3_0) && esVersion.onOrAfter(Version.V_6_0_0_beta2)) {_            propsMap.remove("requires.keystore")__        }__        if (propsMap.isEmpty() == false) {_            throw new IllegalArgumentException("Unknown properties in plugin descriptor: " + propsMap.keySet())__        }__        return new PluginInfo(name, description, version, esVersion, javaVersionString,_                              classname, extendedPlugins, hasNativeController)__    };reads,the,plugin,descriptor,file,param,path,the,path,to,the,root,directory,for,the,plugin,return,the,plugin,info,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,descriptor;public,static,plugin,info,read,from,properties,final,path,path,throws,ioexception,final,path,descriptor,path,resolve,final,map,string,string,props,map,final,properties,props,new,properties,try,input,stream,stream,files,new,input,stream,descriptor,props,load,stream,props,map,props,string,property,names,stream,collect,collectors,to,map,function,identity,props,get,property,final,string,name,props,map,remove,name,if,name,null,name,is,empty,throw,new,illegal,argument,exception,property,name,is,missing,in,descriptor,final,string,description,props,map,remove,description,if,description,null,throw,new,illegal,argument,exception,property,description,is,missing,for,plugin,name,final,string,version,props,map,remove,version,if,version,null,throw,new,illegal,argument,exception,property,version,is,missing,for,plugin,name,final,string,es,version,string,props,map,remove,elasticsearch,version,if,es,version,string,null,throw,new,illegal,argument,exception,property,elasticsearch,version,is,missing,for,plugin,name,final,version,es,version,version,from,string,es,version,string,final,string,java,version,string,props,map,remove,java,version,if,java,version,string,null,throw,new,illegal,argument,exception,property,java,version,is,missing,for,plugin,name,jar,hell,check,version,format,java,version,string,final,string,classname,props,map,remove,classname,if,classname,null,throw,new,illegal,argument,exception,property,classname,is,missing,for,plugin,name,final,string,extended,string,props,map,remove,extended,plugins,final,list,string,extended,plugins,if,extended,string,null,extended,plugins,collections,empty,list,else,extended,plugins,arrays,as,list,strings,delimited,list,to,string,array,extended,string,final,string,has,native,controller,value,props,map,remove,has,native,controller,final,boolean,has,native,controller,if,has,native,controller,value,null,has,native,controller,false,else,switch,has,native,controller,value,case,true,has,native,controller,true,break,case,false,has,native,controller,false,break,default,final,string,message,string,format,locale,root,property,s,must,be,s,s,or,unspecified,but,was,s,true,false,has,native,controller,value,throw,new,illegal,argument,exception,message,if,es,version,before,version,es,version,on,or,after,version,props,map,remove,requires,keystore,if,props,map,is,empty,false,throw,new,illegal,argument,exception,unknown,properties,in,plugin,descriptor,props,map,key,set,return,new,plugin,info,name,description,version,es,version,java,version,string,classname,extended,plugins,has,native,controller
PluginInfo -> public String getJavaVersion();1524684173;The version of Java the plugin was built with.__@return a java version string;public String getJavaVersion() {_        return javaVersion__    };the,version,of,java,the,plugin,was,built,with,return,a,java,version,string;public,string,get,java,version,return,java,version
PluginInfo -> public String getJavaVersion();1528762805;The version of Java the plugin was built with.__@return a java version string;public String getJavaVersion() {_        return javaVersion__    };the,version,of,java,the,plugin,was,built,with,return,a,java,version,string;public,string,get,java,version,return,java,version
PluginInfo -> public String getJavaVersion();1535139672;The version of Java the plugin was built with.__@return a java version string;public String getJavaVersion() {_        return javaVersion__    };the,version,of,java,the,plugin,was,built,with,return,a,java,version,string;public,string,get,java,version,return,java,version
PluginInfo -> public String getJavaVersion();1548265937;The version of Java the plugin was built with.__@return a java version string;public String getJavaVersion() {_        return javaVersion__    };the,version,of,java,the,plugin,was,built,with,return,a,java,version,string;public,string,get,java,version,return,java,version
PluginInfo -> public boolean hasNativeController();1524684173;Whether or not the plugin has a native controller.__@return {@code true} if the plugin has a native controller;public boolean hasNativeController() {_        return hasNativeController__    };whether,or,not,the,plugin,has,a,native,controller,return,code,true,if,the,plugin,has,a,native,controller;public,boolean,has,native,controller,return,has,native,controller
PluginInfo -> public boolean hasNativeController();1528762805;Whether or not the plugin has a native controller.__@return {@code true} if the plugin has a native controller;public boolean hasNativeController() {_        return hasNativeController__    };whether,or,not,the,plugin,has,a,native,controller,return,code,true,if,the,plugin,has,a,native,controller;public,boolean,has,native,controller,return,has,native,controller
PluginInfo -> public boolean hasNativeController();1535139672;Whether or not the plugin has a native controller.__@return {@code true} if the plugin has a native controller;public boolean hasNativeController() {_        return hasNativeController__    };whether,or,not,the,plugin,has,a,native,controller,return,code,true,if,the,plugin,has,a,native,controller;public,boolean,has,native,controller,return,has,native,controller
PluginInfo -> public boolean hasNativeController();1548265937;Whether or not the plugin has a native controller.__@return {@code true} if the plugin has a native controller;public boolean hasNativeController() {_        return hasNativeController__    };whether,or,not,the,plugin,has,a,native,controller,return,code,true,if,the,plugin,has,a,native,controller;public,boolean,has,native,controller,return,has,native,controller
PluginInfo -> public String getClassname();1524684173;The entry point to the plugin.__@return the entry point to the plugin;public String getClassname() {_        return classname__    };the,entry,point,to,the,plugin,return,the,entry,point,to,the,plugin;public,string,get,classname,return,classname
PluginInfo -> public String getClassname();1528762805;The entry point to the plugin.__@return the entry point to the plugin;public String getClassname() {_        return classname__    };the,entry,point,to,the,plugin,return,the,entry,point,to,the,plugin;public,string,get,classname,return,classname
PluginInfo -> public String getClassname();1535139672;The entry point to the plugin.__@return the entry point to the plugin;public String getClassname() {_        return classname__    };the,entry,point,to,the,plugin,return,the,entry,point,to,the,plugin;public,string,get,classname,return,classname
PluginInfo -> public String getClassname();1548265937;The entry point to the plugin.__@return the entry point to the plugin;public String getClassname() {_        return classname__    };the,entry,point,to,the,plugin,return,the,entry,point,to,the,plugin;public,string,get,classname,return,classname
PluginInfo -> public PluginInfo(final StreamInput in) throws IOException;1524684173;Construct plugin info from a stream.__@param in the stream_@throws IOException if an I/O exception occurred reading the plugin info from the stream;public PluginInfo(final StreamInput in) throws IOException {_        this.name = in.readString()__        this.description = in.readString()__        this.version = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {_            elasticsearchVersion = Version.readVersion(in)__            javaVersion = in.readString()__        } else {_            _            elasticsearchVersion = in.getVersion()__            _            javaVersion = "1.8"__        }_        this.classname = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_2_0)) {_            extendedPlugins = in.readList(StreamInput::readString)__        } else {_            extendedPlugins = Collections.emptyList()__        }_        if (in.getVersion().onOrAfter(Version.V_5_4_0)) {_            hasNativeController = in.readBoolean()__        } else {_            hasNativeController = false__        }_        if (in.getVersion().onOrAfter(Version.V_6_0_0_beta2) && in.getVersion().before(Version.V_6_3_0)) {_            _            in.readBoolean()__        }_    };construct,plugin,info,from,a,stream,param,in,the,stream,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,info,from,the,stream;public,plugin,info,final,stream,input,in,throws,ioexception,this,name,in,read,string,this,description,in,read,string,this,version,in,read,string,if,in,get,version,on,or,after,version,elasticsearch,version,version,read,version,in,java,version,in,read,string,else,elasticsearch,version,in,get,version,java,version,1,8,this,classname,in,read,string,if,in,get,version,on,or,after,version,extended,plugins,in,read,list,stream,input,read,string,else,extended,plugins,collections,empty,list,if,in,get,version,on,or,after,version,has,native,controller,in,read,boolean,else,has,native,controller,false,if,in,get,version,on,or,after,version,in,get,version,before,version,in,read,boolean
PluginInfo -> public PluginInfo(final StreamInput in) throws IOException;1528762805;Construct plugin info from a stream.__@param in the stream_@throws IOException if an I/O exception occurred reading the plugin info from the stream;public PluginInfo(final StreamInput in) throws IOException {_        this.name = in.readString()__        this.description = in.readString()__        this.version = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {_            elasticsearchVersion = Version.readVersion(in)__            javaVersion = in.readString()__        } else {_            _            elasticsearchVersion = in.getVersion()__            _            javaVersion = "1.8"__        }_        this.classname = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_2_0)) {_            extendedPlugins = in.readList(StreamInput::readString)__        } else {_            extendedPlugins = Collections.emptyList()__        }_        if (in.getVersion().onOrAfter(Version.V_5_4_0)) {_            hasNativeController = in.readBoolean()__        } else {_            hasNativeController = false__        }_        if (in.getVersion().onOrAfter(Version.V_6_0_0_beta2) && in.getVersion().before(Version.V_6_3_0)) {_            _            in.readBoolean()__        }_    };construct,plugin,info,from,a,stream,param,in,the,stream,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,info,from,the,stream;public,plugin,info,final,stream,input,in,throws,ioexception,this,name,in,read,string,this,description,in,read,string,this,version,in,read,string,if,in,get,version,on,or,after,version,elasticsearch,version,version,read,version,in,java,version,in,read,string,else,elasticsearch,version,in,get,version,java,version,1,8,this,classname,in,read,string,if,in,get,version,on,or,after,version,extended,plugins,in,read,list,stream,input,read,string,else,extended,plugins,collections,empty,list,if,in,get,version,on,or,after,version,has,native,controller,in,read,boolean,else,has,native,controller,false,if,in,get,version,on,or,after,version,in,get,version,before,version,in,read,boolean
PluginInfo -> public PluginInfo(final StreamInput in) throws IOException;1535139672;Construct plugin info from a stream.__@param in the stream_@throws IOException if an I/O exception occurred reading the plugin info from the stream;public PluginInfo(final StreamInput in) throws IOException {_        this.name = in.readString()__        this.description = in.readString()__        this.version = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {_            elasticsearchVersion = Version.readVersion(in)__            javaVersion = in.readString()__        } else {_            _            elasticsearchVersion = in.getVersion()__            _            javaVersion = "1.8"__        }_        this.classname = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_2_0)) {_            extendedPlugins = in.readList(StreamInput::readString)__        } else {_            extendedPlugins = Collections.emptyList()__        }_        hasNativeController = in.readBoolean()__        if (in.getVersion().onOrAfter(Version.V_6_0_0_beta2) && in.getVersion().before(Version.V_6_3_0)) {_            _            in.readBoolean()__        }_    };construct,plugin,info,from,a,stream,param,in,the,stream,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,info,from,the,stream;public,plugin,info,final,stream,input,in,throws,ioexception,this,name,in,read,string,this,description,in,read,string,this,version,in,read,string,if,in,get,version,on,or,after,version,elasticsearch,version,version,read,version,in,java,version,in,read,string,else,elasticsearch,version,in,get,version,java,version,1,8,this,classname,in,read,string,if,in,get,version,on,or,after,version,extended,plugins,in,read,list,stream,input,read,string,else,extended,plugins,collections,empty,list,has,native,controller,in,read,boolean,if,in,get,version,on,or,after,version,in,get,version,before,version,in,read,boolean
PluginInfo -> public PluginInfo(final StreamInput in) throws IOException;1548265937;Construct plugin info from a stream.__@param in the stream_@throws IOException if an I/O exception occurred reading the plugin info from the stream;public PluginInfo(final StreamInput in) throws IOException {_        this.name = in.readString()__        this.description = in.readString()__        this.version = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {_            elasticsearchVersion = Version.readVersion(in)__            javaVersion = in.readString()__        } else {_            _            elasticsearchVersion = in.getVersion()__            _            javaVersion = "1.8"__        }_        this.classname = in.readString()__        if (in.getVersion().onOrAfter(Version.V_6_2_0)) {_            extendedPlugins = in.readStringList()__        } else {_            extendedPlugins = Collections.emptyList()__        }_        hasNativeController = in.readBoolean()__        if (in.getVersion().onOrAfter(Version.V_6_0_0_beta2) && in.getVersion().before(Version.V_6_3_0)) {_            _            in.readBoolean()__        }_    };construct,plugin,info,from,a,stream,param,in,the,stream,throws,ioexception,if,an,i,o,exception,occurred,reading,the,plugin,info,from,the,stream;public,plugin,info,final,stream,input,in,throws,ioexception,this,name,in,read,string,this,description,in,read,string,this,version,in,read,string,if,in,get,version,on,or,after,version,elasticsearch,version,version,read,version,in,java,version,in,read,string,else,elasticsearch,version,in,get,version,java,version,1,8,this,classname,in,read,string,if,in,get,version,on,or,after,version,extended,plugins,in,read,string,list,else,extended,plugins,collections,empty,list,has,native,controller,in,read,boolean,if,in,get,version,on,or,after,version,in,get,version,before,version,in,read,boolean
PluginInfo -> public String getDescription();1524684173;The description of the plugin.__@return the plugin description;public String getDescription() {_        return description__    };the,description,of,the,plugin,return,the,plugin,description;public,string,get,description,return,description
PluginInfo -> public String getDescription();1528762805;The description of the plugin.__@return the plugin description;public String getDescription() {_        return description__    };the,description,of,the,plugin,return,the,plugin,description;public,string,get,description,return,description
PluginInfo -> public String getDescription();1535139672;The description of the plugin.__@return the plugin description;public String getDescription() {_        return description__    };the,description,of,the,plugin,return,the,plugin,description;public,string,get,description,return,description
PluginInfo -> public String getDescription();1548265937;The description of the plugin.__@return the plugin description;public String getDescription() {_        return description__    };the,description,of,the,plugin,return,the,plugin,description;public,string,get,description,return,description
PluginInfo -> public Version getElasticsearchVersion();1524684173;The version of Elasticsearch the plugin was built for.__@return an Elasticsearch version;public Version getElasticsearchVersion() {_        return elasticsearchVersion__    };the,version,of,elasticsearch,the,plugin,was,built,for,return,an,elasticsearch,version;public,version,get,elasticsearch,version,return,elasticsearch,version
PluginInfo -> public Version getElasticsearchVersion();1528762805;The version of Elasticsearch the plugin was built for.__@return an Elasticsearch version;public Version getElasticsearchVersion() {_        return elasticsearchVersion__    };the,version,of,elasticsearch,the,plugin,was,built,for,return,an,elasticsearch,version;public,version,get,elasticsearch,version,return,elasticsearch,version
PluginInfo -> public Version getElasticsearchVersion();1535139672;The version of Elasticsearch the plugin was built for.__@return an Elasticsearch version;public Version getElasticsearchVersion() {_        return elasticsearchVersion__    };the,version,of,elasticsearch,the,plugin,was,built,for,return,an,elasticsearch,version;public,version,get,elasticsearch,version,return,elasticsearch,version
PluginInfo -> public Version getElasticsearchVersion();1548265937;The version of Elasticsearch the plugin was built for.__@return an Elasticsearch version;public Version getElasticsearchVersion() {_        return elasticsearchVersion__    };the,version,of,elasticsearch,the,plugin,was,built,for,return,an,elasticsearch,version;public,version,get,elasticsearch,version,return,elasticsearch,version
PluginInfo -> public String getName();1524684173;The name of the plugin.__@return the plugin name;public String getName() {_        return name__    };the,name,of,the,plugin,return,the,plugin,name;public,string,get,name,return,name
PluginInfo -> public String getName();1528762805;The name of the plugin.__@return the plugin name;public String getName() {_        return name__    };the,name,of,the,plugin,return,the,plugin,name;public,string,get,name,return,name
PluginInfo -> public String getName();1535139672;The name of the plugin.__@return the plugin name;public String getName() {_        return name__    };the,name,of,the,plugin,return,the,plugin,name;public,string,get,name,return,name
PluginInfo -> public String getName();1548265937;The name of the plugin.__@return the plugin name;public String getName() {_        return name__    };the,name,of,the,plugin,return,the,plugin,name;public,string,get,name,return,name
PluginInfo -> public String getVersion();1524684173;The version of the plugin__@return the version;public String getVersion() {_        return version__    };the,version,of,the,plugin,return,the,version;public,string,get,version,return,version
PluginInfo -> public String getVersion();1528762805;The version of the plugin__@return the version;public String getVersion() {_        return version__    };the,version,of,the,plugin,return,the,version;public,string,get,version,return,version
PluginInfo -> public String getVersion();1535139672;The version of the plugin__@return the version;public String getVersion() {_        return version__    };the,version,of,the,plugin,return,the,version;public,string,get,version,return,version
PluginInfo -> public String getVersion();1548265937;The version of the plugin__@return the version;public String getVersion() {_        return version__    };the,version,of,the,plugin,return,the,version;public,string,get,version,return,version
