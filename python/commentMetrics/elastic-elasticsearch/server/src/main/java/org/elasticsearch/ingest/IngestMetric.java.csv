commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Call this prior to the ingest action.  */ ;/**  * Call this prior to the ingest action.  */ void preIngest() {     ingestCurrent.inc(). }
true;;1;5;/**  * Call this after the performing the ingest action, even if the action failed.  * @param ingestTimeInMillis The time it took to perform the action.  */ ;/**  * Call this after the performing the ingest action, even if the action failed.  * @param ingestTimeInMillis The time it took to perform the action.  */ void postIngest(long ingestTimeInMillis) {     ingestCurrent.dec().     ingestTime.inc(ingestTimeInMillis).     ingestCount.inc(). }
true;;0;3;/**  * Call this if the ingest action failed.  */ ;/**  * Call this if the ingest action failed.  */ void ingestFailed() {     ingestFailed.inc(). }
true;;1;5;/**  * <p>Add two sets of metrics together.  * <p><strong>Note -</strong> this method does <strong>not</strong> add the current count values.  * The current count value is ephemeral and requires a increase/decrease operation pairs to keep the value correct.  *  * @param metrics The metric to add.  */ ;/**  * <p>Add two sets of metrics together.  * <p><strong>Note -</strong> this method does <strong>not</strong> add the current count values.  * The current count value is ephemeral and requires a increase/decrease operation pairs to keep the value correct.  *  * @param metrics The metric to add.  */ void add(IngestMetric metrics) {     ingestCount.inc(metrics.ingestCount.count()).     ingestTime.inc(metrics.ingestTime.sum()).     ingestFailed.inc(metrics.ingestFailed.count()). }
true;;0;3;/**  * Creates a serializable representation for these metrics.  */ ;/**  * Creates a serializable representation for these metrics.  */ IngestStats.Stats createStats() {     return new IngestStats.Stats(ingestCount.count(), ingestTime.sum(), ingestCurrent.count(), ingestFailed.count()). }
