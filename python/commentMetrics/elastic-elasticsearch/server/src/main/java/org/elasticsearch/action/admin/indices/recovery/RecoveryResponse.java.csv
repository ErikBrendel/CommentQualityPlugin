commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean hasRecoveries() {     return shardRecoveryStates.size() > 0. }
false;public;0;3;;public Map<String, List<RecoveryState>> shardRecoveryStates() {     return shardRecoveryStates. }
false;public;2;23;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (hasRecoveries()) {         for (String index : shardRecoveryStates.keySet()) {             List<RecoveryState> recoveryStates = shardRecoveryStates.get(index).             if (recoveryStates == null || recoveryStates.size() == 0) {                 continue.             }             builder.startObject(index).             builder.startArray("shards").             for (RecoveryState recoveryState : recoveryStates) {                 builder.startObject().                 recoveryState.toXContent(builder, params).                 builder.endObject().             }             builder.endArray().             builder.endObject().         }     }     builder.endObject().     return builder. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(shardRecoveryStates.size()).     for (Map.Entry<String, List<RecoveryState>> entry : shardRecoveryStates.entrySet()) {         out.writeString(entry.getKey()).         out.writeVInt(entry.getValue().size()).         for (RecoveryState recoveryState : entry.getValue()) {             recoveryState.writeTo(out).         }     } }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     for (int i = 0. i < size. i++) {         String s = in.readString().         int listSize = in.readVInt().         List<RecoveryState> list = new ArrayList<>(listSize).         for (int j = 0. j < listSize. j++) {             list.add(RecoveryState.readRecoveryState(in)).         }         shardRecoveryStates.put(s, list).     } }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
