# id;timestamp;commentText;codeText;commentWords;codeWords
IndexMetaData -> public Version getUpgradedVersion();1524684173;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1525334055;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1527096592;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1528762805;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1529082965;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1529526587;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1531382259;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1532353780;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1535405719;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1535666657;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1535723122;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1536137328;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1536314350;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1537202470;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1537390248;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1538424609;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1539723533;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1540847035;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1543947737;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1544702062;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1545086578;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1545221705;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1546357035;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1546877578;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public Version getUpgradedVersion();1547643669;Return the {@link Version} on which this index has been upgraded. This_information is typically useful for backward compatibility.;public Version getUpgradedVersion() {_        return indexUpgradedVersion__    };return,the,link,version,on,which,this,index,has,been,upgraded,this,information,is,typically,useful,for,backward,compatibility;public,version,get,upgraded,version,return,index,upgraded,version
IndexMetaData -> public int getRoutingNumShards();1524684173;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1525334055;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1527096592;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1528762805;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1529082965;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1529526587;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1531382259;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1532353780;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1535405719;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1535666657;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1535723122;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1536137328;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1536314350;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1537202470;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1537390248;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1538424609;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1539723533;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1540847035;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1543947737;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1544702062;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1545086578;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1545221705;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1546357035;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1546877578;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> public int getRoutingNumShards();1547643669;Returns the number of shards that should be used for routing. This basically defines the hash space we use in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to route documents_to shards based on their ID or their specific routing value. The default value is {@link #getNumberOfShards()}. This value only_changes if and index is shrunk.;public int getRoutingNumShards() {_        return routingNumShards__    };returns,the,number,of,shards,that,should,be,used,for,routing,this,basically,defines,the,hash,space,we,use,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,route,documents,to,shards,based,on,their,id,or,their,specific,routing,value,the,default,value,is,link,get,number,of,shards,this,value,only,changes,if,and,index,is,shrunk;public,int,get,routing,num,shards,return,routing,num,shards
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1524684173;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1525334055;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1527096592;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1528762805;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1529082965;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1529526587;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1531382259;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1532353780;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1535405719;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1535666657;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1535723122;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1536137328;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1536314350;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1537202470;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1537390248;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1538424609;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1539723533;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1540847035;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1543947737;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1544702062;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1545086578;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1545221705;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1546357035;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mappingOrDefault(String mappingType);1546877578;Sometimes, the default mapping exists and an actual mapping is not created yet (introduced),_in this case, we want to return the default mapping in case it has some default mapping definitions._<p>_Note, once the mapping type is introduced, the default mapping is applied on the actual typed MappingMetaData,_setting its routing, timestamp, and so on if needed.;@Nullable_    public MappingMetaData mappingOrDefault(String mappingType) {_        MappingMetaData mapping = mappings.get(mappingType)__        if (mapping != null) {_            return mapping__        }_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };sometimes,the,default,mapping,exists,and,an,actual,mapping,is,not,created,yet,introduced,in,this,case,we,want,to,return,the,default,mapping,in,case,it,has,some,default,mapping,definitions,p,note,once,the,mapping,type,is,introduced,the,default,mapping,is,applied,on,the,actual,typed,mapping,meta,data,setting,its,routing,timestamp,and,so,on,if,needed;nullable,public,mapping,meta,data,mapping,or,default,string,mapping,type,mapping,meta,data,mapping,mappings,get,mapping,type,if,mapping,null,return,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData mapping();1543947737;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1544702062;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1545086578;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1545221705;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1546357035;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1546877578;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> @Nullable     public MappingMetaData mapping();1547643669;Return the concrete mapping for this index or {@code null} if this index has no mappings at all.;@Nullable_    public MappingMetaData mapping() {_        for (ObjectObjectCursor<String, MappingMetaData> cursor : mappings) {_            if (cursor.key.equals(MapperService.DEFAULT_MAPPING) == false) {_                return cursor.value__            }_        }_        return null__    };return,the,concrete,mapping,for,this,index,or,code,null,if,this,index,has,no,mappings,at,all;nullable,public,mapping,meta,data,mapping,for,object,object,cursor,string,mapping,meta,data,cursor,mappings,if,cursor,key,equals,mapper,service,false,return,cursor,value,return,null
IndexMetaData -> public int getRoutingFactor();1524684173;Returns the routing factor for this index. The default is <tt>1</tt>.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,tt,1,tt,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1525334055;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1527096592;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1528762805;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1529082965;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1529526587;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1531382259;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1532353780;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1535405719;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1535666657;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1535723122;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1536137328;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1536314350;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1537202470;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1537390248;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1538424609;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1539723533;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1540847035;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1543947737;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1544702062;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1545086578;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1545221705;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1546357035;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1546877578;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public int getRoutingFactor();1547643669;Returns the routing factor for this index. The default is {@code 1}.__@see #getRoutingFactor(int, int) for details;public int getRoutingFactor() {_        return routingFactor__    };returns,the,routing,factor,for,this,index,the,default,is,code,1,see,get,routing,factor,int,int,for,details;public,int,get,routing,factor,return,routing,factor
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1524684173;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1525334055;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1527096592;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1528762805;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1529082965;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1529526587;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1531382259;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1532353780;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1535405719;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1535666657;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1535723122;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1536137328;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1536314350;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1537202470;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1537390248;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1538424609;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1539723533;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1540847035;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1543947737;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1544702062;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1545086578;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1545221705;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1546357035;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1546877578;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> public ActiveShardCount getWaitForActiveShards();1547643669;Returns the configured {@link #SETTING_WAIT_FOR_ACTIVE_SHARDS}, which defaults_to an active shard count of 1 if not specified.;public ActiveShardCount getWaitForActiveShards() {_        return waitForActiveShards__    };returns,the,configured,link,which,defaults,to,an,active,shard,count,of,1,if,not,specified;public,active,shard,count,get,wait,for,active,shards,return,wait,for,active,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1524684173;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1525334055;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1527096592;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1528762805;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1529082965;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1529526587;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1531382259;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1532353780;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1535405719;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1535666657;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1535723122;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1536137328;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1536314350;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1537202470;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1537390248;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1538424609;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1539723533;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1540847035;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1543947737;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1544702062;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1545086578;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1545221705;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1546357035;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1546877578;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Builder -> public int getRoutingNumShards();1547643669;Returns number of shards that should be used for routing. By default this method will return the number of shards_for this index.__@see #setRoutingNumShards(int)_@see #numberOfShards();public int getRoutingNumShards() {_            return routingNumShards == null ? numberOfShards() : routingNumShards__        };returns,number,of,shards,that,should,be,used,for,routing,by,default,this,method,will,return,the,number,of,shards,for,this,index,see,set,routing,num,shards,int,see,number,of,shards;public,int,get,routing,num,shards,return,routing,num,shards,null,number,of,shards,routing,num,shards
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1524684173;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1525334055;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1527096592;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1528762805;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1529082965;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1529526587;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1531382259;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1532353780;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Custom readFrom(StreamInput in) throws IOException_;1535405719;Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged.;Custom readFrom(StreamInput in) throws IOException_;reads,an,object,of,this,type,from,the,provided,linkplain,stream,input,the,receiving,instance,remains,unchanged;custom,read,from,stream,input,in,throws,ioexception
IndexMetaData -> public boolean isSameUUID(String otherUUID);1524684173;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1525334055;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1527096592;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1528762805;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1529082965;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1529526587;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1531382259;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1532353780;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1535405719;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1535666657;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1535723122;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1536137328;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1536314350;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1537202470;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1537390248;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1538424609;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1539723533;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1540847035;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1543947737;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1544702062;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1545086578;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1545221705;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1546357035;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1546877578;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public boolean isSameUUID(String otherUUID);1547643669;Test whether the current index UUID is the same as the given one. Returns true if either are _na_;public boolean isSameUUID(String otherUUID) {_        assert otherUUID != null__        assert getIndexUUID() != null__        if (INDEX_UUID_NA_VALUE.equals(otherUUID) || INDEX_UUID_NA_VALUE.equals(getIndexUUID())) {_            return true__        }_        return otherUUID.equals(getIndexUUID())__    };test,whether,the,current,index,uuid,is,the,same,as,the,given,one,returns,true,if,either,are;public,boolean,is,same,uuid,string,other,uuid,assert,other,uuid,null,assert,get,index,uuid,null,if,equals,other,uuid,equals,get,index,uuid,return,true,return,other,uuid,equals,get,index,uuid
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1524684173;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1525334055;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1527096592;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1528762805;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1529082965;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1529526587;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            DateTime creationDateTime = new DateTime(creationDate, DateTimeZone.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,date,time,creation,date,time,new,date,time,creation,date,date,time,zone,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1531382259;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1532353780;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1535405719;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1535666657;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1535723122;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = settings.getAsVersion(SETTING_VERSION_CREATED, null)__        if (version != null) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,settings,get,as,version,null,if,version,null,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1536137328;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1536314350;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1537202470;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1537390248;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1538424609;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1539723533;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1540847035;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1543947737;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1544702062;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1545086578;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1545221705;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1546357035;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1546877578;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> public static Settings addHumanReadableSettings(Settings settings);1547643669;Adds human readable version and creation date settings._This method is used to display the settings in a human readable format in REST API;public static Settings addHumanReadableSettings(Settings settings) {_        Settings.Builder builder = Settings.builder().put(settings)__        Version version = SETTING_INDEX_VERSION_CREATED.get(settings)__        if (version != Version.V_EMPTY) {_            builder.put(SETTING_VERSION_CREATED_STRING, version.toString())__        }_        Version versionUpgraded = settings.getAsVersion(SETTING_VERSION_UPGRADED, null)__        if (versionUpgraded != null) {_            builder.put(SETTING_VERSION_UPGRADED_STRING, versionUpgraded.toString())__        }_        Long creationDate = settings.getAsLong(SETTING_CREATION_DATE, null)__        if (creationDate != null) {_            ZonedDateTime creationDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(creationDate), ZoneOffset.UTC)__            builder.put(SETTING_CREATION_DATE_STRING, creationDateTime.toString())__        }_        return builder.build()__    };adds,human,readable,version,and,creation,date,settings,this,method,is,used,to,display,the,settings,in,a,human,readable,format,in,rest,api;public,static,settings,add,human,readable,settings,settings,settings,settings,builder,builder,settings,builder,put,settings,version,version,get,settings,if,version,version,builder,put,version,to,string,version,version,upgraded,settings,get,as,version,null,if,version,upgraded,null,builder,put,version,upgraded,to,string,long,creation,date,settings,get,as,long,null,if,creation,date,null,zoned,date,time,creation,date,time,zoned,date,time,of,instant,instant,of,epoch,milli,creation,date,zone,offset,utc,builder,put,creation,date,time,to,string,return,builder,build
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1524684173;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1525334055;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1527096592;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1528762805;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1529082965;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1529526587;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1531382259;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1532353780;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Custom -> Custom mergeWith(Custom another)_;1535405719;Merges from this to another, with this being more important, i.e., if something exists in this and another,_this will prevail.;Custom mergeWith(Custom another)_;merges,from,this,to,another,with,this,being,more,important,i,e,if,something,exists,in,this,and,another,this,will,prevail;custom,merge,with,custom,another
IndexMetaData -> Builder -> public int numberOfReplicas();1524684173;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1525334055;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1527096592;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1528762805;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1529082965;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1529526587;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1531382259;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1532353780;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1535405719;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1535666657;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1535723122;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1536137328;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1536314350;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1537202470;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1537390248;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1538424609;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1539723533;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1540847035;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfReplicas();1543947737;Returns the number of replicas.__@return the provided value or -1 if it has not been set.;public int numberOfReplicas() {_            return settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, -1)__        };returns,the,number,of,replicas,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,replicas,return,settings,get,as,int,1
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1543947737;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1544702062;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1545086578;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1545221705;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1546357035;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1546877578;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> @Nullable     public MappingMetaData defaultMapping();1547643669;Get the default mapping._NOTE: this is always {@code null} for 7.x indices which are disallowed to have a default mapping.;@Nullable_    public MappingMetaData defaultMapping() {_        return mappings.get(MapperService.DEFAULT_MAPPING)__    };get,the,default,mapping,note,this,is,always,code,null,for,7,x,indices,which,are,disallowed,to,have,a,default,mapping;nullable,public,mapping,meta,data,default,mapping,return,mappings,get,mapper,service
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1524684173;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1525334055;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1527096592;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1528762805;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1529082965;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1529526587;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1531382259;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1532353780;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1535405719;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1535666657;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1535723122;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1536137328;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1536314350;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1537202470;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1537390248;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1538424609;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1539723533;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1540847035;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1543947737;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1544702062;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1545086578;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1545221705;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1546357035;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1546877578;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);1547643669;Returns the routing factor for and shrunk index with the given number of target shards._This factor is used in the hash function in_{@link org.elasticsearch.cluster.routing.OperationRouting#generateShardId(IndexMetaData, String, String)} to guarantee consistent_hashing / routing of documents even if the number of shards changed (ie. a shrunk index).__@param sourceNumberOfShards the total number of shards in the source index_@param targetNumberOfShards the total number of shards in the target index_@return the routing factor for and shrunk index with the given number of target shards._@throws IllegalArgumentException if the number of source shards is less than the number of target shards or if the source shards_are not divisible by the number of target shards.;public static int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards) {_        final int factor__        if (sourceNumberOfShards < targetNumberOfShards) { _            factor = targetNumberOfShards / sourceNumberOfShards__            if (factor * sourceNumberOfShards != targetNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "factor of ["_                    + targetNumberOfShards + "]")__            }_        } else if (sourceNumberOfShards > targetNumberOfShards) { _            factor = sourceNumberOfShards / targetNumberOfShards__            if (factor * targetNumberOfShards != sourceNumberOfShards || factor <= 1) {_                throw new IllegalArgumentException("the number of source shards [" + sourceNumberOfShards + "] must be a " +_                    "multiple of ["_                    + targetNumberOfShards + "]")__            }_        } else {_            factor = 1__        }_        return factor__    };returns,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,this,factor,is,used,in,the,hash,function,in,link,org,elasticsearch,cluster,routing,operation,routing,generate,shard,id,index,meta,data,string,string,to,guarantee,consistent,hashing,routing,of,documents,even,if,the,number,of,shards,changed,ie,a,shrunk,index,param,source,number,of,shards,the,total,number,of,shards,in,the,source,index,param,target,number,of,shards,the,total,number,of,shards,in,the,target,index,return,the,routing,factor,for,and,shrunk,index,with,the,given,number,of,target,shards,throws,illegal,argument,exception,if,the,number,of,source,shards,is,less,than,the,number,of,target,shards,or,if,the,source,shards,are,not,divisible,by,the,number,of,target,shards;public,static,int,get,routing,factor,int,source,number,of,shards,int,target,number,of,shards,final,int,factor,if,source,number,of,shards,target,number,of,shards,factor,target,number,of,shards,source,number,of,shards,if,factor,source,number,of,shards,target,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,factor,of,target,number,of,shards,else,if,source,number,of,shards,target,number,of,shards,factor,source,number,of,shards,target,number,of,shards,if,factor,target,number,of,shards,source,number,of,shards,factor,1,throw,new,illegal,argument,exception,the,number,of,source,shards,source,number,of,shards,must,be,a,multiple,of,target,number,of,shards,else,factor,1,return,factor
IndexMetaData -> public Version getCreationVersion();1524684173;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1525334055;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1527096592;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1528762805;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1529082965;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1529526587;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1531382259;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1532353780;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1535405719;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1535666657;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1535723122;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1536137328;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1536314350;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1537202470;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1537390248;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1538424609;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1539723533;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1540847035;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1543947737;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1544702062;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1545086578;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1545221705;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1546357035;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1546877578;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public Version getCreationVersion();1547643669;Return the {@link Version} on which this index has been created. This_information is typically useful for backward compatibility.;public Version getCreationVersion() {_        return indexCreatedVersion__    };return,the,link,version,on,which,this,index,has,been,created,this,information,is,typically,useful,for,backward,compatibility;public,version,get,creation,version,return,index,created,version
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1524684173;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1525334055;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1527096592;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1528762805;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529082965;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529526587;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1531382259;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1532353780;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535405719;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535666657;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535723122;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536137328;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536314350;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537202470;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537390248;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1538424609;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1539723533;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1540847035;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1543947737;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1544702062;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545086578;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545221705;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546357035;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546877578;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1547643669;Selects the source shards for a local shard recovery. This might either be a split or a shrink operation._@param shardId the target shard ID to select the source shards for_@param sourceIndexMetadata the source metadata_@param numTargetShards the number of target shards;public static Set<ShardId> selectRecoverFromShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (sourceIndexMetadata.getNumberOfShards() > numTargetShards) {_            return selectShrinkShards(shardId, sourceIndexMetadata, numTargetShards)__        } else if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            return Collections.singleton(selectSplitShard(shardId, sourceIndexMetadata, numTargetShards))__        }_        throw new IllegalArgumentException("can't select recover from shards if both indices have the same number of shards")__    };selects,the,source,shards,for,a,local,shard,recovery,this,might,either,be,a,split,or,a,shrink,operation,param,shard,id,the,target,shard,id,to,select,the,source,shards,for,param,source,index,metadata,the,source,metadata,param,num,target,shards,the,number,of,target,shards;public,static,set,shard,id,select,recover,from,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,source,index,metadata,get,number,of,shards,num,target,shards,return,select,shrink,shards,shard,id,source,index,metadata,num,target,shards,else,if,source,index,metadata,get,number,of,shards,num,target,shards,return,collections,singleton,select,split,shard,shard,id,source,index,metadata,num,target,shards,throw,new,illegal,argument,exception,can,t,select,recover,from,shards,if,both,indices,have,the,same,number,of,shards
IndexMetaData -> Builder -> public int routingPartitionSize();1524684173;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1525334055;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1527096592;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1528762805;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1529082965;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1529526587;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1531382259;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1532353780;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1535405719;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1535666657;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1535723122;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1536137328;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1536314350;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1537202470;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1537390248;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1538424609;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1539723533;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1540847035;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int routingPartitionSize();1543947737;Returns the routing partition size.__@return the provided value or -1 if it has not been set.;public int routingPartitionSize() {_            return settings.getAsInt(SETTING_ROUTING_PARTITION_SIZE, -1)__        };returns,the,routing,partition,size,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,routing,partition,size,return,settings,get,as,int,1
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1524684173;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1525334055;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1527096592;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1528762805;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1529082965;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1529526587;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1531382259;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1532353780;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1535405719;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1535666657;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1535723122;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1536137328;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1536314350;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1537202470;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1537390248;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1538424609;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1539723533;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1540847035;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1543947737;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1544702062;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1545086578;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1545221705;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1546357035;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1546877578;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public long primaryTerm(int shardId);1547643669;returns the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public long primaryTerm(int shardId) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            return this.primaryTerms[shardId]__        };returns,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,long,primary,term,int,shard,id,if,primary,terms,null,initialize,primary,terms,return,this,primary,terms,shard,id
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1524684173;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1525334055;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1527096592;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1528762805;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529082965;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529526587;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1531382259;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1532353780;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535405719;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535666657;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535723122;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536137328;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536314350;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537202470;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537390248;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1538424609;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1539723533;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1540847035;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1543947737;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1544702062;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545086578;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545221705;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546357035;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546877578;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1547643669;Returns the source shard ids to shrink into the given shard id._@param shardId the id of the target shard to shrink to_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a set of shard IDs to shrink into the given shard ID.;public static Set<ShardId> selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        if (sourceIndexMetadata.getNumberOfShards() < numTargetShards) {_            throw new IllegalArgumentException("the number of target shards [" + numTargetShards_                +"] must be less that the number of source shards [" + sourceIndexMetadata.getNumberOfShards() + "]")__        }_        int routingFactor = getRoutingFactor(sourceIndexMetadata.getNumberOfShards(), numTargetShards)__        Set<ShardId> shards = new HashSet<>(routingFactor)__        for (int i = shardId * routingFactor_ i < routingFactor*shardId + routingFactor_ i++) {_            shards.add(new ShardId(sourceIndexMetadata.getIndex(), i))__        }_        return shards__    };returns,the,source,shard,ids,to,shrink,into,the,given,shard,id,param,shard,id,the,id,of,the,target,shard,to,shrink,to,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,set,of,shard,ids,to,shrink,into,the,given,shard,id;public,static,set,shard,id,select,shrink,shards,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,if,source,index,metadata,get,number,of,shards,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,less,that,the,number,of,source,shards,source,index,metadata,get,number,of,shards,int,routing,factor,get,routing,factor,source,index,metadata,get,number,of,shards,num,target,shards,set,shard,id,shards,new,hash,set,routing,factor,for,int,i,shard,id,routing,factor,i,routing,factor,shard,id,routing,factor,i,shards,add,new,shard,id,source,index,metadata,get,index,i,return,shards
IndexMetaData -> public long primaryTerm(int shardId);1524684173;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1525334055;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1527096592;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1528762805;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1529082965;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1529526587;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1531382259;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1532353780;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1535405719;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1535666657;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1535723122;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1536137328;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1536314350;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1537202470;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1537390248;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1538424609;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1539723533;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1540847035;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1543947737;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1544702062;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1545086578;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1545221705;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1546357035;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1546877578;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> public long primaryTerm(int shardId);1547643669;The term of the current selected primary. This is a non-negative number incremented when_a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary.__Note: since we increment the term every time a shard is assigned, the term for any operational shard (i.e., a shard_that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges}.;public long primaryTerm(int shardId) {_        return this.primaryTerms[shardId]__    };the,term,of,the,current,selected,primary,this,is,a,non,negative,number,incremented,when,a,primary,shard,is,assigned,after,a,full,cluster,restart,or,a,replica,shard,is,promoted,to,a,primary,note,since,we,increment,the,term,every,time,a,shard,is,assigned,the,term,for,any,operational,shard,i,e,a,shard,that,can,be,indexed,into,is,larger,than,0,see,link,index,meta,data,updater,apply,changes;public,long,primary,term,int,shard,id,return,this,primary,terms,shard,id
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1524684173;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1525334055;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1527096592;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1528762805;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1529082965;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1529526587;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1531382259;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1532353780;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1535405719;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1535666657;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1535723122;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1536137328;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1536314350;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1537202470;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1537390248;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1538424609;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1539723533;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1540847035;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1543947737;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1544702062;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1545086578;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1545221705;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1546357035;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1546877578;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder setRoutingNumShards(int routingNumShards);1547643669;Sets the number of shards that should be used for routing. This should only be used if the number of shards in_an index has changed ie if the index is shrunk.;public Builder setRoutingNumShards(int routingNumShards) {_            this.routingNumShards = routingNumShards__            return this__        };sets,the,number,of,shards,that,should,be,used,for,routing,this,should,only,be,used,if,the,number,of,shards,in,an,index,has,changed,ie,if,the,index,is,shrunk;public,builder,set,routing,num,shards,int,routing,num,shards,this,routing,num,shards,routing,num,shards,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1524684173;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1525334055;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1527096592;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1528762805;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1529082965;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1529526587;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1531382259;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1532353780;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1535405719;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1535666657;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1535723122;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1536137328;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1536314350;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1537202470;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1537390248;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1538424609;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1539723533;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1540847035;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1543947737;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1544702062;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1545086578;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1545221705;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1546357035;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1546877578;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> Builder -> public Builder primaryTerm(int shardId, long primaryTerm);1547643669;sets the primary term for the given shard._See {@link IndexMetaData#primaryTerm(int)} for more information.;public Builder primaryTerm(int shardId, long primaryTerm) {_            if (primaryTerms == null) {_                initializePrimaryTerms()__            }_            this.primaryTerms[shardId] = primaryTerm__            return this__        };sets,the,primary,term,for,the,given,shard,see,link,index,meta,data,primary,term,int,for,more,information;public,builder,primary,term,int,shard,id,long,primary,term,if,primary,terms,null,initialize,primary,terms,this,primary,terms,shard,id,primary,term,return,this
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1543947737;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1544702062;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1545086578;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1545221705;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1546357035;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1546877578;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> @Deprecated     public ImmutableOpenMap<String, MappingMetaData> getMappings();1547643669;Return an object that maps each type to the associated mappings._The return value is never {@code null} but may be empty if the index_has no mappings._@deprecated Use {@link #mapping()} instead now that indices have a single type;@Deprecated_    public ImmutableOpenMap<String, MappingMetaData> getMappings() {_        return mappings__    };return,an,object,that,maps,each,type,to,the,associated,mappings,the,return,value,is,never,code,null,but,may,be,empty,if,the,index,has,no,mappings,deprecated,use,link,mapping,instead,now,that,indices,have,a,single,type;deprecated,public,immutable,open,map,string,mapping,meta,data,get,mappings,return,mappings
IndexMetaData -> Builder -> public int numberOfShards();1524684173;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1525334055;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1527096592;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1528762805;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1529082965;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1529526587;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1531382259;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1532353780;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1535405719;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1535666657;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1535723122;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1536137328;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1536314350;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1537202470;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1537390248;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1538424609;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1539723533;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1540847035;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1543947737;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1544702062;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1545086578;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1545221705;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1546357035;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1546877578;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> Builder -> public int numberOfShards();1547643669;Returns the number of shards.__@return the provided value or -1 if it has not been set.;public int numberOfShards() {_            return settings.getAsInt(SETTING_NUMBER_OF_SHARDS, -1)__        };returns,the,number,of,shards,return,the,provided,value,or,1,if,it,has,not,been,set;public,int,number,of,shards,return,settings,get,as,int,1
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1524684173;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1525334055;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1527096592;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1528762805;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529082965;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1529526587;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1531382259;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1532353780;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535405719;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535666657;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1535723122;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536137328;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1536314350;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537202470;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1537390248;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1538424609;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1539723533;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1540847035;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1543947737;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1544702062;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545086578;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1545221705;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546357035;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1546877578;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);1547643669;Returns the source shard ID to split the given target shard off_@param shardId the id of the target shard to split into_@param sourceIndexMetadata the source index metadata_@param numTargetShards the total number of shards in the target index_@return a the source shard ID to split off from;public static ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards) {_        int numSourceShards = sourceIndexMetadata.getNumberOfShards()__        if (shardId >= numTargetShards) {_            throw new IllegalArgumentException("the number of target shards (" + numTargetShards + ") must be greater than the shard id: "_                + shardId)__        }_        final int routingFactor = getRoutingFactor(numSourceShards, numTargetShards)__        assertSplitMetadata(numSourceShards, numTargetShards, sourceIndexMetadata)__        return new ShardId(sourceIndexMetadata.getIndex(), shardId/routingFactor)__    };returns,the,source,shard,id,to,split,the,given,target,shard,off,param,shard,id,the,id,of,the,target,shard,to,split,into,param,source,index,metadata,the,source,index,metadata,param,num,target,shards,the,total,number,of,shards,in,the,target,index,return,a,the,source,shard,id,to,split,off,from;public,static,shard,id,select,split,shard,int,shard,id,index,meta,data,source,index,metadata,int,num,target,shards,int,num,source,shards,source,index,metadata,get,number,of,shards,if,shard,id,num,target,shards,throw,new,illegal,argument,exception,the,number,of,target,shards,num,target,shards,must,be,greater,than,the,shard,id,shard,id,final,int,routing,factor,get,routing,factor,num,source,shards,num,target,shards,assert,split,metadata,num,source,shards,num,target,shards,source,index,metadata,return,new,shard,id,source,index,metadata,get,index,shard,id,routing,factor
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1524684173;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1525334055;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1527096592;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1528762805;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1529082965;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1529526587;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1531382259;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1532353780;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> public static void registerPrototype(String type, Custom proto);1535405719;Register a custom index meta data factory. Make sure to call it from a static block.;public static void registerPrototype(String type, Custom proto) {_        customPrototypes.put(type, proto)__    };register,a,custom,index,meta,data,factory,make,sure,to,call,it,from,a,static,block;public,static,void,register,prototype,string,type,custom,proto,custom,prototypes,put,type,proto
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1524684173;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1525334055;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1527096592;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1528762805;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1529082965;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1529526587;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1531382259;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1532353780;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
IndexMetaData -> Custom -> Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;1535405719;Reads the {@link org.elasticsearch.cluster.Diff} from StreamInput;Diff<Custom> readDiffFrom(StreamInput in) throws IOException_;reads,the,link,org,elasticsearch,cluster,diff,from,stream,input;diff,custom,read,diff,from,stream,input,in,throws,ioexception
