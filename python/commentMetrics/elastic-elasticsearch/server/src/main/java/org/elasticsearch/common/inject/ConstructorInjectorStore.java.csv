commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;5;;@Override protected ConstructorInjector<?> create(TypeLiteral<?> type, Errors errors) throws ErrorsException {     return createConstructor(type, errors). }
true;public;2;4;/**  * Returns a new complete constructor injector with injection listeners registered.  */ ;/**  * Returns a new complete constructor injector with injection listeners registered.  */ // the ConstructorInjector type always agrees with the passed type @SuppressWarnings("unchecked") public <T> ConstructorInjector<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException {     return (ConstructorInjector<T>) cache.get(key, errors). }
false;private;2;23;;private <T> ConstructorInjector<T> createConstructor(TypeLiteral<T> type, Errors errors) throws ErrorsException {     int numErrorsBefore = errors.size().     InjectionPoint injectionPoint.     try {         injectionPoint = InjectionPoint.forConstructorOf(type).     } catch (ConfigurationException e) {         errors.merge(e.getErrorMessages()).         throw errors.toException().     }     SingleParameterInjector<?>[] constructorParameterInjectors = injector.getParametersInjectors(injectionPoint.getDependencies(), errors).     MembersInjectorImpl<T> membersInjector = injector.membersInjectorStore.get(type, errors).     ConstructionProxyFactory<T> factory = new DefaultConstructionProxyFactory<>(injectionPoint).     errors.throwIfNewErrors(numErrorsBefore).     return new ConstructorInjector<>(membersInjector.getInjectionPoints(), factory.create(), constructorParameterInjectors, membersInjector). }
