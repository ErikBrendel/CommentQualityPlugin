commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;T get(Version version).
false;;2;1;;void put(Version version, T t).
false;;0;1;;Collection<T> values().
false;public,static;1;12;;public static <T> PreBuiltCache<T> getCache(CachingStrategy cachingStrategy) {     switch(cachingStrategy) {         case ONE:             return new PreBuiltCacheStrategyOne<>().         case LUCENE:             return new PreBuiltCacheStrategyLucene<>().         case ELASTICSEARCH:             return new PreBuiltCacheStrategyElasticsearch<>().         default:             throw new ElasticsearchException("No action configured for caching strategy[" + cachingStrategy + "]").     } }
false;public;1;4;;@Override public T get(Version version) {     return model. }
false;public;2;4;;@Override public void put(Version version, T model) {     this.model = model. }
false;public;0;4;;@Override public Collection<T> values() {     return model == null ? Collections.emptySet() : Collections.singleton(model). }
false;public;1;4;;@Override public T get(Version version) {     return mapModel.get(version). }
false;public;2;4;;@Override public void put(Version version, T model) {     mapModel.put(version, model). }
false;public;0;4;;@Override public Collection<T> values() {     return mapModel.values(). }
false;public;1;4;;@Override public T get(Version version) {     return mapModel.get(version.luceneVersion). }
false;public;2;4;;@Override public void put(org.elasticsearch.Version version, T model) {     mapModel.put(version.luceneVersion, model). }
false;public;0;4;;@Override public Collection<T> values() {     return mapModel.values(). }
