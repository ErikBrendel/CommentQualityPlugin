commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;25;;@Override protected void execute(Terminal terminal, OptionSet options) throws Exception {     final Map<String, String> settings = new HashMap<>().     for (final KeyValuePair kvp : settingOption.values(options)) {         if (kvp.value.isEmpty()) {             throw new UserException(ExitCodes.USAGE, "setting [" + kvp.key + "] must not be empty").         }         if (settings.containsKey(kvp.key)) {             final String message = String.format(Locale.ROOT, "setting [%s] already set, saw [%s] and [%s]", kvp.key, settings.get(kvp.key), kvp.value).             throw new UserException(ExitCodes.USAGE, message).         }         settings.put(kvp.key, kvp.value).     }     putSystemPropertyIfSettingIsMissing(settings, "path.data", "es.path.data").     putSystemPropertyIfSettingIsMissing(settings, "path.home", "es.path.home").     putSystemPropertyIfSettingIsMissing(settings, "path.logs", "es.path.logs").     execute(terminal, options, createEnv(settings)). }
true;protected;1;10;/**  * Create an {@link Environment} for the command to use. Overrideable for tests.  */ ;/**  * Create an {@link Environment} for the command to use. Overrideable for tests.  */ protected Environment createEnv(final Map<String, String> settings) throws UserException {     final String esPathConf = System.getProperty("es.path.conf").     if (esPathConf == null) {         throw new UserException(ExitCodes.CONFIG, "the system property [es.path.conf] must be set").     }     return InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, settings, getConfigPath(esPathConf), // HOSTNAME is set by elasticsearch-env and elasticsearch-env.bat so it is always available     () -> System.getenv("HOSTNAME")). }
false;private,static;1;4;;@SuppressForbidden(reason = "need path to construct environment") private static Path getConfigPath(final String pathConf) {     return Paths.get(pathConf). }
true;private,static;3;17;/**  * Ensure the given setting exists, reading it from system properties if not already set.  */ ;/**  * Ensure the given setting exists, reading it from system properties if not already set.  */ private static void putSystemPropertyIfSettingIsMissing(final Map<String, String> settings, final String setting, final String key) {     final String value = System.getProperty(key).     if (value != null) {         if (settings.containsKey(setting)) {             final String message = String.format(Locale.ROOT, "duplicate setting [%s] found via command-line [%s] and system property [%s]", setting, settings.get(setting), value).             throw new IllegalArgumentException(message).         } else {             settings.put(setting, value).         }     } }
true;protected,abstract;3;1;/**  * Execute the command with the initialized {@link Environment}.  */ ;/**  * Execute the command with the initialized {@link Environment}.  */ protected abstract void execute(Terminal terminal, OptionSet options, Environment env) throws Exception.
