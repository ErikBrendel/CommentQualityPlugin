commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(this.nodeId).     out.writeString(this.nodeName).     out.writeString(this.path).     out.writeVLong(this.totalBytes).     out.writeVLong(this.freeBytes). }
false;private,static;1;3;;private static double truncatePercent(double pct) {     return Math.round(pct * 10.0) / 10.0. }
false;;1;9;;XContentBuilder toShortXContent(XContentBuilder builder) throws IOException {     builder.field("path", this.path).     builder.humanReadableField("total_bytes", "total", new ByteSizeValue(this.totalBytes)).     builder.humanReadableField("used_bytes", "used", new ByteSizeValue(this.getUsedBytes())).     builder.humanReadableField("free_bytes", "free", new ByteSizeValue(this.freeBytes)).     builder.field("free_disk_percent", truncatePercent(this.getFreeDiskAsPercentage())).     builder.field("used_disk_percent", truncatePercent(this.getUsedDiskAsPercentage())).     return builder. }
false;public;2;6;;public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("node_id", this.nodeId).     builder.field("node_name", this.nodeName).     builder = toShortXContent(builder).     return builder. }
false;public;0;3;;public String getNodeId() {     return nodeId. }
false;public;0;3;;public String getNodeName() {     return nodeName. }
false;public;0;3;;public String getPath() {     return path. }
false;public;0;8;;public double getFreeDiskAsPercentage() {     // numbers for the total bytes, it's as if we don't know disk usage.     if (totalBytes == 0) {         return 100.0.     }     return 100.0 * ((double) freeBytes / totalBytes). }
false;public;0;3;;public double getUsedDiskAsPercentage() {     return 100.0 - getFreeDiskAsPercentage(). }
false;public;0;3;;public long getFreeBytes() {     return freeBytes. }
false;public;0;3;;public long getTotalBytes() {     return totalBytes. }
false;public;0;3;;public long getUsedBytes() {     return getTotalBytes() - getFreeBytes(). }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     DiskUsage other = (DiskUsage) o.     return Objects.equals(nodeId, other.nodeId) && Objects.equals(nodeName, other.nodeName) && Objects.equals(totalBytes, other.totalBytes) && Objects.equals(freeBytes, other.freeBytes). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(nodeId, nodeName, path, totalBytes, freeBytes). }
false;public;0;5;;@Override public String toString() {     return "[" + nodeId + "][" + nodeName + "][" + path + "] free: " + new ByteSizeValue(getFreeBytes()) + "[" + Strings.format1Decimals(getFreeDiskAsPercentage(), "%") + "]". }
