commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The index name of the action.  */ ;/**  * The index name of the action.  */ public String getIndex() {     return this.index. }
true;public;0;4;/**  * The type of the action.  *  * @deprecated Types are in the process of being removed.  */ ;/**  * The type of the action.  *  * @deprecated Types are in the process of being removed.  */ @Deprecated public String getType() {     return type. }
true;public;0;3;/**  * The id of the action.  */ ;/**  * The id of the action.  */ public String getId() {     return id. }
true;public;0;3;/**  * The failure cause.  */ ;/**  * The failure cause.  */ public Exception getCause() {     return this.cause. }
false;public,static;1;5;;public static Failure readFailure(StreamInput in) throws IOException {     Failure failure = new Failure().     failure.readFrom(in).     return failure. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     index = in.readString().     type = in.readOptionalString().     id = in.readString().     cause = in.readException(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(index).     out.writeOptionalString(type).     out.writeString(id).     out.writeException(cause). }
false;public;0;3;;public MultiTermVectorsItemResponse[] getResponses() {     return this.responses. }
false;public;0;4;;@Override public Iterator<MultiTermVectorsItemResponse> iterator() {     return Arrays.stream(responses).iterator(). }
false;public;2;22;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.startArray(Fields.DOCS).     for (MultiTermVectorsItemResponse response : responses) {         if (response.isFailed()) {             builder.startObject().             Failure failure = response.getFailure().             builder.field(Fields._INDEX, failure.getIndex()).             builder.field(Fields._TYPE, failure.getType()).             builder.field(Fields._ID, failure.getId()).             ElasticsearchException.generateFailureXContent(builder, params, failure.getCause(), true).             builder.endObject().         } else {             TermVectorsResponse getResponse = response.getResponse().             getResponse.toXContent(builder, params).         }     }     builder.endArray().     builder.endObject().     return builder. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     responses = new MultiTermVectorsItemResponse[in.readVInt()].     for (int i = 0. i < responses.length. i++) {         responses[i] = MultiTermVectorsItemResponse.readItemResponse(in).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(responses.length).     for (MultiTermVectorsItemResponse response : responses) {         response.writeTo(out).     } }
