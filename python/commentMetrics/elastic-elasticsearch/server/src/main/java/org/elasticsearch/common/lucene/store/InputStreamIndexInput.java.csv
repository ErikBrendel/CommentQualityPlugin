commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long actualSizeToRead() {     return actualSizeToRead. }
false;public;3;23;;@Override public int read(byte[] b, int off, int len) throws IOException {     if (b == null) {         throw new NullPointerException().     } else if (off < 0 || len < 0 || len > b.length - off) {         throw new IndexOutOfBoundsException().     }     if (indexInput.getFilePointer() >= indexInput.length()) {         return -1.     }     if (indexInput.getFilePointer() + len > indexInput.length()) {         len = (int) (indexInput.length() - indexInput.getFilePointer()).     }     if (counter + len > limit) {         len = (int) (limit - counter).     }     if (len <= 0) {         return -1.     }     indexInput.readBytes(b, off, len, false).     counter += len.     return len. }
false;public;0;7;;@Override public int read() throws IOException {     if (counter++ >= limit) {         return -1.     }     return (indexInput.getFilePointer() < indexInput.length()) ? (indexInput.readByte() & 0xff) : -1. }
false;public;0;4;;@Override public boolean markSupported() {     return true. }
false;public,synchronized;1;5;;@Override public synchronized void mark(int readlimit) {     markPointer = indexInput.getFilePointer().     markCounter = counter. }
false;public,synchronized;0;5;;@Override public synchronized void reset() throws IOException {     indexInput.seek(markPointer).     counter = markCounter. }
