commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     writeCoordinateTo(center, out).     out.writeDouble(radius).     unit.writeTo(out). }
true;public;1;4;/**  * Set the center of the circle  *  * @param center coordinate of the circles center  * @return this  */ ;/**  * Set the center of the circle  *  * @param center coordinate of the circles center  * @return this  */ public CircleBuilder center(Coordinate center) {     this.center = center.     return this. }
true;public;2;3;/**  * set the center of the circle  * @param lon longitude of the center  * @param lat latitude of the center  * @return this  */ ;/**  * set the center of the circle  * @param lon longitude of the center  * @param lat latitude of the center  * @return this  */ public CircleBuilder center(double lon, double lat) {     return center(new Coordinate(lon, lat)). }
true;public;0;3;/**  * Get the center of the circle  */ ;/**  * Get the center of the circle  */ public Coordinate center() {     return center. }
true;public;1;3;/**  * Set the radius of the circle. The String value will be parsed by {@link DistanceUnit}  * @param radius Value and unit of the circle combined in a string  * @return this  */ ;/**  * Set the radius of the circle. The String value will be parsed by {@link DistanceUnit}  * @param radius Value and unit of the circle combined in a string  * @return this  */ public CircleBuilder radius(String radius) {     return radius(DistanceUnit.Distance.parseDistance(radius)). }
true;public;1;3;/**  * Set the radius of the circle  * @param radius radius of the circle (see {@link org.elasticsearch.common.unit.DistanceUnit.Distance})  * @return this  */ ;/**  * Set the radius of the circle  * @param radius radius of the circle (see {@link org.elasticsearch.common.unit.DistanceUnit.Distance})  * @return this  */ public CircleBuilder radius(Distance radius) {     return radius(radius.value, radius.unit). }
true;public;2;3;/**  * Set the radius of the circle  * @param radius value of the circles radius  * @param unit unit name of the radius value (see {@link DistanceUnit})  * @return this  */ ;/**  * Set the radius of the circle  * @param radius value of the circles radius  * @param unit unit name of the radius value (see {@link DistanceUnit})  * @return this  */ public CircleBuilder radius(double radius, String unit) {     return radius(radius, DistanceUnit.fromString(unit)). }
true;public;2;5;/**  * Set the radius of the circle  * @param radius value of the circles radius  * @param unit unit of the radius value (see {@link DistanceUnit})  * @return this  */ ;/**  * Set the radius of the circle  * @param radius value of the circles radius  * @param unit unit of the radius value (see {@link DistanceUnit})  * @return this  */ public CircleBuilder radius(double radius, DistanceUnit unit) {     this.unit = unit.     this.radius = radius.     return this. }
true;public;0;3;/**  * Get the radius of the circle without unit  */ ;/**  * Get the radius of the circle without unit  */ public double radius() {     return this.radius. }
true;public;0;3;/**  * Get the radius unit of the circle  */ ;/**  * Get the radius unit of the circle  */ public DistanceUnit unit() {     return this.unit. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ShapeParser.FIELD_TYPE.getPreferredName(), TYPE.shapeName()).     builder.field(FIELD_RADIUS.getPreferredName(), unit.toString(radius)).     builder.field(ShapeParser.FIELD_COORDINATES.getPreferredName()).     toXContent(builder, center).     return builder.endObject(). }
false;public;0;4;;@Override public Circle buildS4J() {     return SPATIAL_CONTEXT.makeCircle(center.x, center.y, 360 * radius / unit.getEarthCircumference()). }
false;public;0;4;;@Override public org.elasticsearch.geo.geometry.Circle buildGeometry() {     throw new UnsupportedOperationException("CIRCLE geometry is not supported"). }
false;public;0;4;;@Override public GeoShapeType type() {     return TYPE. }
false;public;0;4;;@Override public String toWKT() {     throw new UnsupportedOperationException("The WKT spec does not support CIRCLE geometry"). }
false;public;0;3;;public int numDimensions() {     return Double.isNaN(center.z) ? 2 : 3. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(center, radius, unit.ordinal()). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     CircleBuilder other = (CircleBuilder) obj.     return Objects.equals(center, other.center) && Objects.equals(radius, other.radius) && Objects.equals(unit.ordinal(), other.unit.ordinal()). }
