commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int id() {     return this.id. }
false;public;0;3;;public String uuid() {     return uuid. }
false;public;0;3;;public String description() {     return this.description. }
false;public;0;3;;public RestStatus status() {     return this.status. }
false;public;0;3;;public EnumSet<ClusterBlockLevel> levels() {     return this.levels. }
false;public;1;8;;public boolean contains(ClusterBlockLevel level) {     for (ClusterBlockLevel testLevel : levels) {         if (testLevel == level) {             return true.         }     }     return false. }
true;public;0;3;/**  * Should operations get into retry state if this block is present.  */ ;/**  * Should operations get into retry state if this block is present.  */ public boolean retryable() {     return this.retryable. }
true;public;0;3;/**  * Should global state persistence be disabled when this block is present. Note,  * only relevant for global blocks.  */ ;/**  * Should global state persistence be disabled when this block is present. Note,  * only relevant for global blocks.  */ public boolean disableStatePersistence() {     return this.disableStatePersistence. }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(Integer.toString(id)).     if (uuid != null) {         builder.field("uuid", uuid).     }     builder.field("description", description).     builder.field("retryable", retryable).     if (disableStatePersistence) {         builder.field("disable_state_persistence", disableStatePersistence).     }     builder.startArray("levels").     for (ClusterBlockLevel level : levels) {         builder.value(level.name().toLowerCase(Locale.ROOT)).     }     builder.endArray().     builder.endObject().     return builder. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(id).     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         out.writeOptionalString(uuid).     }     out.writeString(description).     out.writeVInt(levels.size()).     for (ClusterBlockLevel level : levels) {         out.writeEnum(level).     }     out.writeBoolean(retryable).     out.writeBoolean(disableStatePersistence).     RestStatus.writeTo(out, status).     out.writeBoolean(allowReleaseResources). }
false;public;0;15;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     sb.append(id).append(",").     if (uuid != null) {         sb.append(uuid).append(',').     }     sb.append(description).append(", blocks ").     String delimiter = "".     for (ClusterBlockLevel level : levels) {         sb.append(delimiter).append(level.name()).         delimiter = ",".     }     return sb.toString(). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final ClusterBlock that = (ClusterBlock) o.     return id == that.id && Objects.equals(uuid, that.uuid). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, uuid). }
false;public;0;3;;public boolean isAllowReleaseResources() {     return allowReleaseResources. }
