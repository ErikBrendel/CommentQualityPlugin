# id;timestamp;commentText;codeText;commentWords;codeWords
Retry -> public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,                             ActionListener<BulkResponse> listener, Settings settings);1524684173;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception and delegates results to the_provided listener. Retries will be scheduled using the class's thread pool._@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param listener A listener that is invoked when the bulk request finishes or completes with an exception. The listener is not_@param settings settings;public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,_                            ActionListener<BulkResponse> listener, Settings settings) {_        RetryHandler r = new RetryHandler(retryOnThrowable, backoffPolicy, consumer, listener, settings, scheduler)__        r.execute(bulkRequest)__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,and,delegates,results,to,the,provided,listener,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,listener,a,listener,that,is,invoked,when,the,bulk,request,finishes,or,completes,with,an,exception,the,listener,is,not,param,settings,settings;public,void,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,action,listener,bulk,response,listener,settings,settings,retry,handler,r,new,retry,handler,retry,on,throwable,backoff,policy,consumer,listener,settings,scheduler,r,execute,bulk,request
Retry -> public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,                             ActionListener<BulkResponse> listener, Settings settings);1526029249;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception and delegates results to the_provided listener. Retries will be scheduled using the class's thread pool._@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param listener A listener that is invoked when the bulk request finishes or completes with an exception. The listener is not_@param settings settings;public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,_                            ActionListener<BulkResponse> listener, Settings settings) {_        RetryHandler r = new RetryHandler(backoffPolicy, consumer, listener, settings, scheduler)__        r.execute(bulkRequest)__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,and,delegates,results,to,the,provided,listener,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,listener,a,listener,that,is,invoked,when,the,bulk,request,finishes,or,completes,with,an,exception,the,listener,is,not,param,settings,settings;public,void,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,action,listener,bulk,response,listener,settings,settings,retry,handler,r,new,retry,handler,backoff,policy,consumer,listener,settings,scheduler,r,execute,bulk,request
Retry -> public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,                                                        BulkRequest bulkRequest, Settings settings);1524684173;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception. Retries will be scheduled using_the class's thread pool.__@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param settings settings_@return a future representing the bulk response returned by the client.;public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,_                                                       BulkRequest bulkRequest, Settings settings) {_        PlainActionFuture<BulkResponse> future = PlainActionFuture.newFuture()__        withBackoff(consumer, bulkRequest, future, settings)__        return future__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,settings,settings,return,a,future,representing,the,bulk,response,returned,by,the,client;public,plain,action,future,bulk,response,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,settings,settings,plain,action,future,bulk,response,future,plain,action,future,new,future,with,backoff,consumer,bulk,request,future,settings,return,future
Retry -> public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,                                                        BulkRequest bulkRequest, Settings settings);1526029249;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception. Retries will be scheduled using_the class's thread pool.__@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param settings settings_@return a future representing the bulk response returned by the client.;public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,_                                                       BulkRequest bulkRequest, Settings settings) {_        PlainActionFuture<BulkResponse> future = PlainActionFuture.newFuture()__        withBackoff(consumer, bulkRequest, future, settings)__        return future__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,settings,settings,return,a,future,representing,the,bulk,response,returned,by,the,client;public,plain,action,future,bulk,response,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,settings,settings,plain,action,future,bulk,response,future,plain,action,future,new,future,with,backoff,consumer,bulk,request,future,settings,return,future
Retry -> public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,                                                        BulkRequest bulkRequest);1537806831;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception. Retries will be scheduled using_the class's thread pool.__@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@return a future representing the bulk response returned by the client.;public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,_                                                       BulkRequest bulkRequest) {_        PlainActionFuture<BulkResponse> future = PlainActionFuture.newFuture()__        withBackoff(consumer, bulkRequest, future)__        return future__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,return,a,future,representing,the,bulk,response,returned,by,the,client;public,plain,action,future,bulk,response,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,plain,action,future,bulk,response,future,plain,action,future,new,future,with,backoff,consumer,bulk,request,future,return,future
Retry -> public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,                                                        BulkRequest bulkRequest);1548953505;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception. Retries will be scheduled using_the class's thread pool.__@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@return a future representing the bulk response returned by the client.;public PlainActionFuture<BulkResponse> withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer,_                                                       BulkRequest bulkRequest) {_        PlainActionFuture<BulkResponse> future = PlainActionFuture.newFuture()__        withBackoff(consumer, bulkRequest, future)__        return future__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,return,a,future,representing,the,bulk,response,returned,by,the,client;public,plain,action,future,bulk,response,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,plain,action,future,bulk,response,future,plain,action,future,new,future,with,backoff,consumer,bulk,request,future,return,future
Retry -> public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,                             ActionListener<BulkResponse> listener);1537806831;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception and delegates results to the_provided listener. Retries will be scheduled using the class's thread pool._@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param listener A listener that is invoked when the bulk request finishes or completes with an exception. The listener is not;public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,_                            ActionListener<BulkResponse> listener) {_        RetryHandler r = new RetryHandler(backoffPolicy, consumer, listener, scheduler)__        r.execute(bulkRequest)__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,and,delegates,results,to,the,provided,listener,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,listener,a,listener,that,is,invoked,when,the,bulk,request,finishes,or,completes,with,an,exception,the,listener,is,not;public,void,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,action,listener,bulk,response,listener,retry,handler,r,new,retry,handler,backoff,policy,consumer,listener,scheduler,r,execute,bulk,request
Retry -> public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,                             ActionListener<BulkResponse> listener);1548953505;Invokes #accept(BulkRequest, ActionListener). Backs off on the provided exception and delegates results to the_provided listener. Retries will be scheduled using the class's thread pool._@param consumer The consumer to which apply the request and listener_@param bulkRequest The bulk request that should be executed._@param listener A listener that is invoked when the bulk request finishes or completes with an exception. The listener is not;public void withBackoff(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, BulkRequest bulkRequest,_                            ActionListener<BulkResponse> listener) {_        RetryHandler r = new RetryHandler(backoffPolicy, consumer, listener, scheduler)__        r.execute(bulkRequest)__    };invokes,accept,bulk,request,action,listener,backs,off,on,the,provided,exception,and,delegates,results,to,the,provided,listener,retries,will,be,scheduled,using,the,class,s,thread,pool,param,consumer,the,consumer,to,which,apply,the,request,and,listener,param,bulk,request,the,bulk,request,that,should,be,executed,param,listener,a,listener,that,is,invoked,when,the,bulk,request,finishes,or,completes,with,an,exception,the,listener,is,not;public,void,with,backoff,bi,consumer,bulk,request,action,listener,bulk,response,consumer,bulk,request,bulk,request,action,listener,bulk,response,listener,retry,handler,r,new,retry,handler,backoff,policy,consumer,listener,scheduler,r,execute,bulk,request
