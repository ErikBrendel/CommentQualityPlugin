# id;timestamp;commentText;codeText;commentWords;codeWords
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public void afterLoad(TermsEnum termsEnum, long actualUsed);1524684173;Adjust the circuit breaker now that terms have been loaded, getting_the actual used either from the parameter (if estimation worked for_the entire set), or from the TermsEnum if it has been wrapped in a_RamAccountingTermsEnum.__@param termsEnum  terms that were loaded_@param actualUsed actual field data memory usage;@Override_        public void afterLoad(TermsEnum termsEnum, long actualUsed) {_            if (termsEnum instanceof RamAccountingTermsEnum) {_                estimatedBytes = ((RamAccountingTermsEnum) termsEnum).getTotalBytes()__            }_            breaker.addWithoutBreaking(-(estimatedBytes - actualUsed))__        };adjust,the,circuit,breaker,now,that,terms,have,been,loaded,getting,the,actual,used,either,from,the,parameter,if,estimation,worked,for,the,entire,set,or,from,the,terms,enum,if,it,has,been,wrapped,in,a,ram,accounting,terms,enum,param,terms,enum,terms,that,were,loaded,param,actual,used,actual,field,data,memory,usage;override,public,void,after,load,terms,enum,terms,enum,long,actual,used,if,terms,enum,instanceof,ram,accounting,terms,enum,estimated,bytes,ram,accounting,terms,enum,terms,enum,get,total,bytes,breaker,add,without,breaking,estimated,bytes,actual,used
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public void afterLoad(TermsEnum termsEnum, long actualUsed);1528762805;Adjust the circuit breaker now that terms have been loaded, getting_the actual used either from the parameter (if estimation worked for_the entire set), or from the TermsEnum if it has been wrapped in a_RamAccountingTermsEnum.__@param termsEnum  terms that were loaded_@param actualUsed actual field data memory usage;@Override_        public void afterLoad(TermsEnum termsEnum, long actualUsed) {_            if (termsEnum instanceof RamAccountingTermsEnum) {_                estimatedBytes = ((RamAccountingTermsEnum) termsEnum).getTotalBytes()__            }_            breaker.addWithoutBreaking(-(estimatedBytes - actualUsed))__        };adjust,the,circuit,breaker,now,that,terms,have,been,loaded,getting,the,actual,used,either,from,the,parameter,if,estimation,worked,for,the,entire,set,or,from,the,terms,enum,if,it,has,been,wrapped,in,a,ram,accounting,terms,enum,param,terms,enum,terms,that,were,loaded,param,actual,used,actual,field,data,memory,usage;override,public,void,after,load,terms,enum,terms,enum,long,actual,used,if,terms,enum,instanceof,ram,accounting,terms,enum,estimated,bytes,ram,accounting,terms,enum,terms,enum,get,total,bytes,breaker,add,without,breaking,estimated,bytes,actual,used
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public void afterLoad(TermsEnum termsEnum, long actualUsed);1540583181;Adjust the circuit breaker now that terms have been loaded, getting_the actual used either from the parameter (if estimation worked for_the entire set), or from the TermsEnum if it has been wrapped in a_RamAccountingTermsEnum.__@param termsEnum  terms that were loaded_@param actualUsed actual field data memory usage;@Override_        public void afterLoad(TermsEnum termsEnum, long actualUsed) {_            if (termsEnum instanceof RamAccountingTermsEnum) {_                estimatedBytes = ((RamAccountingTermsEnum) termsEnum).getTotalBytes()__            }_            breaker.addWithoutBreaking(-(estimatedBytes - actualUsed))__        };adjust,the,circuit,breaker,now,that,terms,have,been,loaded,getting,the,actual,used,either,from,the,parameter,if,estimation,worked,for,the,entire,set,or,from,the,terms,enum,if,it,has,been,wrapped,in,a,ram,accounting,terms,enum,param,terms,enum,terms,that,were,loaded,param,actual,used,actual,field,data,memory,usage;override,public,void,after,load,terms,enum,terms,enum,long,actual,used,if,terms,enum,instanceof,ram,accounting,terms,enum,estimated,bytes,ram,accounting,terms,enum,terms,enum,get,total,bytes,breaker,add,without,breaking,estimated,bytes,actual,used
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public TermsEnum beforeLoad(Terms terms) throws IOException;1524684173;Determine whether the BlockTreeTermsReader.FieldReader can be used_for estimating the field data, adding the estimate to the circuit_breaker if it can, otherwise wrapping the terms in a_RamAccountingTermsEnum to be estimated on a per-term basis.__@param terms terms to be estimated_@return A possibly wrapped TermsEnum for the terms;@Override_        public TermsEnum beforeLoad(Terms terms) throws IOException {_            LeafReader reader = context.reader()___            TermsEnum iterator = terms.iterator()__            TermsEnum filteredIterator = filter(terms, iterator, reader)__            final boolean filtered = iterator != filteredIterator__            iterator = filteredIterator___            if (filtered) {_                if (logger.isTraceEnabled()) {_                    logger.trace("Filter exists, can't circuit break normally, using RamAccountingTermsEnum")__                }_                return new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__            } else {_                estimatedBytes = this.estimateStringFieldData()__                _                if (estimatedBytes == 0) {_                    iterator = new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__                } else {_                    breaker.addEstimateBytesAndMaybeBreak(estimatedBytes, fieldName)__                }__                return iterator__            }_        };determine,whether,the,block,tree,terms,reader,field,reader,can,be,used,for,estimating,the,field,data,adding,the,estimate,to,the,circuit,breaker,if,it,can,otherwise,wrapping,the,terms,in,a,ram,accounting,terms,enum,to,be,estimated,on,a,per,term,basis,param,terms,terms,to,be,estimated,return,a,possibly,wrapped,terms,enum,for,the,terms;override,public,terms,enum,before,load,terms,terms,throws,ioexception,leaf,reader,reader,context,reader,terms,enum,iterator,terms,iterator,terms,enum,filtered,iterator,filter,terms,iterator,reader,final,boolean,filtered,iterator,filtered,iterator,iterator,filtered,iterator,if,filtered,if,logger,is,trace,enabled,logger,trace,filter,exists,can,t,circuit,break,normally,using,ram,accounting,terms,enum,return,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,estimated,bytes,this,estimate,string,field,data,if,estimated,bytes,0,iterator,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,breaker,add,estimate,bytes,and,maybe,break,estimated,bytes,field,name,return,iterator
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public TermsEnum beforeLoad(Terms terms) throws IOException;1528762805;Determine whether the BlockTreeTermsReader.FieldReader can be used_for estimating the field data, adding the estimate to the circuit_breaker if it can, otherwise wrapping the terms in a_RamAccountingTermsEnum to be estimated on a per-term basis.__@param terms terms to be estimated_@return A possibly wrapped TermsEnum for the terms;@Override_        public TermsEnum beforeLoad(Terms terms) throws IOException {_            LeafReader reader = context.reader()___            TermsEnum iterator = terms.iterator()__            TermsEnum filteredIterator = filter(terms, iterator, reader)__            final boolean filtered = iterator != filteredIterator__            iterator = filteredIterator___            if (filtered) {_                if (logger.isTraceEnabled()) {_                    logger.trace("Filter exists, can't circuit break normally, using RamAccountingTermsEnum")__                }_                return new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__            } else {_                estimatedBytes = this.estimateStringFieldData()__                _                if (estimatedBytes == 0) {_                    iterator = new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__                } else {_                    breaker.addEstimateBytesAndMaybeBreak(estimatedBytes, fieldName)__                }__                return iterator__            }_        };determine,whether,the,block,tree,terms,reader,field,reader,can,be,used,for,estimating,the,field,data,adding,the,estimate,to,the,circuit,breaker,if,it,can,otherwise,wrapping,the,terms,in,a,ram,accounting,terms,enum,to,be,estimated,on,a,per,term,basis,param,terms,terms,to,be,estimated,return,a,possibly,wrapped,terms,enum,for,the,terms;override,public,terms,enum,before,load,terms,terms,throws,ioexception,leaf,reader,reader,context,reader,terms,enum,iterator,terms,iterator,terms,enum,filtered,iterator,filter,terms,iterator,reader,final,boolean,filtered,iterator,filtered,iterator,iterator,filtered,iterator,if,filtered,if,logger,is,trace,enabled,logger,trace,filter,exists,can,t,circuit,break,normally,using,ram,accounting,terms,enum,return,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,estimated,bytes,this,estimate,string,field,data,if,estimated,bytes,0,iterator,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,breaker,add,estimate,bytes,and,maybe,break,estimated,bytes,field,name,return,iterator
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public TermsEnum beforeLoad(Terms terms) throws IOException;1540583181;Determine whether the BlockTreeTermsReader.FieldReader can be used_for estimating the field data, adding the estimate to the circuit_breaker if it can, otherwise wrapping the terms in a_RamAccountingTermsEnum to be estimated on a per-term basis.__@param terms terms to be estimated_@return A possibly wrapped TermsEnum for the terms;@Override_        public TermsEnum beforeLoad(Terms terms) throws IOException {_            LeafReader reader = context.reader()___            TermsEnum iterator = terms.iterator()__            TermsEnum filteredIterator = filter(terms, iterator, reader)__            final boolean filtered = iterator != filteredIterator__            iterator = filteredIterator___            if (filtered) {_                if (logger.isTraceEnabled()) {_                    logger.trace("Filter exists, can't circuit break normally, using RamAccountingTermsEnum")__                }_                return new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__            } else {_                estimatedBytes = this.estimateStringFieldData()__                _                if (estimatedBytes == 0) {_                    iterator = new RamAccountingTermsEnum(iterator, breaker, this, this.fieldName)__                } else {_                    breaker.addEstimateBytesAndMaybeBreak(estimatedBytes, fieldName)__                }__                return iterator__            }_        };determine,whether,the,block,tree,terms,reader,field,reader,can,be,used,for,estimating,the,field,data,adding,the,estimate,to,the,circuit,breaker,if,it,can,otherwise,wrapping,the,terms,in,a,ram,accounting,terms,enum,to,be,estimated,on,a,per,term,basis,param,terms,terms,to,be,estimated,return,a,possibly,wrapped,terms,enum,for,the,terms;override,public,terms,enum,before,load,terms,terms,throws,ioexception,leaf,reader,reader,context,reader,terms,enum,iterator,terms,iterator,terms,enum,filtered,iterator,filter,terms,iterator,reader,final,boolean,filtered,iterator,filtered,iterator,iterator,filtered,iterator,if,filtered,if,logger,is,trace,enabled,logger,trace,filter,exists,can,t,circuit,break,normally,using,ram,accounting,terms,enum,return,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,estimated,bytes,this,estimate,string,field,data,if,estimated,bytes,0,iterator,new,ram,accounting,terms,enum,iterator,breaker,this,this,field,name,else,breaker,add,estimate,bytes,and,maybe,break,estimated,bytes,field,name,return,iterator
PagedBytesIndexFieldData -> PagedBytesEstimator -> public void adjustForNoTerms(long actualUsed);1524684173;Adjust the breaker when no terms were actually loaded, but the field_data takes up space regardless. For instance, when ordinals are_used._@param actualUsed bytes actually used;public void adjustForNoTerms(long actualUsed) {_            breaker.addWithoutBreaking(actualUsed)__        };adjust,the,breaker,when,no,terms,were,actually,loaded,but,the,field,data,takes,up,space,regardless,for,instance,when,ordinals,are,used,param,actual,used,bytes,actually,used;public,void,adjust,for,no,terms,long,actual,used,breaker,add,without,breaking,actual,used
PagedBytesIndexFieldData -> PagedBytesEstimator -> public void adjustForNoTerms(long actualUsed);1528762805;Adjust the breaker when no terms were actually loaded, but the field_data takes up space regardless. For instance, when ordinals are_used._@param actualUsed bytes actually used;public void adjustForNoTerms(long actualUsed) {_            breaker.addWithoutBreaking(actualUsed)__        };adjust,the,breaker,when,no,terms,were,actually,loaded,but,the,field,data,takes,up,space,regardless,for,instance,when,ordinals,are,used,param,actual,used,bytes,actually,used;public,void,adjust,for,no,terms,long,actual,used,breaker,add,without,breaking,actual,used
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public long bytesPerValue(BytesRef term);1524684173;@return the number of bytes for the term based on the length and ordinal overhead;@Override_        public long bytesPerValue(BytesRef term) {_            if (term == null) {_                return 0__            }_            long bytes = term.length__            _            bytes += 64__            _            bytes = (long) ((double) bytes / 1.5) + 1__            return bytes__        };return,the,number,of,bytes,for,the,term,based,on,the,length,and,ordinal,overhead;override,public,long,bytes,per,value,bytes,ref,term,if,term,null,return,0,long,bytes,term,length,bytes,64,bytes,long,double,bytes,1,5,1,return,bytes
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public long bytesPerValue(BytesRef term);1528762805;@return the number of bytes for the term based on the length and ordinal overhead;@Override_        public long bytesPerValue(BytesRef term) {_            if (term == null) {_                return 0__            }_            long bytes = term.length__            _            bytes += 64__            _            bytes = (long) ((double) bytes / 1.5) + 1__            return bytes__        };return,the,number,of,bytes,for,the,term,based,on,the,length,and,ordinal,overhead;override,public,long,bytes,per,value,bytes,ref,term,if,term,null,return,0,long,bytes,term,length,bytes,64,bytes,long,double,bytes,1,5,1,return,bytes
PagedBytesIndexFieldData -> PagedBytesEstimator -> @Override         public long bytesPerValue(BytesRef term);1540583181;@return the number of bytes for the term based on the length and ordinal overhead;@Override_        public long bytesPerValue(BytesRef term) {_            if (term == null) {_                return 0__            }_            long bytes = term.length__            _            bytes += 64__            _            bytes = (long) ((double) bytes / 1.5) + 1__            return bytes__        };return,the,number,of,bytes,for,the,term,based,on,the,length,and,ordinal,overhead;override,public,long,bytes,per,value,bytes,ref,term,if,term,null,return,0,long,bytes,term,length,bytes,64,bytes,long,double,bytes,1,5,1,return,bytes
PagedBytesIndexFieldData -> PagedBytesEstimator -> public long estimateStringFieldData();1524684173;@return the estimate for loading the entire term set into field data, or 0 if unavailable;public long estimateStringFieldData() {_            try {_                LeafReader reader = context.reader()__                Terms terms = reader.terms(getFieldName())___                final Terms fieldTerms = reader.terms(getFieldName())___                if (fieldTerms instanceof FieldReader) {_                    final Stats stats = ((FieldReader) fieldTerms).getStats()__                    long totalTermBytes = stats.totalTermBytes__                    if (logger.isTraceEnabled()) {_                        logger.trace("totalTermBytes: {}, terms.size(): {}, terms.getSumDocFreq(): {}",_                                totalTermBytes, terms.size(), terms.getSumDocFreq())__                    }_                    long totalBytes = totalTermBytes + (2 * terms.size()) + (4 * terms.getSumDocFreq())__                    return totalBytes__                }_            } catch (Exception e) {_                logger.warn("Unable to estimate memory overhead", e)__            }_            return 0__        };return,the,estimate,for,loading,the,entire,term,set,into,field,data,or,0,if,unavailable;public,long,estimate,string,field,data,try,leaf,reader,reader,context,reader,terms,terms,reader,terms,get,field,name,final,terms,field,terms,reader,terms,get,field,name,if,field,terms,instanceof,field,reader,final,stats,stats,field,reader,field,terms,get,stats,long,total,term,bytes,stats,total,term,bytes,if,logger,is,trace,enabled,logger,trace,total,term,bytes,terms,size,terms,get,sum,doc,freq,total,term,bytes,terms,size,terms,get,sum,doc,freq,long,total,bytes,total,term,bytes,2,terms,size,4,terms,get,sum,doc,freq,return,total,bytes,catch,exception,e,logger,warn,unable,to,estimate,memory,overhead,e,return,0
PagedBytesIndexFieldData -> PagedBytesEstimator -> public long estimateStringFieldData();1528762805;@return the estimate for loading the entire term set into field data, or 0 if unavailable;public long estimateStringFieldData() {_            try {_                LeafReader reader = context.reader()__                Terms terms = reader.terms(getFieldName())___                final Terms fieldTerms = reader.terms(getFieldName())___                if (fieldTerms instanceof FieldReader) {_                    final Stats stats = ((FieldReader) fieldTerms).getStats()__                    long totalTermBytes = stats.totalTermBytes__                    if (logger.isTraceEnabled()) {_                        logger.trace("totalTermBytes: {}, terms.size(): {}, terms.getSumDocFreq(): {}",_                                totalTermBytes, terms.size(), terms.getSumDocFreq())__                    }_                    long totalBytes = totalTermBytes + (2 * terms.size()) + (4 * terms.getSumDocFreq())__                    return totalBytes__                }_            } catch (Exception e) {_                logger.warn("Unable to estimate memory overhead", e)__            }_            return 0__        };return,the,estimate,for,loading,the,entire,term,set,into,field,data,or,0,if,unavailable;public,long,estimate,string,field,data,try,leaf,reader,reader,context,reader,terms,terms,reader,terms,get,field,name,final,terms,field,terms,reader,terms,get,field,name,if,field,terms,instanceof,field,reader,final,stats,stats,field,reader,field,terms,get,stats,long,total,term,bytes,stats,total,term,bytes,if,logger,is,trace,enabled,logger,trace,total,term,bytes,terms,size,terms,get,sum,doc,freq,total,term,bytes,terms,size,terms,get,sum,doc,freq,long,total,bytes,total,term,bytes,2,terms,size,4,terms,get,sum,doc,freq,return,total,bytes,catch,exception,e,logger,warn,unable,to,estimate,memory,overhead,e,return,0
PagedBytesIndexFieldData -> PagedBytesEstimator -> public long estimateStringFieldData();1540583181;@return the estimate for loading the entire term set into field data, or 0 if unavailable;public long estimateStringFieldData() {_            try {_                LeafReader reader = context.reader()__                Terms terms = reader.terms(getFieldName())___                final Terms fieldTerms = reader.terms(getFieldName())___                if (fieldTerms instanceof FieldReader) {_                    final Stats stats = ((FieldReader) fieldTerms).getStats()__                    long totalTermBytes = stats.totalTermBytes__                    if (logger.isTraceEnabled()) {_                        logger.trace("totalTermBytes: {}, terms.size(): {}, terms.getSumDocFreq(): {}",_                                totalTermBytes, terms.size(), terms.getSumDocFreq())__                    }_                    long totalBytes = totalTermBytes + (2 * terms.size()) + (4 * terms.getSumDocFreq())__                    return totalBytes__                }_            } catch (Exception e) {_                logger.warn("Unable to estimate memory overhead", e)__            }_            return 0__        };return,the,estimate,for,loading,the,entire,term,set,into,field,data,or,0,if,unavailable;public,long,estimate,string,field,data,try,leaf,reader,reader,context,reader,terms,terms,reader,terms,get,field,name,final,terms,field,terms,reader,terms,get,field,name,if,field,terms,instanceof,field,reader,final,stats,stats,field,reader,field,terms,get,stats,long,total,term,bytes,stats,total,term,bytes,if,logger,is,trace,enabled,logger,trace,total,term,bytes,terms,size,terms,get,sum,doc,freq,total,term,bytes,terms,size,terms,get,sum,doc,freq,long,total,bytes,total,term,bytes,2,terms,size,4,terms,get,sum,doc,freq,return,total,bytes,catch,exception,e,logger,warn,unable,to,estimate,memory,overhead,e,return,0
