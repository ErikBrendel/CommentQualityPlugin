commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeList(sorts).     out.writeVInt(from).     out.writeOptionalVInt(size).     gapPolicy.writeTo(out). }
false;public;1;7;;public BucketSortPipelineAggregationBuilder from(int from) {     if (from < 0) {         throw new IllegalArgumentException("[" + FROM.getPreferredName() + "] must be a non-negative integer: [" + from + "]").     }     this.from = from.     return this. }
false;public;1;7;;public BucketSortPipelineAggregationBuilder size(Integer size) {     if (size != null && size <= 0) {         throw new IllegalArgumentException("[" + SIZE.getPreferredName() + "] must be a positive integer: [" + size + "]").     }     this.size = size.     return this. }
false;public;1;7;;public BucketSortPipelineAggregationBuilder gapPolicy(GapPolicy gapPolicy) {     if (gapPolicy == null) {         throw new IllegalArgumentException("[" + GAP_POLICY.getPreferredName() + "] must not be null: [" + name + "]").     }     this.gapPolicy = gapPolicy.     return this. }
false;protected;1;4;;@Override protected PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException {     return new BucketSortPipelineAggregator(name, sorts, from, size, gapPolicy, metaData). }
false;public;3;9;;@Override public void doValidate(AggregatorFactory<?> parent, Collection<AggregationBuilder> aggFactories, Collection<PipelineAggregationBuilder> pipelineAggregatoractories) {     if (sorts.isEmpty() && size == null && from == 0) {         throw new IllegalStateException("[" + name + "] is configured to perform nothing. Please set either of " + Arrays.asList(SearchSourceBuilder.SORT_FIELD.getPreferredName(), SIZE.getPreferredName(), FROM.getPreferredName()) + " to use " + NAME).     } }
false;protected;2;10;;@Override protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(SearchSourceBuilder.SORT_FIELD.getPreferredName(), sorts).     builder.field(FROM.getPreferredName(), from).     if (size != null) {         builder.field(SIZE.getPreferredName(), size).     }     builder.field(GAP_POLICY.getPreferredName(), gapPolicy).     return builder. }
false;public,static;2;3;;public static BucketSortPipelineAggregationBuilder parse(String reducerName, XContentParser parser) throws IOException {     return PARSER.parse(parser, reducerName). }
false;protected;0;4;;@Override protected boolean overrideBucketsPath() {     return true. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(sorts, from, size, gapPolicy). }
false;protected;1;8;;@Override protected boolean doEquals(Object obj) {     BucketSortPipelineAggregationBuilder other = (BucketSortPipelineAggregationBuilder) obj.     return Objects.equals(sorts, other.sorts) && Objects.equals(from, other.from) && Objects.equals(size, other.size) && Objects.equals(gapPolicy, other.gapPolicy). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
