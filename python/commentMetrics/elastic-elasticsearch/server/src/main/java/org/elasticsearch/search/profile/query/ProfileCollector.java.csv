commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the wrapped collector.  */ ;/**  * Return the wrapped collector.  */ public Collector getDelegate() {     return in. }
false;public;0;9;;@Override public ScoreMode scoreMode() {     final long start = System.nanoTime().     try {         return super.scoreMode().     } finally {         time += Math.max(1, System.nanoTime() - start).     } }
false;public;1;9;;@Override public void collect(int doc) throws IOException {     final long start = System.nanoTime().     try {         super.collect(doc).     } finally {         time += Math.max(1, System.nanoTime() - start).     } }
false;public;1;9;;@Override public void setScorer(Scorable scorer) throws IOException {     final long start = System.nanoTime().     try {         super.setScorer(scorer).     } finally {         time += Math.max(1, System.nanoTime() - start).     } }
false;public;1;32;;@Override public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {     final long start = System.nanoTime().     final LeafCollector inLeafCollector.     try {         inLeafCollector = super.getLeafCollector(context).     } finally {         time += Math.max(1, System.nanoTime() - start).     }     return new FilterLeafCollector(inLeafCollector) {          @Override         public void collect(int doc) throws IOException {             final long start = System.nanoTime().             try {                 super.collect(doc).             } finally {                 time += Math.max(1, System.nanoTime() - start).             }         }          @Override         public void setScorer(Scorable scorer) throws IOException {             final long start = System.nanoTime().             try {                 super.setScorer(scorer).             } finally {                 time += Math.max(1, System.nanoTime() - start).             }         }     }. }
true;public;0;3;/**  * Return the total time spent on this collector.  */ ;/**  * Return the total time spent on this collector.  */ public long getTime() {     return time. }
