# id;timestamp;commentText;codeText;commentWords;codeWords
Reconfigurator -> public VotingConfiguration reconfigure(Set<DiscoveryNode> liveNodes, Set<String> retiredNodeIds, VotingConfiguration currentConfig);1544081506;Compute an optimal configuration for the cluster.__@param liveNodes      The live nodes in the cluster. The optimal configuration prefers live nodes over non-live nodes as far as_possible._@param retiredNodeIds Nodes that are leaving the cluster and which should not appear in the configuration if possible. Nodes that are_retired and not in the current configuration will never appear in the resulting configuration_ this is useful_for shifting the vote in a 2-node cluster so one of the nodes can be restarted without harming availability._@param currentConfig  The current configuration. As far as possible, we prefer to keep the current config as-is._@return An optimal configuration, or leave the current configuration unchanged if the optimal configuration has no live quorum.;public VotingConfiguration reconfigure(Set<DiscoveryNode> liveNodes, Set<String> retiredNodeIds, VotingConfiguration currentConfig) {_        logger.trace("{} reconfiguring {} based on liveNodes={}, retiredNodeIds={}", this, currentConfig, liveNodes, retiredNodeIds)___        __        final Set<String> liveNodeIds = liveNodes.stream()_            .filter(DiscoveryNode::isMasterNode).map(DiscoveryNode::getId).collect(Collectors.toSet())__        final Set<String> liveInConfigIds = new TreeSet<>(currentConfig.getNodeIds())__        liveInConfigIds.retainAll(liveNodeIds)___        final Set<String> inConfigNotLiveIds = Sets.sortedDifference(currentConfig.getNodeIds(), liveInConfigIds)__        final Set<String> nonRetiredInConfigNotLiveIds = new TreeSet<>(inConfigNotLiveIds)__        nonRetiredInConfigNotLiveIds.removeAll(retiredNodeIds)___        final Set<String> nonRetiredInConfigLiveIds = new TreeSet<>(liveInConfigIds)__        nonRetiredInConfigLiveIds.removeAll(retiredNodeIds)___        final Set<String> nonRetiredLiveNotInConfigIds = Sets.sortedDifference(liveNodeIds, currentConfig.getNodeIds())__        nonRetiredLiveNotInConfigIds.removeAll(retiredNodeIds)___        _        final int targetSize___        final int nonRetiredLiveNodeCount = nonRetiredInConfigLiveIds.size() + nonRetiredLiveNotInConfigIds.size()__        final int nonRetiredConfigSize = nonRetiredInConfigLiveIds.size() + nonRetiredInConfigNotLiveIds.size()__        if (autoShrinkVotingConfiguration) {_            if (nonRetiredLiveNodeCount >= 3) {_                targetSize = roundDownToOdd(nonRetiredLiveNodeCount)__            } else {_                _                _                targetSize = nonRetiredConfigSize < 3 ? 1 : 3__            }_        } else {_            targetSize = Math.max(roundDownToOdd(nonRetiredLiveNodeCount), nonRetiredConfigSize)__        }__        _        final VotingConfiguration newConfig = new VotingConfiguration(_            _            Stream.of(nonRetiredInConfigLiveIds, nonRetiredLiveNotInConfigIds, nonRetiredInConfigNotLiveIds)_                .flatMap(Collection::stream).limit(targetSize).collect(Collectors.toSet()))___        if (newConfig.hasQuorum(liveNodeIds)) {_            return newConfig__        } else {_            _            return currentConfig__        }_    };compute,an,optimal,configuration,for,the,cluster,param,live,nodes,the,live,nodes,in,the,cluster,the,optimal,configuration,prefers,live,nodes,over,non,live,nodes,as,far,as,possible,param,retired,node,ids,nodes,that,are,leaving,the,cluster,and,which,should,not,appear,in,the,configuration,if,possible,nodes,that,are,retired,and,not,in,the,current,configuration,will,never,appear,in,the,resulting,configuration,this,is,useful,for,shifting,the,vote,in,a,2,node,cluster,so,one,of,the,nodes,can,be,restarted,without,harming,availability,param,current,config,the,current,configuration,as,far,as,possible,we,prefer,to,keep,the,current,config,as,is,return,an,optimal,configuration,or,leave,the,current,configuration,unchanged,if,the,optimal,configuration,has,no,live,quorum;public,voting,configuration,reconfigure,set,discovery,node,live,nodes,set,string,retired,node,ids,voting,configuration,current,config,logger,trace,reconfiguring,based,on,live,nodes,retired,node,ids,this,current,config,live,nodes,retired,node,ids,final,set,string,live,node,ids,live,nodes,stream,filter,discovery,node,is,master,node,map,discovery,node,get,id,collect,collectors,to,set,final,set,string,live,in,config,ids,new,tree,set,current,config,get,node,ids,live,in,config,ids,retain,all,live,node,ids,final,set,string,in,config,not,live,ids,sets,sorted,difference,current,config,get,node,ids,live,in,config,ids,final,set,string,non,retired,in,config,not,live,ids,new,tree,set,in,config,not,live,ids,non,retired,in,config,not,live,ids,remove,all,retired,node,ids,final,set,string,non,retired,in,config,live,ids,new,tree,set,live,in,config,ids,non,retired,in,config,live,ids,remove,all,retired,node,ids,final,set,string,non,retired,live,not,in,config,ids,sets,sorted,difference,live,node,ids,current,config,get,node,ids,non,retired,live,not,in,config,ids,remove,all,retired,node,ids,final,int,target,size,final,int,non,retired,live,node,count,non,retired,in,config,live,ids,size,non,retired,live,not,in,config,ids,size,final,int,non,retired,config,size,non,retired,in,config,live,ids,size,non,retired,in,config,not,live,ids,size,if,auto,shrink,voting,configuration,if,non,retired,live,node,count,3,target,size,round,down,to,odd,non,retired,live,node,count,else,target,size,non,retired,config,size,3,1,3,else,target,size,math,max,round,down,to,odd,non,retired,live,node,count,non,retired,config,size,final,voting,configuration,new,config,new,voting,configuration,stream,of,non,retired,in,config,live,ids,non,retired,live,not,in,config,ids,non,retired,in,config,not,live,ids,flat,map,collection,stream,limit,target,size,collect,collectors,to,set,if,new,config,has,quorum,live,node,ids,return,new,config,else,return,current,config
Reconfigurator -> public VotingConfiguration reconfigure(Set<DiscoveryNode> liveNodes, Set<String> retiredNodeIds, VotingConfiguration currentConfig);1544254415;Compute an optimal configuration for the cluster.__@param liveNodes      The live nodes in the cluster. The optimal configuration prefers live nodes over non-live nodes as far as_possible._@param retiredNodeIds Nodes that are leaving the cluster and which should not appear in the configuration if possible. Nodes that are_retired and not in the current configuration will never appear in the resulting configuration_ this is useful_for shifting the vote in a 2-node cluster so one of the nodes can be restarted without harming availability._@param currentConfig  The current configuration. As far as possible, we prefer to keep the current config as-is._@return An optimal configuration, or leave the current configuration unchanged if the optimal configuration has no live quorum.;public VotingConfiguration reconfigure(Set<DiscoveryNode> liveNodes, Set<String> retiredNodeIds, VotingConfiguration currentConfig) {_        assert liveNodes.stream().noneMatch(Coordinator::isZen1Node) : liveNodes__        logger.trace("{} reconfiguring {} based on liveNodes={}, retiredNodeIds={}", this, currentConfig, liveNodes, retiredNodeIds)___        __        final Set<String> liveNodeIds = liveNodes.stream()_            .filter(DiscoveryNode::isMasterNode).map(DiscoveryNode::getId).collect(Collectors.toSet())__        final Set<String> liveInConfigIds = new TreeSet<>(currentConfig.getNodeIds())__        liveInConfigIds.retainAll(liveNodeIds)___        final Set<String> inConfigNotLiveIds = Sets.sortedDifference(currentConfig.getNodeIds(), liveInConfigIds)__        final Set<String> nonRetiredInConfigNotLiveIds = new TreeSet<>(inConfigNotLiveIds)__        nonRetiredInConfigNotLiveIds.removeAll(retiredNodeIds)___        final Set<String> nonRetiredInConfigLiveIds = new TreeSet<>(liveInConfigIds)__        nonRetiredInConfigLiveIds.removeAll(retiredNodeIds)___        final Set<String> nonRetiredLiveNotInConfigIds = Sets.sortedDifference(liveNodeIds, currentConfig.getNodeIds())__        nonRetiredLiveNotInConfigIds.removeAll(retiredNodeIds)___        _        final int targetSize___        final int nonRetiredLiveNodeCount = nonRetiredInConfigLiveIds.size() + nonRetiredLiveNotInConfigIds.size()__        final int nonRetiredConfigSize = nonRetiredInConfigLiveIds.size() + nonRetiredInConfigNotLiveIds.size()__        if (autoShrinkVotingConfiguration) {_            if (nonRetiredLiveNodeCount >= 3) {_                targetSize = roundDownToOdd(nonRetiredLiveNodeCount)__            } else {_                _                _                targetSize = nonRetiredConfigSize < 3 ? 1 : 3__            }_        } else {_            targetSize = Math.max(roundDownToOdd(nonRetiredLiveNodeCount), nonRetiredConfigSize)__        }__        _        final VotingConfiguration newConfig = new VotingConfiguration(_            _            Stream.of(nonRetiredInConfigLiveIds, nonRetiredLiveNotInConfigIds, nonRetiredInConfigNotLiveIds)_                .flatMap(Collection::stream).limit(targetSize).collect(Collectors.toSet()))___        if (newConfig.hasQuorum(liveNodeIds)) {_            return newConfig__        } else {_            _            return currentConfig__        }_    };compute,an,optimal,configuration,for,the,cluster,param,live,nodes,the,live,nodes,in,the,cluster,the,optimal,configuration,prefers,live,nodes,over,non,live,nodes,as,far,as,possible,param,retired,node,ids,nodes,that,are,leaving,the,cluster,and,which,should,not,appear,in,the,configuration,if,possible,nodes,that,are,retired,and,not,in,the,current,configuration,will,never,appear,in,the,resulting,configuration,this,is,useful,for,shifting,the,vote,in,a,2,node,cluster,so,one,of,the,nodes,can,be,restarted,without,harming,availability,param,current,config,the,current,configuration,as,far,as,possible,we,prefer,to,keep,the,current,config,as,is,return,an,optimal,configuration,or,leave,the,current,configuration,unchanged,if,the,optimal,configuration,has,no,live,quorum;public,voting,configuration,reconfigure,set,discovery,node,live,nodes,set,string,retired,node,ids,voting,configuration,current,config,assert,live,nodes,stream,none,match,coordinator,is,zen1node,live,nodes,logger,trace,reconfiguring,based,on,live,nodes,retired,node,ids,this,current,config,live,nodes,retired,node,ids,final,set,string,live,node,ids,live,nodes,stream,filter,discovery,node,is,master,node,map,discovery,node,get,id,collect,collectors,to,set,final,set,string,live,in,config,ids,new,tree,set,current,config,get,node,ids,live,in,config,ids,retain,all,live,node,ids,final,set,string,in,config,not,live,ids,sets,sorted,difference,current,config,get,node,ids,live,in,config,ids,final,set,string,non,retired,in,config,not,live,ids,new,tree,set,in,config,not,live,ids,non,retired,in,config,not,live,ids,remove,all,retired,node,ids,final,set,string,non,retired,in,config,live,ids,new,tree,set,live,in,config,ids,non,retired,in,config,live,ids,remove,all,retired,node,ids,final,set,string,non,retired,live,not,in,config,ids,sets,sorted,difference,live,node,ids,current,config,get,node,ids,non,retired,live,not,in,config,ids,remove,all,retired,node,ids,final,int,target,size,final,int,non,retired,live,node,count,non,retired,in,config,live,ids,size,non,retired,live,not,in,config,ids,size,final,int,non,retired,config,size,non,retired,in,config,live,ids,size,non,retired,in,config,not,live,ids,size,if,auto,shrink,voting,configuration,if,non,retired,live,node,count,3,target,size,round,down,to,odd,non,retired,live,node,count,else,target,size,non,retired,config,size,3,1,3,else,target,size,math,max,round,down,to,odd,non,retired,live,node,count,non,retired,config,size,final,voting,configuration,new,config,new,voting,configuration,stream,of,non,retired,in,config,live,ids,non,retired,live,not,in,config,ids,non,retired,in,config,not,live,ids,flat,map,collection,stream,limit,target,size,collect,collectors,to,set,if,new,config,has,quorum,live,node,ids,return,new,config,else,return,current,config
