# id;timestamp;commentText;codeText;commentWords;codeWords
CompositeValuesCollectorQueue -> Integer compareCurrent();1524684173;Compares the current candidate with the values in the queue and returns_the slot if the candidate is already in the queue or null if the candidate is not present.;Integer compareCurrent() {_        return keys.get(CANDIDATE_SLOT)__    };compares,the,current,candidate,with,the,values,in,the,queue,and,returns,the,slot,if,the,candidate,is,already,in,the,queue,or,null,if,the,candidate,is,not,present;integer,compare,current,return,keys,get
CompositeValuesCollectorQueue -> Integer compareCurrent();1527773340;Compares the current candidate with the values in the queue and returns_the slot if the candidate is already in the queue or null if the candidate is not present.;Integer compareCurrent() {_        return keys.get(CANDIDATE_SLOT)__    };compares,the,current,candidate,with,the,values,in,the,queue,and,returns,the,slot,if,the,candidate,is,already,in,the,queue,or,null,if,the,candidate,is,not,present;integer,compare,current,return,keys,get
CompositeValuesCollectorQueue -> Integer compareCurrent();1531179852;Compares the current candidate with the values in the queue and returns_the slot if the candidate is already in the queue or null if the candidate is not present.;Integer compareCurrent() {_        return keys.get(CANDIDATE_SLOT)__    };compares,the,current,candidate,with,the,values,in,the,queue,and,returns,the,slot,if,the,candidate,is,already,in,the,queue,or,null,if,the,candidate,is,not,present;integer,compare,current,return,keys,get
CompositeValuesCollectorQueue -> Integer compareCurrent();1545897084;Compares the current candidate with the values in the queue and returns_the slot if the candidate is already in the queue or null if the candidate is not present.;Integer compareCurrent() {_        return keys.get(CANDIDATE_SLOT)__    };compares,the,current,candidate,with,the,values,in,the,queue,and,returns,the,slot,if,the,candidate,is,already,in,the,queue,or,null,if,the,candidate,is,not,present;integer,compare,current,return,keys,get
CompositeValuesCollectorQueue -> Integer compareCurrent();1546505495;Compares the current candidate with the values in the queue and returns_the slot if the candidate is already in the queue or null if the candidate is not present.;Integer compareCurrent() {_        return map.get(new Slot(CANDIDATE_SLOT))__    };compares,the,current,candidate,with,the,values,in,the,queue,and,returns,the,slot,if,the,candidate,is,already,in,the,queue,or,null,if,the,candidate,is,not,present;integer,compare,current,return,map,get,new,slot
CompositeValuesCollectorQueue -> Comparable getLowerValueLeadSource();1545897084;Returns the lowest value (exclusive) of the leading source.;Comparable getLowerValueLeadSource() {_        return afterKeyIsSet ? arrays[0].getAfter() : null__    };returns,the,lowest,value,exclusive,of,the,leading,source;comparable,get,lower,value,lead,source,return,after,key,is,set,arrays,0,get,after,null
CompositeValuesCollectorQueue -> Comparable getLowerValueLeadSource();1546505495;Returns the lowest value (exclusive) of the leading source.;Comparable getLowerValueLeadSource() {_        return afterKeyIsSet ? arrays[0].getAfter() : null__    };returns,the,lowest,value,exclusive,of,the,leading,source;comparable,get,lower,value,lead,source,return,after,key,is,set,arrays,0,get,after,null
CompositeValuesCollectorQueue -> private int compareCurrentWithAfter();1524684173;Compares the after values with the values in <code>slot</code>.;private int compareCurrentWithAfter() {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = arrays[i].compareCurrentWithAfter()__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,after,values,with,the,values,in,code,slot,code;private,int,compare,current,with,after,for,int,i,0,i,arrays,length,i,int,cmp,arrays,i,compare,current,with,after,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> private int compareCurrentWithAfter();1527773340;Compares the after values with the values in <code>slot</code>.;private int compareCurrentWithAfter() {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = arrays[i].compareCurrentWithAfter()__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,after,values,with,the,values,in,code,slot,code;private,int,compare,current,with,after,for,int,i,0,i,arrays,length,i,int,cmp,arrays,i,compare,current,with,after,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> private int compareCurrentWithAfter();1531179852;Compares the after values with the values in <code>slot</code>.;private int compareCurrentWithAfter() {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = arrays[i].compareCurrentWithAfter()__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,after,values,with,the,values,in,code,slot,code;private,int,compare,current,with,after,for,int,i,0,i,arrays,length,i,int,cmp,arrays,i,compare,current,with,after,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> private int compareCurrentWithAfter();1545897084;Compares the after values with the values in <code>slot</code>.;private int compareCurrentWithAfter() {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = arrays[i].compareCurrentWithAfter()__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,after,values,with,the,values,in,code,slot,code;private,int,compare,current,with,after,for,int,i,0,i,arrays,length,i,int,cmp,arrays,i,compare,current,with,after,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> private int compareCurrentWithAfter();1546505495;Compares the after values with the values in <code>slot</code>.;private int compareCurrentWithAfter() {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = arrays[i].compareCurrentWithAfter()__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,after,values,with,the,values,in,code,slot,code;private,int,compare,current,with,after,for,int,i,0,i,arrays,length,i,int,cmp,arrays,i,compare,current,with,after,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(Comparable forceLeadSourceValue,                                          LeafReaderContext context, LeafBucketCollector in) throws IOException;1545897084;Creates the collector that will visit the composite buckets of the matching documents._If <code>forceLeadSourceValue</code> is not null, the leading source will use this value_for each document._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(Comparable forceLeadSourceValue,_                                         LeafReaderContext context, LeafBucketCollector in) throws IOException {_        int last = arrays.length - 1__        LeafBucketCollector collector = in__        while (last > 0) {_            collector = arrays[last--].getLeafCollector(context, collector)__        }_        if (forceLeadSourceValue != null) {_            collector = arrays[last].getLeafCollector(forceLeadSourceValue, context, collector)__        } else {_            collector = arrays[last].getLeafCollector(context, collector)__        }_        return collector__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,if,code,force,lead,source,value,code,is,not,null,the,leading,source,will,use,this,value,for,each,document,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,comparable,force,lead,source,value,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,int,last,arrays,length,1,leaf,bucket,collector,collector,in,while,last,0,collector,arrays,last,get,leaf,collector,context,collector,if,force,lead,source,value,null,collector,arrays,last,get,leaf,collector,force,lead,source,value,context,collector,else,collector,arrays,last,get,leaf,collector,context,collector,return,collector
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(Comparable forceLeadSourceValue,                                          LeafReaderContext context, LeafBucketCollector in) throws IOException;1546505495;Creates the collector that will visit the composite buckets of the matching documents._If <code>forceLeadSourceValue</code> is not null, the leading source will use this value_for each document._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(Comparable forceLeadSourceValue,_                                         LeafReaderContext context, LeafBucketCollector in) throws IOException {_        int last = arrays.length - 1__        LeafBucketCollector collector = in__        while (last > 0) {_            collector = arrays[last--].getLeafCollector(context, collector)__        }_        if (forceLeadSourceValue != null) {_            collector = arrays[last].getLeafCollector(forceLeadSourceValue, context, collector)__        } else {_            collector = arrays[last].getLeafCollector(context, collector)__        }_        return collector__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,if,code,force,lead,source,value,code,is,not,null,the,leading,source,will,use,this,value,for,each,document,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,comparable,force,lead,source,value,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,int,last,arrays,length,1,leaf,bucket,collector,collector,in,while,last,0,collector,arrays,last,get,leaf,collector,context,collector,if,force,lead,source,value,null,collector,arrays,last,get,leaf,collector,force,lead,source,value,context,collector,else,collector,arrays,last,get,leaf,collector,context,collector,return,collector
CompositeValuesCollectorQueue -> int addIfCompetitive();1524684173;Check if the current candidate should be added in the queue._@return The target slot of the candidate or -1 is the candidate is not competitive.;int addIfCompetitive() {_        _        Integer topSlot = compareCurrent()__        if (topSlot != null) {_            _            docCounts[topSlot] += 1__            return topSlot__        }_        if (afterValueSet && compareCurrentWithAfter() <= 0) {_            _            return -1__        }_        if (keys.size() >= maxSize) {_            _            if (compare(CANDIDATE_SLOT, keys.lastKey()) > 0) {_                _                return -1__            }_        }__        _        final int newSlot__        if (keys.size() >= maxSize) {_            _            int slot = keys.pollLastEntry().getKey()__            _            newSlot = slot__        } else {_            newSlot = keys.size()__            assert newSlot < maxSize__        }_        _        copyCurrent(newSlot)__        keys.put(newSlot, newSlot)__        return newSlot__    };check,if,the,current,candidate,should,be,added,in,the,queue,return,the,target,slot,of,the,candidate,or,1,is,the,candidate,is,not,competitive;int,add,if,competitive,integer,top,slot,compare,current,if,top,slot,null,doc,counts,top,slot,1,return,top,slot,if,after,value,set,compare,current,with,after,0,return,1,if,keys,size,max,size,if,compare,keys,last,key,0,return,1,final,int,new,slot,if,keys,size,max,size,int,slot,keys,poll,last,entry,get,key,new,slot,slot,else,new,slot,keys,size,assert,new,slot,max,size,copy,current,new,slot,keys,put,new,slot,new,slot,return,new,slot
CompositeValuesCollectorQueue -> int addIfCompetitive();1527773340;Check if the current candidate should be added in the queue._@return The target slot of the candidate or -1 is the candidate is not competitive.;int addIfCompetitive() {_        _        Integer topSlot = compareCurrent()__        if (topSlot != null) {_            _            docCounts.increment(topSlot, 1)__            return topSlot__        }_        if (afterKeyIsSet && compareCurrentWithAfter() <= 0) {_            _            return -1__        }_        if (keys.size() >= maxSize) {_            _            if (compare(CANDIDATE_SLOT, keys.lastKey()) > 0) {_                _                return -1__            }_        }__        _        final int newSlot__        if (keys.size() >= maxSize) {_            _            int slot = keys.pollLastEntry().getKey()__            _            newSlot = slot__        } else {_            newSlot = keys.size()__            assert newSlot < maxSize__        }_        _        copyCurrent(newSlot)__        keys.put(newSlot, newSlot)__        return newSlot__    };check,if,the,current,candidate,should,be,added,in,the,queue,return,the,target,slot,of,the,candidate,or,1,is,the,candidate,is,not,competitive;int,add,if,competitive,integer,top,slot,compare,current,if,top,slot,null,doc,counts,increment,top,slot,1,return,top,slot,if,after,key,is,set,compare,current,with,after,0,return,1,if,keys,size,max,size,if,compare,keys,last,key,0,return,1,final,int,new,slot,if,keys,size,max,size,int,slot,keys,poll,last,entry,get,key,new,slot,slot,else,new,slot,keys,size,assert,new,slot,max,size,copy,current,new,slot,keys,put,new,slot,new,slot,return,new,slot
CompositeValuesCollectorQueue -> int addIfCompetitive();1531179852;Check if the current candidate should be added in the queue._@return The target slot of the candidate or -1 is the candidate is not competitive.;int addIfCompetitive() {_        _        Integer topSlot = compareCurrent()__        if (topSlot != null) {_            _            docCounts.increment(topSlot, 1)__            return topSlot__        }_        if (afterKeyIsSet && compareCurrentWithAfter() <= 0) {_            _            return -1__        }_        if (keys.size() >= maxSize) {_            _            if (compare(CANDIDATE_SLOT, keys.lastKey()) > 0) {_                _                return -1__            }_        }__        _        final int newSlot__        if (keys.size() >= maxSize) {_            _            int slot = keys.pollLastEntry().getKey()__            _            newSlot = slot__        } else {_            newSlot = keys.size()__            assert newSlot < maxSize__        }_        _        copyCurrent(newSlot)__        keys.put(newSlot, newSlot)__        return newSlot__    };check,if,the,current,candidate,should,be,added,in,the,queue,return,the,target,slot,of,the,candidate,or,1,is,the,candidate,is,not,competitive;int,add,if,competitive,integer,top,slot,compare,current,if,top,slot,null,doc,counts,increment,top,slot,1,return,top,slot,if,after,key,is,set,compare,current,with,after,0,return,1,if,keys,size,max,size,if,compare,keys,last,key,0,return,1,final,int,new,slot,if,keys,size,max,size,int,slot,keys,poll,last,entry,get,key,new,slot,slot,else,new,slot,keys,size,assert,new,slot,max,size,copy,current,new,slot,keys,put,new,slot,new,slot,return,new,slot
CompositeValuesCollectorQueue -> int addIfCompetitive();1545897084;Check if the current candidate should be added in the queue._@return The target slot of the candidate or -1 is the candidate is not competitive.;int addIfCompetitive() {_        _        Integer topSlot = compareCurrent()__        if (topSlot != null) {_            _            docCounts.increment(topSlot, 1)__            return topSlot__        }_        if (afterKeyIsSet && compareCurrentWithAfter() <= 0) {_            _            return -1__        }_        if (keys.size() >= maxSize) {_            _            if (compare(CANDIDATE_SLOT, keys.lastKey()) > 0) {_                _                return -1__            }_        }__        _        final int newSlot__        if (keys.size() >= maxSize) {_            _            int slot = keys.pollLastEntry().getKey()__            _            newSlot = slot__        } else {_            newSlot = keys.size()__            assert newSlot < maxSize__        }_        _        copyCurrent(newSlot)__        keys.put(newSlot, newSlot)__        return newSlot__    };check,if,the,current,candidate,should,be,added,in,the,queue,return,the,target,slot,of,the,candidate,or,1,is,the,candidate,is,not,competitive;int,add,if,competitive,integer,top,slot,compare,current,if,top,slot,null,doc,counts,increment,top,slot,1,return,top,slot,if,after,key,is,set,compare,current,with,after,0,return,1,if,keys,size,max,size,if,compare,keys,last,key,0,return,1,final,int,new,slot,if,keys,size,max,size,int,slot,keys,poll,last,entry,get,key,new,slot,slot,else,new,slot,keys,size,assert,new,slot,max,size,copy,current,new,slot,keys,put,new,slot,new,slot,return,new,slot
CompositeValuesCollectorQueue -> int addIfCompetitive();1546505495;Check if the current candidate should be added in the queue._@return The target slot of the candidate or -1 is the candidate is not competitive.;int addIfCompetitive() {_        _        Integer topSlot = compareCurrent()__        if (topSlot != null) {_            _            docCounts.increment(topSlot, 1)__            return topSlot__        }_        if (afterKeyIsSet && compareCurrentWithAfter() <= 0) {_            _            return -1__        }_        if (size() >= maxSize_                _                && compare(CANDIDATE_SLOT, top()) > 0) {_            _            return -1__        }__        _        final int newSlot__        if (size() >= maxSize) {_            _            int slot = pop()__            map.remove(new Slot(slot))__            _            newSlot = slot__        } else {_            newSlot = size()__        }_        _        copyCurrent(newSlot)__        map.put(new Slot(newSlot), newSlot)__        add(newSlot)__        return newSlot__    };check,if,the,current,candidate,should,be,added,in,the,queue,return,the,target,slot,of,the,candidate,or,1,is,the,candidate,is,not,competitive;int,add,if,competitive,integer,top,slot,compare,current,if,top,slot,null,doc,counts,increment,top,slot,1,return,top,slot,if,after,key,is,set,compare,current,with,after,0,return,1,if,size,max,size,compare,top,0,return,1,final,int,new,slot,if,size,max,size,int,slot,pop,map,remove,new,slot,slot,new,slot,slot,else,new,slot,size,copy,current,new,slot,map,put,new,slot,new,slot,new,slot,add,new,slot,return,new,slot
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,                                          LeafReaderContext context, LeafBucketCollector in) throws IOException;1524684173;Creates the collector that will visit the composite buckets of the matching documents._If <code>forceLeadSourceValue</code> is not null, the leading source will use this value_for each document._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,_                                         LeafReaderContext context, LeafBucketCollector in) throws IOException {_        int last = arrays.length - 1__        LeafBucketCollector collector = in__        while (last > 0) {_            collector = arrays[last--].getLeafCollector(context, collector)__        }_        if (forceLeadSourceValue != null) {_            collector = arrays[last].getLeafCollector(forceLeadSourceValue, context, collector)__        } else {_            collector = arrays[last].getLeafCollector(context, collector)__        }_        return collector__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,if,code,force,lead,source,value,code,is,not,null,the,leading,source,will,use,this,value,for,each,document,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,comparable,force,lead,source,value,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,int,last,arrays,length,1,leaf,bucket,collector,collector,in,while,last,0,collector,arrays,last,get,leaf,collector,context,collector,if,force,lead,source,value,null,collector,arrays,last,get,leaf,collector,force,lead,source,value,context,collector,else,collector,arrays,last,get,leaf,collector,context,collector,return,collector
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,                                          LeafReaderContext context, LeafBucketCollector in) throws IOException;1527773340;Creates the collector that will visit the composite buckets of the matching documents._If <code>forceLeadSourceValue</code> is not null, the leading source will use this value_for each document._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,_                                         LeafReaderContext context, LeafBucketCollector in) throws IOException {_        int last = arrays.length - 1__        LeafBucketCollector collector = in__        while (last > 0) {_            collector = arrays[last--].getLeafCollector(context, collector)__        }_        if (forceLeadSourceValue != null) {_            collector = arrays[last].getLeafCollector(forceLeadSourceValue, context, collector)__        } else {_            collector = arrays[last].getLeafCollector(context, collector)__        }_        return collector__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,if,code,force,lead,source,value,code,is,not,null,the,leading,source,will,use,this,value,for,each,document,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,comparable,force,lead,source,value,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,int,last,arrays,length,1,leaf,bucket,collector,collector,in,while,last,0,collector,arrays,last,get,leaf,collector,context,collector,if,force,lead,source,value,null,collector,arrays,last,get,leaf,collector,force,lead,source,value,context,collector,else,collector,arrays,last,get,leaf,collector,context,collector,return,collector
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,                                          LeafReaderContext context, LeafBucketCollector in) throws IOException;1531179852;Creates the collector that will visit the composite buckets of the matching documents._If <code>forceLeadSourceValue</code> is not null, the leading source will use this value_for each document._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(Comparable<?> forceLeadSourceValue,_                                         LeafReaderContext context, LeafBucketCollector in) throws IOException {_        int last = arrays.length - 1__        LeafBucketCollector collector = in__        while (last > 0) {_            collector = arrays[last--].getLeafCollector(context, collector)__        }_        if (forceLeadSourceValue != null) {_            collector = arrays[last].getLeafCollector(forceLeadSourceValue, context, collector)__        } else {_            collector = arrays[last].getLeafCollector(context, collector)__        }_        return collector__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,if,code,force,lead,source,value,code,is,not,null,the,leading,source,will,use,this,value,for,each,document,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,comparable,force,lead,source,value,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,int,last,arrays,length,1,leaf,bucket,collector,collector,in,while,last,0,collector,arrays,last,get,leaf,collector,context,collector,if,force,lead,source,value,null,collector,arrays,last,get,leaf,collector,force,lead,source,value,context,collector,else,collector,arrays,last,get,leaf,collector,context,collector,return,collector
CompositeValuesCollectorQueue -> Comparable<?> getLowerValueLeadSource();1524684173;Returns the lowest value (exclusive) of the leading source.;Comparable<?> getLowerValueLeadSource() {_        return afterValueSet ? arrays[0].getAfter() : null__    };returns,the,lowest,value,exclusive,of,the,leading,source;comparable,get,lower,value,lead,source,return,after,value,set,arrays,0,get,after,null
CompositeValuesCollectorQueue -> Comparable<?> getLowerValueLeadSource();1527773340;Returns the lowest value (exclusive) of the leading source.;Comparable<?> getLowerValueLeadSource() {_        return afterKeyIsSet ? arrays[0].getAfter() : null__    };returns,the,lowest,value,exclusive,of,the,leading,source;comparable,get,lower,value,lead,source,return,after,key,is,set,arrays,0,get,after,null
CompositeValuesCollectorQueue -> Comparable<?> getLowerValueLeadSource();1531179852;Returns the lowest value (exclusive) of the leading source.;Comparable<?> getLowerValueLeadSource() {_        return afterKeyIsSet ? arrays[0].getAfter() : null__    };returns,the,lowest,value,exclusive,of,the,leading,source;comparable,get,lower,value,lead,source,return,after,key,is,set,arrays,0,get,after,null
CompositeValuesCollectorQueue -> boolean isFull();1524684173;Whether the queue is full or not.;boolean isFull() {_        return keys.size() == maxSize__    };whether,the,queue,is,full,or,not;boolean,is,full,return,keys,size,max,size
CompositeValuesCollectorQueue -> boolean isFull();1527773340;Whether the queue is full or not.;boolean isFull() {_        return keys.size() == maxSize__    };whether,the,queue,is,full,or,not;boolean,is,full,return,keys,size,max,size
CompositeValuesCollectorQueue -> boolean isFull();1531179852;Whether the queue is full or not.;boolean isFull() {_        return keys.size() == maxSize__    };whether,the,queue,is,full,or,not;boolean,is,full,return,keys,size,max,size
CompositeValuesCollectorQueue -> boolean isFull();1545897084;Whether the queue is full or not.;boolean isFull() {_        return keys.size() == maxSize__    };whether,the,queue,is,full,or,not;boolean,is,full,return,keys,size,max,size
CompositeValuesCollectorQueue -> boolean isFull();1546505495;Whether the queue is full or not.;boolean isFull() {_        return size() >= maxSize__    };whether,the,queue,is,full,or,not;boolean,is,full,return,size,max,size
CompositeValuesCollectorQueue -> int compare(int slot1, int slot2);1524684173;Compares the values in <code>slot1</code> with <code>slot2</code>.;int compare(int slot1, int slot2) {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = (slot1 == CANDIDATE_SLOT) ? arrays[i].compareCurrent(slot2) :_                arrays[i].compare(slot1, slot2)__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,values,in,code,slot1,code,with,code,slot2,code;int,compare,int,slot1,int,slot2,for,int,i,0,i,arrays,length,i,int,cmp,slot1,arrays,i,compare,current,slot2,arrays,i,compare,slot1,slot2,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> int compare(int slot1, int slot2);1527773340;Compares the values in <code>slot1</code> with <code>slot2</code>.;int compare(int slot1, int slot2) {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = (slot1 == CANDIDATE_SLOT) ? arrays[i].compareCurrent(slot2) :_                arrays[i].compare(slot1, slot2)__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,values,in,code,slot1,code,with,code,slot2,code;int,compare,int,slot1,int,slot2,for,int,i,0,i,arrays,length,i,int,cmp,slot1,arrays,i,compare,current,slot2,arrays,i,compare,slot1,slot2,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> int compare(int slot1, int slot2);1531179852;Compares the values in <code>slot1</code> with <code>slot2</code>.;int compare(int slot1, int slot2) {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = (slot1 == CANDIDATE_SLOT) ? arrays[i].compareCurrent(slot2) :_                arrays[i].compare(slot1, slot2)__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,values,in,code,slot1,code,with,code,slot2,code;int,compare,int,slot1,int,slot2,for,int,i,0,i,arrays,length,i,int,cmp,slot1,arrays,i,compare,current,slot2,arrays,i,compare,slot1,slot2,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> int compare(int slot1, int slot2);1545897084;Compares the values in <code>slot1</code> with <code>slot2</code>.;int compare(int slot1, int slot2) {_        for (int i = 0_ i < arrays.length_ i++) {_            int cmp = (slot1 == CANDIDATE_SLOT) ? arrays[i].compareCurrent(slot2) :_                arrays[i].compare(slot1, slot2)__            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,values,in,code,slot1,code,with,code,slot2,code;int,compare,int,slot1,int,slot2,for,int,i,0,i,arrays,length,i,int,cmp,slot1,arrays,i,compare,current,slot2,arrays,i,compare,slot1,slot2,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> int compare(int slot1, int slot2);1546505495;Compares the values in <code>slot1</code> with the values in <code>slot2</code>.;int compare(int slot1, int slot2) {_        assert slot2 != CANDIDATE_SLOT__        for (int i = 0_ i < arrays.length_ i++) {_            final int cmp__            if (slot1 == CANDIDATE_SLOT) {_                cmp = arrays[i].compareCurrent(slot2)__            } else {_                cmp = arrays[i].compare(slot1, slot2)__            }_            if (cmp != 0) {_                return cmp__            }_        }_        return 0__    };compares,the,values,in,code,slot1,code,with,the,values,in,code,slot2,code;int,compare,int,slot1,int,slot2,assert,slot2,for,int,i,0,i,arrays,length,i,final,int,cmp,if,slot1,cmp,arrays,i,compare,current,slot2,else,cmp,arrays,i,compare,slot1,slot2,if,cmp,0,return,cmp,return,0
CompositeValuesCollectorQueue -> int size();1524684173;The current size of the queue.;int size() {_        return keys.size()__    };the,current,size,of,the,queue;int,size,return,keys,size
CompositeValuesCollectorQueue -> int size();1527773340;The current size of the queue.;int size() {_        return keys.size()__    };the,current,size,of,the,queue;int,size,return,keys,size
CompositeValuesCollectorQueue -> int size();1531179852;The current size of the queue.;int size() {_        return keys.size()__    };the,current,size,of,the,queue;int,size,return,keys,size
CompositeValuesCollectorQueue -> int size();1545897084;The current size of the queue.;int size() {_        return keys.size()__    };the,current,size,of,the,queue;int,size,return,keys,size
CompositeValuesCollectorQueue -> private void copyCurrent(int slot);1524684173;Copies the current value in <code>slot</code>.;private void copyCurrent(int slot) {_        for (int i = 0_ i < arrays.length_ i++) {_            arrays[i].copyCurrent(slot)__        }_        docCounts[slot] = 1__    };copies,the,current,value,in,code,slot,code;private,void,copy,current,int,slot,for,int,i,0,i,arrays,length,i,arrays,i,copy,current,slot,doc,counts,slot,1
CompositeValuesCollectorQueue -> private void copyCurrent(int slot);1527773340;Copies the current value in <code>slot</code>.;private void copyCurrent(int slot) {_        for (int i = 0_ i < arrays.length_ i++) {_            arrays[i].copyCurrent(slot)__        }_        docCounts = bigArrays.grow(docCounts, slot+1)__        docCounts.set(slot, 1)__    };copies,the,current,value,in,code,slot,code;private,void,copy,current,int,slot,for,int,i,0,i,arrays,length,i,arrays,i,copy,current,slot,doc,counts,big,arrays,grow,doc,counts,slot,1,doc,counts,set,slot,1
CompositeValuesCollectorQueue -> private void copyCurrent(int slot);1531179852;Copies the current value in <code>slot</code>.;private void copyCurrent(int slot) {_        for (int i = 0_ i < arrays.length_ i++) {_            arrays[i].copyCurrent(slot)__        }_        docCounts = bigArrays.grow(docCounts, slot+1)__        docCounts.set(slot, 1)__    };copies,the,current,value,in,code,slot,code;private,void,copy,current,int,slot,for,int,i,0,i,arrays,length,i,arrays,i,copy,current,slot,doc,counts,big,arrays,grow,doc,counts,slot,1,doc,counts,set,slot,1
CompositeValuesCollectorQueue -> private void copyCurrent(int slot);1545897084;Copies the current value in <code>slot</code>.;private void copyCurrent(int slot) {_        for (int i = 0_ i < arrays.length_ i++) {_            arrays[i].copyCurrent(slot)__        }_        docCounts = bigArrays.grow(docCounts, slot+1)__        docCounts.set(slot, 1)__    };copies,the,current,value,in,code,slot,code;private,void,copy,current,int,slot,for,int,i,0,i,arrays,length,i,arrays,i,copy,current,slot,doc,counts,big,arrays,grow,doc,counts,slot,1,doc,counts,set,slot,1
CompositeValuesCollectorQueue -> private void copyCurrent(int slot);1546505495;Copies the current value in <code>slot</code>.;private void copyCurrent(int slot) {_        for (int i = 0_ i < arrays.length_ i++) {_            arrays[i].copyCurrent(slot)__        }_        docCounts = bigArrays.grow(docCounts, slot+1)__        docCounts.set(slot, 1)__    };copies,the,current,value,in,code,slot,code;private,void,copy,current,int,slot,for,int,i,0,i,arrays,length,i,arrays,i,copy,current,slot,doc,counts,big,arrays,grow,doc,counts,slot,1,doc,counts,set,slot,1
CompositeValuesCollectorQueue -> Comparable getUpperValueLeadSource() throws IOException;1545897084;Returns the upper value (inclusive) of the leading source.;Comparable getUpperValueLeadSource() throws IOException {_        return size() >= maxSize ? arrays[0].toComparable(keys.lastKey()) : null__    };returns,the,upper,value,inclusive,of,the,leading,source;comparable,get,upper,value,lead,source,throws,ioexception,return,size,max,size,arrays,0,to,comparable,keys,last,key,null
CompositeValuesCollectorQueue -> Comparable getUpperValueLeadSource() throws IOException;1546505495;Returns the upper value (inclusive) of the leading source.;Comparable getUpperValueLeadSource() throws IOException {_        return size() >= maxSize ? arrays[0].toComparable(top()) : null__    };returns,the,upper,value,inclusive,of,the,leading,source;comparable,get,upper,value,lead,source,throws,ioexception,return,size,max,size,arrays,0,to,comparable,top,null
CompositeValuesCollectorQueue -> CompositeKey toCompositeKey(int slot) throws IOException;1524684173;Builds the {@link CompositeKey} for <code>slot</code>.;CompositeKey toCompositeKey(int slot) throws IOException {_        assert slot < maxSize__        Comparable<?>[] values = new Comparable<?>[arrays.length]__        for (int i = 0_ i < values.length_ i++) {_            values[i] = arrays[i].toComparable(slot)__        }_        return new CompositeKey(values)__    };builds,the,link,composite,key,for,code,slot,code;composite,key,to,composite,key,int,slot,throws,ioexception,assert,slot,max,size,comparable,values,new,comparable,arrays,length,for,int,i,0,i,values,length,i,values,i,arrays,i,to,comparable,slot,return,new,composite,key,values
CompositeValuesCollectorQueue -> CompositeKey toCompositeKey(int slot) throws IOException;1527773340;Builds the {@link CompositeKey} for <code>slot</code>.;CompositeKey toCompositeKey(int slot) throws IOException {_        assert slot < maxSize__        Comparable<?>[] values = new Comparable<?>[arrays.length]__        for (int i = 0_ i < values.length_ i++) {_            values[i] = arrays[i].toComparable(slot)__        }_        return new CompositeKey(values)__    };builds,the,link,composite,key,for,code,slot,code;composite,key,to,composite,key,int,slot,throws,ioexception,assert,slot,max,size,comparable,values,new,comparable,arrays,length,for,int,i,0,i,values,length,i,values,i,arrays,i,to,comparable,slot,return,new,composite,key,values
CompositeValuesCollectorQueue -> CompositeKey toCompositeKey(int slot) throws IOException;1531179852;Builds the {@link CompositeKey} for <code>slot</code>.;CompositeKey toCompositeKey(int slot) throws IOException {_        assert slot < maxSize__        Comparable<?>[] values = new Comparable<?>[arrays.length]__        for (int i = 0_ i < values.length_ i++) {_            values[i] = arrays[i].toComparable(slot)__        }_        return new CompositeKey(values)__    };builds,the,link,composite,key,for,code,slot,code;composite,key,to,composite,key,int,slot,throws,ioexception,assert,slot,max,size,comparable,values,new,comparable,arrays,length,for,int,i,0,i,values,length,i,values,i,arrays,i,to,comparable,slot,return,new,composite,key,values
CompositeValuesCollectorQueue -> CompositeKey toCompositeKey(int slot) throws IOException;1545897084;Builds the {@link CompositeKey} for <code>slot</code>.;CompositeKey toCompositeKey(int slot) throws IOException {_        assert slot < maxSize__        Comparable[] values = new Comparable[arrays.length]__        for (int i = 0_ i < values.length_ i++) {_            values[i] = arrays[i].toComparable(slot)__        }_        return new CompositeKey(values)__    };builds,the,link,composite,key,for,code,slot,code;composite,key,to,composite,key,int,slot,throws,ioexception,assert,slot,max,size,comparable,values,new,comparable,arrays,length,for,int,i,0,i,values,length,i,values,i,arrays,i,to,comparable,slot,return,new,composite,key,values
CompositeValuesCollectorQueue -> CompositeKey toCompositeKey(int slot) throws IOException;1546505495;Builds the {@link CompositeKey} for <code>slot</code>.;CompositeKey toCompositeKey(int slot) throws IOException {_        assert slot < maxSize__        Comparable[] values = new Comparable[arrays.length]__        for (int i = 0_ i < values.length_ i++) {_            values[i] = arrays[i].toComparable(slot)__        }_        return new CompositeKey(values)__    };builds,the,link,composite,key,for,code,slot,code;composite,key,to,composite,key,int,slot,throws,ioexception,assert,slot,max,size,comparable,values,new,comparable,arrays,length,for,int,i,0,i,values,length,i,values,i,arrays,i,to,comparable,slot,return,new,composite,key,values
CompositeValuesCollectorQueue -> Comparable<?> getUpperValueLeadSource() throws IOException;1524684173;Returns the upper value (inclusive) of the leading source.;Comparable<?> getUpperValueLeadSource() throws IOException {_        return size() >= maxSize ? arrays[0].toComparable(keys.lastKey()) : null__    };returns,the,upper,value,inclusive,of,the,leading,source;comparable,get,upper,value,lead,source,throws,ioexception,return,size,max,size,arrays,0,to,comparable,keys,last,key,null
CompositeValuesCollectorQueue -> Comparable<?> getUpperValueLeadSource() throws IOException;1527773340;Returns the upper value (inclusive) of the leading source.;Comparable<?> getUpperValueLeadSource() throws IOException {_        return size() >= maxSize ? arrays[0].toComparable(keys.lastKey()) : null__    };returns,the,upper,value,inclusive,of,the,leading,source;comparable,get,upper,value,lead,source,throws,ioexception,return,size,max,size,arrays,0,to,comparable,keys,last,key,null
CompositeValuesCollectorQueue -> Comparable<?> getUpperValueLeadSource() throws IOException;1531179852;Returns the upper value (inclusive) of the leading source.;Comparable<?> getUpperValueLeadSource() throws IOException {_        return size() >= maxSize ? arrays[0].toComparable(keys.lastKey()) : null__    };returns,the,upper,value,inclusive,of,the,leading,source;comparable,get,upper,value,lead,source,throws,ioexception,return,size,max,size,arrays,0,to,comparable,keys,last,key,null
CompositeValuesCollectorQueue -> CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey);1527773340;Constructs a composite queue with the specified size and sources.__@param sources The list of {@link CompositeValuesSourceConfig} to build the composite buckets._@param size The number of composite buckets to keep._@param afterKey;CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey) {_        this.bigArrays = bigArrays__        this.maxSize = size__        this.arrays = sources__        this.keys = new TreeMap<>(this::compare)__        if (afterKey != null) {_            assert afterKey.size() == sources.length__            afterKeyIsSet = true__            for (int i = 0_ i < afterKey.size()_ i++) {_                sources[i].setAfter(afterKey.get(i))__            }_        }_        this.docCounts = bigArrays.newIntArray(1, false)__    };constructs,a,composite,queue,with,the,specified,size,and,sources,param,sources,the,list,of,link,composite,values,source,config,to,build,the,composite,buckets,param,size,the,number,of,composite,buckets,to,keep,param,after,key;composite,values,collector,queue,big,arrays,big,arrays,single,dimension,values,source,sources,int,size,composite,key,after,key,this,big,arrays,big,arrays,this,max,size,size,this,arrays,sources,this,keys,new,tree,map,this,compare,if,after,key,null,assert,after,key,size,sources,length,after,key,is,set,true,for,int,i,0,i,after,key,size,i,sources,i,set,after,after,key,get,i,this,doc,counts,big,arrays,new,int,array,1,false
CompositeValuesCollectorQueue -> CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey);1531179852;Constructs a composite queue with the specified size and sources.__@param sources The list of {@link CompositeValuesSourceConfig} to build the composite buckets._@param size The number of composite buckets to keep._@param afterKey composite key;CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey) {_        this.bigArrays = bigArrays__        this.maxSize = size__        this.arrays = sources__        this.keys = new TreeMap<>(this::compare)__        if (afterKey != null) {_            assert afterKey.size() == sources.length__            afterKeyIsSet = true__            for (int i = 0_ i < afterKey.size()_ i++) {_                sources[i].setAfter(afterKey.get(i))__            }_        }_        this.docCounts = bigArrays.newIntArray(1, false)__    };constructs,a,composite,queue,with,the,specified,size,and,sources,param,sources,the,list,of,link,composite,values,source,config,to,build,the,composite,buckets,param,size,the,number,of,composite,buckets,to,keep,param,after,key,composite,key;composite,values,collector,queue,big,arrays,big,arrays,single,dimension,values,source,sources,int,size,composite,key,after,key,this,big,arrays,big,arrays,this,max,size,size,this,arrays,sources,this,keys,new,tree,map,this,compare,if,after,key,null,assert,after,key,size,sources,length,after,key,is,set,true,for,int,i,0,i,after,key,size,i,sources,i,set,after,after,key,get,i,this,doc,counts,big,arrays,new,int,array,1,false
CompositeValuesCollectorQueue -> CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey);1545897084;Constructs a composite queue with the specified size and sources.__@param sources The list of {@link CompositeValuesSourceConfig} to build the composite buckets._@param size The number of composite buckets to keep._@param afterKey composite key;CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey) {_        this.bigArrays = bigArrays__        this.maxSize = size__        this.arrays = sources__        this.keys = new TreeMap<>(this::compare)__        if (afterKey != null) {_            assert afterKey.size() == sources.length__            afterKeyIsSet = true__            for (int i = 0_ i < afterKey.size()_ i++) {_                sources[i].setAfter(afterKey.get(i))__            }_        }_        this.docCounts = bigArrays.newIntArray(1, false)__    };constructs,a,composite,queue,with,the,specified,size,and,sources,param,sources,the,list,of,link,composite,values,source,config,to,build,the,composite,buckets,param,size,the,number,of,composite,buckets,to,keep,param,after,key,composite,key;composite,values,collector,queue,big,arrays,big,arrays,single,dimension,values,source,sources,int,size,composite,key,after,key,this,big,arrays,big,arrays,this,max,size,size,this,arrays,sources,this,keys,new,tree,map,this,compare,if,after,key,null,assert,after,key,size,sources,length,after,key,is,set,true,for,int,i,0,i,after,key,size,i,sources,i,set,after,after,key,get,i,this,doc,counts,big,arrays,new,int,array,1,false
CompositeValuesCollectorQueue -> CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey);1546505495;Constructs a composite queue with the specified size and sources.__@param sources The list of {@link CompositeValuesSourceConfig} to build the composite buckets._@param size The number of composite buckets to keep._@param afterKey composite key;CompositeValuesCollectorQueue(BigArrays bigArrays, SingleDimensionValuesSource<?>[] sources, int size, CompositeKey afterKey) {_        super(size)__        this.bigArrays = bigArrays__        this.maxSize = size__        this.arrays = sources__        this.map = new HashMap<>(size)__        if (afterKey != null) {_            assert afterKey.size() == sources.length__            afterKeyIsSet = true__            for (int i = 0_ i < afterKey.size()_ i++) {_                sources[i].setAfter(afterKey.get(i))__            }_        }_        this.docCounts = bigArrays.newIntArray(1, false)__    };constructs,a,composite,queue,with,the,specified,size,and,sources,param,sources,the,list,of,link,composite,values,source,config,to,build,the,composite,buckets,param,size,the,number,of,composite,buckets,to,keep,param,after,key,composite,key;composite,values,collector,queue,big,arrays,big,arrays,single,dimension,values,source,sources,int,size,composite,key,after,key,super,size,this,big,arrays,big,arrays,this,max,size,size,this,arrays,sources,this,map,new,hash,map,size,if,after,key,null,assert,after,key,size,sources,length,after,key,is,set,true,for,int,i,0,i,after,key,size,i,sources,i,set,after,after,key,get,i,this,doc,counts,big,arrays,new,int,array,1,false
CompositeValuesCollectorQueue -> Set<Integer> getSortedSlot();1524684173;Returns a sorted {@link Set} view of the slots contained in this queue.;Set<Integer> getSortedSlot() {_        return keys.keySet()__    };returns,a,sorted,link,set,view,of,the,slots,contained,in,this,queue;set,integer,get,sorted,slot,return,keys,key,set
CompositeValuesCollectorQueue -> Set<Integer> getSortedSlot();1527773340;Returns a sorted {@link Set} view of the slots contained in this queue.;Set<Integer> getSortedSlot() {_        return keys.keySet()__    };returns,a,sorted,link,set,view,of,the,slots,contained,in,this,queue;set,integer,get,sorted,slot,return,keys,key,set
CompositeValuesCollectorQueue -> Set<Integer> getSortedSlot();1531179852;Returns a sorted {@link Set} view of the slots contained in this queue.;Set<Integer> getSortedSlot() {_        return keys.keySet()__    };returns,a,sorted,link,set,view,of,the,slots,contained,in,this,queue;set,integer,get,sorted,slot,return,keys,key,set
CompositeValuesCollectorQueue -> Set<Integer> getSortedSlot();1545897084;Returns a sorted {@link Set} view of the slots contained in this queue.;Set<Integer> getSortedSlot() {_        return keys.keySet()__    };returns,a,sorted,link,set,view,of,the,slots,contained,in,this,queue;set,integer,get,sorted,slot,return,keys,key,set
CompositeValuesCollectorQueue -> int getDocCount(int slot);1524684173;Returns the document count in <code>slot</code>.;int getDocCount(int slot) {_        return docCounts[slot]__    };returns,the,document,count,in,code,slot,code;int,get,doc,count,int,slot,return,doc,counts,slot
CompositeValuesCollectorQueue -> int getDocCount(int slot);1527773340;Returns the document count in <code>slot</code>.;int getDocCount(int slot) {_        return docCounts.get(slot)__    };returns,the,document,count,in,code,slot,code;int,get,doc,count,int,slot,return,doc,counts,get,slot
CompositeValuesCollectorQueue -> int getDocCount(int slot);1531179852;Returns the document count in <code>slot</code>.;int getDocCount(int slot) {_        return docCounts.get(slot)__    };returns,the,document,count,in,code,slot,code;int,get,doc,count,int,slot,return,doc,counts,get,slot
CompositeValuesCollectorQueue -> int getDocCount(int slot);1545897084;Returns the document count in <code>slot</code>.;int getDocCount(int slot) {_        return docCounts.get(slot)__    };returns,the,document,count,in,code,slot,code;int,get,doc,count,int,slot,return,doc,counts,get,slot
CompositeValuesCollectorQueue -> int getDocCount(int slot);1546505495;Returns the document count in <code>slot</code>.;int getDocCount(int slot) {_        return docCounts.get(slot)__    };returns,the,document,count,in,code,slot,code;int,get,doc,count,int,slot,return,doc,counts,get,slot
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException;1524684173;Creates the collector that will visit the composite buckets of the matching documents._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException {_        return getLeafCollector(null, context, in)__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,return,get,leaf,collector,null,context,in
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException;1527773340;Creates the collector that will visit the composite buckets of the matching documents._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException {_        return getLeafCollector(null, context, in)__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,return,get,leaf,collector,null,context,in
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException;1531179852;Creates the collector that will visit the composite buckets of the matching documents._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException {_        return getLeafCollector(null, context, in)__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,return,get,leaf,collector,null,context,in
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException;1545897084;Creates the collector that will visit the composite buckets of the matching documents._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException {_        return getLeafCollector(null, context, in)__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,return,get,leaf,collector,null,context,in
CompositeValuesCollectorQueue -> LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException;1546505495;Creates the collector that will visit the composite buckets of the matching documents._The provided collector <code>in</code> is called on each composite bucket.;LeafBucketCollector getLeafCollector(LeafReaderContext context, LeafBucketCollector in) throws IOException {_        return getLeafCollector(null, context, in)__    };creates,the,collector,that,will,visit,the,composite,buckets,of,the,matching,documents,the,provided,collector,code,in,code,is,called,on,each,composite,bucket;leaf,bucket,collector,get,leaf,collector,leaf,reader,context,context,leaf,bucket,collector,in,throws,ioexception,return,get,leaf,collector,null,context,in
