commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void innerOnResponse(QuerySearchResult response) {     counter.onResult(response). }
false;public;1;13;;@Override public void onFailure(Exception exception) {     try {         context.getLogger().debug(() -> new ParameterizedMessage("[{}] Failed to execute query phase", querySearchRequest.id()), exception).         counter.onFailure(shardIndex, searchShardTarget, exception).     } finally {         // the query might not have been executed at all (for example because thread pool rejected         // execution) and the search context that was created in dfs phase might not be released.         // release it again to be in the safe side         context.sendReleaseSearchContext(querySearchRequest.id(), connection, searchShardTarget.getOriginalIndices()).     } }
false;public;0;39;;@Override public void run() throws IOException {     // TODO we can potentially also consume the actual per shard results from the initial phase here in the aggregateDfs     // to free up memory early     final List<DfsSearchResult> resultList = dfsSearchResults.asList().     final AggregatedDfs dfs = searchPhaseController.aggregateDfs(resultList).     final CountedCollector<SearchPhaseResult> counter = new CountedCollector<>(queryResult::consumeResult, resultList.size(), () -> context.executeNextPhase(this, nextPhaseFactory.apply(queryResult)), context).     for (final DfsSearchResult dfsResult : resultList) {         final SearchShardTarget searchShardTarget = dfsResult.getSearchShardTarget().         Transport.Connection connection = context.getConnection(searchShardTarget.getClusterAlias(), searchShardTarget.getNodeId()).         QuerySearchRequest querySearchRequest = new QuerySearchRequest(searchShardTarget.getOriginalIndices(), dfsResult.getRequestId(), dfs).         final int shardIndex = dfsResult.getShardIndex().         searchTransportService.sendExecuteQuery(connection, querySearchRequest, context.getTask(), new SearchActionListener<QuerySearchResult>(searchShardTarget, shardIndex) {              @Override             protected void innerOnResponse(QuerySearchResult response) {                 counter.onResult(response).             }              @Override             public void onFailure(Exception exception) {                 try {                     context.getLogger().debug(() -> new ParameterizedMessage("[{}] Failed to execute query phase", querySearchRequest.id()), exception).                     counter.onFailure(shardIndex, searchShardTarget, exception).                 } finally {                     // the query might not have been executed at all (for example because thread pool rejected                     // execution) and the search context that was created in dfs phase might not be released.                     // release it again to be in the safe side                     context.sendReleaseSearchContext(querySearchRequest.id(), connection, searchShardTarget.getOriginalIndices()).                 }             }         }).     } }
