commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public int compare(Mapper o1, Mapper o2) {     return o1.name().compareTo(o2.name()). }
true;public;0;3;/**  * Return the root object mapper.  */ ;/**  * Return the root object mapper.  */ public RootObjectMapper root() {     return root. }
true;public;1;3;/**  * Generate a mapping update for the given root object mapper.  */ ;/**  * Generate a mapping update for the given root object mapper.  */ public Mapping mappingUpdate(Mapper rootObjectMapper) {     return new Mapping(indexCreated, (RootObjectMapper) rootObjectMapper, metadataMappers, meta). }
true;public;1;4;/**  * Get the root mapper with the given class.  */ ;/**  * Get the root mapper with the given class.  */ @SuppressWarnings("unchecked") public <T extends MetadataFieldMapper> T metadataMapper(Class<T> clazz) {     return (T) metadataMappersMap.get(clazz). }
true;public;1;16;/**  * @see DocumentMapper#merge(Mapping)  */ ;/**  * @see DocumentMapper#merge(Mapping)  */ public Mapping merge(Mapping mergeWith) {     RootObjectMapper mergedRoot = root.merge(mergeWith.root).     Map<Class<? extends MetadataFieldMapper>, MetadataFieldMapper> mergedMetaDataMappers = new HashMap<>(metadataMappersMap).     for (MetadataFieldMapper metaMergeWith : mergeWith.metadataMappers) {         MetadataFieldMapper mergeInto = mergedMetaDataMappers.get(metaMergeWith.getClass()).         MetadataFieldMapper merged.         if (mergeInto == null) {             merged = metaMergeWith.         } else {             merged = mergeInto.merge(metaMergeWith).         }         mergedMetaDataMappers.put(merged.getClass(), merged).     }     Map<String, Object> mergedMeta = mergeWith.meta == null ? meta : mergeWith.meta.     return new Mapping(indexCreated, mergedRoot, mergedMetaDataMappers.values().toArray(new MetadataFieldMapper[0]), mergedMeta). }
true;public;1;18;/**  * Recursively update sub field types.  */ ;/**  * Recursively update sub field types.  */ public Mapping updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {     MetadataFieldMapper[] updatedMeta = null.     for (int i = 0. i < metadataMappers.length. ++i) {         MetadataFieldMapper currentFieldMapper = metadataMappers[i].         MetadataFieldMapper updatedFieldMapper = (MetadataFieldMapper) currentFieldMapper.updateFieldType(fullNameToFieldType).         if (updatedFieldMapper != currentFieldMapper) {             if (updatedMeta == null) {                 updatedMeta = Arrays.copyOf(metadataMappers, metadataMappers.length).             }             updatedMeta[i] = updatedFieldMapper.         }     }     RootObjectMapper updatedRoot = root.updateFieldType(fullNameToFieldType).     if (updatedMeta == null && updatedRoot == root) {         return this.     }     return new Mapping(indexCreated, updatedRoot, updatedMeta == null ? metadataMappers : updatedMeta, meta). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (meta != null) {         builder.field("_meta", meta).     }     for (Mapper mapper : metadataMappers) {         mapper.toXContent(builder, params).     }     return builder. }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     root.toXContent(builder, params, new ToXContent() {          @Override         public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {             if (meta != null) {                 builder.field("_meta", meta).             }             for (Mapper mapper : metadataMappers) {                 mapper.toXContent(builder, params).             }             return builder.         }     }).     return builder. }
false;public;0;10;;@Override public String toString() {     try {         XContentBuilder builder = XContentFactory.jsonBuilder().startObject().         toXContent(builder, new ToXContent.MapParams(emptyMap())).         return Strings.toString(builder.endObject()).     } catch (IOException bogus) {         throw new UncheckedIOException(bogus).     } }
