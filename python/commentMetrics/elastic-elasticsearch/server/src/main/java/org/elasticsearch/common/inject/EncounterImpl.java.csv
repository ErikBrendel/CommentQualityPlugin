commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void invalidate() {     valid = false. }
false;public;0;5;;public List<MembersInjector<? super T>> getMembersInjectors() {     return membersInjectors == null ? Collections.<MembersInjector<? super T>>emptyList() : Collections.unmodifiableList(membersInjectors). }
false;public;0;5;;public List<InjectionListener<? super T>> getInjectionListeners() {     return injectionListeners == null ? Collections.<InjectionListener<? super T>>emptyList() : Collections.unmodifiableList(injectionListeners). }
false;public;1;12;;@Override public void register(MembersInjector<? super T> membersInjector) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     if (membersInjectors == null) {         membersInjectors = new ArrayList<>().     }     membersInjectors.add(membersInjector). }
false;public;1;12;;@Override public void register(InjectionListener<? super T> injectionListener) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     if (injectionListeners == null) {         injectionListeners = new ArrayList<>().     }     injectionListeners.add(injectionListener). }
false;public;2;7;;@Override public void addError(String message, Object... arguments) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     errors.addMessage(message, arguments). }
false;public;1;7;;@Override public void addError(Throwable t) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     errors.errorInUserCode(t, "An exception was caught and reported. Message: %s", t.getMessage()). }
false;public;1;7;;@Override public void addError(Message message) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     errors.addMessage(message). }
false;public;1;7;;@Override public <T> Provider<T> getProvider(Key<T> key) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     return lookups.getProvider(key). }
false;public;1;4;;@Override public <T> Provider<T> getProvider(Class<T> type) {     return getProvider(Key.get(type)). }
false;public;1;7;;@Override public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {     if (!valid) {         throw new IllegalStateException("Encounters may not be used after hear() returns.").     }     return lookups.getMembersInjector(typeLiteral). }
false;public;1;4;;@Override public <T> MembersInjector<T> getMembersInjector(Class<T> type) {     return getMembersInjector(TypeLiteral.get(type)). }
