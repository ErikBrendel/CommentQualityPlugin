# id;timestamp;commentText;codeText;commentWords;codeWords
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  ActionListener<Void> listener, final ClusterState currentState);1548872469;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 ActionListener<Void> listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,action,listener,void,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  ActionListener<Void> listener, final ClusterState currentState);1548950008;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 ActionListener<Void> listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,action,listener,void,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener);1524684173;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,send,shard,action,cluster,service,state,shard,entry,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener);1529433467;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener);1529687475;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message, @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,                                  final ClusterState currentState);1524684173;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,_                                 final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(), 0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,                                  final ClusterState currentState);1529433467;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,_                                 final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(), 0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,                                  final ClusterState currentState);1529687475;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener,_                                 final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(), 0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1540847035;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1541092382;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1542402632;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1544081506;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1545221705;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, Listener listener);1548770980;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, Listener listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        final FailedShardEntry shardEntry = new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale)__        final CompositeListener compositeListener = new CompositeListener(listener)__        final CompositeListener existingListener = remoteFailedShardsCache.putIfAbsent(shardEntry, compositeListener)__        if (existingListener == null) {_            sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), shardEntry, new Listener() {_                @Override_                public void onSuccess() {_                    try {_                        compositeListener.onSuccess()__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_                @Override_                public void onFailure(Exception e) {_                    try {_                        compositeListener.onFailure(e)__                    } finally {_                        remoteFailedShardsCache.remove(shardEntry)__                    }_                }_            })__        } else {_            existingListener.addListener(listener)__        }_    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,listener,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,final,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,final,composite,listener,composite,listener,new,composite,listener,listener,final,composite,listener,existing,listener,remote,failed,shards,cache,put,if,absent,shard,entry,composite,listener,if,existing,listener,null,send,shard,action,cluster,service,state,shard,entry,new,listener,override,public,void,on,success,try,composite,listener,on,success,finally,remote,failed,shards,cache,remove,shard,entry,override,public,void,on,failure,exception,e,try,composite,listener,on,failure,e,finally,remote,failed,shards,cache,remove,shard,entry,else,existing,listener,add,listener,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1540847035;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1541092382;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1542402632;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1544081506;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1545221705;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,                                  Listener listener, final ClusterState currentState);1548770980;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure,_                                 Listener listener, final ClusterState currentState) {_        FailedShardEntry shardEntry = new FailedShardEntry(shardRouting.shardId(), shardRouting.allocationId().getId(),_            0L, message, failure, true)__        sendShardAction(SHARD_FAILED_ACTION_NAME, currentState, shardEntry, listener)__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,final,cluster,state,current,state,failed,shard,entry,shard,entry,new,failed,shard,entry,shard,routing,shard,id,shard,routing,allocation,id,get,id,0l,message,failure,true,send,shard,action,current,state,shard,entry,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, ActionListener<Void> listener);1548872469;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, ActionListener<Void> listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        remoteFailedShardsDeduplicator.executeOnce(_            new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale), listener,_            (req, reqListener) -> sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), req, reqListener))__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,action,listener,void,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,remote,failed,shards,deduplicator,execute,once,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,listener,req,req,listener,send,shard,action,cluster,service,state,req,req,listener
ShardStateAction -> public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,                                   @Nullable final Exception failure, ActionListener<Void> listener);1548950008;Send a shard failed request to the master node to update the cluster state with the failure of a shard on another node. This means_that the shard should be failed because a write made it into the primary but was not replicated to this shard copy. If the shard_does not exist anymore but still has an entry in the in-sync set, remove its allocation id from the in-sync set.__@param shardId            shard id of the shard to fail_@param allocationId       allocation id of the shard to fail_@param primaryTerm        the primary term associated with the primary shard that is failing the shard. Must be strictly positive._@param markAsStale        whether or not to mark a failing shard as stale (eg. removing from in-sync set) when failing the shard._@param message            the reason for the failure_@param failure            the underlying cause of the failure_@param listener           callback upon completion of the request;public void remoteShardFailed(final ShardId shardId, String allocationId, long primaryTerm, boolean markAsStale, final String message,_                                  @Nullable final Exception failure, ActionListener<Void> listener) {_        assert primaryTerm > 0L : "primary term should be strictly positive"__        remoteFailedShardsDeduplicator.executeOnce(_            new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale), listener,_            (req, reqListener) -> sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), req, reqListener))__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,with,the,failure,of,a,shard,on,another,node,this,means,that,the,shard,should,be,failed,because,a,write,made,it,into,the,primary,but,was,not,replicated,to,this,shard,copy,if,the,shard,does,not,exist,anymore,but,still,has,an,entry,in,the,in,sync,set,remove,its,allocation,id,from,the,in,sync,set,param,shard,id,shard,id,of,the,shard,to,fail,param,allocation,id,allocation,id,of,the,shard,to,fail,param,primary,term,the,primary,term,associated,with,the,primary,shard,that,is,failing,the,shard,must,be,strictly,positive,param,mark,as,stale,whether,or,not,to,mark,a,failing,shard,as,stale,eg,removing,from,in,sync,set,when,failing,the,shard,param,message,the,reason,for,the,failure,param,failure,the,underlying,cause,of,the,failure,param,listener,callback,upon,completion,of,the,request;public,void,remote,shard,failed,final,shard,id,shard,id,string,allocation,id,long,primary,term,boolean,mark,as,stale,final,string,message,nullable,final,exception,failure,action,listener,void,listener,assert,primary,term,0l,primary,term,should,be,strictly,positive,remote,failed,shards,deduplicator,execute,once,new,failed,shard,entry,shard,id,allocation,id,primary,term,message,failure,mark,as,stale,listener,req,req,listener,send,shard,action,cluster,service,state,req,req,listener
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, ActionListener<Void> listener);1548872469;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, ActionListener<Void> listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,action,listener,void,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, ActionListener<Void> listener);1548950008;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, ActionListener<Void> listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,action,listener,void,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> Listener -> default void onFailure(final Exception e);1524684173;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1529433467;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1529687475;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1540847035;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1541092382;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1542402632;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link Discovery.FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,discovery,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1544081506;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1545221705;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> Listener -> default void onFailure(final Exception e);1548770980;Notification for non-channel exceptions that are not handled_by {@link ShardStateAction}.__The exceptions that are handled by {@link ShardStateAction}_are:_- {@link NotMasterException}_- {@link NodeDisconnectedException}_- {@link FailedToCommitClusterStateException}__Any other exception is communicated to the requester via_this notification.__@param e the unexpected cause of the failure on the master;default void onFailure(final Exception e) {_        };notification,for,non,channel,exceptions,that,are,not,handled,by,link,shard,state,action,the,exceptions,that,are,handled,by,link,shard,state,action,are,link,not,master,exception,link,node,disconnected,exception,link,failed,to,commit,cluster,state,exception,any,other,exception,is,communicated,to,the,requester,via,this,notification,param,e,the,unexpected,cause,of,the,failure,on,the,master;default,void,on,failure,final,exception,e
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1540847035;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1541092382;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1542402632;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1544081506;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1545221705;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message,                                  @Nullable final Exception failure, Listener listener);1548770980;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message,_                                 @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener);1524684173;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener);1529433467;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
ShardStateAction -> public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener);1529687475;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.;public void localShardFailed(final ShardRouting shardRouting, final String message, @Nullable final Exception failure, Listener listener) {_        localShardFailed(shardRouting, message, failure, listener, clusterService.state())__    };send,a,shard,failed,request,to,the,master,node,to,update,the,cluster,state,when,a,shard,on,the,local,node,failed;public,void,local,shard,failed,final,shard,routing,shard,routing,final,string,message,nullable,final,exception,failure,listener,listener,local,shard,failed,shard,routing,message,failure,listener,cluster,service,state
