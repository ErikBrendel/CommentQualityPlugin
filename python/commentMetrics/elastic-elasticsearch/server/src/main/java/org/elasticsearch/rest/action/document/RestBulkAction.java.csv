commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "bulk_action". }
false;public;2;24;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     BulkRequest bulkRequest = Requests.bulkRequest().     String defaultIndex = request.param("index").     String defaultType = request.param("type").     if (defaultType == null) {         defaultType = MapperService.SINGLE_MAPPING_NAME.     } else {         deprecationLogger.deprecatedAndMaybeLog("bulk_with_types", RestBulkAction.TYPES_DEPRECATION_MESSAGE).     }     String defaultRouting = request.param("routing").     FetchSourceContext defaultFetchSourceContext = FetchSourceContext.parseFromRestRequest(request).     String defaultPipeline = request.param("pipeline").     String waitForActiveShards = request.param("wait_for_active_shards").     if (waitForActiveShards != null) {         bulkRequest.waitForActiveShards(ActiveShardCount.parseString(waitForActiveShards)).     }     bulkRequest.timeout(request.paramAsTime("timeout", BulkShardRequest.DEFAULT_TIMEOUT)).     bulkRequest.setRefreshPolicy(request.param("refresh")).     bulkRequest.add(request.requiredContent(), defaultIndex, defaultType, defaultRouting, defaultFetchSourceContext, defaultPipeline, null, allowExplicitIndex, request.getXContentType()).     return channel -> client.bulk(bulkRequest, new RestStatusToXContentListener<>(channel)). }
false;public;0;4;;@Override public boolean supportsContentStream() {     return true. }
