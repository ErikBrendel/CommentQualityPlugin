commented;modifiers;parameterAmount;loc;comment;code
false;static;1;3;;static FuzzyOptions parse(XContentParser parser) throws IOException {     return PARSER.parse(parser, null).build(). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeBoolean(transpositions).     out.writeBoolean(unicodeAware).     out.writeVInt(editDistance).     out.writeVInt(fuzzyMinLength).     out.writeVInt(fuzzyPrefixLength).     out.writeVInt(maxDeterminizedStates). }
true;public;0;3;/**  * Returns the maximum number of edits  */ ;/**  * Returns the maximum number of edits  */ public int getEditDistance() {     return editDistance. }
true;public;0;3;/**  * Returns if transpositions option is set  *  * if transpositions is set, then swapping one character for another counts as one edit instead of two.  */ ;/**  * Returns if transpositions option is set  *  * if transpositions is set, then swapping one character for another counts as one edit instead of two.  */ public boolean isTranspositions() {     return transpositions. }
true;public;0;3;/**  * Returns the length of input prefix after which edits are applied  */ ;/**  * Returns the length of input prefix after which edits are applied  */ public int getFuzzyMinLength() {     return fuzzyMinLength. }
true;public;0;3;/**  * Returns the minimum length of the input prefix required to apply any edits  */ ;/**  * Returns the minimum length of the input prefix required to apply any edits  */ public int getFuzzyPrefixLength() {     return fuzzyPrefixLength. }
true;public;0;3;/**  * Returns if all measurements (like edit distance, transpositions and lengths) are in unicode code  * points (actual letters) instead of bytes.  */ ;/**  * Returns if all measurements (like edit distance, transpositions and lengths) are in unicode code  * points (actual letters) instead of bytes.  */ public boolean isUnicodeAware() {     return unicodeAware. }
true;public;0;3;/**  * Returns the maximum automaton states allowed for fuzzy expansion  */ ;/**  * Returns the maximum automaton states allowed for fuzzy expansion  */ public int getMaxDeterminizedStates() {     return maxDeterminizedStates. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FuzzyOptions that = (FuzzyOptions) o.     if (editDistance != that.editDistance)         return false.     if (transpositions != that.transpositions)         return false.     if (fuzzyMinLength != that.fuzzyMinLength)         return false.     if (fuzzyPrefixLength != that.fuzzyPrefixLength)         return false.     if (unicodeAware != that.unicodeAware)         return false.     return maxDeterminizedStates == that.maxDeterminizedStates. }
false;public;0;10;;@Override public int hashCode() {     int result = editDistance.     result = 31 * result + (transpositions ? 1 : 0).     result = 31 * result + fuzzyMinLength.     result = 31 * result + fuzzyPrefixLength.     result = 31 * result + (unicodeAware ? 1 : 0).     result = 31 * result + maxDeterminizedStates.     return result. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(FUZZY_OPTIONS.getPreferredName()).     builder.field(Fuzziness.FIELD.getPreferredName(), editDistance).     builder.field(TRANSPOSITION_FIELD.getPreferredName(), transpositions).     builder.field(MIN_LENGTH_FIELD.getPreferredName(), fuzzyMinLength).     builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), fuzzyPrefixLength).     builder.field(UNICODE_AWARE_FIELD.getPreferredName(), unicodeAware).     builder.field(MAX_DETERMINIZED_STATES_FIELD.getPreferredName(), maxDeterminizedStates).     builder.endObject().     return builder. }
true;public;1;7;/**  * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.  * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.  */ ;/**  * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.  * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.  */ public Builder setFuzziness(int editDistance) {     if (editDistance < 0 || editDistance > 2) {         throw new IllegalArgumentException("fuzziness must be between 0 and 2").     }     this.editDistance = editDistance.     return this. }
true;public;1;4;/**  * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.  * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.  */ ;/**  * Sets the level of fuzziness used to create suggestions using a {@link Fuzziness} instance.  * The default value is {@link Fuzziness#ONE} which allows for an "edit distance" of one.  */ public Builder setFuzziness(Fuzziness fuzziness) {     Objects.requireNonNull(fuzziness, "fuzziness must not be null").     return setFuzziness(fuzziness.asDistance()). }
true;public;1;4;/**  * Sets if transpositions (swapping one character for another) counts as one character  * change or two.  * Defaults to true, meaning it uses the fuzzier option of counting transpositions as  * a single change.  */ ;/**  * Sets if transpositions (swapping one character for another) counts as one character  * change or two.  * Defaults to true, meaning it uses the fuzzier option of counting transpositions as  * a single change.  */ public Builder setTranspositions(boolean transpositions) {     this.transpositions = transpositions.     return this. }
true;public;1;7;/**  * Sets the minimum length of input string before fuzzy suggestions are returned, defaulting  * to 3.  */ ;/**  * Sets the minimum length of input string before fuzzy suggestions are returned, defaulting  * to 3.  */ public Builder setFuzzyMinLength(int fuzzyMinLength) {     if (fuzzyMinLength < 0) {         throw new IllegalArgumentException("fuzzyMinLength must not be negative").     }     this.fuzzyMinLength = fuzzyMinLength.     return this. }
true;public;1;7;/**  * Sets the minimum length of the input, which is not checked for fuzzy alternatives, defaults to 1  */ ;/**  * Sets the minimum length of the input, which is not checked for fuzzy alternatives, defaults to 1  */ public Builder setFuzzyPrefixLength(int fuzzyPrefixLength) {     if (fuzzyPrefixLength < 0) {         throw new IllegalArgumentException("fuzzyPrefixLength must not be negative").     }     this.fuzzyPrefixLength = fuzzyPrefixLength.     return this. }
true;public;1;7;/**  * Sets the maximum automaton states allowed for the fuzzy expansion  */ ;/**  * Sets the maximum automaton states allowed for the fuzzy expansion  */ public Builder setMaxDeterminizedStates(int maxDeterminizedStates) {     if (maxDeterminizedStates < 0) {         throw new IllegalArgumentException("maxDeterminizedStates must not be negative").     }     this.maxDeterminizedStates = maxDeterminizedStates.     return this. }
true;public;1;4;/**  * Set to true if all measurements (like edit distance, transpositions and lengths) are in unicode  * code points (actual letters) instead of bytes. Default is false.  */ ;/**  * Set to true if all measurements (like edit distance, transpositions and lengths) are in unicode  * code points (actual letters) instead of bytes. Default is false.  */ public Builder setUnicodeAware(boolean unicodeAware) {     this.unicodeAware = unicodeAware.     return this. }
false;public;0;4;;public FuzzyOptions build() {     return new FuzzyOptions(editDistance, transpositions, fuzzyMinLength, fuzzyPrefixLength, unicodeAware, maxDeterminizedStates). }
