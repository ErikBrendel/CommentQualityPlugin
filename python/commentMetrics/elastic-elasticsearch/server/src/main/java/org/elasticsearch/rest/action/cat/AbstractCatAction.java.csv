commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;2;1;;protected abstract RestChannelConsumer doCatRequest(RestRequest request, NodeClient client).
false;protected,abstract;1;1;;protected abstract void documentation(StringBuilder sb).
false;protected,abstract;1;1;;protected abstract Table getTableWithHeader(RestRequest request).
false;public;2;25;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     boolean helpWanted = request.paramAsBoolean("help", false).     if (helpWanted) {         return channel -> {             Table table = getTableWithHeader(request).             int[] width = buildHelpWidths(table, request).             BytesStream bytesOutput = Streams.flushOnCloseStream(channel.bytesOutput()).             UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOutput).             for (Table.Cell cell : table.getHeaders()) {                 // need to do left-align always, so create new cells                 pad(new Table.Cell(cell.value), width[0], request, out).                 out.append(" | ").                 pad(new Table.Cell(cell.attr.containsKey("alias") ? cell.attr.get("alias") : ""), width[1], request, out).                 out.append(" | ").                 pad(new Table.Cell(cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available"), width[2], request, out).                 out.append("\n").             }             out.close().             channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, bytesOutput.bytes())).         }.     } else {         return doCatRequest(request, client).     } }
false;protected;0;4;;@Override protected Set<String> responseParams() {     return RESPONSE_PARAMS. }
