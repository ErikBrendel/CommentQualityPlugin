commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void add(QueryCacheStats stats) {     ramBytesUsed += stats.ramBytesUsed.     hitCount += stats.hitCount.     missCount += stats.missCount.     cacheCount += stats.cacheCount.     cacheSize += stats.cacheSize. }
false;public;0;3;;public long getMemorySizeInBytes() {     return ramBytesUsed. }
false;public;0;3;;public ByteSizeValue getMemorySize() {     return new ByteSizeValue(ramBytesUsed). }
true;public;0;3;/**  * The total number of lookups in the cache.  */ ;/**  * The total number of lookups in the cache.  */ public long getTotalCount() {     return hitCount + missCount. }
true;public;0;3;/**  * The number of successful lookups in the cache.  */ ;/**  * The number of successful lookups in the cache.  */ public long getHitCount() {     return hitCount. }
true;public;0;3;/**  * The number of lookups in the cache that failed to retrieve a {@link DocIdSet}.  */ ;/**  * The number of lookups in the cache that failed to retrieve a {@link DocIdSet}.  */ public long getMissCount() {     return missCount. }
true;public;0;3;/**  * The number of {@link DocIdSet}s that have been cached.  */ ;/**  * The number of {@link DocIdSet}s that have been cached.  */ public long getCacheCount() {     return cacheCount. }
true;public;0;3;/**  * The number of {@link DocIdSet}s that are in the cache.  */ ;/**  * The number of {@link DocIdSet}s that are in the cache.  */ public long getCacheSize() {     return cacheSize. }
true;public;0;3;/**  * The number of {@link DocIdSet}s that have been evicted from the cache.  */ ;/**  * The number of {@link DocIdSet}s that have been evicted from the cache.  */ public long getEvictions() {     return cacheCount - cacheSize. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     ramBytesUsed = in.readLong().     hitCount = in.readLong().     missCount = in.readLong().     cacheCount = in.readLong().     cacheSize = in.readLong(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeLong(ramBytesUsed).     out.writeLong(hitCount).     out.writeLong(missCount).     out.writeLong(cacheCount).     out.writeLong(cacheSize). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject(Fields.QUERY_CACHE).     builder.humanReadableField(Fields.MEMORY_SIZE_IN_BYTES, Fields.MEMORY_SIZE, getMemorySize()).     builder.field(Fields.TOTAL_COUNT, getTotalCount()).     builder.field(Fields.HIT_COUNT, getHitCount()).     builder.field(Fields.MISS_COUNT, getMissCount()).     builder.field(Fields.CACHE_SIZE, getCacheSize()).     builder.field(Fields.CACHE_COUNT, getCacheCount()).     builder.field(Fields.EVICTIONS, getEvictions()).     builder.endObject().     return builder. }
