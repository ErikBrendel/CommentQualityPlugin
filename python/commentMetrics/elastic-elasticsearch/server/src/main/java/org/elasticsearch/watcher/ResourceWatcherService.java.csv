commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected void doStart() {     if (!enabled) {         return.     }     lowFuture = threadPool.scheduleWithFixedDelay(lowMonitor, lowMonitor.interval, Names.SAME).     mediumFuture = threadPool.scheduleWithFixedDelay(mediumMonitor, mediumMonitor.interval, Names.SAME).     highFuture = threadPool.scheduleWithFixedDelay(highMonitor, highMonitor.interval, Names.SAME). }
false;protected;0;9;;@Override protected void doStop() {     if (!enabled) {         return.     }     lowFuture.cancel().     mediumFuture.cancel().     highFuture.cancel(). }
false;protected;0;3;;@Override protected void doClose() { }
true;public;1;3;/**  * Register new resource watcher that will be checked in default {@link Frequency#MEDIUM MEDIUM} frequency  */ ;/**  * Register new resource watcher that will be checked in default {@link Frequency#MEDIUM MEDIUM} frequency  */ public <W extends ResourceWatcher> WatcherHandle<W> add(W watcher) throws IOException {     return add(watcher, Frequency.MEDIUM). }
true;public;2;13;/**  * Register new resource watcher that will be checked in the given frequency  */ ;/**  * Register new resource watcher that will be checked in the given frequency  */ public <W extends ResourceWatcher> WatcherHandle<W> add(W watcher, Frequency frequency) throws IOException {     watcher.init().     switch(frequency) {         case LOW:             return lowMonitor.add(watcher).         case MEDIUM:             return mediumMonitor.add(watcher).         case HIGH:             return highMonitor.add(watcher).         default:             throw new IllegalArgumentException("Unknown frequency [" + frequency + "]").     } }
false;public;0;3;;public void notifyNow() {     notifyNow(Frequency.MEDIUM). }
false;public;1;15;;public void notifyNow(Frequency frequency) {     switch(frequency) {         case LOW:             lowMonitor.run().             break.         case MEDIUM:             mediumMonitor.run().             break.         case HIGH:             highMonitor.run().             break.         default:             throw new IllegalArgumentException("Unknown frequency [" + frequency + "]").     } }
false;private;1;4;;private <W extends ResourceWatcher> WatcherHandle<W> add(W watcher) {     watchers.add(watcher).     return new WatcherHandle<>(this, watcher). }
false;public,synchronized;0;10;;@Override public synchronized void run() {     for (ResourceWatcher watcher : watchers) {         try {             watcher.checkAndNotify().         } catch (IOException e) {             logger.trace("failed to check resource watcher", e).         }     } }
