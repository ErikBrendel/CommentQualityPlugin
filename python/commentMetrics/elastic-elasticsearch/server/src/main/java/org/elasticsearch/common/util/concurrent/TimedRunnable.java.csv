commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void doRun() {     try {         startTimeNanos = System.nanoTime().         original.run().     } finally {         finishTimeNanos = System.nanoTime().     } }
false;public;1;6;;@Override public void onRejection(final Exception e) {     if (original instanceof AbstractRunnable) {         ((AbstractRunnable) original).onRejection(e).     } }
false;public;0;6;;@Override public void onAfter() {     if (original instanceof AbstractRunnable) {         ((AbstractRunnable) original).onAfter().     } }
false;public;1;6;;@Override public void onFailure(final Exception e) {     if (original instanceof AbstractRunnable) {         ((AbstractRunnable) original).onFailure(e).     } }
false;public;0;4;;@Override public boolean isForceExecution() {     return original instanceof AbstractRunnable && ((AbstractRunnable) original).isForceExecution(). }
true;;0;7;/**  * Return the time since this task was created until it finished running.  * If the task is still running or has not yet been run, returns -1.  */ ;/**  * Return the time since this task was created until it finished running.  * If the task is still running or has not yet been run, returns -1.  */ long getTotalNanos() {     if (finishTimeNanos == -1) {         // There must have been an exception thrown, the total time is unknown (-1)         return -1.     }     return Math.max(finishTimeNanos - creationTimeNanos, 1). }
true;;0;7;/**  * Return the time this task spent being run.  * If the task is still running or has not yet been run, returns -1.  */ ;/**  * Return the time this task spent being run.  * If the task is still running or has not yet been run, returns -1.  */ long getTotalExecutionNanos() {     if (startTimeNanos == -1 || finishTimeNanos == -1) {         // There must have been an exception thrown, the total time is unknown (-1)         return -1.     }     return Math.max(finishTimeNanos - startTimeNanos, 1). }
false;public;0;4;;@Override public Runnable unwrap() {     return original. }
