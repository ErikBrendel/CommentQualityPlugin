commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void doWriteTo(StreamOutput out) throws IOException { // all state is in the superclass }
false;protected;2;6;;@Override protected void doXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     printBoostAndQueryName(builder).     builder.endObject(). }
false;public,static;1;28;;public static MatchNoneQueryBuilder fromXContent(XContentParser parser) throws IOException {     String currentFieldName = null.     XContentParser.Token token.     String queryName = null.     float boost = AbstractQueryBuilder.DEFAULT_BOOST.     while (((token = parser.nextToken()) != XContentParser.Token.END_OBJECT && token != XContentParser.Token.END_ARRAY)) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 queryName = parser.text().             } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 boost = parser.floatValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), "[" + MatchNoneQueryBuilder.NAME + "] query does not support [" + currentFieldName + "]").             }         } else {             throw new ParsingException(parser.getTokenLocation(), "[" + MatchNoneQueryBuilder.NAME + "] unknown token [" + token + "] after [" + currentFieldName + "]").         }     }     MatchNoneQueryBuilder matchNoneQueryBuilder = new MatchNoneQueryBuilder().     matchNoneQueryBuilder.boost(boost).     matchNoneQueryBuilder.queryName(queryName).     return matchNoneQueryBuilder. }
false;protected;1;4;;@Override protected Query doToQuery(QueryShardContext context) throws IOException {     return Queries.newMatchNoDocsQuery("User requested \"" + this.getName() + "\" query."). }
false;protected;1;4;;@Override protected boolean doEquals(MatchNoneQueryBuilder other) {     return true. }
false;protected;0;4;;@Override protected int doHashCode() {     return 0. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
