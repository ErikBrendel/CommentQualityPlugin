commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public boolean isVerbose() {     return verbose. }
false;public;1;3;;public void setVerbose(boolean verbose) {     this.verbose = verbose. }
false;public;0;3;;public BytesReference getSource() {     return source. }
false;public;0;3;;public XContentType getXContentType() {     return xContentType. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(id).     out.writeBoolean(verbose).     out.writeBytesReference(source).     out.writeEnum(xContentType). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.rawValue(source.streamInput(), xContentType).     return builder. }
false;public;0;3;;public Pipeline getPipeline() {     return pipeline. }
false;public;0;3;;public List<IngestDocument> getDocuments() {     return documents. }
false;public;0;3;;public boolean isVerbose() {     return verbose. }
false;static;4;11;;static Parsed parseWithPipelineId(String pipelineId, Map<String, Object> config, boolean verbose, IngestService ingestService) {     if (pipelineId == null) {         throw new IllegalArgumentException("param [pipeline] is null").     }     Pipeline pipeline = ingestService.getPipeline(pipelineId).     if (pipeline == null) {         throw new IllegalArgumentException("pipeline [" + pipelineId + "] does not exist").     }     List<IngestDocument> ingestDocumentList = parseDocs(config).     return new Parsed(pipeline, ingestDocumentList, verbose). }
false;static;3;8;;static Parsed parse(Map<String, Object> config, boolean verbose, IngestService ingestService) throws Exception {     Map<String, Object> pipelineConfig = ConfigurationUtils.readMap(null, null, config, Fields.PIPELINE).     Pipeline pipeline = Pipeline.create(SIMULATED_PIPELINE_ID, pipelineConfig, ingestService.getProcessorFactories(), ingestService.getScriptService()).     List<IngestDocument> ingestDocumentList = parseDocs(config).     return new Parsed(pipeline, ingestDocumentList, verbose). }
false;private,static;1;34;;private static List<IngestDocument> parseDocs(Map<String, Object> config) {     List<Map<String, Object>> docs = ConfigurationUtils.readList(null, null, config, Fields.DOCS).     List<IngestDocument> ingestDocumentList = new ArrayList<>().     for (Map<String, Object> dataMap : docs) {         Map<String, Object> document = ConfigurationUtils.readMap(null, null, dataMap, Fields.SOURCE).         String index = ConfigurationUtils.readStringOrIntProperty(null, null, dataMap, MetaData.INDEX.getFieldName(), "_index").         if (dataMap.containsKey(MetaData.TYPE.getFieldName())) {             deprecationLogger.deprecatedAndMaybeLog("simulate_pipeline_with_types", "[types removal] specifying _type in pipeline simulation requests is deprecated").         }         String type = ConfigurationUtils.readStringOrIntProperty(null, null, dataMap, MetaData.TYPE.getFieldName(), "_doc").         String id = ConfigurationUtils.readStringOrIntProperty(null, null, dataMap, MetaData.ID.getFieldName(), "_id").         String routing = ConfigurationUtils.readOptionalStringOrIntProperty(null, null, dataMap, MetaData.ROUTING.getFieldName()).         Long version = null.         if (dataMap.containsKey(MetaData.VERSION.getFieldName())) {             version = (Long) ConfigurationUtils.readObject(null, null, dataMap, MetaData.VERSION.getFieldName()).         }         VersionType versionType = null.         if (dataMap.containsKey(MetaData.VERSION_TYPE.getFieldName())) {             versionType = VersionType.fromString(ConfigurationUtils.readStringProperty(null, null, dataMap, MetaData.VERSION_TYPE.getFieldName())).         }         IngestDocument ingestDocument = new IngestDocument(index, type, id, routing, version, versionType, document).         ingestDocumentList.add(ingestDocument).     }     return ingestDocumentList. }
