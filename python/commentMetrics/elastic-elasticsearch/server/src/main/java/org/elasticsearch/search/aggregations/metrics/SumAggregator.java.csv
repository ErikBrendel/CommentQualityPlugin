commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ScoreMode scoreMode() {     return valuesSource != null && valuesSource.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES. }
false;public;2;26;;@Override public void collect(int doc, long bucket) throws IOException {     sums = bigArrays.grow(sums, bucket + 1).     compensations = bigArrays.grow(compensations, bucket + 1).     if (values.advanceExact(doc)) {         final int valuesCount = values.docValueCount().         // Compute the sum of double values with Kahan summation algorithm which is more         // accurate than naive summation.         double sum = sums.get(bucket).         double compensation = compensations.get(bucket).         for (int i = 0. i < valuesCount. i++) {             double value = values.nextValue().             if (Double.isFinite(value) == false) {                 sum += value.             } else if (Double.isFinite(sum)) {                 double corrected = value - compensation.                 double newSum = sum + corrected.                 compensation = (newSum - sum) - corrected.                 sum = newSum.             }         }         compensations.set(bucket, compensation).         sums.set(bucket, sum).     } }
false;public;2;37;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     if (valuesSource == null) {         return LeafBucketCollector.NO_OP_COLLECTOR.     }     final BigArrays bigArrays = context.bigArrays().     final SortedNumericDoubleValues values = valuesSource.doubleValues(ctx).     return new LeafBucketCollectorBase(sub, values) {          @Override         public void collect(int doc, long bucket) throws IOException {             sums = bigArrays.grow(sums, bucket + 1).             compensations = bigArrays.grow(compensations, bucket + 1).             if (values.advanceExact(doc)) {                 final int valuesCount = values.docValueCount().                 // Compute the sum of double values with Kahan summation algorithm which is more                 // accurate than naive summation.                 double sum = sums.get(bucket).                 double compensation = compensations.get(bucket).                 for (int i = 0. i < valuesCount. i++) {                     double value = values.nextValue().                     if (Double.isFinite(value) == false) {                         sum += value.                     } else if (Double.isFinite(sum)) {                         double corrected = value - compensation.                         double newSum = sum + corrected.                         compensation = (newSum - sum) - corrected.                         sum = newSum.                     }                 }                 compensations.set(bucket, compensation).                 sums.set(bucket, sum).             }         }     }. }
false;public;1;7;;@Override public double metric(long owningBucketOrd) {     if (valuesSource == null || owningBucketOrd >= sums.size()) {         return 0.0.     }     return sums.get(owningBucketOrd). }
false;public;1;7;;@Override public InternalAggregation buildAggregation(long bucket) {     if (valuesSource == null || bucket >= sums.size()) {         return buildEmptyAggregation().     }     return new InternalSum(name, sums.get(bucket), format, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalSum(name, 0.0, format, pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public void doClose() {     Releasables.close(sums, compensations). }
