commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;5;;public static NodeUsage readNodeStats(StreamInput in) throws IOException {     NodeUsage nodeInfo = new NodeUsage().     nodeInfo.readFrom(in).     return nodeInfo. }
true;public;0;3;/**  * @return the timestamp for when these statistics were collected  */ ;/**  * @return the timestamp for when these statistics were collected  */ public long getTimestamp() {     return timestamp. }
true;public;0;3;/**  * @return the timestamp for when the collection of these statistics started  */ ;/**  * @return the timestamp for when the collection of these statistics started  */ public long getSinceTime() {     return sinceTime. }
true;public;0;3;/**  * @return a map containing the counts of the number of times each REST  *         endpoint has been called  */ ;/**  * @return a map containing the counts of the number of times each REST  *         endpoint has been called  */ public Map<String, Long> getRestUsage() {     return restUsage. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("since", sinceTime).     if (restUsage != null) {         builder.field("rest_actions").         builder.map(restUsage).     }     return builder. }
false;public;1;8;;@SuppressWarnings("unchecked") @Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     timestamp = in.readLong().     sinceTime = in.readLong().     restUsage = (Map<String, Long>) in.readGenericValue(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(timestamp).     out.writeLong(sinceTime).     out.writeGenericValue(restUsage). }
