commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public long getCount() {     return count. }
false;public;0;4;;@Override public double getMin() {     return min. }
false;public;0;4;;@Override public double getMax() {     return max. }
false;public;0;4;;@Override public double getAvg() {     return avg. }
false;public;0;4;;@Override public double getSum() {     return sum. }
false;public;0;4;;@Override public String getMinAsString() {     return valueAsString.getOrDefault(Fields.MIN_AS_STRING, Double.toString(min)). }
false;public;0;4;;@Override public String getMaxAsString() {     return valueAsString.getOrDefault(Fields.MAX_AS_STRING, Double.toString(max)). }
false;public;0;4;;@Override public String getAvgAsString() {     return valueAsString.getOrDefault(Fields.AVG_AS_STRING, Double.toString(avg)). }
false;public;0;4;;@Override public String getSumAsString() {     return valueAsString.getOrDefault(Fields.SUM_AS_STRING, Double.toString(sum)). }
false;public;0;4;;@Override public String getType() {     return StatsAggregationBuilder.NAME. }
false;protected;2;23;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(Fields.COUNT, count).     if (count != 0) {         builder.field(Fields.MIN, min).         builder.field(Fields.MAX, max).         builder.field(Fields.AVG, avg).         builder.field(Fields.SUM, sum).         if (valueAsString.get(Fields.MIN_AS_STRING) != null) {             builder.field(Fields.MIN_AS_STRING, getMinAsString()).             builder.field(Fields.MAX_AS_STRING, getMaxAsString()).             builder.field(Fields.AVG_AS_STRING, getAvgAsString()).             builder.field(Fields.SUM_AS_STRING, getSumAsString()).         }     } else {         builder.nullField(Fields.MIN).         builder.nullField(Fields.MAX).         builder.nullField(Fields.AVG).         builder.field(Fields.SUM, 0.0d).     }     otherStatsToXContent(builder, params).     return builder. }
false;protected,static;1;20;;protected static void declareStatsFields(ObjectParser<? extends ParsedStats, Void> objectParser) {     declareAggregationFields(objectParser).     objectParser.declareLong((agg, value) -> agg.count = value, new ParseField(Fields.COUNT)).     objectParser.declareField((agg, value) -> agg.min = value, (parser, context) -> parseDouble(parser, Double.POSITIVE_INFINITY), new ParseField(Fields.MIN), ValueType.DOUBLE_OR_NULL).     objectParser.declareField((agg, value) -> agg.max = value, (parser, context) -> parseDouble(parser, Double.NEGATIVE_INFINITY), new ParseField(Fields.MAX), ValueType.DOUBLE_OR_NULL).     objectParser.declareField((agg, value) -> agg.avg = value, (parser, context) -> parseDouble(parser, 0), new ParseField(Fields.AVG), ValueType.DOUBLE_OR_NULL).     objectParser.declareField((agg, value) -> agg.sum = value, (parser, context) -> parseDouble(parser, 0), new ParseField(Fields.SUM), ValueType.DOUBLE_OR_NULL).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.MIN_AS_STRING, value), new ParseField(Fields.MIN_AS_STRING)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.MAX_AS_STRING, value), new ParseField(Fields.MAX_AS_STRING)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.AVG_AS_STRING, value), new ParseField(Fields.AVG_AS_STRING)).     objectParser.declareString((agg, value) -> agg.valueAsString.put(Fields.SUM_AS_STRING, value), new ParseField(Fields.SUM_AS_STRING)). }
false;public,static;2;5;;public static ParsedStats fromXContent(XContentParser parser, final String name) {     ParsedStats parsedStats = PARSER.apply(parser, null).     parsedStats.setName(name).     return parsedStats. }
false;protected;2;3;;protected XContentBuilder otherStatsToXContent(XContentBuilder builder, Params params) throws IOException {     return builder. }
