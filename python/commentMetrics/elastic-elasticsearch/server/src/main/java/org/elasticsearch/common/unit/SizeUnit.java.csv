commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public long toSingles(long size) {     return size. }
false;public;1;4;;@Override public long toKilo(long size) {     return size / (C1 / C0). }
false;public;1;4;;@Override public long toMega(long size) {     return size / (C2 / C0). }
false;public;1;4;;@Override public long toGiga(long size) {     return size / (C3 / C0). }
false;public;1;4;;@Override public long toTera(long size) {     return size / (C4 / C0). }
false;public;1;4;;@Override public long toPeta(long size) {     return size / (C5 / C0). }
false;public;1;4;;@Override public long toSingles(long size) {     return x(size, C1 / C0, MAX / (C1 / C0)). }
false;public;1;4;;@Override public long toKilo(long size) {     return size. }
false;public;1;4;;@Override public long toMega(long size) {     return size / (C2 / C1). }
false;public;1;4;;@Override public long toGiga(long size) {     return size / (C3 / C1). }
false;public;1;4;;@Override public long toTera(long size) {     return size / (C4 / C1). }
false;public;1;4;;@Override public long toPeta(long size) {     return size / (C5 / C1). }
false;public;1;4;;@Override public long toSingles(long size) {     return x(size, C2 / C0, MAX / (C2 / C0)). }
false;public;1;4;;@Override public long toKilo(long size) {     return x(size, C2 / C1, MAX / (C2 / C1)). }
false;public;1;4;;@Override public long toMega(long size) {     return size. }
false;public;1;4;;@Override public long toGiga(long size) {     return size / (C3 / C2). }
false;public;1;4;;@Override public long toTera(long size) {     return size / (C4 / C2). }
false;public;1;4;;@Override public long toPeta(long size) {     return size / (C5 / C2). }
false;public;1;4;;@Override public long toSingles(long size) {     return x(size, C3 / C0, MAX / (C3 / C0)). }
false;public;1;4;;@Override public long toKilo(long size) {     return x(size, C3 / C1, MAX / (C3 / C1)). }
false;public;1;4;;@Override public long toMega(long size) {     return x(size, C3 / C2, MAX / (C3 / C2)). }
false;public;1;4;;@Override public long toGiga(long size) {     return size. }
false;public;1;4;;@Override public long toTera(long size) {     return size / (C4 / C3). }
false;public;1;4;;@Override public long toPeta(long size) {     return size / (C5 / C3). }
false;public;1;4;;@Override public long toSingles(long size) {     return x(size, C4 / C0, MAX / (C4 / C0)). }
false;public;1;4;;@Override public long toKilo(long size) {     return x(size, C4 / C1, MAX / (C4 / C1)). }
false;public;1;4;;@Override public long toMega(long size) {     return x(size, C4 / C2, MAX / (C4 / C2)). }
false;public;1;4;;@Override public long toGiga(long size) {     return x(size, C4 / C3, MAX / (C4 / C3)). }
false;public;1;4;;@Override public long toTera(long size) {     return size. }
false;public;1;4;;@Override public long toPeta(long size) {     return size / (C5 / C0). }
false;public;1;4;;@Override public long toSingles(long size) {     return x(size, C5 / C0, MAX / (C5 / C0)). }
false;public;1;4;;@Override public long toKilo(long size) {     return x(size, C5 / C1, MAX / (C5 / C1)). }
false;public;1;4;;@Override public long toMega(long size) {     return x(size, C5 / C2, MAX / (C5 / C2)). }
false;public;1;4;;@Override public long toGiga(long size) {     return x(size, C5 / C3, MAX / (C5 / C3)). }
false;public;1;4;;@Override public long toTera(long size) {     return x(size, C5 / C4, MAX / (C5 / C4)). }
false;public;1;4;;@Override public long toPeta(long size) {     return size. }
true;static;3;5;/**  * Scale d by m, checking for overflow.  * This has a short name to make above code more readable.  */ ;/**  * Scale d by m, checking for overflow.  * This has a short name to make above code more readable.  */ static long x(long d, long m, long over) {     if (d > over)         return Long.MAX_VALUE.     if (d < -over)         return Long.MIN_VALUE.     return d * m. }
false;public,abstract;1;1;;public abstract long toSingles(long size).
false;public,abstract;1;1;;public abstract long toKilo(long size).
false;public,abstract;1;1;;public abstract long toMega(long size).
false;public,abstract;1;1;;public abstract long toGiga(long size).
false;public,abstract;1;1;;public abstract long toTera(long size).
false;public,abstract;1;1;;public abstract long toPeta(long size).
