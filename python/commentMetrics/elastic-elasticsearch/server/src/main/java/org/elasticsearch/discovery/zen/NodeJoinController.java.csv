# id;timestamp;commentText;codeText;commentWords;codeWords
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1524684173;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1525798022;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1526374795;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1541092382;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1542402632;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1544081506;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> private synchronized void failContextIfNeeded(final ElectionContext context, final String reason);1548320260;utility method to fail the given election context under the cluster state thread;private synchronized void failContextIfNeeded(final ElectionContext context, final String reason) {_        if (electionContext == context) {_            stopElectionContext(reason)__        }_    };utility,method,to,fail,the,given,election,context,under,the,cluster,state,thread;private,synchronized,void,fail,context,if,needed,final,election,context,context,final,string,reason,if,election,context,context,stop,election,context,reason
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1524684173;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1525798022;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1526374795;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1541092382;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1542402632;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1544081506;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> ElectionCallback -> void onFailure(Throwable t)_;1548320260;called when the local node failed to be elected as master_Guaranteed to be called on the cluster state update thread;void onFailure(Throwable t)_;called,when,the,local,node,failed,to,be,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,failure,throwable,t
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1524684173;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1525798022;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1526374795;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1541092382;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1542402632;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1544081506;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback);1548320260;waits for enough incoming joins from master eligible nodes to complete the master election_<p>_You must start accumulating joins before calling this method. See {@link #startElectionContext()}_<p>_The method will return once the local node has been elected as master or some failure/timeout has happened._The exact outcome is communicated via the callback parameter, which is guaranteed to be called.__@param requiredMasterJoins the number of joins from master eligible needed to complete the election_@param timeValue           how long to wait before failing. a timeout is communicated via the callback's onFailure method._@param callback            the result of the election (success or failure) will be communicated by calling methods on this_object;public void waitToBeElectedAsMaster(int requiredMasterJoins, TimeValue timeValue, final ElectionCallback callback) {_        final CountDownLatch done = new CountDownLatch(1)__        final ElectionCallback wrapperCallback = new ElectionCallback() {_            @Override_            public void onElectedAsMaster(ClusterState state) {_                done.countDown()__                callback.onElectedAsMaster(state)__            }__            @Override_            public void onFailure(Throwable t) {_                done.countDown()__                callback.onFailure(t)__            }_        }___        ElectionContext myElectionContext = null___        try {_            _            _            synchronized (this) {_                assert electionContext != null : "waitToBeElectedAsMaster is called we are not accumulating joins"__                myElectionContext = electionContext__                electionContext.onAttemptToBeElected(requiredMasterJoins, wrapperCallback)__                checkPendingJoinsAndElectIfNeeded()__            }__            try {_                if (done.await(timeValue.millis(), TimeUnit.MILLISECONDS)) {_                    _                    return__                }_            } catch (InterruptedException e) {__            }_            if (logger.isTraceEnabled()) {_                final int pendingNodes = myElectionContext.getPendingMasterJoinsCount()__                logger.trace("timed out waiting to be elected. waited [{}]. pending master node joins [{}]", timeValue, pendingNodes)__            }_            failContextIfNeeded(myElectionContext, "timed out waiting to be elected")__        } catch (Exception e) {_            logger.error("unexpected failure while waiting for incoming joins", e)__            if (myElectionContext != null) {_                failContextIfNeeded(myElectionContext, "unexpected failure while waiting for pending joins [" + e.getMessage() + "]")__            }_        }_    };waits,for,enough,incoming,joins,from,master,eligible,nodes,to,complete,the,master,election,p,you,must,start,accumulating,joins,before,calling,this,method,see,link,start,election,context,p,the,method,will,return,once,the,local,node,has,been,elected,as,master,or,some,failure,timeout,has,happened,the,exact,outcome,is,communicated,via,the,callback,parameter,which,is,guaranteed,to,be,called,param,required,master,joins,the,number,of,joins,from,master,eligible,needed,to,complete,the,election,param,time,value,how,long,to,wait,before,failing,a,timeout,is,communicated,via,the,callback,s,on,failure,method,param,callback,the,result,of,the,election,success,or,failure,will,be,communicated,by,calling,methods,on,this,object;public,void,wait,to,be,elected,as,master,int,required,master,joins,time,value,time,value,final,election,callback,callback,final,count,down,latch,done,new,count,down,latch,1,final,election,callback,wrapper,callback,new,election,callback,override,public,void,on,elected,as,master,cluster,state,state,done,count,down,callback,on,elected,as,master,state,override,public,void,on,failure,throwable,t,done,count,down,callback,on,failure,t,election,context,my,election,context,null,try,synchronized,this,assert,election,context,null,wait,to,be,elected,as,master,is,called,we,are,not,accumulating,joins,my,election,context,election,context,election,context,on,attempt,to,be,elected,required,master,joins,wrapper,callback,check,pending,joins,and,elect,if,needed,try,if,done,await,time,value,millis,time,unit,milliseconds,return,catch,interrupted,exception,e,if,logger,is,trace,enabled,final,int,pending,nodes,my,election,context,get,pending,master,joins,count,logger,trace,timed,out,waiting,to,be,elected,waited,pending,master,node,joins,time,value,pending,nodes,fail,context,if,needed,my,election,context,timed,out,waiting,to,be,elected,catch,exception,e,logger,error,unexpected,failure,while,waiting,for,incoming,joins,e,if,my,election,context,null,fail,context,if,needed,my,election,context,unexpected,failure,while,waiting,for,pending,joins,e,get,message
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1524684173;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                node, ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,node,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1525798022;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                node, ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,node,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1526374795;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                node, ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,node,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1541092382;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                node, ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,node,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1542402632;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                node, ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,node,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1544081506;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                new JoinTaskExecutor.Task(node, "no election context"), ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,new,join,task,executor,task,node,no,election,context,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback);1548320260;processes or queues an incoming join request._<p>_Note: doesn't do any validation. This should have been done before.;public synchronized void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {_        if (electionContext != null) {_            electionContext.addIncomingJoin(node, callback)__            checkPendingJoinsAndElectIfNeeded()__        } else {_            masterService.submitStateUpdateTask("zen-disco-node-join",_                new JoinTaskExecutor.Task(node, "no election context"), ClusterStateTaskConfig.build(Priority.URGENT),_                joinTaskExecutor, new JoinTaskListener(callback, logger))__        }_    };processes,or,queues,an,incoming,join,request,p,note,doesn,t,do,any,validation,this,should,have,been,done,before;public,synchronized,void,handle,join,request,final,discovery,node,node,final,membership,action,join,callback,callback,if,election,context,null,election,context,add,incoming,join,node,callback,check,pending,joins,and,elect,if,needed,else,master,service,submit,state,update,task,zen,disco,node,join,new,join,task,executor,task,node,no,election,context,cluster,state,task,config,build,priority,urgent,join,task,executor,new,join,task,listener,callback,logger
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1524684173;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1525798022;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1526374795;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1541092382;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1542402632;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1544081506;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> private synchronized void checkPendingJoinsAndElectIfNeeded();1548320260;checks if there is an on going request to become master and if it has enough pending joins. If so, the node will_become master via a ClusterState update task.;private synchronized void checkPendingJoinsAndElectIfNeeded() {_        assert electionContext != null : "election check requested but no active context"__        final int pendingMasterJoins = electionContext.getPendingMasterJoinsCount()__        if (electionContext.isEnoughPendingJoins(pendingMasterJoins) == false) {_            if (logger.isTraceEnabled()) {_                logger.trace("not enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_        } else {_            if (logger.isTraceEnabled()) {_                logger.trace("have enough joins for election. Got [{}], required [{}]", pendingMasterJoins,_                    electionContext.requiredMasterJoins)__            }_            electionContext.closeAndBecomeMaster()__            electionContext = null_ _        }_    };checks,if,there,is,an,on,going,request,to,become,master,and,if,it,has,enough,pending,joins,if,so,the,node,will,become,master,via,a,cluster,state,update,task;private,synchronized,void,check,pending,joins,and,elect,if,needed,assert,election,context,null,election,check,requested,but,no,active,context,final,int,pending,master,joins,election,context,get,pending,master,joins,count,if,election,context,is,enough,pending,joins,pending,master,joins,false,if,logger,is,trace,enabled,logger,trace,not,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,else,if,logger,is,trace,enabled,logger,trace,have,enough,joins,for,election,got,required,pending,master,joins,election,context,required,master,joins,election,context,close,and,become,master,election,context,null
NodeJoinController -> public synchronized void startElectionContext();1524684173;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1525798022;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1526374795;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1541092382;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1542402632;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1544081506;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> public synchronized void startElectionContext();1548320260;Accumulates any future incoming join request. Pending join requests will be processed in the final steps of becoming a_master or when {@link #stopElectionContext(String)} is called.;public synchronized void startElectionContext() {_        logger.trace("starting an election context, will accumulate joins")__        assert electionContext == null : "double startElectionContext() calls"__        electionContext = new ElectionContext()__    };accumulates,any,future,incoming,join,request,pending,join,requests,will,be,processed,in,the,final,steps,of,becoming,a,master,or,when,link,stop,election,context,string,is,called;public,synchronized,void,start,election,context,logger,trace,starting,an,election,context,will,accumulate,joins,assert,election,context,null,double,start,election,context,calls,election,context,new,election,context
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1524684173;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1525798022;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1526374795;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1541092382;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1542402632;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1544081506;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> ElectionCallback -> void onElectedAsMaster(ClusterState state)_;1548320260;called when the local node is successfully elected as master_Guaranteed to be called on the cluster state update thread;void onElectedAsMaster(ClusterState state)_;called,when,the,local,node,is,successfully,elected,as,master,guaranteed,to,be,called,on,the,cluster,state,update,thread;void,on,elected,as,master,cluster,state,state
NodeJoinController -> public void stopElectionContext(String reason);1524684173;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1525798022;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1526374795;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1541092382;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1542402632;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1544081506;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
NodeJoinController -> public void stopElectionContext(String reason);1548320260;Stopped accumulating joins. All pending joins will be processed. Future joins will be processed immediately;public void stopElectionContext(String reason) {_        logger.trace("stopping election ([{}])", reason)__        synchronized (this) {_            assert electionContext != null : "stopElectionContext() called but not accumulating"__            electionContext.closeAndProcessPending(reason)__            electionContext = null__        }_    };stopped,accumulating,joins,all,pending,joins,will,be,processed,future,joins,will,be,processed,immediately;public,void,stop,election,context,string,reason,logger,trace,stopping,election,reason,synchronized,this,assert,election,context,null,stop,election,context,called,but,not,accumulating,election,context,close,and,process,pending,reason,election,context,null
