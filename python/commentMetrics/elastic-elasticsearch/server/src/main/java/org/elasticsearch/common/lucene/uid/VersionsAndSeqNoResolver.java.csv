# id;timestamp;commentText;codeText;commentWords;codeWords
VersionsAndSeqNoResolver -> public static DocIdAndVersion loadDocIdAndVersion(IndexReader reader, Term term) throws IOException;1524684173;Load the internal doc ID and version for the uid from the reader, returning<ul>_<li>null if the uid wasn't found,_<li>a doc ID and a version otherwise_</ul>;public static DocIdAndVersion loadDocIdAndVersion(IndexReader reader, Term term) throws IOException {_        PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field())__        List<LeafReaderContext> leaves = reader.leaves()__        _        _        for (int i = leaves.size() - 1_ i >= 0_ i--) {_            final LeafReaderContext leaf = leaves.get(i)__            PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord]__            DocIdAndVersion result = lookup.lookupVersion(term.bytes(), leaf)__            if (result != null) {_                return result__            }_        }_        return null__    };load,the,internal,doc,id,and,version,for,the,uid,from,the,reader,returning,ul,li,null,if,the,uid,wasn,t,found,li,a,doc,id,and,a,version,otherwise,ul;public,static,doc,id,and,version,load,doc,id,and,version,index,reader,reader,term,term,throws,ioexception,per,thread,idversion,and,seq,no,lookup,lookups,get,lookup,state,reader,term,field,list,leaf,reader,context,leaves,reader,leaves,for,int,i,leaves,size,1,i,0,i,final,leaf,reader,context,leaf,leaves,get,i,per,thread,idversion,and,seq,no,lookup,lookup,lookups,leaf,ord,doc,id,and,version,result,lookup,lookup,version,term,bytes,leaf,if,result,null,return,result,return,null
VersionsAndSeqNoResolver -> public static DocIdAndVersion loadDocIdAndVersion(IndexReader reader, Term term) throws IOException;1541622390;Load the internal doc ID and version for the uid from the reader, returning<ul>_<li>null if the uid wasn't found,_<li>a doc ID and a version otherwise_</ul>;public static DocIdAndVersion loadDocIdAndVersion(IndexReader reader, Term term) throws IOException {_        PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field())__        List<LeafReaderContext> leaves = reader.leaves()__        _        _        for (int i = leaves.size() - 1_ i >= 0_ i--) {_            final LeafReaderContext leaf = leaves.get(i)__            PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord]__            DocIdAndVersion result = lookup.lookupVersion(term.bytes(), leaf)__            if (result != null) {_                return result__            }_        }_        return null__    };load,the,internal,doc,id,and,version,for,the,uid,from,the,reader,returning,ul,li,null,if,the,uid,wasn,t,found,li,a,doc,id,and,a,version,otherwise,ul;public,static,doc,id,and,version,load,doc,id,and,version,index,reader,reader,term,term,throws,ioexception,per,thread,idversion,and,seq,no,lookup,lookups,get,lookup,state,reader,term,field,list,leaf,reader,context,leaves,reader,leaves,for,int,i,leaves,size,1,i,0,i,final,leaf,reader,context,leaf,leaves,get,i,per,thread,idversion,and,seq,no,lookup,lookup,lookups,leaf,ord,doc,id,and,version,result,lookup,lookup,version,term,bytes,leaf,if,result,null,return,result,return,null
VersionsAndSeqNoResolver -> public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException;1524684173;Load the internal doc ID and sequence number for the uid from the reader, returning<ul>_<li>null if the uid wasn't found,_<li>a doc ID and the associated seqNo otherwise_</ul>;public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException {_        PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field())__        List<LeafReaderContext> leaves = reader.leaves()__        _        _        for (int i = leaves.size() - 1_ i >= 0_ i--) {_            final LeafReaderContext leaf = leaves.get(i)__            PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord]__            DocIdAndSeqNo result = lookup.lookupSeqNo(term.bytes(), leaf)__            if (result != null) {_                return result__            }_        }_        return null__    };load,the,internal,doc,id,and,sequence,number,for,the,uid,from,the,reader,returning,ul,li,null,if,the,uid,wasn,t,found,li,a,doc,id,and,the,associated,seq,no,otherwise,ul;public,static,doc,id,and,seq,no,load,doc,id,and,seq,no,index,reader,reader,term,term,throws,ioexception,per,thread,idversion,and,seq,no,lookup,lookups,get,lookup,state,reader,term,field,list,leaf,reader,context,leaves,reader,leaves,for,int,i,leaves,size,1,i,0,i,final,leaf,reader,context,leaf,leaves,get,i,per,thread,idversion,and,seq,no,lookup,lookup,lookups,leaf,ord,doc,id,and,seq,no,result,lookup,lookup,seq,no,term,bytes,leaf,if,result,null,return,result,return,null
VersionsAndSeqNoResolver -> public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException;1541622390;Loads the internal docId and sequence number of the latest copy for a given uid from the provided reader._The flag {@link DocIdAndSeqNo#isLive} indicates whether the returned document is live or (soft)deleted._This returns {@code null} if no such document matching the given term uid.;public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException {_        final PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field())__        final List<LeafReaderContext> leaves = reader.leaves()__        DocIdAndSeqNo latest = null__        _        _        for (int i = leaves.size() - 1_ i >= 0_ i--) {_            final LeafReaderContext leaf = leaves.get(i)__            final PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord]__            final DocIdAndSeqNo result = lookup.lookupSeqNo(term.bytes(), leaf)__            if (result == null) {_                continue__            }_            if (result.isLive) {_                _                assert latest == null || latest.seqNo <= result.seqNo :_                    "the live doc does not have the highest seq_no_ live_seq_no=" + result.seqNo + " < deleted_seq_no=" + latest.seqNo__                return result__            }_            if (latest == null || latest.seqNo < result.seqNo) {_                latest = result__            }_        }_        return latest__    };loads,the,internal,doc,id,and,sequence,number,of,the,latest,copy,for,a,given,uid,from,the,provided,reader,the,flag,link,doc,id,and,seq,no,is,live,indicates,whether,the,returned,document,is,live,or,soft,deleted,this,returns,code,null,if,no,such,document,matching,the,given,term,uid;public,static,doc,id,and,seq,no,load,doc,id,and,seq,no,index,reader,reader,term,term,throws,ioexception,final,per,thread,idversion,and,seq,no,lookup,lookups,get,lookup,state,reader,term,field,final,list,leaf,reader,context,leaves,reader,leaves,doc,id,and,seq,no,latest,null,for,int,i,leaves,size,1,i,0,i,final,leaf,reader,context,leaf,leaves,get,i,final,per,thread,idversion,and,seq,no,lookup,lookup,lookups,leaf,ord,final,doc,id,and,seq,no,result,lookup,lookup,seq,no,term,bytes,leaf,if,result,null,continue,if,result,is,live,assert,latest,null,latest,seq,no,result,seq,no,the,live,doc,does,not,have,the,highest,result,seq,no,latest,seq,no,return,result,if,latest,null,latest,seq,no,result,seq,no,latest,result,return,latest
VersionsAndSeqNoResolver -> public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException;1544684920;Loads the internal docId and sequence number of the latest copy for a given uid from the provided reader._The flag {@link DocIdAndSeqNo#isLive} indicates whether the returned document is live or (soft)deleted._This returns {@code null} if no such document matching the given term uid.;public static DocIdAndSeqNo loadDocIdAndSeqNo(IndexReader reader, Term term) throws IOException {_        final PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field())__        final List<LeafReaderContext> leaves = reader.leaves()__        DocIdAndSeqNo latest = null__        _        _        for (int i = leaves.size() - 1_ i >= 0_ i--) {_            final LeafReaderContext leaf = leaves.get(i)__            final PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord]__            final DocIdAndSeqNo result = lookup.lookupSeqNo(term.bytes(), leaf)__            if (result == null) {_                continue__            }_            if (result.isLive) {_                _                assert latest == null || latest.seqNo <= result.seqNo :_                    "the live doc does not have the highest seq_no_ live_seq_no=" + result.seqNo + " < deleted_seq_no=" + latest.seqNo__                return result__            }_            if (latest == null || latest.seqNo < result.seqNo) {_                latest = result__            }_        }_        return latest__    };loads,the,internal,doc,id,and,sequence,number,of,the,latest,copy,for,a,given,uid,from,the,provided,reader,the,flag,link,doc,id,and,seq,no,is,live,indicates,whether,the,returned,document,is,live,or,soft,deleted,this,returns,code,null,if,no,such,document,matching,the,given,term,uid;public,static,doc,id,and,seq,no,load,doc,id,and,seq,no,index,reader,reader,term,term,throws,ioexception,final,per,thread,idversion,and,seq,no,lookup,lookups,get,lookup,state,reader,term,field,final,list,leaf,reader,context,leaves,reader,leaves,doc,id,and,seq,no,latest,null,for,int,i,leaves,size,1,i,0,i,final,leaf,reader,context,leaf,leaves,get,i,final,per,thread,idversion,and,seq,no,lookup,lookup,lookups,leaf,ord,final,doc,id,and,seq,no,result,lookup,lookup,seq,no,term,bytes,leaf,if,result,null,continue,if,result,is,live,assert,latest,null,latest,seq,no,result,seq,no,the,live,doc,does,not,have,the,highest,result,seq,no,latest,seq,no,return,result,if,latest,null,latest,seq,no,result,seq,no,latest,result,return,latest
VersionsAndSeqNoResolver -> public static long loadVersion(IndexReader reader, Term term) throws IOException;1524684173;Load the version for the uid from the reader, returning<ul>_<li>{@link Versions#NOT_FOUND} if no matching doc exists,_<li>the version associated with the provided uid otherwise_</ul>;public static long loadVersion(IndexReader reader, Term term) throws IOException {_        final DocIdAndVersion docIdAndVersion = loadDocIdAndVersion(reader, term)__        return docIdAndVersion == null ? NOT_FOUND : docIdAndVersion.version__    };load,the,version,for,the,uid,from,the,reader,returning,ul,li,link,versions,if,no,matching,doc,exists,li,the,version,associated,with,the,provided,uid,otherwise,ul;public,static,long,load,version,index,reader,reader,term,term,throws,ioexception,final,doc,id,and,version,doc,id,and,version,load,doc,id,and,version,reader,term,return,doc,id,and,version,null,doc,id,and,version,version
VersionsAndSeqNoResolver -> public static long loadVersion(IndexReader reader, Term term) throws IOException;1541622390;Load the version for the uid from the reader, returning<ul>_<li>{@link Versions#NOT_FOUND} if no matching doc exists,_<li>the version associated with the provided uid otherwise_</ul>;public static long loadVersion(IndexReader reader, Term term) throws IOException {_        final DocIdAndVersion docIdAndVersion = loadDocIdAndVersion(reader, term)__        return docIdAndVersion == null ? NOT_FOUND : docIdAndVersion.version__    };load,the,version,for,the,uid,from,the,reader,returning,ul,li,link,versions,if,no,matching,doc,exists,li,the,version,associated,with,the,provided,uid,otherwise,ul;public,static,long,load,version,index,reader,reader,term,term,throws,ioexception,final,doc,id,and,version,doc,id,and,version,load,doc,id,and,version,reader,term,return,doc,id,and,version,null,doc,id,and,version,version
