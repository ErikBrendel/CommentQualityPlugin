commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     versions = new HashMap<>().     for (int i = 0. i < size. i++) {         String index = in.readString().         Version upgradeVersion = Version.readVersion(in).         String oldestLuceneSegment = in.readString().         versions.put(index, new Tuple<>(upgradeVersion, oldestLuceneSegment)).     } }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(versions.size()).     for (Map.Entry<String, Tuple<Version, String>> entry : versions.entrySet()) {         out.writeString(entry.getKey()).         Version.writeVersion(entry.getValue().v1(), out).         out.writeString(entry.getValue().v2()).     } }
false;protected;2;11;;@Override protected void addCustomXContentFields(XContentBuilder builder, Params params) throws IOException {     builder.startObject("upgraded_indices").     for (Map.Entry<String, Tuple<Version, String>> entry : versions.entrySet()) {         builder.startObject(entry.getKey()).         builder.field("upgrade_version", entry.getValue().v1()).         builder.field("oldest_lucene_segment_version", entry.getValue().v2()).         builder.endObject().     }     builder.endObject(). }
true;public;0;3;/**  * Returns the highest upgrade version of the node that performed metadata upgrade and the  * the version of the oldest lucene segment for each index that was upgraded.  */ ;/**  * Returns the highest upgrade version of the node that performed metadata upgrade and the  * the version of the oldest lucene segment for each index that was upgraded.  */ public Map<String, Tuple<Version, String>> versions() {     return versions. }
