commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns a new dependency that is not attached to an injection point. The returned dependency is  * nullable.  */ ;/**  * Returns a new dependency that is not attached to an injection point. The returned dependency is  * nullable.  */ public static <T> Dependency<T> get(Key<T> key) {     return new Dependency<>(null, key, true, -1). }
true;public,static;1;7;/**  * Returns the dependencies from the given injection points.  */ ;/**  * Returns the dependencies from the given injection points.  */ public static Set<Dependency<?>> forInjectionPoints(Set<InjectionPoint> injectionPoints) {     Set<Dependency<?>> dependencies = new HashSet<>().     for (InjectionPoint injectionPoint : injectionPoints) {         dependencies.addAll(injectionPoint.getDependencies()).     }     return unmodifiableSet(dependencies). }
true;public;0;3;/**  * Returns the key to the binding that satisfies this dependency.  */ ;/**  * Returns the key to the binding that satisfies this dependency.  */ public Key<T> getKey() {     return this.key. }
true;public;0;3;/**  * Returns true if null is a legal value for this dependency.  */ ;/**  * Returns true if null is a legal value for this dependency.  */ public boolean isNullable() {     return nullable. }
true;public;0;3;/**  * Returns the injection point to which this dependency belongs, or null if this dependency isn't  * attached to a particular injection point.  */ ;/**  * Returns the injection point to which this dependency belongs, or null if this dependency isn't  * attached to a particular injection point.  */ public InjectionPoint getInjectionPoint() {     return injectionPoint. }
true;public;0;3;/**  * Returns the index of this dependency in the injection point's parameter list, or {@code -1} if  * this dependency does not belong to a parameter list. Only method and constructor dependencies  * are elements in a parameter list.  */ ;/**  * Returns the index of this dependency in the injection point's parameter list, or {@code -1} if  * this dependency does not belong to a parameter list. Only method and constructor dependencies  * are elements in a parameter list.  */ public int getParameterIndex() {     return parameterIndex. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(injectionPoint, parameterIndex, key). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (o instanceof Dependency) {         Dependency<?> dependency = (Dependency<?>) o.         return Objects.equals(injectionPoint, dependency.injectionPoint) && Objects.equals(parameterIndex, dependency.parameterIndex) && Objects.equals(key, dependency.key).     } else {         return false.     } }
false;public;0;12;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append(key).     if (injectionPoint != null) {         builder.append("@").append(injectionPoint).         if (parameterIndex != -1) {             builder.append("[").append(parameterIndex).append("]").         }     }     return builder.toString(). }
