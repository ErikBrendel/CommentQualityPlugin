commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ContentPath path() {     return this.contentPath. }
false;public;0;3;;public Settings indexSettings() {     return this.indexSettings. }
false;public;0;3;;public Version indexCreatedVersion() {     return Version.indexCreated(indexSettings). }
false;public;0;3;;public String name() {     return this.name. }
true;public,abstract;1;1;/**  * Returns a newly built mapper.  */ ;/**  * Returns a newly built mapper.  */ public abstract Y build(BuilderContext context).
false;public;0;3;;public String type() {     return type. }
false;public;0;3;;public IndexAnalyzers getIndexAnalyzers() {     return indexAnalyzers. }
false;public;1;3;;public SimilarityProvider getSimilarity(String name) {     return similarityLookupService.apply(name). }
false;public;0;3;;public MapperService mapperService() {     return mapperService. }
false;public;1;3;;public TypeParser typeParser(String type) {     return typeParsers.apply(type). }
false;public;0;3;;public Version indexVersionCreated() {     return indexVersionCreated. }
false;public;0;3;;public Supplier<QueryShardContext> queryShardContextSupplier() {     return queryShardContextSupplier. }
false;public;0;1;;public boolean isWithinMultiField() {     return false. }
false;protected;0;1;;protected Function<String, TypeParser> typeParsers() {     return typeParsers. }
false;protected;0;1;;protected Function<String, SimilarityProvider> similarityLookupService() {     return similarityLookupService. }
false;public;0;2;;@Override public boolean isWithinMultiField() {     return true. }
false;public;1;6;;public ParserContext createMultiFieldContext(ParserContext in) {     return new MultiFieldParserContext(in) {          @Override         public boolean isWithinMultiField() {             return true.         }     }. }
false;;3;1;;Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException.
true;public,final;0;3;/**  * Returns the simple name, which identifies this mapper against other mappers at the same level in the mappers hierarchy  * TODO: make this protected once Mapper and FieldMapper are merged together  */ ;/**  * Returns the simple name, which identifies this mapper against other mappers at the same level in the mappers hierarchy  * TODO: make this protected once Mapper and FieldMapper are merged together  */ public final String simpleName() {     return simpleName. }
true;public,abstract;0;1;/**  * Returns the canonical name which uniquely identifies the mapper against other mappers in a type.  */ ;/**  * Returns the canonical name which uniquely identifies the mapper against other mappers in a type.  */ public abstract String name().
true;public,abstract;0;1;/**  * Returns a name representing the the type of this mapper.  */ ;/**  * Returns a name representing the the type of this mapper.  */ public abstract String typeName().
true;public,abstract;1;1;/**  * Return the merge of {@code mergeWith} into this.  *  Both {@code this} and {@code mergeWith} will be left unmodified.  */ ;/**  * Return the merge of {@code mergeWith} into this.  *  Both {@code this} and {@code mergeWith} will be left unmodified.  */ public abstract Mapper merge(Mapper mergeWith).
true;public,abstract;1;1;/**  * Update the field type of this mapper. This is necessary because some mapping updates  * can modify mappings across several types. This method must return a copy of the mapper  * so that the current mapper is not modified.  */ ;/**  * Update the field type of this mapper. This is necessary because some mapping updates  * can modify mappings across several types. This method must return a copy of the mapper  * so that the current mapper is not modified.  */ public abstract Mapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType).
