commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;// pkg private so tests can manipulate ;// pkg private so tests can manipulate InputStream getStdin() {     return System.in. }
false;protected;3;42;;@Override protected void execute(Terminal terminal, OptionSet options, Environment env) throws Exception {     KeyStoreWrapper keystore = KeyStoreWrapper.load(env.configFile()).     if (keystore == null) {         if (options.has(forceOption) == false && terminal.promptYesNo("The elasticsearch keystore does not exist. Do you want to create it?", false) == false) {             terminal.println("Exiting without creating keystore.").             return.         }         keystore = KeyStoreWrapper.create().         keystore.save(env.configFile(), new char[0]).         terminal.println("Created elasticsearch keystore in " + env.configFile()).     } else {         keystore.decrypt(new char[0]).     }     String setting = arguments.value(options).     if (setting == null) {         throw new UserException(ExitCodes.USAGE, "The setting name can not be null").     }     if (keystore.getSettingNames().contains(setting) && options.has(forceOption) == false) {         if (terminal.promptYesNo("Setting " + setting + " already exists. Overwrite?", false) == false) {             terminal.println("Exiting without modifying keystore.").             return.         }     }     final char[] value.     if (options.has(stdinOption)) {         BufferedReader stdinReader = new BufferedReader(new InputStreamReader(getStdin(), StandardCharsets.UTF_8)).         value = stdinReader.readLine().toCharArray().     } else {         value = terminal.readSecret("Enter value for " + setting + ": ").     }     try {         keystore.setString(setting, value).     } catch (final IllegalArgumentException e) {         throw new UserException(ExitCodes.DATA_ERROR, e.getMessage()).     }     keystore.save(env.configFile(), new char[0]). }
