commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns snapshot name  *  * @return snapshot name  */ ;/**  * Returns snapshot name  *  * @return snapshot name  */ public String getName() {     return name. }
true;public;0;3;/**  * Returns the snapshot UUID  *  * @return snapshot uuid  */ ;/**  * Returns the snapshot UUID  *  * @return snapshot uuid  */ public String getUUID() {     return uuid. }
false;public;0;4;;@Override public String toString() {     return name + "/" + uuid. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final SnapshotId that = (SnapshotId) o.     return name.equals(that.name) && uuid.equals(that.uuid). }
false;public;0;4;;@Override public int hashCode() {     return hashCode. }
false;public;1;4;;@Override public int compareTo(final SnapshotId other) {     return this.name.compareTo(other.name). }
false;private;0;3;;private int computeHashCode() {     return Objects.hash(name, uuid). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeString(uuid). }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(NAME, name).     builder.field(UUID, uuid).     builder.endObject().     return builder. }
false;public,static;1;14;;public static SnapshotId fromXContent(XContentParser parser) throws IOException {     String name = null.     String uuid = null.     while (parser.nextToken() != XContentParser.Token.END_OBJECT) {         String currentFieldName = parser.currentName().         parser.nextToken().         if (NAME.equals(currentFieldName)) {             name = parser.text().         } else if (UUID.equals(currentFieldName)) {             uuid = parser.text().         }     }     return new SnapshotId(name, uuid). }
