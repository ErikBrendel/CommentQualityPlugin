commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;1;10;;protected static <T extends BroadcastResponse> void declareBroadcastFields(ConstructingObjectParser<T, Void> PARSER) {     ConstructingObjectParser<BroadcastResponse, Void> shardsParser = new ConstructingObjectParser<>("_shards", true, arg -> new BroadcastResponse((int) arg[0], (int) arg[1], (int) arg[2], (List<DefaultShardOperationFailedException>) arg[3])).     shardsParser.declareInt(constructorArg(), TOTAL_FIELD).     shardsParser.declareInt(constructorArg(), SUCCESSFUL_FIELD).     shardsParser.declareInt(constructorArg(), FAILED_FIELD).     shardsParser.declareObjectArray(optionalConstructorArg(), (p, c) -> DefaultShardOperationFailedException.fromXContent(p), FAILURES_FIELD).     PARSER.declareObject(constructorArg(), shardsParser, _SHARDS_FIELD). }
true;public;0;3;/**  * The total shards this request ran against.  */ ;/**  * The total shards this request ran against.  */ public int getTotalShards() {     return totalShards. }
true;public;0;3;/**  * The successful shards this request was executed on.  */ ;/**  * The successful shards this request was executed on.  */ public int getSuccessfulShards() {     return successfulShards. }
true;public;0;3;/**  * The failed shards this request was executed on.  */ ;/**  * The failed shards this request was executed on.  */ public int getFailedShards() {     return failedShards. }
true;public;0;7;/**  * The REST status that should be used for the response  */ ;/**  * The REST status that should be used for the response  */ public RestStatus getStatus() {     if (failedShards > 0) {         return shardFailures[0].status().     } else {         return RestStatus.OK.     } }
true;public;0;3;/**  * The list of shard failures exception.  */ ;/**  * The list of shard failures exception.  */ public DefaultShardOperationFailedException[] getShardFailures() {     return shardFailures. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     totalShards = in.readVInt().     successfulShards = in.readVInt().     failedShards = in.readVInt().     int size = in.readVInt().     if (size > 0) {         shardFailures = new DefaultShardOperationFailedException[size].         for (int i = 0. i < size. i++) {             shardFailures[i] = readShardOperationFailed(in).         }     } }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(totalShards).     out.writeVInt(successfulShards).     out.writeVInt(failedShards).     out.writeVInt(shardFailures.length).     for (DefaultShardOperationFailedException exp : shardFailures) {         exp.writeTo(out).     } }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     RestActions.buildBroadcastShardsHeader(builder, params, this).     addCustomXContentFields(builder, params).     builder.endObject().     return builder. }
true;protected;2;2;/**  * Override in subclass to add custom fields following the common `_shards` field  */ ;/**  * Override in subclass to add custom fields following the common `_shards` field  */ protected void addCustomXContentFields(XContentBuilder builder, Params params) throws IOException { }
