commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The size of the expected results, including potential null values.  */ ;/**  * The size of the expected results, including potential null values.  */ public int length() {     return array.length(). }
true;public;2;6;/**  * Sets the element at position {@code i} to the given value.  *  * @param i     the index  * @param value the new value  */ ;/**  * Sets the element at position {@code i} to the given value.  *  * @param i     the index  * @param value the new value  */ public void set(int i, E value) {     array.set(i, value).     if (nonNullList != null) {         // read first, lighter, and most times it will be null...         nonNullList = null.     } }
false;public,final;2;8;;public final void setOnce(int i, E value) {     if (array.compareAndSet(i, null, value) == false) {         throw new IllegalStateException("index [" + i + "] has already been set").     }     if (nonNullList != null) {         // read first, lighter, and most times it will be null...         nonNullList = null.     } }
true;public;1;3;/**  * Gets the current value at position {@code i}.  *  * @param i the index  * @return the current value  */ ;/**  * Gets the current value at position {@code i}.  *  * @param i the index  * @return the current value  */ public E get(int i) {     return array.get(i). }
true;public;0;17;/**  * Returns the it as a non null list.  */ ;/**  * Returns the it as a non null list.  */ public List<E> asList() {     if (nonNullList == null) {         if (array == null || array.length() == 0) {             nonNullList = Collections.emptyList().         } else {             List<E> list = new ArrayList<>(array.length()).             for (int i = 0. i < array.length(). i++) {                 E e = array.get(i).                 if (e != null) {                     list.add(e).                 }             }             nonNullList = list.         }     }     return nonNullList. }
true;public;1;9;/**  * Copies the content of the underlying atomic array to a normal one.  */ ;/**  * Copies the content of the underlying atomic array to a normal one.  */ public E[] toArray(E[] a) {     if (a.length != array.length()) {         throw new ElasticsearchGenerationException("AtomicArrays can only be copied to arrays of the same size").     }     for (int i = 0. i < array.length(). i++) {         a[i] = array.get(i).     }     return a. }
