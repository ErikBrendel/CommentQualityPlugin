commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVInt(shapes.size()).     for (ShapeBuilder shape : shapes) {         out.writeNamedWriteable(shape).     } }
false;public;1;4;;public GeometryCollectionBuilder shape(ShapeBuilder shape) {     this.shapes.add(shape).     return this. }
false;public;1;4;;public GeometryCollectionBuilder point(PointBuilder point) {     this.shapes.add(point).     return this. }
false;public;1;4;;public GeometryCollectionBuilder multiPoint(MultiPointBuilder multiPoint) {     this.shapes.add(multiPoint).     return this. }
false;public;1;4;;public GeometryCollectionBuilder line(LineStringBuilder line) {     this.shapes.add(line).     return this. }
false;public;1;4;;public GeometryCollectionBuilder multiLine(MultiLineStringBuilder multiLine) {     this.shapes.add(multiLine).     return this. }
false;public;1;4;;public GeometryCollectionBuilder polygon(PolygonBuilder polygon) {     this.shapes.add(polygon).     return this. }
false;public;1;4;;public GeometryCollectionBuilder multiPolygon(MultiPolygonBuilder multiPolygon) {     this.shapes.add(multiPolygon).     return this. }
false;public;1;4;;public GeometryCollectionBuilder envelope(EnvelopeBuilder envelope) {     this.shapes.add(envelope).     return this. }
false;public;1;4;;public GeometryCollectionBuilder circle(CircleBuilder circle) {     this.shapes.add(circle).     return this. }
false;public;1;7;;public ShapeBuilder getShapeAt(int i) {     if (i >= this.shapes.size() || i < 0) {         throw new ElasticsearchException("GeometryCollection contains " + this.shapes.size() + " shapes. + " + "No shape found at index " + i).     }     return this.shapes.get(i). }
false;public;0;3;;public int numShapes() {     return this.shapes.size(). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ShapeParser.FIELD_TYPE.getPreferredName(), TYPE.shapeName()).     builder.startArray(ShapeParser.FIELD_GEOMETRIES.getPreferredName()).     for (ShapeBuilder shape : shapes) {         shape.toXContent(builder, params).     }     builder.endArray().     return builder.endObject(). }
false;protected;0;16;;@Override protected StringBuilder contentToWKT() {     StringBuilder sb = new StringBuilder().     if (shapes.isEmpty()) {         sb.append(GeoWKTParser.EMPTY).     } else {         sb.append(GeoWKTParser.LPAREN).         sb.append(shapes.get(0).toWKT()).         for (int i = 1. i < shapes.size(). ++i) {             sb.append(GeoWKTParser.COMMA).             sb.append(shapes.get(i).toWKT()).         }         sb.append(GeoWKTParser.RPAREN).     }     return sb. }
false;public;0;4;;@Override public GeoShapeType type() {     return TYPE. }
false;public;0;8;;@Override public int numDimensions() {     if (shapes == null || shapes.isEmpty()) {         throw new IllegalStateException("unable to get number of dimensions, " + "GeometryCollection has not yet been initialized").     }     return shapes.get(0).numDimensions(). }
false;public;0;15;;@Override public Shape buildS4J() {     List<Shape> shapes = new ArrayList<>(this.shapes.size()).     for (ShapeBuilder shape : this.shapes) {         shapes.add(shape.buildS4J()).     }     if (shapes.size() == 1)         return shapes.get(0).     else         return new XShapeCollection<>(shapes, SPATIAL_CONTEXT). // note: ShapeCollection is probably faster than a Multi* geom. }
false;public;0;13;;@Override public org.elasticsearch.geo.geometry.GeometryCollection<org.elasticsearch.geo.geometry.Geometry> buildGeometry() {     if (this.shapes.isEmpty()) {         return GeometryCollection.EMPTY.     }     List<org.elasticsearch.geo.geometry.Geometry> shapes = new ArrayList<>(this.shapes.size()).     for (ShapeBuilder shape : this.shapes) {         shapes.add(shape.buildGeometry()).     }     return new org.elasticsearch.geo.geometry.GeometryCollection<>(shapes). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(shapes). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     GeometryCollectionBuilder other = (GeometryCollectionBuilder) obj.     return Objects.equals(shapes, other.shapes). }
