commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;1;11;;@Override public synchronized void onInit(List<? extends IndexCommit> commits) throws IOException {     assert commits.isEmpty() == false : "index is opened, but we have no commits".     onCommit(commits).     if (safeCommit != commits.get(commits.size() - 1)) {         throw new IllegalStateException("Engine is opened, but the last commit isn't safe. Global checkpoint [" + globalCheckpointSupplier.getAsLong() + "], seqNo is last commit [" + SequenceNumbers.loadSeqNoInfoFromLuceneCommit(lastCommit.getUserData().entrySet()) + "], " + "seqNos in safe commit [" + SequenceNumbers.loadSeqNoInfoFromLuceneCommit(safeCommit.getUserData().entrySet()) + "]").     } }
false;public,synchronized;1;12;;@Override public synchronized void onCommit(List<? extends IndexCommit> commits) throws IOException {     final int keptPosition = indexOfKeptCommits(commits, globalCheckpointSupplier.getAsLong()).     lastCommit = commits.get(commits.size() - 1).     safeCommit = commits.get(keptPosition).     for (int i = 0. i < keptPosition. i++) {         if (snapshottedCommits.containsKey(commits.get(i)) == false) {             deleteCommit(commits.get(i)).         }     }     updateRetentionPolicy(). }
false;private;1;6;;private void deleteCommit(IndexCommit commit) throws IOException {     assert commit.isDeleted() == false : "Index commit [" + commitDescription(commit) + "] is deleted twice".     logger.debug("Delete index commit [{}]", commitDescription(commit)).     commit.delete().     assert commit.isDeleted() : "Deletion commit [" + commitDescription(commit) + "] was suppressed". }
false;private;0;15;;private void updateRetentionPolicy() throws IOException {     assert Thread.holdsLock(this).     logger.debug("Safe commit [{}], last commit [{}]", commitDescription(safeCommit), commitDescription(lastCommit)).     assert safeCommit.isDeleted() == false : "The safe commit must not be deleted".     final long minRequiredGen = Long.parseLong(safeCommit.getUserData().get(Translog.TRANSLOG_GENERATION_KEY)).     assert lastCommit.isDeleted() == false : "The last commit must not be deleted".     final long lastGen = Long.parseLong(lastCommit.getUserData().get(Translog.TRANSLOG_GENERATION_KEY)).     assert minRequiredGen <= lastGen : "minRequiredGen must not be greater than lastGen".     translogDeletionPolicy.setTranslogGenerationOfLastCommit(lastGen).     translogDeletionPolicy.setMinTranslogGenerationForRecovery(minRequiredGen).     softDeletesPolicy.setLocalCheckpointOfSafeCommit(Long.parseLong(safeCommit.getUserData().get(SequenceNumbers.LOCAL_CHECKPOINT_KEY))). }
true;synchronized;1;7;/**  * Captures the most recent commit point {@link #lastCommit} or the most recent safe commit point {@link #safeCommit}.  * Index files of the capturing commit point won't be released until the commit reference is closed.  *  * @param acquiringSafeCommit captures the most recent safe commit point if true. otherwise captures the most recent commit point.  */ ;/**  * Captures the most recent commit point {@link #lastCommit} or the most recent safe commit point {@link #safeCommit}.  * Index files of the capturing commit point won't be released until the commit reference is closed.  *  * @param acquiringSafeCommit captures the most recent safe commit point if true. otherwise captures the most recent commit point.  */ synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit) {     assert safeCommit != null : "Safe commit is not initialized yet".     assert lastCommit != null : "Last commit is not initialized yet".     final IndexCommit snapshotting = acquiringSafeCommit ? safeCommit : lastCommit.     // increase refCount     snapshottedCommits.addTo(snapshotting, 1).     return new SnapshotIndexCommit(snapshotting). }
true;synchronized;1;12;/**  * Releases an index commit that acquired by {@link #acquireIndexCommit(boolean)}.  *  * @return true if the snapshotting commit can be clean up.  */ ;/**  * Releases an index commit that acquired by {@link #acquireIndexCommit(boolean)}.  *  * @return true if the snapshotting commit can be clean up.  */ synchronized boolean releaseCommit(final IndexCommit snapshotCommit) {     final IndexCommit releasingCommit = ((SnapshotIndexCommit) snapshotCommit).delegate.     assert snapshottedCommits.containsKey(releasingCommit) : "Release non-snapshotted commit." + "snapshotted commits [" + snapshottedCommits + "], releasing commit [" + releasingCommit + "]".     // release refCount     final int refCount = snapshottedCommits.addTo(releasingCommit, -1).     assert refCount >= 0 : "Number of snapshots can not be negative [" + refCount + "]".     if (refCount == 0) {         snapshottedCommits.remove(releasingCommit).     }     // The commit can be clean up only if no pending snapshot and it is neither the safe commit nor last commit.     return refCount == 0 && releasingCommit.equals(safeCommit) == false && releasingCommit.equals(lastCommit) == false. }
true;public,static;2;7;/**  * Find a safe commit point from a list of existing commits based on the supplied global checkpoint.  * The max sequence number of a safe commit point should be at most the global checkpoint.  * If an index was created before v6.2, and we haven't retained a safe commit yet, this method will return the oldest commit.  *  * @param commits          a list of existing commit points  * @param globalCheckpoint the persisted global checkpoint from the translog, see {@link Translog#readGlobalCheckpoint(Path, String)}  * @return a safe commit or the oldest commit if a safe commit is not found  */ ;/**  * Find a safe commit point from a list of existing commits based on the supplied global checkpoint.  * The max sequence number of a safe commit point should be at most the global checkpoint.  * If an index was created before v6.2, and we haven't retained a safe commit yet, this method will return the oldest commit.  *  * @param commits          a list of existing commit points  * @param globalCheckpoint the persisted global checkpoint from the translog, see {@link Translog#readGlobalCheckpoint(Path, String)}  * @return a safe commit or the oldest commit if a safe commit is not found  */ public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException {     if (commits.isEmpty()) {         throw new IllegalArgumentException("Commit list must not empty").     }     final int keptPosition = indexOfKeptCommits(commits, globalCheckpoint).     return commits.get(keptPosition). }
true;private,static;2;28;/**  * Find the highest index position of a safe index commit whose max sequence number is not greater than the global checkpoint.  * Index commits with different translog UUID will be filtered out as they don't belong to this engine.  */ ;/**  * Find the highest index position of a safe index commit whose max sequence number is not greater than the global checkpoint.  * Index commits with different translog UUID will be filtered out as they don't belong to this engine.  */ private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException {     final String expectedTranslogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY).     // Commits are sorted by age (the 0th one is the oldest commit).     for (int i = commits.size() - 1. i >= 0. i--) {         final Map<String, String> commitUserData = commits.get(i).getUserData().         // Ignore index commits with different translog uuid.         if (expectedTranslogUUID.equals(commitUserData.get(Translog.TRANSLOG_UUID_KEY)) == false) {             return i + 1.         }         // 5.x commits do not contain MAX_SEQ_NO, we should not keep it and the older commits.         if (commitUserData.containsKey(SequenceNumbers.MAX_SEQ_NO) == false) {             return Math.min(commits.size() - 1, i + 1).         }         final long maxSeqNoFromCommit = Long.parseLong(commitUserData.get(SequenceNumbers.MAX_SEQ_NO)).         if (maxSeqNoFromCommit <= globalCheckpoint) {             return i.         }     }     /*          * We may reach to this point in these cases:          * 1. In the previous 6.x, we keep only the last commit - which is likely not a safe commit if writes are in progress.          * Thus, after upgrading, we may not find a safe commit until we can reserve one.          * 2. In peer-recovery, if the file-based happens, a replica will be received the latest commit from a primary.          * However, that commit may not be a safe commit if writes are in progress in the primary.          */     return 0. }
true;synchronized;0;3;/**  * Checks whether the deletion policy is holding on to snapshotted commits  */ ;/**  * Checks whether the deletion policy is holding on to snapshotted commits  */ synchronized boolean hasSnapshottedCommits() {     return snapshottedCommits.isEmpty() == false. }
true;;0;11;/**  * Checks if the deletion policy can release some index commits with the latest global checkpoint.  */ ;/**  * Checks if the deletion policy can release some index commits with the latest global checkpoint.  */ boolean hasUnreferencedCommits() throws IOException {     final IndexCommit lastCommit = this.lastCommit.     if (safeCommit != lastCommit) {         // Race condition can happen but harmless         if (lastCommit.getUserData().containsKey(SequenceNumbers.MAX_SEQ_NO)) {             final long maxSeqNoFromLastCommit = Long.parseLong(lastCommit.getUserData().get(SequenceNumbers.MAX_SEQ_NO)).             // We can clean up the current safe commit if the last commit is safe             return globalCheckpointSupplier.getAsLong() >= maxSeqNoFromLastCommit.         }     }     return false. }
true;public,static;1;3;/**  * Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging.  */ ;/**  * Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging.  */ public static String commitDescription(IndexCommit commit) throws IOException {     return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData()). }
false;public;0;4;;@Override public String getSegmentsFileName() {     return delegate.getSegmentsFileName(). }
false;public;0;4;;@Override public Collection<String> getFileNames() throws IOException {     return delegate.getFileNames(). }
false;public;0;4;;@Override public Directory getDirectory() {     return delegate.getDirectory(). }
false;public;0;4;;@Override public void delete() {     throw new UnsupportedOperationException("A snapshot commit does not support deletion"). }
false;public;0;4;;@Override public boolean isDeleted() {     return delegate.isDeleted(). }
false;public;0;4;;@Override public int getSegmentCount() {     return delegate.getSegmentCount(). }
false;public;0;4;;@Override public long getGeneration() {     return delegate.getGeneration(). }
false;public;0;4;;@Override public Map<String, String> getUserData() throws IOException {     return delegate.getUserData(). }
false;public;0;4;;@Override public String toString() {     return "SnapshotIndexCommit{" + delegate + "}". }
