# id;timestamp;commentText;codeText;commentWords;codeWords
CombinedDeletionPolicy -> boolean hasUnreferencedCommits() throws IOException;1524684173;Checks if the deletion policy can release some index commits with the latest global checkpoint.;boolean hasUnreferencedCommits() throws IOException {_        final IndexCommit lastCommit = this.lastCommit__        if (safeCommit != lastCommit) { _            if (lastCommit.getUserData().containsKey(SequenceNumbers.MAX_SEQ_NO)) {_                final long maxSeqNoFromLastCommit = Long.parseLong(lastCommit.getUserData().get(SequenceNumbers.MAX_SEQ_NO))__                _                return globalCheckpointSupplier.getAsLong() >= maxSeqNoFromLastCommit__            }_        }_        return false__    };checks,if,the,deletion,policy,can,release,some,index,commits,with,the,latest,global,checkpoint;boolean,has,unreferenced,commits,throws,ioexception,final,index,commit,last,commit,this,last,commit,if,safe,commit,last,commit,if,last,commit,get,user,data,contains,key,sequence,numbers,final,long,max,seq,no,from,last,commit,long,parse,long,last,commit,get,user,data,get,sequence,numbers,return,global,checkpoint,supplier,get,as,long,max,seq,no,from,last,commit,return,false
CombinedDeletionPolicy -> boolean hasUnreferencedCommits() throws IOException;1535723122;Checks if the deletion policy can release some index commits with the latest global checkpoint.;boolean hasUnreferencedCommits() throws IOException {_        final IndexCommit lastCommit = this.lastCommit__        if (safeCommit != lastCommit) { _            if (lastCommit.getUserData().containsKey(SequenceNumbers.MAX_SEQ_NO)) {_                final long maxSeqNoFromLastCommit = Long.parseLong(lastCommit.getUserData().get(SequenceNumbers.MAX_SEQ_NO))__                _                return globalCheckpointSupplier.getAsLong() >= maxSeqNoFromLastCommit__            }_        }_        return false__    };checks,if,the,deletion,policy,can,release,some,index,commits,with,the,latest,global,checkpoint;boolean,has,unreferenced,commits,throws,ioexception,final,index,commit,last,commit,this,last,commit,if,safe,commit,last,commit,if,last,commit,get,user,data,contains,key,sequence,numbers,final,long,max,seq,no,from,last,commit,long,parse,long,last,commit,get,user,data,get,sequence,numbers,return,global,checkpoint,supplier,get,as,long,max,seq,no,from,last,commit,return,false
CombinedDeletionPolicy -> boolean hasUnreferencedCommits() throws IOException;1549663373;Checks if the deletion policy can release some index commits with the latest global checkpoint.;boolean hasUnreferencedCommits() throws IOException {_        final IndexCommit lastCommit = this.lastCommit__        if (safeCommit != lastCommit) { _            if (lastCommit.getUserData().containsKey(SequenceNumbers.MAX_SEQ_NO)) {_                final long maxSeqNoFromLastCommit = Long.parseLong(lastCommit.getUserData().get(SequenceNumbers.MAX_SEQ_NO))__                _                return globalCheckpointSupplier.getAsLong() >= maxSeqNoFromLastCommit__            }_        }_        return false__    };checks,if,the,deletion,policy,can,release,some,index,commits,with,the,latest,global,checkpoint;boolean,has,unreferenced,commits,throws,ioexception,final,index,commit,last,commit,this,last,commit,if,safe,commit,last,commit,if,last,commit,get,user,data,contains,key,sequence,numbers,final,long,max,seq,no,from,last,commit,long,parse,long,last,commit,get,user,data,get,sequence,numbers,return,global,checkpoint,supplier,get,as,long,max,seq,no,from,last,commit,return,false
CombinedDeletionPolicy -> synchronized boolean releaseCommit(final IndexCommit snapshotCommit);1524684173;Releases an index commit that acquired by {@link #acquireIndexCommit(boolean)}.__@return true if the snapshotting commit can be clean up.;synchronized boolean releaseCommit(final IndexCommit snapshotCommit) {_        final IndexCommit releasingCommit = ((SnapshotIndexCommit) snapshotCommit).delegate__        assert snapshottedCommits.containsKey(releasingCommit) : "Release non-snapshotted commit_" +_            "snapshotted commits [" + snapshottedCommits + "], releasing commit [" + releasingCommit + "]"__        final int refCount = snapshottedCommits.addTo(releasingCommit, -1)_ _        assert refCount >= 0 : "Number of snapshots can not be negative [" + refCount + "]"__        if (refCount == 0) {_            snapshottedCommits.remove(releasingCommit)__        }_        _        return refCount == 0 && releasingCommit.equals(safeCommit) == false && releasingCommit.equals(lastCommit) == false__    };releases,an,index,commit,that,acquired,by,link,acquire,index,commit,boolean,return,true,if,the,snapshotting,commit,can,be,clean,up;synchronized,boolean,release,commit,final,index,commit,snapshot,commit,final,index,commit,releasing,commit,snapshot,index,commit,snapshot,commit,delegate,assert,snapshotted,commits,contains,key,releasing,commit,release,non,snapshotted,commit,snapshotted,commits,snapshotted,commits,releasing,commit,releasing,commit,final,int,ref,count,snapshotted,commits,add,to,releasing,commit,1,assert,ref,count,0,number,of,snapshots,can,not,be,negative,ref,count,if,ref,count,0,snapshotted,commits,remove,releasing,commit,return,ref,count,0,releasing,commit,equals,safe,commit,false,releasing,commit,equals,last,commit,false
CombinedDeletionPolicy -> synchronized boolean releaseCommit(final IndexCommit snapshotCommit);1535723122;Releases an index commit that acquired by {@link #acquireIndexCommit(boolean)}.__@return true if the snapshotting commit can be clean up.;synchronized boolean releaseCommit(final IndexCommit snapshotCommit) {_        final IndexCommit releasingCommit = ((SnapshotIndexCommit) snapshotCommit).delegate__        assert snapshottedCommits.containsKey(releasingCommit) : "Release non-snapshotted commit_" +_            "snapshotted commits [" + snapshottedCommits + "], releasing commit [" + releasingCommit + "]"__        final int refCount = snapshottedCommits.addTo(releasingCommit, -1)_ _        assert refCount >= 0 : "Number of snapshots can not be negative [" + refCount + "]"__        if (refCount == 0) {_            snapshottedCommits.remove(releasingCommit)__        }_        _        return refCount == 0 && releasingCommit.equals(safeCommit) == false && releasingCommit.equals(lastCommit) == false__    };releases,an,index,commit,that,acquired,by,link,acquire,index,commit,boolean,return,true,if,the,snapshotting,commit,can,be,clean,up;synchronized,boolean,release,commit,final,index,commit,snapshot,commit,final,index,commit,releasing,commit,snapshot,index,commit,snapshot,commit,delegate,assert,snapshotted,commits,contains,key,releasing,commit,release,non,snapshotted,commit,snapshotted,commits,snapshotted,commits,releasing,commit,releasing,commit,final,int,ref,count,snapshotted,commits,add,to,releasing,commit,1,assert,ref,count,0,number,of,snapshots,can,not,be,negative,ref,count,if,ref,count,0,snapshotted,commits,remove,releasing,commit,return,ref,count,0,releasing,commit,equals,safe,commit,false,releasing,commit,equals,last,commit,false
CombinedDeletionPolicy -> synchronized boolean releaseCommit(final IndexCommit snapshotCommit);1549663373;Releases an index commit that acquired by {@link #acquireIndexCommit(boolean)}.__@return true if the snapshotting commit can be clean up.;synchronized boolean releaseCommit(final IndexCommit snapshotCommit) {_        final IndexCommit releasingCommit = ((SnapshotIndexCommit) snapshotCommit).delegate__        assert snapshottedCommits.containsKey(releasingCommit) : "Release non-snapshotted commit_" +_            "snapshotted commits [" + snapshottedCommits + "], releasing commit [" + releasingCommit + "]"__        final int refCount = snapshottedCommits.addTo(releasingCommit, -1)_ _        assert refCount >= 0 : "Number of snapshots can not be negative [" + refCount + "]"__        if (refCount == 0) {_            snapshottedCommits.remove(releasingCommit)__        }_        _        return refCount == 0 && releasingCommit.equals(safeCommit) == false && releasingCommit.equals(lastCommit) == false__    };releases,an,index,commit,that,acquired,by,link,acquire,index,commit,boolean,return,true,if,the,snapshotting,commit,can,be,clean,up;synchronized,boolean,release,commit,final,index,commit,snapshot,commit,final,index,commit,releasing,commit,snapshot,index,commit,snapshot,commit,delegate,assert,snapshotted,commits,contains,key,releasing,commit,release,non,snapshotted,commit,snapshotted,commits,snapshotted,commits,releasing,commit,releasing,commit,final,int,ref,count,snapshotted,commits,add,to,releasing,commit,1,assert,ref,count,0,number,of,snapshots,can,not,be,negative,ref,count,if,ref,count,0,snapshotted,commits,remove,releasing,commit,return,ref,count,0,releasing,commit,equals,safe,commit,false,releasing,commit,equals,last,commit,false
CombinedDeletionPolicy -> private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException;1524684173;Find the highest index position of a safe index commit whose max sequence number is not greater than the global checkpoint._Index commits with different translog UUID will be filtered out as they don't belong to this engine.;private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException {_        final String expectedTranslogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)___        _        for (int i = commits.size() - 1_ i >= 0_ i--) {_            final Map<String, String> commitUserData = commits.get(i).getUserData()__            _            if (expectedTranslogUUID.equals(commitUserData.get(Translog.TRANSLOG_UUID_KEY)) == false) {_                return i + 1__            }_            _            if (commitUserData.containsKey(SequenceNumbers.MAX_SEQ_NO) == false) {_                return Math.min(commits.size() - 1, i + 1)__            }_            final long maxSeqNoFromCommit = Long.parseLong(commitUserData.get(SequenceNumbers.MAX_SEQ_NO))__            if (maxSeqNoFromCommit <= globalCheckpoint) {_                return i__            }_        }_        _        return 0__    };find,the,highest,index,position,of,a,safe,index,commit,whose,max,sequence,number,is,not,greater,than,the,global,checkpoint,index,commits,with,different,translog,uuid,will,be,filtered,out,as,they,don,t,belong,to,this,engine;private,static,int,index,of,kept,commits,list,extends,index,commit,commits,long,global,checkpoint,throws,ioexception,final,string,expected,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,for,int,i,commits,size,1,i,0,i,final,map,string,string,commit,user,data,commits,get,i,get,user,data,if,expected,translog,uuid,equals,commit,user,data,get,translog,false,return,i,1,if,commit,user,data,contains,key,sequence,numbers,false,return,math,min,commits,size,1,i,1,final,long,max,seq,no,from,commit,long,parse,long,commit,user,data,get,sequence,numbers,if,max,seq,no,from,commit,global,checkpoint,return,i,return,0
CombinedDeletionPolicy -> private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException;1535723122;Find the highest index position of a safe index commit whose max sequence number is not greater than the global checkpoint._Index commits with different translog UUID will be filtered out as they don't belong to this engine.;private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException {_        final String expectedTranslogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)___        _        for (int i = commits.size() - 1_ i >= 0_ i--) {_            final Map<String, String> commitUserData = commits.get(i).getUserData()__            _            if (expectedTranslogUUID.equals(commitUserData.get(Translog.TRANSLOG_UUID_KEY)) == false) {_                return i + 1__            }_            _            if (commitUserData.containsKey(SequenceNumbers.MAX_SEQ_NO) == false) {_                return Math.min(commits.size() - 1, i + 1)__            }_            final long maxSeqNoFromCommit = Long.parseLong(commitUserData.get(SequenceNumbers.MAX_SEQ_NO))__            if (maxSeqNoFromCommit <= globalCheckpoint) {_                return i__            }_        }_        _        return 0__    };find,the,highest,index,position,of,a,safe,index,commit,whose,max,sequence,number,is,not,greater,than,the,global,checkpoint,index,commits,with,different,translog,uuid,will,be,filtered,out,as,they,don,t,belong,to,this,engine;private,static,int,index,of,kept,commits,list,extends,index,commit,commits,long,global,checkpoint,throws,ioexception,final,string,expected,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,for,int,i,commits,size,1,i,0,i,final,map,string,string,commit,user,data,commits,get,i,get,user,data,if,expected,translog,uuid,equals,commit,user,data,get,translog,false,return,i,1,if,commit,user,data,contains,key,sequence,numbers,false,return,math,min,commits,size,1,i,1,final,long,max,seq,no,from,commit,long,parse,long,commit,user,data,get,sequence,numbers,if,max,seq,no,from,commit,global,checkpoint,return,i,return,0
CombinedDeletionPolicy -> private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException;1549663373;Find the highest index position of a safe index commit whose max sequence number is not greater than the global checkpoint._Index commits with different translog UUID will be filtered out as they don't belong to this engine.;private static int indexOfKeptCommits(List<? extends IndexCommit> commits, long globalCheckpoint) throws IOException {_        final String expectedTranslogUUID = commits.get(commits.size() - 1).getUserData().get(Translog.TRANSLOG_UUID_KEY)___        _        for (int i = commits.size() - 1_ i >= 0_ i--) {_            final Map<String, String> commitUserData = commits.get(i).getUserData()__            _            if (expectedTranslogUUID.equals(commitUserData.get(Translog.TRANSLOG_UUID_KEY)) == false) {_                return i + 1__            }_            _            if (commitUserData.containsKey(SequenceNumbers.MAX_SEQ_NO) == false) {_                return Math.min(commits.size() - 1, i + 1)__            }_            final long maxSeqNoFromCommit = Long.parseLong(commitUserData.get(SequenceNumbers.MAX_SEQ_NO))__            if (maxSeqNoFromCommit <= globalCheckpoint) {_                return i__            }_        }_        _        return 0__    };find,the,highest,index,position,of,a,safe,index,commit,whose,max,sequence,number,is,not,greater,than,the,global,checkpoint,index,commits,with,different,translog,uuid,will,be,filtered,out,as,they,don,t,belong,to,this,engine;private,static,int,index,of,kept,commits,list,extends,index,commit,commits,long,global,checkpoint,throws,ioexception,final,string,expected,translog,uuid,commits,get,commits,size,1,get,user,data,get,translog,for,int,i,commits,size,1,i,0,i,final,map,string,string,commit,user,data,commits,get,i,get,user,data,if,expected,translog,uuid,equals,commit,user,data,get,translog,false,return,i,1,if,commit,user,data,contains,key,sequence,numbers,false,return,math,min,commits,size,1,i,1,final,long,max,seq,no,from,commit,long,parse,long,commit,user,data,get,sequence,numbers,if,max,seq,no,from,commit,global,checkpoint,return,i,return,0
CombinedDeletionPolicy -> synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit);1524684173;Captures the most recent commit point {@link #lastCommit} or the most recent safe commit point {@link #safeCommit}._Index files of the capturing commit point won't be released until the commit reference is closed.__@param acquiringSafeCommit captures the most recent safe commit point if true_ otherwise captures the most recent commit point.;synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit) {_        assert safeCommit != null : "Safe commit is not initialized yet"__        assert lastCommit != null : "Last commit is not initialized yet"__        final IndexCommit snapshotting = acquiringSafeCommit ? safeCommit : lastCommit__        snapshottedCommits.addTo(snapshotting, 1)_ _        return new SnapshotIndexCommit(snapshotting)__    };captures,the,most,recent,commit,point,link,last,commit,or,the,most,recent,safe,commit,point,link,safe,commit,index,files,of,the,capturing,commit,point,won,t,be,released,until,the,commit,reference,is,closed,param,acquiring,safe,commit,captures,the,most,recent,safe,commit,point,if,true,otherwise,captures,the,most,recent,commit,point;synchronized,index,commit,acquire,index,commit,boolean,acquiring,safe,commit,assert,safe,commit,null,safe,commit,is,not,initialized,yet,assert,last,commit,null,last,commit,is,not,initialized,yet,final,index,commit,snapshotting,acquiring,safe,commit,safe,commit,last,commit,snapshotted,commits,add,to,snapshotting,1,return,new,snapshot,index,commit,snapshotting
CombinedDeletionPolicy -> synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit);1535723122;Captures the most recent commit point {@link #lastCommit} or the most recent safe commit point {@link #safeCommit}._Index files of the capturing commit point won't be released until the commit reference is closed.__@param acquiringSafeCommit captures the most recent safe commit point if true_ otherwise captures the most recent commit point.;synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit) {_        assert safeCommit != null : "Safe commit is not initialized yet"__        assert lastCommit != null : "Last commit is not initialized yet"__        final IndexCommit snapshotting = acquiringSafeCommit ? safeCommit : lastCommit__        snapshottedCommits.addTo(snapshotting, 1)_ _        return new SnapshotIndexCommit(snapshotting)__    };captures,the,most,recent,commit,point,link,last,commit,or,the,most,recent,safe,commit,point,link,safe,commit,index,files,of,the,capturing,commit,point,won,t,be,released,until,the,commit,reference,is,closed,param,acquiring,safe,commit,captures,the,most,recent,safe,commit,point,if,true,otherwise,captures,the,most,recent,commit,point;synchronized,index,commit,acquire,index,commit,boolean,acquiring,safe,commit,assert,safe,commit,null,safe,commit,is,not,initialized,yet,assert,last,commit,null,last,commit,is,not,initialized,yet,final,index,commit,snapshotting,acquiring,safe,commit,safe,commit,last,commit,snapshotted,commits,add,to,snapshotting,1,return,new,snapshot,index,commit,snapshotting
CombinedDeletionPolicy -> synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit);1549663373;Captures the most recent commit point {@link #lastCommit} or the most recent safe commit point {@link #safeCommit}._Index files of the capturing commit point won't be released until the commit reference is closed.__@param acquiringSafeCommit captures the most recent safe commit point if true_ otherwise captures the most recent commit point.;synchronized IndexCommit acquireIndexCommit(boolean acquiringSafeCommit) {_        assert safeCommit != null : "Safe commit is not initialized yet"__        assert lastCommit != null : "Last commit is not initialized yet"__        final IndexCommit snapshotting = acquiringSafeCommit ? safeCommit : lastCommit__        snapshottedCommits.addTo(snapshotting, 1)_ _        return new SnapshotIndexCommit(snapshotting)__    };captures,the,most,recent,commit,point,link,last,commit,or,the,most,recent,safe,commit,point,link,safe,commit,index,files,of,the,capturing,commit,point,won,t,be,released,until,the,commit,reference,is,closed,param,acquiring,safe,commit,captures,the,most,recent,safe,commit,point,if,true,otherwise,captures,the,most,recent,commit,point;synchronized,index,commit,acquire,index,commit,boolean,acquiring,safe,commit,assert,safe,commit,null,safe,commit,is,not,initialized,yet,assert,last,commit,null,last,commit,is,not,initialized,yet,final,index,commit,snapshotting,acquiring,safe,commit,safe,commit,last,commit,snapshotted,commits,add,to,snapshotting,1,return,new,snapshot,index,commit,snapshotting
CombinedDeletionPolicy -> public static String commitDescription(IndexCommit commit) throws IOException;1524684173;Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging.;public static String commitDescription(IndexCommit commit) throws IOException {_        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData())__    };returns,a,description,for,a,given,link,index,commit,this,should,be,only,used,for,logging,and,debugging;public,static,string,commit,description,index,commit,commit,throws,ioexception,return,string,format,locale,root,commit,point,segment,s,user,data,s,commit,get,segments,file,name,commit,get,user,data
CombinedDeletionPolicy -> public static String commitDescription(IndexCommit commit) throws IOException;1535723122;Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging.;public static String commitDescription(IndexCommit commit) throws IOException {_        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData())__    };returns,a,description,for,a,given,link,index,commit,this,should,be,only,used,for,logging,and,debugging;public,static,string,commit,description,index,commit,commit,throws,ioexception,return,string,format,locale,root,commit,point,segment,s,user,data,s,commit,get,segments,file,name,commit,get,user,data
CombinedDeletionPolicy -> public static String commitDescription(IndexCommit commit) throws IOException;1549663373;Returns a description for a given {@link IndexCommit}. This should be only used for logging and debugging.;public static String commitDescription(IndexCommit commit) throws IOException {_        return String.format(Locale.ROOT, "CommitPoint{segment[%s], userData[%s]}", commit.getSegmentsFileName(), commit.getUserData())__    };returns,a,description,for,a,given,link,index,commit,this,should,be,only,used,for,logging,and,debugging;public,static,string,commit,description,index,commit,commit,throws,ioexception,return,string,format,locale,root,commit,point,segment,s,user,data,s,commit,get,segments,file,name,commit,get,user,data
CombinedDeletionPolicy -> public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException;1524684173;Find a safe commit point from a list of existing commits based on the supplied global checkpoint._The max sequence number of a safe commit point should be at most the global checkpoint._If an index was created before v6.2, and we haven't retained a safe commit yet, this method will return the oldest commit.__@param commits          a list of existing commit points_@param globalCheckpoint the persisted global checkpoint from the translog, see {@link Translog#readGlobalCheckpoint(Path, String)}_@return a safe commit or the oldest commit if a safe commit is not found;public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException {_        if (commits.isEmpty()) {_            throw new IllegalArgumentException("Commit list must not empty")__        }_        final int keptPosition = indexOfKeptCommits(commits, globalCheckpoint)__        return commits.get(keptPosition)__    };find,a,safe,commit,point,from,a,list,of,existing,commits,based,on,the,supplied,global,checkpoint,the,max,sequence,number,of,a,safe,commit,point,should,be,at,most,the,global,checkpoint,if,an,index,was,created,before,v6,2,and,we,haven,t,retained,a,safe,commit,yet,this,method,will,return,the,oldest,commit,param,commits,a,list,of,existing,commit,points,param,global,checkpoint,the,persisted,global,checkpoint,from,the,translog,see,link,translog,read,global,checkpoint,path,string,return,a,safe,commit,or,the,oldest,commit,if,a,safe,commit,is,not,found;public,static,index,commit,find,safe,commit,point,list,index,commit,commits,long,global,checkpoint,throws,ioexception,if,commits,is,empty,throw,new,illegal,argument,exception,commit,list,must,not,empty,final,int,kept,position,index,of,kept,commits,commits,global,checkpoint,return,commits,get,kept,position
CombinedDeletionPolicy -> public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException;1535723122;Find a safe commit point from a list of existing commits based on the supplied global checkpoint._The max sequence number of a safe commit point should be at most the global checkpoint._If an index was created before v6.2, and we haven't retained a safe commit yet, this method will return the oldest commit.__@param commits          a list of existing commit points_@param globalCheckpoint the persisted global checkpoint from the translog, see {@link Translog#readGlobalCheckpoint(Path, String)}_@return a safe commit or the oldest commit if a safe commit is not found;public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException {_        if (commits.isEmpty()) {_            throw new IllegalArgumentException("Commit list must not empty")__        }_        final int keptPosition = indexOfKeptCommits(commits, globalCheckpoint)__        return commits.get(keptPosition)__    };find,a,safe,commit,point,from,a,list,of,existing,commits,based,on,the,supplied,global,checkpoint,the,max,sequence,number,of,a,safe,commit,point,should,be,at,most,the,global,checkpoint,if,an,index,was,created,before,v6,2,and,we,haven,t,retained,a,safe,commit,yet,this,method,will,return,the,oldest,commit,param,commits,a,list,of,existing,commit,points,param,global,checkpoint,the,persisted,global,checkpoint,from,the,translog,see,link,translog,read,global,checkpoint,path,string,return,a,safe,commit,or,the,oldest,commit,if,a,safe,commit,is,not,found;public,static,index,commit,find,safe,commit,point,list,index,commit,commits,long,global,checkpoint,throws,ioexception,if,commits,is,empty,throw,new,illegal,argument,exception,commit,list,must,not,empty,final,int,kept,position,index,of,kept,commits,commits,global,checkpoint,return,commits,get,kept,position
CombinedDeletionPolicy -> public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException;1549663373;Find a safe commit point from a list of existing commits based on the supplied global checkpoint._The max sequence number of a safe commit point should be at most the global checkpoint._If an index was created before v6.2, and we haven't retained a safe commit yet, this method will return the oldest commit.__@param commits          a list of existing commit points_@param globalCheckpoint the persisted global checkpoint from the translog, see {@link Translog#readGlobalCheckpoint(Path, String)}_@return a safe commit or the oldest commit if a safe commit is not found;public static IndexCommit findSafeCommitPoint(List<IndexCommit> commits, long globalCheckpoint) throws IOException {_        if (commits.isEmpty()) {_            throw new IllegalArgumentException("Commit list must not empty")__        }_        final int keptPosition = indexOfKeptCommits(commits, globalCheckpoint)__        return commits.get(keptPosition)__    };find,a,safe,commit,point,from,a,list,of,existing,commits,based,on,the,supplied,global,checkpoint,the,max,sequence,number,of,a,safe,commit,point,should,be,at,most,the,global,checkpoint,if,an,index,was,created,before,v6,2,and,we,haven,t,retained,a,safe,commit,yet,this,method,will,return,the,oldest,commit,param,commits,a,list,of,existing,commit,points,param,global,checkpoint,the,persisted,global,checkpoint,from,the,translog,see,link,translog,read,global,checkpoint,path,string,return,a,safe,commit,or,the,oldest,commit,if,a,safe,commit,is,not,found;public,static,index,commit,find,safe,commit,point,list,index,commit,commits,long,global,checkpoint,throws,ioexception,if,commits,is,empty,throw,new,illegal,argument,exception,commit,list,must,not,empty,final,int,kept,position,index,of,kept,commits,commits,global,checkpoint,return,commits,get,kept,position
