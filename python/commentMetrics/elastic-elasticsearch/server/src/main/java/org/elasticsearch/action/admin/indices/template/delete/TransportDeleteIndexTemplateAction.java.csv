commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected String executor() {     // we go async right away     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(DeleteIndexTemplateRequest request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;public;1;4;;@Override public void onResponse(MetaDataIndexTemplateService.RemoveResponse response) {     listener.onResponse(new AcknowledgedResponse(response.acknowledged())). }
false;public;1;5;;@Override public void onFailure(Exception e) {     logger.debug(() -> new ParameterizedMessage("failed to delete templates [{}]", request.name()), e).     listener.onFailure(e). }
false;protected;3;20;;@Override protected void masterOperation(final DeleteIndexTemplateRequest request, final ClusterState state, final ActionListener<AcknowledgedResponse> listener) {     indexTemplateService.removeTemplates(new MetaDataIndexTemplateService.RemoveRequest(request.name()).masterTimeout(request.masterNodeTimeout()), new MetaDataIndexTemplateService.RemoveListener() {          @Override         public void onResponse(MetaDataIndexTemplateService.RemoveResponse response) {             listener.onResponse(new AcknowledgedResponse(response.acknowledged())).         }          @Override         public void onFailure(Exception e) {             logger.debug(() -> new ParameterizedMessage("failed to delete templates [{}]", request.name()), e).             listener.onFailure(e).         }     }). }
