commented;modifiers;parameterAmount;loc;comment;code
false;public;2;37;;@Override public void hitsExecute(SearchContext context, SearchHit[] hits) throws IOException {     if (context.trackScores() == false || hits.length == 0 || // scores were already computed since they are needed on the coordinated node to merge top hits     context.sort() == null) {         return.     }     // don't modify the incoming hits     hits = hits.clone().     Arrays.sort(hits, Comparator.comparingInt(SearchHit::docId)).     final IndexSearcher searcher = context.searcher().     final Weight weight = searcher.createWeight(searcher.rewrite(context.query()), ScoreMode.COMPLETE, 1).     Iterator<LeafReaderContext> leafContextIterator = searcher.getIndexReader().leaves().iterator().     LeafReaderContext leafContext = null.     Scorer scorer = null.     for (SearchHit hit : hits) {         if (leafContext == null || leafContext.docBase + leafContext.reader().maxDoc() <= hit.docId()) {             do {                 leafContext = leafContextIterator.next().             } while (leafContext == null || leafContext.docBase + leafContext.reader().maxDoc() <= hit.docId()).             ScorerSupplier scorerSupplier = weight.scorerSupplier(leafContext).             if (scorerSupplier == null) {                 throw new IllegalStateException("Can't compute score on document " + hit + " as it doesn't match the query").             }             // random-access             scorer = scorerSupplier.get(1L).         }         final int leafDocID = hit.docId() - leafContext.docBase.         assert leafDocID >= 0 && leafDocID < leafContext.reader().maxDoc().         int advanced = scorer.iterator().advance(leafDocID).         if (advanced != leafDocID) {             throw new IllegalStateException("Can't compute score on document " + hit + " as it doesn't match the query").         }         hit.score(scorer.score()).     } }
