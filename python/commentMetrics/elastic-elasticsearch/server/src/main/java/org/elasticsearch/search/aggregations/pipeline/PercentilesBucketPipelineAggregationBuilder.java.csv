commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeDoubleArray(percents).     if (out.getVersion().onOrAfter(Version.V_7_0_0)) {         out.writeBoolean(keyed).     } }
true;public;0;3;/**  * Get the percentages to calculate percentiles for in this aggregation  */ ;/**  * Get the percentages to calculate percentiles for in this aggregation  */ public double[] getPercents() {     return percents. }
true;public;1;13;/**  * Set the percentages to calculate percentiles for in this aggregation  */ ;/**  * Set the percentages to calculate percentiles for in this aggregation  */ public PercentilesBucketPipelineAggregationBuilder setPercents(double[] percents) {     if (percents == null) {         throw new IllegalArgumentException("[percents] must not be null: [" + name + "]").     }     for (Double p : percents) {         if (p == null || p < 0.0 || p > 100.0) {             throw new IllegalArgumentException(PERCENTS_FIELD.getPreferredName() + " must only contain non-null doubles from 0.0-100.0 inclusive").         }     }     this.percents = percents.     return this. }
true;public;1;4;/**  * Set whether the XContent should be keyed  */ ;/**  * Set whether the XContent should be keyed  */ public PercentilesBucketPipelineAggregationBuilder setKeyed(boolean keyed) {     this.keyed = keyed.     return this. }
true;public;0;3;/**  * Get whether the XContent should be keyed  */ ;/**  * Get whether the XContent should be keyed  */ public boolean getKeyed() {     return keyed. }
false;protected;1;4;;@Override protected PipelineAggregator createInternal(Map<String, Object> metaData) throws IOException {     return new PercentilesBucketPipelineAggregator(name, percents, keyed, bucketsPaths, gapPolicy(), formatter(), metaData). }
false;public;3;12;;@Override public void doValidate(AggregatorFactory<?> parent, Collection<AggregationBuilder> aggFactories, Collection<PipelineAggregationBuilder> pipelineAggregatorFactories) {     super.doValidate(parent, aggFactories, pipelineAggregatorFactories).     for (Double p : percents) {         if (p == null || p < 0.0 || p > 100.0) {             throw new IllegalStateException(PERCENTS_FIELD.getPreferredName() + " must only contain non-null doubles from 0.0-100.0 inclusive").         }     } }
false;protected;2;8;;@Override protected XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     if (percents != null) {         builder.array(PERCENTS_FIELD.getPreferredName(), percents).     }     builder.field(KEYED_FIELD.getPreferredName(), keyed).     return builder. }
false;protected;3;18;;@Override protected PercentilesBucketPipelineAggregationBuilder buildFactory(String pipelineAggregatorName, String bucketsPath, Map<String, Object> params) {     PercentilesBucketPipelineAggregationBuilder factory = new PercentilesBucketPipelineAggregationBuilder(pipelineAggregatorName, bucketsPath).     double[] percents = (double[]) params.get(PERCENTS_FIELD.getPreferredName()).     if (percents != null) {         factory.setPercents(percents).     }     Boolean keyed = (Boolean) params.get(KEYED_FIELD.getPreferredName()).     if (keyed != null) {         factory.setKeyed(keyed).     }     return factory. }
false;protected;4;17;;@Override protected boolean token(XContentParser parser, String field, XContentParser.Token token, Map<String, Object> params) throws IOException {     if (PERCENTS_FIELD.match(field, parser.getDeprecationHandler()) && token == XContentParser.Token.START_ARRAY) {         DoubleArrayList percents = new DoubleArrayList(10).         while (parser.nextToken() != XContentParser.Token.END_ARRAY) {             percents.add(parser.doubleValue()).         }         params.put(PERCENTS_FIELD.getPreferredName(), percents.toArray()).         return true.     } else if (KEYED_FIELD.match(field, parser.getDeprecationHandler()) && token == XContentParser.Token.VALUE_BOOLEAN) {         params.put(KEYED_FIELD.getPreferredName(), parser.booleanValue()).         return true.     }     return false. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(Arrays.hashCode(percents), keyed). }
false;protected;1;5;;@Override protected boolean innerEquals(BucketMetricsPipelineAggregationBuilder<PercentilesBucketPipelineAggregationBuilder> obj) {     PercentilesBucketPipelineAggregationBuilder other = (PercentilesBucketPipelineAggregationBuilder) obj.     return Objects.deepEquals(percents, other.percents) && Objects.equals(keyed, other.keyed). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
