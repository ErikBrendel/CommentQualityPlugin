# id;timestamp;commentText;codeText;commentWords;codeWords
GeoShapeQueryBuilder -> public String indexedShapePath();1524684173;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1527152864;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1542820501;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1545079094;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1545098986;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1545148496;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1545173310;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1546541316;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1547002001;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public String indexedShapePath();1548434247;@return the path of the indexed Shape that will be used in the Query;public String indexedShapePath() {_        return indexedShapePath__    };return,the,path,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,path,return,indexed,shape,path
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1524684173;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1527152864;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1542820501;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1545079094;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1545098986;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1545148496;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1545173310;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1546541316;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1547002001;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape);1548434247;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name using the given Shape__@param fieldName_Name of the field that will be queried_@param shape_Shape used in the Query;public GeoShapeQueryBuilder(String fieldName, ShapeBuilder shape) {_        this(fieldName, shape, null, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,using,the,given,shape,param,field,name,name,of,the,field,that,will,be,queried,param,shape,shape,used,in,the,query;public,geo,shape,query,builder,string,field,name,shape,builder,shape,this,field,name,shape,null,null
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1524684173;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1527152864;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1542820501;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1545079094;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1545098986;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1545148496;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1545173310;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1546541316;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1547002001;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> public SpatialStrategy strategy();1548434247;@return The spatial strategy to use for building the geo shape Query;public SpatialStrategy strategy() {_        return strategy__    };return,the,spatial,strategy,to,use,for,building,the,geo,shape,query;public,spatial,strategy,strategy,return,strategy
GeoShapeQueryBuilder -> @Deprecated     public String indexedShapeType();1547002001;@return the document type of the indexed Shape that will be used in the_Query__@deprecated Types are in the process of being removed.;@Deprecated_    public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query,deprecated,types,are,in,the,process,of,being,removed;deprecated,public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> @Deprecated     public String indexedShapeType();1548434247;@return the document type of the indexed Shape that will be used in the_Query__@deprecated Types are in the process of being removed.;@Deprecated_    public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query,deprecated,types,are,in,the,process,of,being,removed;deprecated,public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeRouting();1527152864;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1542820501;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1545079094;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1545098986;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1545148496;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1545173310;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1546541316;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1547002001;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public String indexedShapeRouting();1548434247;@return the optional routing to the indexed Shape that will be used in the_Query;public String indexedShapeRouting() {_        return indexedShapeRouting__    };return,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,routing,return,indexed,shape,routing
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1524684173;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1527152864;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1542820501;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1545079094;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1545098986;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1545148496;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1545173310;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1546541316;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1547002001;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder relation(ShapeRelation relation);1548434247;Sets the relation of query shape and indexed shape.__@param relation relation of the shapes_@return this;public GeoShapeQueryBuilder relation(ShapeRelation relation) {_        if (relation == null) {_            throw new IllegalArgumentException("No Shape Relation defined")__        }_        if (SpatialStrategy.TERM.equals(strategy) && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("current strategy [" + strategy.getStrategyName() + "] only supports relation ["_                + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.relation = relation__        return this__    };sets,the,relation,of,query,shape,and,indexed,shape,param,relation,relation,of,the,shapes,return,this;public,geo,shape,query,builder,relation,shape,relation,relation,if,relation,null,throw,new,illegal,argument,exception,no,shape,relation,defined,if,spatial,strategy,term,equals,strategy,relation,shape,relation,intersects,throw,new,illegal,argument,exception,current,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,relation,relation,return,this
GeoShapeQueryBuilder -> public String indexedShapeId();1524684173;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1527152864;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1542820501;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1545079094;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1545098986;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1545148496;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1545173310;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1546541316;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1547002001;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public String indexedShapeId();1548434247;@return the ID of the indexed Shape that will be used in the Query;public String indexedShapeId() {_        return indexedShapeId__    };return,the,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,id,return,indexed,shape,id
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1524684173;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1527152864;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1542820501;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1545079094;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1545098986;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1545148496;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1545173310;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1546541316;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1524684173;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1527152864;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1542820501;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1545079094;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1545098986;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1545148496;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1545173310;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1546541316;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1547002001;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);1548434247;Sets the path of the field in the indexed Shape document that has the Shape itself__@param indexedShapePath Path of the field where the Shape itself is defined_@return this;public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath) {_        this.indexedShapePath = indexedShapePath__        return this__    };sets,the,path,of,the,field,in,the,indexed,shape,document,that,has,the,shape,itself,param,indexed,shape,path,path,of,the,field,where,the,shape,itself,is,defined,return,this;public,geo,shape,query,builder,indexed,shape,path,string,indexed,shape,path,this,indexed,shape,path,indexed,shape,path,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId);1547002001;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,this,field,name,shape,builder,null,indexed,shape,id,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(String fieldName, String indexedShapeId);1548434247;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query;public GeoShapeQueryBuilder(String fieldName, String indexedShapeId) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, null)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query;public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,this,field,name,shape,builder,null,indexed,shape,id,null
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1524684173;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1527152864;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1542820501;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1545079094;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1545098986;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1545148496;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1545173310;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1546541316;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1547002001;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> public boolean ignoreUnmapped();1548434247;Gets whether the query builder will ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public boolean ignoreUnmapped() {_        return ignoreUnmapped__    };gets,whether,the,query,builder,will,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,boolean,ignore,unmapped,return,ignore,unmapped
GeoShapeQueryBuilder -> @Deprecated     public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1547002001;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes_@deprecated use {@link #GeoShapeQueryBuilder(String, String)} instead;@Deprecated_    public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes,deprecated,use,link,geo,shape,query,builder,string,string,instead;deprecated,public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> @Deprecated     public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType);1548434247;Creates a new GeoShapeQueryBuilder whose Query will be against the given_field name and will use the Shape found with the given ID in the given_type__@param fieldName_Name of the field that will be filtered_@param indexedShapeId_ID of the indexed Shape that will be used in the Query_@param indexedShapeType_Index type of the indexed Shapes_@deprecated use {@link #GeoShapeQueryBuilder(String, String)} instead;@Deprecated_    public GeoShapeQueryBuilder(String fieldName, String indexedShapeId, String indexedShapeType) {_        this(fieldName, (ShapeBuilder) null, indexedShapeId, indexedShapeType)__    };creates,a,new,geo,shape,query,builder,whose,query,will,be,against,the,given,field,name,and,will,use,the,shape,found,with,the,given,id,in,the,given,type,param,field,name,name,of,the,field,that,will,be,filtered,param,indexed,shape,id,id,of,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,type,index,type,of,the,indexed,shapes,deprecated,use,link,geo,shape,query,builder,string,string,instead;deprecated,public,geo,shape,query,builder,string,field,name,string,indexed,shape,id,string,indexed,shape,type,this,field,name,shape,builder,null,indexed,shape,id,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1524684173;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1527152864;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1542820501;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1545079094;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1545098986;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1545148496;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1545173310;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1546541316;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1547002001;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);1548434247;Sets the name of the index where the indexed Shape can be found__@param indexedShapeIndex Name of the index where the indexed Shape is_@return this;public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex) {_        this.indexedShapeIndex = indexedShapeIndex__        return this__    };sets,the,name,of,the,index,where,the,indexed,shape,can,be,found,param,indexed,shape,index,name,of,the,index,where,the,indexed,shape,is,return,this;public,geo,shape,query,builder,indexed,shape,index,string,indexed,shape,index,this,indexed,shape,index,indexed,shape,index,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1524684173;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1527152864;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1542820501;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1545079094;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1545098986;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1545148496;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1545173310;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1546541316;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1547002001;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder strategy(SpatialStrategy strategy);1548434247;Defines which spatial strategy will be used for building the geo shape_Query. When not set, the strategy that will be used will be the one that_is associated with the geo shape field in the mappings.__@param strategy_The spatial strategy to use for building the geo shape Query_@return this;public GeoShapeQueryBuilder strategy(SpatialStrategy strategy) {_        if (strategy != null && strategy == SpatialStrategy.TERM && relation != ShapeRelation.INTERSECTS) {_            throw new IllegalArgumentException("strategy [" + strategy.getStrategyName() + "] only supports relation ["_                    + ShapeRelation.INTERSECTS.getRelationName() + "] found relation [" + relation.getRelationName() + "]")__        }_        this.strategy = strategy__        return this__    };defines,which,spatial,strategy,will,be,used,for,building,the,geo,shape,query,when,not,set,the,strategy,that,will,be,used,will,be,the,one,that,is,associated,with,the,geo,shape,field,in,the,mappings,param,strategy,the,spatial,strategy,to,use,for,building,the,geo,shape,query,return,this;public,geo,shape,query,builder,strategy,spatial,strategy,strategy,if,strategy,null,strategy,spatial,strategy,term,relation,shape,relation,intersects,throw,new,illegal,argument,exception,strategy,strategy,get,strategy,name,only,supports,relation,shape,relation,intersects,get,relation,name,found,relation,relation,get,relation,name,this,strategy,strategy,return,this
GeoShapeQueryBuilder -> public ShapeBuilder shape();1524684173;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1527152864;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1542820501;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1545079094;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1545098986;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1545148496;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1545173310;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1546541316;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1547002001;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public ShapeBuilder shape();1548434247;@return the shape used in the Query;public ShapeBuilder shape() {_        return shape__    };return,the,shape,used,in,the,query;public,shape,builder,shape,return,shape
GeoShapeQueryBuilder -> public String indexedShapeType();1524684173;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1527152864;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1542820501;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1545079094;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1545098986;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1545148496;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1545173310;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public String indexedShapeType();1546541316;@return the document type of the indexed Shape that will be used in the_Query;public String indexedShapeType() {_        return indexedShapeType__    };return,the,document,type,of,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,type,return,indexed,shape,type
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1524684173;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1527152864;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1542820501;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1545079094;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1545098986;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1545148496;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1545173310;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1546541316;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1547002001;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped);1548434247;Sets whether the query builder should ignore unmapped fields (and run a_{@link MatchNoDocsQuery} in place of this query) or throw an exception if_the field is unmapped.;public GeoShapeQueryBuilder ignoreUnmapped(boolean ignoreUnmapped) {_        this.ignoreUnmapped = ignoreUnmapped__        return this__    };sets,whether,the,query,builder,should,ignore,unmapped,fields,and,run,a,link,match,no,docs,query,in,place,of,this,query,or,throw,an,exception,if,the,field,is,unmapped;public,geo,shape,query,builder,ignore,unmapped,boolean,ignore,unmapped,this,ignore,unmapped,ignore,unmapped,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1527152864;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1542820501;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1545079094;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1545098986;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1545148496;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1545173310;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1546541316;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1547002001;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder(StreamInput in) throws IOException;1548434247;Read from a stream.;public GeoShapeQueryBuilder(StreamInput in) throws IOException {_        super(in)__        fieldName = in.readString()__        if (in.readBoolean()) {_            shape = in.readNamedWriteable(ShapeBuilder.class)__            indexedShapeId = null__            indexedShapeType = null__        } else {_            shape = null__            indexedShapeId = in.readOptionalString()__            indexedShapeType = in.readOptionalString()__            indexedShapeIndex = in.readOptionalString()__            indexedShapePath = in.readOptionalString()__            if (in.getVersion().onOrAfter(Version.V_6_4_0)) {_                indexedShapeRouting = in.readOptionalString()__            } else {_                indexedShapeRouting = null__            }_        }_        relation = ShapeRelation.readFromStream(in)__        strategy = in.readOptionalWriteable(SpatialStrategy::readFromStream)__        ignoreUnmapped = in.readBoolean()__        supplier = null__    };read,from,a,stream;public,geo,shape,query,builder,stream,input,in,throws,ioexception,super,in,field,name,in,read,string,if,in,read,boolean,shape,in,read,named,writeable,shape,builder,class,indexed,shape,id,null,indexed,shape,type,null,else,shape,null,indexed,shape,id,in,read,optional,string,indexed,shape,type,in,read,optional,string,indexed,shape,index,in,read,optional,string,indexed,shape,path,in,read,optional,string,if,in,get,version,on,or,after,version,indexed,shape,routing,in,read,optional,string,else,indexed,shape,routing,null,relation,shape,relation,read,from,stream,in,strategy,in,read,optional,writeable,spatial,strategy,read,from,stream,ignore,unmapped,in,read,boolean,supplier,null
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1527152864;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1542820501;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1545079094;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1545098986;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1545148496;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1545173310;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1546541316;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1547002001;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting);1548434247;Sets the optional routing to the indexed Shape that will be used in the query__@param indexedShapeRouting indexed shape routing_@return this;public GeoShapeQueryBuilder indexedShapeRouting(String indexedShapeRouting) {_        this.indexedShapeRouting = indexedShapeRouting__        return this__    };sets,the,optional,routing,to,the,indexed,shape,that,will,be,used,in,the,query,param,indexed,shape,routing,indexed,shape,routing,return,this;public,geo,shape,query,builder,indexed,shape,routing,string,indexed,shape,routing,this,indexed,shape,routing,indexed,shape,routing,return,this
GeoShapeQueryBuilder -> public String indexedShapeIndex();1524684173;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1527152864;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1542820501;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1545079094;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1545098986;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1545148496;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1545173310;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1546541316;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1547002001;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> public String indexedShapeIndex();1548434247;@return the index name for the indexed Shape that will be used in the_Query;public String indexedShapeIndex() {_        return indexedShapeIndex__    };return,the,index,name,for,the,indexed,shape,that,will,be,used,in,the,query;public,string,indexed,shape,index,return,indexed,shape,index
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1524684173;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        if (ShapesAvailability.JTS_AVAILABLE == false) {_            throw new IllegalStateException("JTS not available")__        }_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,if,shapes,availability,false,throw,new,illegal,state,exception,jts,not,available,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1527152864;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        if (ShapesAvailability.JTS_AVAILABLE == false) {_            throw new IllegalStateException("JTS not available")__        }_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,if,shapes,availability,false,throw,new,illegal,state,exception,jts,not,available,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1542820501;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        if (ShapesAvailability.JTS_AVAILABLE == false) {_            throw new IllegalStateException("JTS not available")__        }_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,if,shapes,availability,false,throw,new,illegal,state,exception,jts,not,available,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1545079094;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1545098986;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        if (ShapesAvailability.JTS_AVAILABLE == false) {_            throw new IllegalStateException("JTS not available")__        }_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,if,shapes,availability,false,throw,new,illegal,state,exception,jts,not,available,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1545148496;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1545173310;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1546541316;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1547002001;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener);1548434247;Fetches the Shape with the given ID in the given type and index.__@param getRequest_GetRequest containing index, type and id_@param path_Name or path of the field in the Shape Document where the_Shape itself is located;private void fetch(Client client, GetRequest getRequest, String path, ActionListener<ShapeBuilder> listener) {_        getRequest.preference("_local")__        client.get(getRequest, new ActionListener<GetResponse>(){__            @Override_            public void onResponse(GetResponse response) {_                try {_                    if (!response.isExists()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type()_                            + "] not found")__                    }_                    if (response.isSourceEmpty()) {_                        throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() +_                            "] source disabled")__                    }__                    String[] pathElements = path.split("\\.")__                    int currentPathSlot = 0___                    _                    try (XContentParser parser = XContentHelper_                            .createParser(NamedXContentRegistry.EMPTY,_                                    LoggingDeprecationHandler.INSTANCE, response.getSourceAsBytesRef())) {_                        XContentParser.Token currentToken__                        while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                            if (currentToken == XContentParser.Token.FIELD_NAME) {_                                if (pathElements[currentPathSlot].equals(parser.currentName())) {_                                    parser.nextToken()__                                    if (++currentPathSlot == pathElements.length) {_                                        listener.onResponse(ShapeParser.parse(parser))__                                        return__                                    }_                                } else {_                                    parser.nextToken()__                                    parser.skipChildren()__                                }_                            }_                        }_                        throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing " + path + " field")__                    }_                } catch (Exception e) {_                    onFailure(e)__                }_            }__            @Override_            public void onFailure(Exception e) {_                listener.onFailure(e)__            }_        })___    };fetches,the,shape,with,the,given,id,in,the,given,type,and,index,param,get,request,get,request,containing,index,type,and,id,param,path,name,or,path,of,the,field,in,the,shape,document,where,the,shape,itself,is,located;private,void,fetch,client,client,get,request,get,request,string,path,action,listener,shape,builder,listener,get,request,preference,client,get,get,request,new,action,listener,get,response,override,public,void,on,response,get,response,response,try,if,response,is,exists,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,not,found,if,response,is,source,empty,throw,new,illegal,argument,exception,shape,with,id,get,request,id,in,type,get,request,type,source,disabled,string,path,elements,path,split,int,current,path,slot,0,try,xcontent,parser,parser,xcontent,helper,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,response,get,source,as,bytes,ref,xcontent,parser,token,current,token,while,current,token,parser,next,token,xcontent,parser,token,if,current,token,xcontent,parser,token,if,path,elements,current,path,slot,equals,parser,current,name,parser,next,token,if,current,path,slot,path,elements,length,listener,on,response,shape,parser,parse,parser,return,else,parser,next,token,parser,skip,children,throw,new,illegal,state,exception,shape,with,name,get,request,id,found,but,missing,path,field,catch,exception,e,on,failure,e,override,public,void,on,failure,exception,e,listener,on,failure,e
GeoShapeQueryBuilder -> public ShapeRelation relation();1524684173;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1527152864;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1542820501;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1545079094;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1545098986;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1545148496;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1545173310;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1546541316;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1547002001;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public ShapeRelation relation();1548434247;@return the relation of query shape and indexed shape to use in the Query;public ShapeRelation relation() {_        return relation__    };return,the,relation,of,query,shape,and,indexed,shape,to,use,in,the,query;public,shape,relation,relation,return,relation
GeoShapeQueryBuilder -> public String fieldName();1524684173;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1527152864;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1542820501;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1545079094;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1545098986;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1545148496;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1545173310;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1546541316;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1547002001;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
GeoShapeQueryBuilder -> public String fieldName();1548434247;@return the name of the field that will be queried;public String fieldName() {_        return fieldName__    };return,the,name,of,the,field,that,will,be,queried;public,string,field,name,return,field,name
