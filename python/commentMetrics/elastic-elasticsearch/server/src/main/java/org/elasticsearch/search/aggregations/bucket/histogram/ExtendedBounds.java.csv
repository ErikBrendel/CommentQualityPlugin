commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalLong(min).     out.writeOptionalLong(max).     out.writeOptionalString(minAsStr).     out.writeOptionalString(maxAsStr). }
true;;3;17;/**  * Parse the bounds and perform any delayed validation. Returns the result of the parsing.  */ ;/**  * Parse the bounds and perform any delayed validation. Returns the result of the parsing.  */ ExtendedBounds parseAndValidate(String aggName, SearchContext context, DocValueFormat format) {     Long min = this.min.     Long max = this.max.     assert format != null.     if (minAsStr != null) {         min = format.parseLong(minAsStr, false, context.getQueryShardContext()::nowInMillis).     }     if (maxAsStr != null) {         // TODO: Should we rather pass roundUp=true?         max = format.parseLong(maxAsStr, false, context.getQueryShardContext()::nowInMillis).     }     if (min != null && max != null && min.compareTo(max) > 0) {         throw new SearchParseException(context, "[extended_bounds.min][" + min + "] cannot be greater than " + "[extended_bounds.max][" + max + "] for histogram aggregation [" + aggName + "]", null).     }     return new ExtendedBounds(min, max, minAsStr, maxAsStr). }
false;;1;3;;ExtendedBounds round(Rounding rounding) {     return new ExtendedBounds(min != null ? rounding.round(min) : null, max != null ? rounding.round(max) : null). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(EXTENDED_BOUNDS_FIELD.getPreferredName()).     if (min != null) {         builder.field(MIN_FIELD.getPreferredName(), min).     } else {         builder.field(MIN_FIELD.getPreferredName(), minAsStr).     }     if (max != null) {         builder.field(MAX_FIELD.getPreferredName(), max).     } else {         builder.field(MAX_FIELD.getPreferredName(), maxAsStr).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(min, max, minAsStr, maxAsStr). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     ExtendedBounds other = (ExtendedBounds) obj.     return Objects.equals(min, other.min) && Objects.equals(max, other.max) && Objects.equals(minAsStr, other.minAsStr) && Objects.equals(maxAsStr, other.maxAsStr). }
false;public;0;3;;public Long getMin() {     return min. }
false;public;0;3;;public Long getMax() {     return max. }
false;public;0;26;;@Override public String toString() {     StringBuilder b = new StringBuilder().     if (min != null) {         b.append(min).         if (minAsStr != null) {             b.append('(').append(minAsStr).append(')').         }     } else {         if (minAsStr != null) {             b.append(minAsStr).         }     }     b.append("--").     if (max != null) {         b.append(min).         if (maxAsStr != null) {             b.append('(').append(maxAsStr).append(')').         }     } else {         if (maxAsStr != null) {             b.append(maxAsStr).         }     }     return b.toString(). }
