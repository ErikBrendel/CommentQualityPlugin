commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the TaskId to look up.  */ ;/**  * Get the TaskId to look up.  */ public TaskId getTaskId() {     return taskId. }
true;public;1;4;/**  * Set the TaskId to look up. Required.  */ ;/**  * Set the TaskId to look up. Required.  */ public GetTaskRequest setTaskId(TaskId taskId) {     this.taskId = taskId.     return this. }
true;public;0;3;/**  * Should this request wait for all found tasks to complete?  */ ;/**  * Should this request wait for all found tasks to complete?  */ public boolean getWaitForCompletion() {     return waitForCompletion. }
true;public;1;4;/**  * Should this request wait for all found tasks to complete?  */ ;/**  * Should this request wait for all found tasks to complete?  */ public GetTaskRequest setWaitForCompletion(boolean waitForCompletion) {     this.waitForCompletion = waitForCompletion.     return this. }
true;public;0;3;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ ;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ public TimeValue getTimeout() {     return timeout. }
true;public;1;4;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ ;/**  * Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.  */ public GetTaskRequest setTimeout(TimeValue timeout) {     this.timeout = timeout.     return this. }
false;;2;8;;GetTaskRequest nodeRequest(String thisNodeId, long thisTaskId) {     GetTaskRequest copy = new GetTaskRequest().     copy.setParentTask(thisNodeId, thisTaskId).     copy.setTaskId(taskId).     copy.setTimeout(timeout).     copy.setWaitForCompletion(waitForCompletion).     return copy. }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (false == getTaskId().isSet()) {         validationException = addValidationError("task id is required", validationException).     }     return validationException. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     taskId = TaskId.readFromStream(in).     timeout = in.readOptionalTimeValue().     waitForCompletion = in.readBoolean(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     taskId.writeTo(out).     out.writeOptionalTimeValue(timeout).     out.writeBoolean(waitForCompletion). }
