commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public;1;12;;@Override public void onResponse(NodesInfoResponse nodeInfos) {     try {         Map<DiscoveryNode, IngestInfo> ingestInfos = new HashMap<>().         for (NodeInfo nodeInfo : nodeInfos.getNodes()) {             ingestInfos.put(nodeInfo.getNode(), nodeInfo.getIngest()).         }         ingestService.putPipeline(ingestInfos, request, listener).     } catch (Exception e) {         onFailure(e).     } }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;protected;3;26;;@Override protected void masterOperation(PutPipelineRequest request, ClusterState state, ActionListener<AcknowledgedResponse> listener) throws Exception {     NodesInfoRequest nodesInfoRequest = new NodesInfoRequest().     nodesInfoRequest.clear().     nodesInfoRequest.ingest(true).     client.admin().cluster().nodesInfo(nodesInfoRequest, new ActionListener<NodesInfoResponse>() {          @Override         public void onResponse(NodesInfoResponse nodeInfos) {             try {                 Map<DiscoveryNode, IngestInfo> ingestInfos = new HashMap<>().                 for (NodeInfo nodeInfo : nodeInfos.getNodes()) {                     ingestInfos.put(nodeInfo.getNode(), nodeInfo.getIngest()).                 }                 ingestService.putPipeline(ingestInfos, request, listener).             } catch (Exception e) {                 onFailure(e).             }         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(PutPipelineRequest request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
