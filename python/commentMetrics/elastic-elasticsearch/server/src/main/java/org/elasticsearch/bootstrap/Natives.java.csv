commented;modifiers;parameterAmount;loc;comment;code
false;static;0;7;;static void tryMlockall() {     if (!JNA_AVAILABLE) {         logger.warn("cannot mlockall because JNA is not available").         return.     }     JNANatives.tryMlockall(). }
false;static;0;7;;static boolean definitelyRunningAsRoot() {     if (!JNA_AVAILABLE) {         logger.warn("cannot check if running as root because JNA is not available").         return false.     }     return JNANatives.definitelyRunningAsRoot(). }
false;static;0;7;;static void tryVirtualLock() {     if (!JNA_AVAILABLE) {         logger.warn("cannot virtual lock because JNA is not available").         return.     }     JNANatives.tryVirtualLock(). }
true;static;1;7;/**  * Retrieves the short path form of the specified path.  *  * @param path the path  * @return the short path name (or the original path if getting the short path name fails for any reason)  */ ;/**  * Retrieves the short path form of the specified path.  *  * @param path the path  * @return the short path name (or the original path if getting the short path name fails for any reason)  */ static String getShortPathName(final String path) {     if (!JNA_AVAILABLE) {         logger.warn("cannot obtain short path for [{}] because JNA is not available", path).         return path.     }     return JNANatives.getShortPathName(path). }
false;static;1;7;;static void addConsoleCtrlHandler(ConsoleCtrlHandler handler) {     if (!JNA_AVAILABLE) {         logger.warn("cannot register console handler because JNA is not available").         return.     }     JNANatives.addConsoleCtrlHandler(handler). }
false;static;0;6;;static boolean isMemoryLocked() {     if (!JNA_AVAILABLE) {         return false.     }     return JNANatives.LOCAL_MLOCKALL. }
false;static;1;7;;static void tryInstallSystemCallFilter(Path tmpFile) {     if (!JNA_AVAILABLE) {         logger.warn("cannot install system call filter because JNA is not available").         return.     }     JNANatives.tryInstallSystemCallFilter(tmpFile). }
false;static;0;7;;static void trySetMaxNumberOfThreads() {     if (!JNA_AVAILABLE) {         logger.warn("cannot getrlimit RLIMIT_NPROC because JNA is not available").         return.     }     JNANatives.trySetMaxNumberOfThreads(). }
false;static;0;7;;static void trySetMaxSizeVirtualMemory() {     if (!JNA_AVAILABLE) {         logger.warn("cannot getrlimit RLIMIT_AS because JNA is not available").         return.     }     JNANatives.trySetMaxSizeVirtualMemory(). }
false;static;0;7;;static void trySetMaxFileSize() {     if (!JNA_AVAILABLE) {         logger.warn("cannot getrlimit RLIMIT_FSIZE because JNA is not available").         return.     }     JNANatives.trySetMaxFileSize(). }
false;static;0;6;;static boolean isSystemCallFilterInstalled() {     if (!JNA_AVAILABLE) {         return false.     }     return JNANatives.LOCAL_SYSTEM_CALL_FILTER. }
