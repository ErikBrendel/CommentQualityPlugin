commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public void collect(int doc, long bucket) throws IOException {     assert bucket == 0 : "global aggregator can only be a top level aggregator".     collectBucket(sub, doc, bucket). }
false;public;2;11;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     return new LeafBucketCollectorBase(sub, null) {          @Override         public void collect(int doc, long bucket) throws IOException {             assert bucket == 0 : "global aggregator can only be a top level aggregator".             collectBucket(sub, doc, bucket).         }     }. }
false;public;1;6;;@Override public InternalAggregation buildAggregation(long owningBucketOrdinal) throws IOException {     assert owningBucketOrdinal == 0 : "global aggregator can only be a top level aggregator".     return new InternalGlobal(name, bucketDocCount(owningBucketOrdinal), bucketAggregations(owningBucketOrdinal), pipelineAggregators(), metaData()). }
false;public;0;5;;@Override public InternalAggregation buildEmptyAggregation() {     throw new UnsupportedOperationException("global aggregations cannot serve as sub-aggregations, hence should never be called on #buildEmptyAggregations"). }
