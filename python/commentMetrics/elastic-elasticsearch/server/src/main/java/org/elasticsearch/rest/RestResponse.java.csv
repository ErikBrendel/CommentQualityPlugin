commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * The response content type.  */ ;/**  * The response content type.  */ public abstract String contentType().
true;public,abstract;0;1;/**  * The response content. Note, if the content is {@link org.elasticsearch.common.lease.Releasable} it  * should automatically be released when done by the channel sending it.  */ ;/**  * The response content. Note, if the content is {@link org.elasticsearch.common.lease.Releasable} it  * should automatically be released when done by the channel sending it.  */ public abstract BytesReference content().
true;public,abstract;0;1;/**  * The rest status code.  */ ;/**  * The rest status code.  */ public abstract RestStatus status().
false;public;1;14;;public void copyHeaders(ElasticsearchException ex) {     Set<String> headerKeySet = ex.getHeaderKeys().     if (customHeaders == null) {         customHeaders = new HashMap<>(headerKeySet.size()).     }     for (String key : headerKeySet) {         List<String> values = customHeaders.get(key).         if (values == null) {             values = new ArrayList<>().             customHeaders.put(key, values).         }         values.addAll(ex.getHeader(key)).     } }
true;public;2;11;/**  * Add a custom header.  */ ;/**  * Add a custom header.  */ public void addHeader(String name, String value) {     if (customHeaders == null) {         customHeaders = new HashMap<>(2).     }     List<String> header = customHeaders.get(name).     if (header == null) {         header = new ArrayList<>().         customHeaders.put(name, header).     }     header.add(value). }
true;public;0;7;/**  * Returns custom headers that have been added. This method should not be used to mutate headers.  */ ;/**  * Returns custom headers that have been added. This method should not be used to mutate headers.  */ public Map<String, List<String>> getHeaders() {     if (customHeaders == null) {         return Collections.emptyMap().     } else {         return customHeaders.     } }
