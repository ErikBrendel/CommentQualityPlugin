# id;timestamp;commentText;codeText;commentWords;codeWords
BucketsAggregator -> public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1524684173;Same as {@link #collectBucket(LeafBucketCollector, int, long)}, but doesn't check if the docCounts needs to be re-sized.;public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        docCounts.increment(bucketOrd, 1)__        subCollector.collect(doc, bucketOrd)__    };same,as,link,collect,bucket,leaf,bucket,collector,int,long,but,doesn,t,check,if,the,doc,counts,needs,to,be,re,sized;public,final,void,collect,existing,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,doc,counts,increment,bucket,ord,1,sub,collector,collect,doc,bucket,ord
BucketsAggregator -> public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1525334055;Same as {@link #collectBucket(LeafBucketCollector, int, long)}, but doesn't check if the docCounts needs to be re-sized.;public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        docCounts.increment(bucketOrd, 1)__        subCollector.collect(doc, bucketOrd)__    };same,as,link,collect,bucket,leaf,bucket,collector,int,long,but,doesn,t,check,if,the,doc,counts,needs,to,be,re,sized;public,final,void,collect,existing,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,doc,counts,increment,bucket,ord,1,sub,collector,collect,doc,bucket,ord
BucketsAggregator -> public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1531729807;Same as {@link #collectBucket(LeafBucketCollector, int, long)}, but doesn't check if the docCounts needs to be re-sized.;public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        docCounts.increment(bucketOrd, 1)__        subCollector.collect(doc, bucketOrd)__    };same,as,link,collect,bucket,leaf,bucket,collector,int,long,but,doesn,t,check,if,the,doc,counts,needs,to,be,re,sized;public,final,void,collect,existing,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,doc,counts,increment,bucket,ord,1,sub,collector,collect,doc,bucket,ord
BucketsAggregator -> public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1544110272;Same as {@link #collectBucket(LeafBucketCollector, int, long)}, but doesn't check if the docCounts needs to be re-sized.;public final void collectExistingBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        docCounts.increment(bucketOrd, 1)__        subCollector.collect(doc, bucketOrd)__    };same,as,link,collect,bucket,leaf,bucket,collector,int,long,but,doesn,t,check,if,the,doc,counts,needs,to,be,re,sized;public,final,void,collect,existing,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,doc,counts,increment,bucket,ord,1,sub,collector,collect,doc,bucket,ord
BucketsAggregator -> public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1524684173;Utility method to collect the given doc in the given bucket (identified by the bucket ordinal);public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        grow(bucketOrd + 1)__        collectExistingBucket(subCollector, doc, bucketOrd)__    };utility,method,to,collect,the,given,doc,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,collect,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,grow,bucket,ord,1,collect,existing,bucket,sub,collector,doc,bucket,ord
BucketsAggregator -> public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1525334055;Utility method to collect the given doc in the given bucket (identified by the bucket ordinal);public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        grow(bucketOrd + 1)__        collectExistingBucket(subCollector, doc, bucketOrd)__    };utility,method,to,collect,the,given,doc,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,collect,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,grow,bucket,ord,1,collect,existing,bucket,sub,collector,doc,bucket,ord
BucketsAggregator -> public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1531729807;Utility method to collect the given doc in the given bucket (identified by the bucket ordinal);public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        grow(bucketOrd + 1)__        collectExistingBucket(subCollector, doc, bucketOrd)__    };utility,method,to,collect,the,given,doc,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,collect,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,grow,bucket,ord,1,collect,existing,bucket,sub,collector,doc,bucket,ord
BucketsAggregator -> public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException;1544110272;Utility method to collect the given doc in the given bucket (identified by the bucket ordinal);public final void collectBucket(LeafBucketCollector subCollector, int doc, long bucketOrd) throws IOException {_        grow(bucketOrd + 1)__        collectExistingBucket(subCollector, doc, bucketOrd)__    };utility,method,to,collect,the,given,doc,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,collect,bucket,leaf,bucket,collector,sub,collector,int,doc,long,bucket,ord,throws,ioexception,grow,bucket,ord,1,collect,existing,bucket,sub,collector,doc,bucket,ord
BucketsAggregator -> protected final void consumeBucketsAndMaybeBreak(int count);1524684173;Adds <tt>count</tt> buckets to the global count for the request and fails if this number is greater than_the maximum number of buckets allowed in a response;protected final void consumeBucketsAndMaybeBreak(int count) {_        multiBucketConsumer.accept(count)__    };adds,tt,count,tt,buckets,to,the,global,count,for,the,request,and,fails,if,this,number,is,greater,than,the,maximum,number,of,buckets,allowed,in,a,response;protected,final,void,consume,buckets,and,maybe,break,int,count,multi,bucket,consumer,accept,count
BucketsAggregator -> protected final void consumeBucketsAndMaybeBreak(int count);1525334055;Adds {@code count} buckets to the global count for the request and fails if this number is greater than_the maximum number of buckets allowed in a response;protected final void consumeBucketsAndMaybeBreak(int count) {_        multiBucketConsumer.accept(count)__    };adds,code,count,buckets,to,the,global,count,for,the,request,and,fails,if,this,number,is,greater,than,the,maximum,number,of,buckets,allowed,in,a,response;protected,final,void,consume,buckets,and,maybe,break,int,count,multi,bucket,consumer,accept,count
BucketsAggregator -> protected final void consumeBucketsAndMaybeBreak(int count);1531729807;Adds {@code count} buckets to the global count for the request and fails if this number is greater than_the maximum number of buckets allowed in a response;protected final void consumeBucketsAndMaybeBreak(int count) {_        multiBucketConsumer.accept(count)__    };adds,code,count,buckets,to,the,global,count,for,the,request,and,fails,if,this,number,is,greater,than,the,maximum,number,of,buckets,allowed,in,a,response;protected,final,void,consume,buckets,and,maybe,break,int,count,multi,bucket,consumer,accept,count
BucketsAggregator -> protected final void consumeBucketsAndMaybeBreak(int count);1544110272;Adds {@code count} buckets to the global count for the request and fails if this number is greater than_the maximum number of buckets allowed in a response;protected final void consumeBucketsAndMaybeBreak(int count) {_        multiBucketConsumer.accept(count)__    };adds,code,count,buckets,to,the,global,count,for,the,request,and,fails,if,this,number,is,greater,than,the,maximum,number,of,buckets,allowed,in,a,response;protected,final,void,consume,buckets,and,maybe,break,int,count,multi,bucket,consumer,accept,count
BucketsAggregator -> public final void grow(long maxBucketOrd);1524684173;Ensure there are at least <code>maxBucketOrd</code> buckets available.;public final void grow(long maxBucketOrd) {_        docCounts = bigArrays.grow(docCounts, maxBucketOrd)__    };ensure,there,are,at,least,code,max,bucket,ord,code,buckets,available;public,final,void,grow,long,max,bucket,ord,doc,counts,big,arrays,grow,doc,counts,max,bucket,ord
BucketsAggregator -> public final void grow(long maxBucketOrd);1525334055;Ensure there are at least <code>maxBucketOrd</code> buckets available.;public final void grow(long maxBucketOrd) {_        docCounts = bigArrays.grow(docCounts, maxBucketOrd)__    };ensure,there,are,at,least,code,max,bucket,ord,code,buckets,available;public,final,void,grow,long,max,bucket,ord,doc,counts,big,arrays,grow,doc,counts,max,bucket,ord
BucketsAggregator -> public final void grow(long maxBucketOrd);1531729807;Ensure there are at least <code>maxBucketOrd</code> buckets available.;public final void grow(long maxBucketOrd) {_        docCounts = bigArrays.grow(docCounts, maxBucketOrd)__    };ensure,there,are,at,least,code,max,bucket,ord,code,buckets,available;public,final,void,grow,long,max,bucket,ord,doc,counts,big,arrays,grow,doc,counts,max,bucket,ord
BucketsAggregator -> public final void grow(long maxBucketOrd);1544110272;Ensure there are at least <code>maxBucketOrd</code> buckets available.;public final void grow(long maxBucketOrd) {_        docCounts = bigArrays.grow(docCounts, maxBucketOrd)__    };ensure,there,are,at,least,code,max,bucket,ord,code,buckets,available;public,final,void,grow,long,max,bucket,ord,doc,counts,big,arrays,grow,doc,counts,max,bucket,ord
BucketsAggregator -> public final void incrementBucketDocCount(long bucketOrd, int inc);1524684173;Utility method to increment the doc counts of the given bucket (identified by the bucket ordinal);public final void incrementBucketDocCount(long bucketOrd, int inc) {_        docCounts = bigArrays.grow(docCounts, bucketOrd + 1)__        docCounts.increment(bucketOrd, inc)__    };utility,method,to,increment,the,doc,counts,of,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,increment,bucket,doc,count,long,bucket,ord,int,inc,doc,counts,big,arrays,grow,doc,counts,bucket,ord,1,doc,counts,increment,bucket,ord,inc
BucketsAggregator -> public final void incrementBucketDocCount(long bucketOrd, int inc);1525334055;Utility method to increment the doc counts of the given bucket (identified by the bucket ordinal);public final void incrementBucketDocCount(long bucketOrd, int inc) {_        docCounts = bigArrays.grow(docCounts, bucketOrd + 1)__        docCounts.increment(bucketOrd, inc)__    };utility,method,to,increment,the,doc,counts,of,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,increment,bucket,doc,count,long,bucket,ord,int,inc,doc,counts,big,arrays,grow,doc,counts,bucket,ord,1,doc,counts,increment,bucket,ord,inc
BucketsAggregator -> public final void incrementBucketDocCount(long bucketOrd, int inc);1531729807;Utility method to increment the doc counts of the given bucket (identified by the bucket ordinal);public final void incrementBucketDocCount(long bucketOrd, int inc) {_        docCounts = bigArrays.grow(docCounts, bucketOrd + 1)__        docCounts.increment(bucketOrd, inc)__    };utility,method,to,increment,the,doc,counts,of,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,increment,bucket,doc,count,long,bucket,ord,int,inc,doc,counts,big,arrays,grow,doc,counts,bucket,ord,1,doc,counts,increment,bucket,ord,inc
BucketsAggregator -> public final void incrementBucketDocCount(long bucketOrd, int inc);1544110272;Utility method to increment the doc counts of the given bucket (identified by the bucket ordinal);public final void incrementBucketDocCount(long bucketOrd, int inc) {_        docCounts = bigArrays.grow(docCounts, bucketOrd + 1)__        docCounts.increment(bucketOrd, inc)__    };utility,method,to,increment,the,doc,counts,of,the,given,bucket,identified,by,the,bucket,ordinal;public,final,void,increment,bucket,doc,count,long,bucket,ord,int,inc,doc,counts,big,arrays,grow,doc,counts,bucket,ord,1,doc,counts,increment,bucket,ord,inc
BucketsAggregator -> public final long maxBucketOrd();1524684173;Return an upper bound of the maximum bucket ordinal seen so far.;public final long maxBucketOrd() {_        return docCounts.size()__    };return,an,upper,bound,of,the,maximum,bucket,ordinal,seen,so,far;public,final,long,max,bucket,ord,return,doc,counts,size
BucketsAggregator -> public final long maxBucketOrd();1525334055;Return an upper bound of the maximum bucket ordinal seen so far.;public final long maxBucketOrd() {_        return docCounts.size()__    };return,an,upper,bound,of,the,maximum,bucket,ordinal,seen,so,far;public,final,long,max,bucket,ord,return,doc,counts,size
BucketsAggregator -> public final long maxBucketOrd();1531729807;Return an upper bound of the maximum bucket ordinal seen so far.;public final long maxBucketOrd() {_        return docCounts.size()__    };return,an,upper,bound,of,the,maximum,bucket,ordinal,seen,so,far;public,final,long,max,bucket,ord,return,doc,counts,size
BucketsAggregator -> public final long maxBucketOrd();1544110272;Return an upper bound of the maximum bucket ordinal seen so far.;public final long maxBucketOrd() {_        return docCounts.size()__    };return,an,upper,bound,of,the,maximum,bucket,ordinal,seen,so,far;public,final,long,max,bucket,ord,return,doc,counts,size
BucketsAggregator -> protected final InternalAggregations bucketAggregations(long bucket) throws IOException;1524684173;Required method to build the child aggregations of the given bucket (identified by the bucket ordinal).;protected final InternalAggregations bucketAggregations(long bucket) throws IOException {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildAggregation(bucket)__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };required,method,to,build,the,child,aggregations,of,the,given,bucket,identified,by,the,bucket,ordinal;protected,final,internal,aggregations,bucket,aggregations,long,bucket,throws,ioexception,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,aggregation,bucket,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketAggregations(long bucket) throws IOException;1525334055;Required method to build the child aggregations of the given bucket (identified by the bucket ordinal).;protected final InternalAggregations bucketAggregations(long bucket) throws IOException {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildAggregation(bucket)__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };required,method,to,build,the,child,aggregations,of,the,given,bucket,identified,by,the,bucket,ordinal;protected,final,internal,aggregations,bucket,aggregations,long,bucket,throws,ioexception,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,aggregation,bucket,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketAggregations(long bucket) throws IOException;1531729807;Required method to build the child aggregations of the given bucket (identified by the bucket ordinal).;protected final InternalAggregations bucketAggregations(long bucket) throws IOException {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildAggregation(bucket)__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };required,method,to,build,the,child,aggregations,of,the,given,bucket,identified,by,the,bucket,ordinal;protected,final,internal,aggregations,bucket,aggregations,long,bucket,throws,ioexception,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,aggregation,bucket,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketAggregations(long bucket) throws IOException;1544110272;Required method to build the child aggregations of the given bucket (identified by the bucket ordinal).;protected final InternalAggregations bucketAggregations(long bucket) throws IOException {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildAggregation(bucket)__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };required,method,to,build,the,child,aggregations,of,the,given,bucket,identified,by,the,bucket,ordinal;protected,final,internal,aggregations,bucket,aggregations,long,bucket,throws,ioexception,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,aggregation,bucket,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketEmptyAggregations();1524684173;Utility method to build empty aggregations of the sub aggregators.;protected final InternalAggregations bucketEmptyAggregations() {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildEmptyAggregation()__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };utility,method,to,build,empty,aggregations,of,the,sub,aggregators;protected,final,internal,aggregations,bucket,empty,aggregations,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,empty,aggregation,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketEmptyAggregations();1525334055;Utility method to build empty aggregations of the sub aggregators.;protected final InternalAggregations bucketEmptyAggregations() {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildEmptyAggregation()__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };utility,method,to,build,empty,aggregations,of,the,sub,aggregators;protected,final,internal,aggregations,bucket,empty,aggregations,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,empty,aggregation,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketEmptyAggregations();1531729807;Utility method to build empty aggregations of the sub aggregators.;protected final InternalAggregations bucketEmptyAggregations() {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildEmptyAggregation()__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };utility,method,to,build,empty,aggregations,of,the,sub,aggregators;protected,final,internal,aggregations,bucket,empty,aggregations,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,empty,aggregation,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> protected final InternalAggregations bucketEmptyAggregations();1544110272;Utility method to build empty aggregations of the sub aggregators.;protected final InternalAggregations bucketEmptyAggregations() {_        final InternalAggregation[] aggregations = new InternalAggregation[subAggregators.length]__        for (int i = 0_ i < subAggregators.length_ i++) {_            aggregations[i] = subAggregators[i].buildEmptyAggregation()__        }_        return new InternalAggregations(Arrays.asList(aggregations))__    };utility,method,to,build,empty,aggregations,of,the,sub,aggregators;protected,final,internal,aggregations,bucket,empty,aggregations,final,internal,aggregation,aggregations,new,internal,aggregation,sub,aggregators,length,for,int,i,0,i,sub,aggregators,length,i,aggregations,i,sub,aggregators,i,build,empty,aggregation,return,new,internal,aggregations,arrays,as,list,aggregations
BucketsAggregator -> public final int bucketDocCount(long bucketOrd);1524684173;Utility method to return the number of documents that fell in the given bucket (identified by the bucket ordinal);public final int bucketDocCount(long bucketOrd) {_        if (bucketOrd >= docCounts.size()) {_            _            _            _            _            return 0__        } else {_            return docCounts.get(bucketOrd)__        }_    };utility,method,to,return,the,number,of,documents,that,fell,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,int,bucket,doc,count,long,bucket,ord,if,bucket,ord,doc,counts,size,return,0,else,return,doc,counts,get,bucket,ord
BucketsAggregator -> public final int bucketDocCount(long bucketOrd);1525334055;Utility method to return the number of documents that fell in the given bucket (identified by the bucket ordinal);public final int bucketDocCount(long bucketOrd) {_        if (bucketOrd >= docCounts.size()) {_            _            _            _            _            return 0__        } else {_            return docCounts.get(bucketOrd)__        }_    };utility,method,to,return,the,number,of,documents,that,fell,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,int,bucket,doc,count,long,bucket,ord,if,bucket,ord,doc,counts,size,return,0,else,return,doc,counts,get,bucket,ord
BucketsAggregator -> public final int bucketDocCount(long bucketOrd);1531729807;Utility method to return the number of documents that fell in the given bucket (identified by the bucket ordinal);public final int bucketDocCount(long bucketOrd) {_        if (bucketOrd >= docCounts.size()) {_            _            _            _            _            return 0__        } else {_            return docCounts.get(bucketOrd)__        }_    };utility,method,to,return,the,number,of,documents,that,fell,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,int,bucket,doc,count,long,bucket,ord,if,bucket,ord,doc,counts,size,return,0,else,return,doc,counts,get,bucket,ord
BucketsAggregator -> public final int bucketDocCount(long bucketOrd);1544110272;Utility method to return the number of documents that fell in the given bucket (identified by the bucket ordinal);public final int bucketDocCount(long bucketOrd) {_        if (bucketOrd >= docCounts.size()) {_            _            _            _            _            return 0__        } else {_            return docCounts.get(bucketOrd)__        }_    };utility,method,to,return,the,number,of,documents,that,fell,in,the,given,bucket,identified,by,the,bucket,ordinal;public,final,int,bucket,doc,count,long,bucket,ord,if,bucket,ord,doc,counts,size,return,0,else,return,doc,counts,get,bucket,ord
