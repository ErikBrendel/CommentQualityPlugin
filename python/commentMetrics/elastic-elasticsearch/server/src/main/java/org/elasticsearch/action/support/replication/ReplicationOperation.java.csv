# id;timestamp;commentText;codeText;commentWords;codeWords
ReplicationOperation -> Primary -> long localCheckpoint()_;1524684173;Returns the local checkpoint on the primary shard.__@return the local checkpoint;long localCheckpoint()_;returns,the,local,checkpoint,on,the,primary,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> Primary -> long localCheckpoint()_;1528762805;Returns the local checkpoint on the primary shard.__@return the local checkpoint;long localCheckpoint()_;returns,the,local,checkpoint,on,the,primary,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> Primary -> long localCheckpoint()_;1538067637;Returns the local checkpoint on the primary shard.__@return the local checkpoint;long localCheckpoint()_;returns,the,local,checkpoint,on,the,primary,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> Primary -> long localCheckpoint()_;1550598745;Returns the local checkpoint on the primary shard.__@return the local checkpoint;long localCheckpoint()_;returns,the,local,checkpoint,on,the,primary,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> protected String checkActiveShardCount();1524684173;Checks whether we can perform a write based on the required active shard count setting._Returns **null* if OK to proceed, or a string describing the reason to stop;protected String checkActiveShardCount() {_        final ShardId shardId = primary.routingEntry().shardId()__        final ActiveShardCount waitForActiveShards = request.waitForActiveShards()__        if (waitForActiveShards == ActiveShardCount.NONE) {_            return null_  _        }_        final IndexShardRoutingTable shardRoutingTable = primary.getReplicationGroup().getRoutingTable()__        if (waitForActiveShards.enoughShardsActive(shardRoutingTable)) {_            return null__        } else {_            final String resolvedShards = waitForActiveShards == ActiveShardCount.ALL ? Integer.toString(shardRoutingTable.shards().size())_                                              : waitForActiveShards.toString()__            logger.trace("[{}] not enough active copies to meet shard count of [{}] (have {}, needed {}), scheduling a retry. op [{}], " +_                         "request [{}]", shardId, waitForActiveShards, shardRoutingTable.activeShards().size(),_                         resolvedShards, opType, request)__            return "Not enough active copies to meet shard count of [" + waitForActiveShards + "] (have " +_                       shardRoutingTable.activeShards().size() + ", needed " + resolvedShards + ")."__        }_    };checks,whether,we,can,perform,a,write,based,on,the,required,active,shard,count,setting,returns,null,if,ok,to,proceed,or,a,string,describing,the,reason,to,stop;protected,string,check,active,shard,count,final,shard,id,shard,id,primary,routing,entry,shard,id,final,active,shard,count,wait,for,active,shards,request,wait,for,active,shards,if,wait,for,active,shards,active,shard,count,none,return,null,final,index,shard,routing,table,shard,routing,table,primary,get,replication,group,get,routing,table,if,wait,for,active,shards,enough,shards,active,shard,routing,table,return,null,else,final,string,resolved,shards,wait,for,active,shards,active,shard,count,all,integer,to,string,shard,routing,table,shards,size,wait,for,active,shards,to,string,logger,trace,not,enough,active,copies,to,meet,shard,count,of,have,needed,scheduling,a,retry,op,request,shard,id,wait,for,active,shards,shard,routing,table,active,shards,size,resolved,shards,op,type,request,return,not,enough,active,copies,to,meet,shard,count,of,wait,for,active,shards,have,shard,routing,table,active,shards,size,needed,resolved,shards
ReplicationOperation -> protected String checkActiveShardCount();1528762805;Checks whether we can perform a write based on the required active shard count setting._Returns **null* if OK to proceed, or a string describing the reason to stop;protected String checkActiveShardCount() {_        final ShardId shardId = primary.routingEntry().shardId()__        final ActiveShardCount waitForActiveShards = request.waitForActiveShards()__        if (waitForActiveShards == ActiveShardCount.NONE) {_            return null_  _        }_        final IndexShardRoutingTable shardRoutingTable = primary.getReplicationGroup().getRoutingTable()__        if (waitForActiveShards.enoughShardsActive(shardRoutingTable)) {_            return null__        } else {_            final String resolvedShards = waitForActiveShards == ActiveShardCount.ALL ? Integer.toString(shardRoutingTable.shards().size())_                                              : waitForActiveShards.toString()__            logger.trace("[{}] not enough active copies to meet shard count of [{}] (have {}, needed {}), scheduling a retry. op [{}], " +_                         "request [{}]", shardId, waitForActiveShards, shardRoutingTable.activeShards().size(),_                         resolvedShards, opType, request)__            return "Not enough active copies to meet shard count of [" + waitForActiveShards + "] (have " +_                       shardRoutingTable.activeShards().size() + ", needed " + resolvedShards + ")."__        }_    };checks,whether,we,can,perform,a,write,based,on,the,required,active,shard,count,setting,returns,null,if,ok,to,proceed,or,a,string,describing,the,reason,to,stop;protected,string,check,active,shard,count,final,shard,id,shard,id,primary,routing,entry,shard,id,final,active,shard,count,wait,for,active,shards,request,wait,for,active,shards,if,wait,for,active,shards,active,shard,count,none,return,null,final,index,shard,routing,table,shard,routing,table,primary,get,replication,group,get,routing,table,if,wait,for,active,shards,enough,shards,active,shard,routing,table,return,null,else,final,string,resolved,shards,wait,for,active,shards,active,shard,count,all,integer,to,string,shard,routing,table,shards,size,wait,for,active,shards,to,string,logger,trace,not,enough,active,copies,to,meet,shard,count,of,have,needed,scheduling,a,retry,op,request,shard,id,wait,for,active,shards,shard,routing,table,active,shards,size,resolved,shards,op,type,request,return,not,enough,active,copies,to,meet,shard,count,of,wait,for,active,shards,have,shard,routing,table,active,shards,size,needed,resolved,shards
ReplicationOperation -> protected String checkActiveShardCount();1538067637;Checks whether we can perform a write based on the required active shard count setting._Returns **null* if OK to proceed, or a string describing the reason to stop;protected String checkActiveShardCount() {_        final ShardId shardId = primary.routingEntry().shardId()__        final ActiveShardCount waitForActiveShards = request.waitForActiveShards()__        if (waitForActiveShards == ActiveShardCount.NONE) {_            return null_  _        }_        final IndexShardRoutingTable shardRoutingTable = primary.getReplicationGroup().getRoutingTable()__        if (waitForActiveShards.enoughShardsActive(shardRoutingTable)) {_            return null__        } else {_            final String resolvedShards = waitForActiveShards == ActiveShardCount.ALL ? Integer.toString(shardRoutingTable.shards().size())_                                              : waitForActiveShards.toString()__            logger.trace("[{}] not enough active copies to meet shard count of [{}] (have {}, needed {}), scheduling a retry. op [{}], " +_                         "request [{}]", shardId, waitForActiveShards, shardRoutingTable.activeShards().size(),_                         resolvedShards, opType, request)__            return "Not enough active copies to meet shard count of [" + waitForActiveShards + "] (have " +_                       shardRoutingTable.activeShards().size() + ", needed " + resolvedShards + ")."__        }_    };checks,whether,we,can,perform,a,write,based,on,the,required,active,shard,count,setting,returns,null,if,ok,to,proceed,or,a,string,describing,the,reason,to,stop;protected,string,check,active,shard,count,final,shard,id,shard,id,primary,routing,entry,shard,id,final,active,shard,count,wait,for,active,shards,request,wait,for,active,shards,if,wait,for,active,shards,active,shard,count,none,return,null,final,index,shard,routing,table,shard,routing,table,primary,get,replication,group,get,routing,table,if,wait,for,active,shards,enough,shards,active,shard,routing,table,return,null,else,final,string,resolved,shards,wait,for,active,shards,active,shard,count,all,integer,to,string,shard,routing,table,shards,size,wait,for,active,shards,to,string,logger,trace,not,enough,active,copies,to,meet,shard,count,of,have,needed,scheduling,a,retry,op,request,shard,id,wait,for,active,shards,shard,routing,table,active,shards,size,resolved,shards,op,type,request,return,not,enough,active,copies,to,meet,shard,count,of,wait,for,active,shards,have,shard,routing,table,active,shards,size,needed,resolved,shards
ReplicationOperation -> protected String checkActiveShardCount();1550598745;Checks whether we can perform a write based on the required active shard count setting._Returns **null* if OK to proceed, or a string describing the reason to stop;protected String checkActiveShardCount() {_        final ShardId shardId = primary.routingEntry().shardId()__        final ActiveShardCount waitForActiveShards = request.waitForActiveShards()__        if (waitForActiveShards == ActiveShardCount.NONE) {_            return null_  _        }_        final IndexShardRoutingTable shardRoutingTable = primary.getReplicationGroup().getRoutingTable()__        if (waitForActiveShards.enoughShardsActive(shardRoutingTable)) {_            return null__        } else {_            final String resolvedShards = waitForActiveShards == ActiveShardCount.ALL ? Integer.toString(shardRoutingTable.shards().size())_                                              : waitForActiveShards.toString()__            logger.trace("[{}] not enough active copies to meet shard count of [{}] (have {}, needed {}), scheduling a retry. op [{}], " +_                         "request [{}]", shardId, waitForActiveShards, shardRoutingTable.activeShards().size(),_                         resolvedShards, opType, request)__            return "Not enough active copies to meet shard count of [" + waitForActiveShards + "] (have " +_                       shardRoutingTable.activeShards().size() + ", needed " + resolvedShards + ")."__        }_    };checks,whether,we,can,perform,a,write,based,on,the,required,active,shard,count,setting,returns,null,if,ok,to,proceed,or,a,string,describing,the,reason,to,stop;protected,string,check,active,shard,count,final,shard,id,shard,id,primary,routing,entry,shard,id,final,active,shard,count,wait,for,active,shards,request,wait,for,active,shards,if,wait,for,active,shards,active,shard,count,none,return,null,final,index,shard,routing,table,shard,routing,table,primary,get,replication,group,get,routing,table,if,wait,for,active,shards,enough,shards,active,shard,routing,table,return,null,else,final,string,resolved,shards,wait,for,active,shards,active,shard,count,all,integer,to,string,shard,routing,table,shards,size,wait,for,active,shards,to,string,logger,trace,not,enough,active,copies,to,meet,shard,count,of,have,needed,scheduling,a,retry,op,request,shard,id,wait,for,active,shards,shard,routing,table,active,shards,size,resolved,shards,op,type,request,return,not,enough,active,copies,to,meet,shard,count,of,wait,for,active,shards,have,shard,routing,table,active,shards,size,needed,resolved,shards
ReplicationOperation -> Replicas -> void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint,                        long maxSeqNoOfUpdatesOrDeletes, ActionListener<ReplicaResponse> listener)_;1538067637;Performs the specified request on the specified replica.__@param replica                    the shard this request should be executed on_@param replicaRequest             the operation to perform_@param globalCheckpoint           the global checkpoint on the primary_@param maxSeqNoOfUpdatesOrDeletes the max seq_no of updates (index operations overwriting Lucene) or deletes on primary_after this replication was executed on it._@param listener                   callback for handling the response or failure;void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint,_                       long maxSeqNoOfUpdatesOrDeletes, ActionListener<ReplicaResponse> listener)_;performs,the,specified,request,on,the,specified,replica,param,replica,the,shard,this,request,should,be,executed,on,param,replica,request,the,operation,to,perform,param,global,checkpoint,the,global,checkpoint,on,the,primary,param,max,seq,no,of,updates,or,deletes,the,max,of,updates,index,operations,overwriting,lucene,or,deletes,on,primary,after,this,replication,was,executed,on,it,param,listener,callback,for,handling,the,response,or,failure;void,perform,on,shard,routing,replica,request,t,replica,request,long,global,checkpoint,long,max,seq,no,of,updates,or,deletes,action,listener,replica,response,listener
ReplicationOperation -> Replicas -> void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint,                        long maxSeqNoOfUpdatesOrDeletes, ActionListener<ReplicaResponse> listener)_;1550598745;Performs the specified request on the specified replica.__@param replica                    the shard this request should be executed on_@param replicaRequest             the operation to perform_@param globalCheckpoint           the global checkpoint on the primary_@param maxSeqNoOfUpdatesOrDeletes the max seq_no of updates (index operations overwriting Lucene) or deletes on primary_after this replication was executed on it._@param listener                   callback for handling the response or failure;void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint,_                       long maxSeqNoOfUpdatesOrDeletes, ActionListener<ReplicaResponse> listener)_;performs,the,specified,request,on,the,specified,replica,param,replica,the,shard,this,request,should,be,executed,on,param,replica,request,the,operation,to,perform,param,global,checkpoint,the,global,checkpoint,on,the,primary,param,max,seq,no,of,updates,or,deletes,the,max,of,updates,index,operations,overwriting,lucene,or,deletes,on,primary,after,this,replication,was,executed,on,it,param,listener,callback,for,handling,the,response,or,failure;void,perform,on,shard,routing,replica,request,t,replica,request,long,global,checkpoint,long,max,seq,no,of,updates,or,deletes,action,listener,replica,response,listener
ReplicationOperation -> PrimaryResult -> @Nullable RequestT replicaRequest()_;1524684173;@return null if no operation needs to be sent to a replica_(for example when the operation failed on the primary due to a parsing exception);@Nullable RequestT replicaRequest()_;return,null,if,no,operation,needs,to,be,sent,to,a,replica,for,example,when,the,operation,failed,on,the,primary,due,to,a,parsing,exception;nullable,request,t,replica,request
ReplicationOperation -> PrimaryResult -> @Nullable RequestT replicaRequest()_;1528762805;@return null if no operation needs to be sent to a replica_(for example when the operation failed on the primary due to a parsing exception);@Nullable RequestT replicaRequest()_;return,null,if,no,operation,needs,to,be,sent,to,a,replica,for,example,when,the,operation,failed,on,the,primary,due,to,a,parsing,exception;nullable,request,t,replica,request
ReplicationOperation -> PrimaryResult -> @Nullable RequestT replicaRequest()_;1538067637;@return null if no operation needs to be sent to a replica_(for example when the operation failed on the primary due to a parsing exception);@Nullable RequestT replicaRequest()_;return,null,if,no,operation,needs,to,be,sent,to,a,replica,for,example,when,the,operation,failed,on,the,primary,due,to,a,parsing,exception;nullable,request,t,replica,request
ReplicationOperation -> PrimaryResult -> @Nullable RequestT replicaRequest()_;1550598745;@return null if no operation needs to be sent to a replica_(for example when the operation failed on the primary due to a parsing exception);@Nullable RequestT replicaRequest()_;return,null,if,no,operation,needs,to,be,sent,to,a,replica,for,example,when,the,operation,failed,on,the,primary,due,to,a,parsing,exception;nullable,request,t,replica,request
ReplicationOperation -> Primary -> PrimaryResultT perform(RequestT request) throws Exception_;1524684173;Performs the given request on this primary. Yes, this returns as soon as it can with the request for the replicas and calls a_listener when the primary request is completed. Yes, the primary request might complete before the method returns. Yes, it might_also complete after. Deal with it.__@param request the request to perform_@return the request to send to the replicas;PrimaryResultT perform(RequestT request) throws Exception_;performs,the,given,request,on,this,primary,yes,this,returns,as,soon,as,it,can,with,the,request,for,the,replicas,and,calls,a,listener,when,the,primary,request,is,completed,yes,the,primary,request,might,complete,before,the,method,returns,yes,it,might,also,complete,after,deal,with,it,param,request,the,request,to,perform,return,the,request,to,send,to,the,replicas;primary,result,t,perform,request,t,request,throws,exception
ReplicationOperation -> Primary -> PrimaryResultT perform(RequestT request) throws Exception_;1528762805;Performs the given request on this primary. Yes, this returns as soon as it can with the request for the replicas and calls a_listener when the primary request is completed. Yes, the primary request might complete before the method returns. Yes, it might_also complete after. Deal with it.__@param request the request to perform_@return the request to send to the replicas;PrimaryResultT perform(RequestT request) throws Exception_;performs,the,given,request,on,this,primary,yes,this,returns,as,soon,as,it,can,with,the,request,for,the,replicas,and,calls,a,listener,when,the,primary,request,is,completed,yes,the,primary,request,might,complete,before,the,method,returns,yes,it,might,also,complete,after,deal,with,it,param,request,the,request,to,perform,return,the,request,to,send,to,the,replicas;primary,result,t,perform,request,t,request,throws,exception
ReplicationOperation -> Primary -> PrimaryResultT perform(RequestT request) throws Exception_;1538067637;Performs the given request on this primary. Yes, this returns as soon as it can with the request for the replicas and calls a_listener when the primary request is completed. Yes, the primary request might complete before the method returns. Yes, it might_also complete after. Deal with it.__@param request the request to perform_@return the request to send to the replicas;PrimaryResultT perform(RequestT request) throws Exception_;performs,the,given,request,on,this,primary,yes,this,returns,as,soon,as,it,can,with,the,request,for,the,replicas,and,calls,a,listener,when,the,primary,request,is,completed,yes,the,primary,request,might,complete,before,the,method,returns,yes,it,might,also,complete,after,deal,with,it,param,request,the,request,to,perform,return,the,request,to,send,to,the,replicas;primary,result,t,perform,request,t,request,throws,exception
ReplicationOperation -> Primary -> PrimaryResultT perform(RequestT request) throws Exception_;1550598745;Performs the given request on this primary. Yes, this returns as soon as it can with the request for the replicas and calls a_listener when the primary request is completed. Yes, the primary request might complete before the method returns. Yes, it might_also complete after. Deal with it.__@param request the request to perform_@return the request to send to the replicas;PrimaryResultT perform(RequestT request) throws Exception_;performs,the,given,request,on,this,primary,yes,this,returns,as,soon,as,it,can,with,the,request,for,the,replicas,and,calls,a,listener,when,the,primary,request,is,completed,yes,the,primary,request,might,complete,before,the,method,returns,yes,it,might,also,complete,after,deal,with,it,param,request,the,request,to,perform,return,the,request,to,send,to,the,replicas;primary,result,t,perform,request,t,request,throws,exception
ReplicationOperation -> Primary -> ShardRouting routingEntry()_;1524684173;routing entry for this primary;ShardRouting routingEntry()_;routing,entry,for,this,primary;shard,routing,routing,entry
ReplicationOperation -> Primary -> ShardRouting routingEntry()_;1528762805;routing entry for this primary;ShardRouting routingEntry()_;routing,entry,for,this,primary;shard,routing,routing,entry
ReplicationOperation -> Primary -> ShardRouting routingEntry()_;1538067637;routing entry for this primary;ShardRouting routingEntry()_;routing,entry,for,this,primary;shard,routing,routing,entry
ReplicationOperation -> Primary -> ShardRouting routingEntry()_;1550598745;routing entry for this primary;ShardRouting routingEntry()_;routing,entry,for,this,primary;shard,routing,routing,entry
ReplicationOperation -> Primary -> ReplicationGroup getReplicationGroup()_;1524684173;Returns the current replication group on the primary shard__@return the replication group;ReplicationGroup getReplicationGroup()_;returns,the,current,replication,group,on,the,primary,shard,return,the,replication,group;replication,group,get,replication,group
ReplicationOperation -> Primary -> ReplicationGroup getReplicationGroup()_;1528762805;Returns the current replication group on the primary shard__@return the replication group;ReplicationGroup getReplicationGroup()_;returns,the,current,replication,group,on,the,primary,shard,return,the,replication,group;replication,group,get,replication,group
ReplicationOperation -> Primary -> ReplicationGroup getReplicationGroup()_;1538067637;Returns the current replication group on the primary shard__@return the replication group;ReplicationGroup getReplicationGroup()_;returns,the,current,replication,group,on,the,primary,shard,return,the,replication,group;replication,group,get,replication,group
ReplicationOperation -> Primary -> ReplicationGroup getReplicationGroup()_;1550598745;Returns the current replication group on the primary shard__@return the replication group;ReplicationGroup getReplicationGroup()_;returns,the,current,replication,group,on,the,primary,shard,return,the,replication,group;replication,group,get,replication,group
ReplicationOperation -> ReplicaResponse -> long globalCheckpoint()_;1524684173;The global checkpoint for the shard.__@return the global checkpoint;long globalCheckpoint()_;the,global,checkpoint,for,the,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> ReplicaResponse -> long globalCheckpoint()_;1528762805;The global checkpoint for the shard.__@return the global checkpoint;long globalCheckpoint()_;the,global,checkpoint,for,the,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> ReplicaResponse -> long globalCheckpoint()_;1538067637;The global checkpoint for the shard.__@return the global checkpoint;long globalCheckpoint()_;the,global,checkpoint,for,the,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> ReplicaResponse -> long globalCheckpoint()_;1550598745;The global checkpoint for the shard.__@return the global checkpoint;long globalCheckpoint()_;the,global,checkpoint,for,the,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> Primary -> long globalCheckpoint()_;1524684173;Returns the global checkpoint on the primary shard.__@return the global checkpoint;long globalCheckpoint()_;returns,the,global,checkpoint,on,the,primary,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> Primary -> long globalCheckpoint()_;1528762805;Returns the global checkpoint on the primary shard.__@return the global checkpoint;long globalCheckpoint()_;returns,the,global,checkpoint,on,the,primary,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> Primary -> long globalCheckpoint()_;1538067637;Returns the global checkpoint on the primary shard.__@return the global checkpoint;long globalCheckpoint()_;returns,the,global,checkpoint,on,the,primary,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> Primary -> long globalCheckpoint()_;1550598745;Returns the global checkpoint on the primary shard.__@return the global checkpoint;long globalCheckpoint()_;returns,the,global,checkpoint,on,the,primary,shard,return,the,global,checkpoint;long,global,checkpoint
ReplicationOperation -> Replicas -> void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,                                Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1524684173;Fail the specified shard if needed, removing it from the current set_of active shards. Whether a failure is needed is left up to the_implementation.__@param replica          shard to fail_@param message          a (short) description of the reason_@param exception        the original exception which caused the ReplicationOperation to request the shard to be failed_@param onSuccess        a callback to call when the shard has been successfully removed from the active set._@param onPrimaryDemoted a callback to call when the shard can not be failed because the current primary has been demoted_by the master._@param onIgnoredFailure a callback to call when failing a shard has failed, but it that failure can be safely ignored and the;void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,_                               Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;fail,the,specified,shard,if,needed,removing,it,from,the,current,set,of,active,shards,whether,a,failure,is,needed,is,left,up,to,the,implementation,param,replica,shard,to,fail,param,message,a,short,description,of,the,reason,param,exception,the,original,exception,which,caused,the,replication,operation,to,request,the,shard,to,be,failed,param,on,success,a,callback,to,call,when,the,shard,has,been,successfully,removed,from,the,active,set,param,on,primary,demoted,a,callback,to,call,when,the,shard,can,not,be,failed,because,the,current,primary,has,been,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,failing,a,shard,has,failed,but,it,that,failure,can,be,safely,ignored,and,the;void,fail,shard,if,needed,shard,routing,replica,string,message,exception,exception,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,                                Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1528762805;Fail the specified shard if needed, removing it from the current set_of active shards. Whether a failure is needed is left up to the_implementation.__@param replica          shard to fail_@param message          a (short) description of the reason_@param exception        the original exception which caused the ReplicationOperation to request the shard to be failed_@param onSuccess        a callback to call when the shard has been successfully removed from the active set._@param onPrimaryDemoted a callback to call when the shard can not be failed because the current primary has been demoted_by the master._@param onIgnoredFailure a callback to call when failing a shard has failed, but it that failure can be safely ignored and the;void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,_                               Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;fail,the,specified,shard,if,needed,removing,it,from,the,current,set,of,active,shards,whether,a,failure,is,needed,is,left,up,to,the,implementation,param,replica,shard,to,fail,param,message,a,short,description,of,the,reason,param,exception,the,original,exception,which,caused,the,replication,operation,to,request,the,shard,to,be,failed,param,on,success,a,callback,to,call,when,the,shard,has,been,successfully,removed,from,the,active,set,param,on,primary,demoted,a,callback,to,call,when,the,shard,can,not,be,failed,because,the,current,primary,has,been,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,failing,a,shard,has,failed,but,it,that,failure,can,be,safely,ignored,and,the;void,fail,shard,if,needed,shard,routing,replica,string,message,exception,exception,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,                                Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1538067637;Fail the specified shard if needed, removing it from the current set_of active shards. Whether a failure is needed is left up to the_implementation.__@param replica          shard to fail_@param message          a (short) description of the reason_@param exception        the original exception which caused the ReplicationOperation to request the shard to be failed_@param onSuccess        a callback to call when the shard has been successfully removed from the active set._@param onPrimaryDemoted a callback to call when the shard can not be failed because the current primary has been demoted_by the master._@param onIgnoredFailure a callback to call when failing a shard has failed, but it that failure can be safely ignored and the;void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,_                               Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;fail,the,specified,shard,if,needed,removing,it,from,the,current,set,of,active,shards,whether,a,failure,is,needed,is,left,up,to,the,implementation,param,replica,shard,to,fail,param,message,a,short,description,of,the,reason,param,exception,the,original,exception,which,caused,the,replication,operation,to,request,the,shard,to,be,failed,param,on,success,a,callback,to,call,when,the,shard,has,been,successfully,removed,from,the,active,set,param,on,primary,demoted,a,callback,to,call,when,the,shard,can,not,be,failed,because,the,current,primary,has,been,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,failing,a,shard,has,failed,but,it,that,failure,can,be,safely,ignored,and,the;void,fail,shard,if,needed,shard,routing,replica,string,message,exception,exception,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,                                Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1550598745;Fail the specified shard if needed, removing it from the current set_of active shards. Whether a failure is needed is left up to the_implementation.__@param replica          shard to fail_@param message          a (short) description of the reason_@param exception        the original exception which caused the ReplicationOperation to request the shard to be failed_@param onSuccess        a callback to call when the shard has been successfully removed from the active set._@param onPrimaryDemoted a callback to call when the shard can not be failed because the current primary has been demoted_by the master._@param onIgnoredFailure a callback to call when failing a shard has failed, but it that failure can be safely ignored and the;void failShardIfNeeded(ShardRouting replica, String message, Exception exception, Runnable onSuccess,_                               Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;fail,the,specified,shard,if,needed,removing,it,from,the,current,set,of,active,shards,whether,a,failure,is,needed,is,left,up,to,the,implementation,param,replica,shard,to,fail,param,message,a,short,description,of,the,reason,param,exception,the,original,exception,which,caused,the,replication,operation,to,request,the,shard,to,be,failed,param,on,success,a,callback,to,call,when,the,shard,has,been,successfully,removed,from,the,active,set,param,on,primary,demoted,a,callback,to,call,when,the,shard,can,not,be,failed,because,the,current,primary,has,been,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,failing,a,shard,has,failed,but,it,that,failure,can,be,safely,ignored,and,the;void,fail,shard,if,needed,shard,routing,replica,string,message,exception,exception,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> ReplicaResponse -> long localCheckpoint()_;1524684173;The local checkpoint for the shard.__@return the local checkpoint;long localCheckpoint()_;the,local,checkpoint,for,the,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> ReplicaResponse -> long localCheckpoint()_;1528762805;The local checkpoint for the shard.__@return the local checkpoint;long localCheckpoint()_;the,local,checkpoint,for,the,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> ReplicaResponse -> long localCheckpoint()_;1538067637;The local checkpoint for the shard.__@return the local checkpoint;long localCheckpoint()_;the,local,checkpoint,for,the,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> ReplicaResponse -> long localCheckpoint()_;1550598745;The local checkpoint for the shard.__@return the local checkpoint;long localCheckpoint()_;the,local,checkpoint,for,the,shard,return,the,local,checkpoint;long,local,checkpoint
ReplicationOperation -> Primary -> void failShard(String message, Exception exception)_;1524684173;Fail the primary shard.__@param message   the failure message_@param exception the exception that triggered the failure;void failShard(String message, Exception exception)_;fail,the,primary,shard,param,message,the,failure,message,param,exception,the,exception,that,triggered,the,failure;void,fail,shard,string,message,exception,exception
ReplicationOperation -> Primary -> void failShard(String message, Exception exception)_;1528762805;Fail the primary shard.__@param message   the failure message_@param exception the exception that triggered the failure;void failShard(String message, Exception exception)_;fail,the,primary,shard,param,message,the,failure,message,param,exception,the,exception,that,triggered,the,failure;void,fail,shard,string,message,exception,exception
ReplicationOperation -> Primary -> void failShard(String message, Exception exception)_;1538067637;Fail the primary shard.__@param message   the failure message_@param exception the exception that triggered the failure;void failShard(String message, Exception exception)_;fail,the,primary,shard,param,message,the,failure,message,param,exception,the,exception,that,triggered,the,failure;void,fail,shard,string,message,exception,exception
ReplicationOperation -> Primary -> void failShard(String message, Exception exception)_;1550598745;Fail the primary shard.__@param message   the failure message_@param exception the exception that triggered the failure;void failShard(String message, Exception exception)_;fail,the,primary,shard,param,message,the,failure,message,param,exception,the,exception,that,triggered,the,failure;void,fail,shard,string,message,exception,exception
ReplicationOperation -> Replicas -> void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,                                           Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1524684173;Marks shard copy as stale if needed, removing its allocation id from_the set of in-sync allocation ids. Whether marking as stale is needed_is left up to the implementation.__@param shardId          shard id_@param allocationId     allocation id to remove from the set of in-sync allocation ids_@param onSuccess        a callback to call when the allocation id has been successfully removed from the in-sync set._@param onPrimaryDemoted a callback to call when the request failed because the current primary was already demoted_by the master._@param onIgnoredFailure a callback to call when the request failed, but the failure can be safely ignored.;void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,_                                          Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;marks,shard,copy,as,stale,if,needed,removing,its,allocation,id,from,the,set,of,in,sync,allocation,ids,whether,marking,as,stale,is,needed,is,left,up,to,the,implementation,param,shard,id,shard,id,param,allocation,id,allocation,id,to,remove,from,the,set,of,in,sync,allocation,ids,param,on,success,a,callback,to,call,when,the,allocation,id,has,been,successfully,removed,from,the,in,sync,set,param,on,primary,demoted,a,callback,to,call,when,the,request,failed,because,the,current,primary,was,already,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,the,request,failed,but,the,failure,can,be,safely,ignored;void,mark,shard,copy,as,stale,if,needed,shard,id,shard,id,string,allocation,id,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,                                           Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1528762805;Marks shard copy as stale if needed, removing its allocation id from_the set of in-sync allocation ids. Whether marking as stale is needed_is left up to the implementation.__@param shardId          shard id_@param allocationId     allocation id to remove from the set of in-sync allocation ids_@param onSuccess        a callback to call when the allocation id has been successfully removed from the in-sync set._@param onPrimaryDemoted a callback to call when the request failed because the current primary was already demoted_by the master._@param onIgnoredFailure a callback to call when the request failed, but the failure can be safely ignored.;void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,_                                          Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;marks,shard,copy,as,stale,if,needed,removing,its,allocation,id,from,the,set,of,in,sync,allocation,ids,whether,marking,as,stale,is,needed,is,left,up,to,the,implementation,param,shard,id,shard,id,param,allocation,id,allocation,id,to,remove,from,the,set,of,in,sync,allocation,ids,param,on,success,a,callback,to,call,when,the,allocation,id,has,been,successfully,removed,from,the,in,sync,set,param,on,primary,demoted,a,callback,to,call,when,the,request,failed,because,the,current,primary,was,already,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,the,request,failed,but,the,failure,can,be,safely,ignored;void,mark,shard,copy,as,stale,if,needed,shard,id,shard,id,string,allocation,id,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,                                           Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1538067637;Marks shard copy as stale if needed, removing its allocation id from_the set of in-sync allocation ids. Whether marking as stale is needed_is left up to the implementation.__@param shardId          shard id_@param allocationId     allocation id to remove from the set of in-sync allocation ids_@param onSuccess        a callback to call when the allocation id has been successfully removed from the in-sync set._@param onPrimaryDemoted a callback to call when the request failed because the current primary was already demoted_by the master._@param onIgnoredFailure a callback to call when the request failed, but the failure can be safely ignored.;void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,_                                          Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;marks,shard,copy,as,stale,if,needed,removing,its,allocation,id,from,the,set,of,in,sync,allocation,ids,whether,marking,as,stale,is,needed,is,left,up,to,the,implementation,param,shard,id,shard,id,param,allocation,id,allocation,id,to,remove,from,the,set,of,in,sync,allocation,ids,param,on,success,a,callback,to,call,when,the,allocation,id,has,been,successfully,removed,from,the,in,sync,set,param,on,primary,demoted,a,callback,to,call,when,the,request,failed,because,the,current,primary,was,already,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,the,request,failed,but,the,failure,can,be,safely,ignored;void,mark,shard,copy,as,stale,if,needed,shard,id,shard,id,string,allocation,id,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,                                           Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;1550598745;Marks shard copy as stale if needed, removing its allocation id from_the set of in-sync allocation ids. Whether marking as stale is needed_is left up to the implementation.__@param shardId          shard id_@param allocationId     allocation id to remove from the set of in-sync allocation ids_@param onSuccess        a callback to call when the allocation id has been successfully removed from the in-sync set._@param onPrimaryDemoted a callback to call when the request failed because the current primary was already demoted_by the master._@param onIgnoredFailure a callback to call when the request failed, but the failure can be safely ignored.;void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, Runnable onSuccess,_                                          Consumer<Exception> onPrimaryDemoted, Consumer<Exception> onIgnoredFailure)_;marks,shard,copy,as,stale,if,needed,removing,its,allocation,id,from,the,set,of,in,sync,allocation,ids,whether,marking,as,stale,is,needed,is,left,up,to,the,implementation,param,shard,id,shard,id,param,allocation,id,allocation,id,to,remove,from,the,set,of,in,sync,allocation,ids,param,on,success,a,callback,to,call,when,the,allocation,id,has,been,successfully,removed,from,the,in,sync,set,param,on,primary,demoted,a,callback,to,call,when,the,request,failed,because,the,current,primary,was,already,demoted,by,the,master,param,on,ignored,failure,a,callback,to,call,when,the,request,failed,but,the,failure,can,be,safely,ignored;void,mark,shard,copy,as,stale,if,needed,shard,id,shard,id,string,allocation,id,runnable,on,success,consumer,exception,on,primary,demoted,consumer,exception,on,ignored,failure
ReplicationOperation -> Replicas -> void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener)_;1524684173;Performs the specified request on the specified replica.__@param replica          the shard this request should be executed on_@param replicaRequest   the operation to perform_@param globalCheckpoint the global checkpoint on the primary_@param listener         callback for handling the response or failure;void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener)_;performs,the,specified,request,on,the,specified,replica,param,replica,the,shard,this,request,should,be,executed,on,param,replica,request,the,operation,to,perform,param,global,checkpoint,the,global,checkpoint,on,the,primary,param,listener,callback,for,handling,the,response,or,failure;void,perform,on,shard,routing,replica,request,t,replica,request,long,global,checkpoint,action,listener,replica,response,listener
ReplicationOperation -> Replicas -> void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener)_;1528762805;Performs the specified request on the specified replica.__@param replica          the shard this request should be executed on_@param replicaRequest   the operation to perform_@param globalCheckpoint the global checkpoint on the primary_@param listener         callback for handling the response or failure;void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener)_;performs,the,specified,request,on,the,specified,replica,param,replica,the,shard,this,request,should,be,executed,on,param,replica,request,the,operation,to,perform,param,global,checkpoint,the,global,checkpoint,on,the,primary,param,listener,callback,for,handling,the,response,or,failure;void,perform,on,shard,routing,replica,request,t,replica,request,long,global,checkpoint,action,listener,replica,response,listener
ReplicationOperation -> Primary -> void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;1524684173;Notifies the primary of a local checkpoint for the given allocation.__Note: The primary will use this information to advance the global checkpoint if possible.__@param allocationId allocation ID of the shard corresponding to the supplied local checkpoint_@param checkpoint the *local* checkpoint for the shard;void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;notifies,the,primary,of,a,local,checkpoint,for,the,given,allocation,note,the,primary,will,use,this,information,to,advance,the,global,checkpoint,if,possible,param,allocation,id,allocation,id,of,the,shard,corresponding,to,the,supplied,local,checkpoint,param,checkpoint,the,local,checkpoint,for,the,shard;void,update,local,checkpoint,for,shard,string,allocation,id,long,checkpoint
ReplicationOperation -> Primary -> void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;1528762805;Notifies the primary of a local checkpoint for the given allocation.__Note: The primary will use this information to advance the global checkpoint if possible.__@param allocationId allocation ID of the shard corresponding to the supplied local checkpoint_@param checkpoint the *local* checkpoint for the shard;void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;notifies,the,primary,of,a,local,checkpoint,for,the,given,allocation,note,the,primary,will,use,this,information,to,advance,the,global,checkpoint,if,possible,param,allocation,id,allocation,id,of,the,shard,corresponding,to,the,supplied,local,checkpoint,param,checkpoint,the,local,checkpoint,for,the,shard;void,update,local,checkpoint,for,shard,string,allocation,id,long,checkpoint
ReplicationOperation -> Primary -> void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;1538067637;Notifies the primary of a local checkpoint for the given allocation.__Note: The primary will use this information to advance the global checkpoint if possible.__@param allocationId allocation ID of the shard corresponding to the supplied local checkpoint_@param checkpoint the *local* checkpoint for the shard;void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;notifies,the,primary,of,a,local,checkpoint,for,the,given,allocation,note,the,primary,will,use,this,information,to,advance,the,global,checkpoint,if,possible,param,allocation,id,allocation,id,of,the,shard,corresponding,to,the,supplied,local,checkpoint,param,checkpoint,the,local,checkpoint,for,the,shard;void,update,local,checkpoint,for,shard,string,allocation,id,long,checkpoint
ReplicationOperation -> Primary -> void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;1550598745;Notifies the primary of a local checkpoint for the given allocation.__Note: The primary will use this information to advance the global checkpoint if possible.__@param allocationId allocation ID of the shard corresponding to the supplied local checkpoint_@param checkpoint the *local* checkpoint for the shard;void updateLocalCheckpointForShard(String allocationId, long checkpoint)_;notifies,the,primary,of,a,local,checkpoint,for,the,given,allocation,note,the,primary,will,use,this,information,to,advance,the,global,checkpoint,if,possible,param,allocation,id,allocation,id,of,the,shard,corresponding,to,the,supplied,local,checkpoint,param,checkpoint,the,local,checkpoint,for,the,shard;void,update,local,checkpoint,for,shard,string,allocation,id,long,checkpoint
ReplicationOperation -> Primary -> void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;1524684173;Update the local knowledge of the global checkpoint for the specified allocation ID.__@param allocationId     the allocation ID to update the global checkpoint for_@param globalCheckpoint the global checkpoint;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;update,the,local,knowledge,of,the,global,checkpoint,for,the,specified,allocation,id,param,allocation,id,the,allocation,id,to,update,the,global,checkpoint,for,param,global,checkpoint,the,global,checkpoint;void,update,global,checkpoint,for,shard,string,allocation,id,long,global,checkpoint
ReplicationOperation -> Primary -> void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;1528762805;Update the local knowledge of the global checkpoint for the specified allocation ID.__@param allocationId     the allocation ID to update the global checkpoint for_@param globalCheckpoint the global checkpoint;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;update,the,local,knowledge,of,the,global,checkpoint,for,the,specified,allocation,id,param,allocation,id,the,allocation,id,to,update,the,global,checkpoint,for,param,global,checkpoint,the,global,checkpoint;void,update,global,checkpoint,for,shard,string,allocation,id,long,global,checkpoint
ReplicationOperation -> Primary -> void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;1538067637;Update the local knowledge of the global checkpoint for the specified allocation ID.__@param allocationId     the allocation ID to update the global checkpoint for_@param globalCheckpoint the global checkpoint;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;update,the,local,knowledge,of,the,global,checkpoint,for,the,specified,allocation,id,param,allocation,id,the,allocation,id,to,update,the,global,checkpoint,for,param,global,checkpoint,the,global,checkpoint;void,update,global,checkpoint,for,shard,string,allocation,id,long,global,checkpoint
ReplicationOperation -> Primary -> void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;1550598745;Update the local knowledge of the global checkpoint for the specified allocation ID.__@param allocationId     the allocation ID to update the global checkpoint for_@param globalCheckpoint the global checkpoint;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint)_;update,the,local,knowledge,of,the,global,checkpoint,for,the,specified,allocation,id,param,allocation,id,the,allocation,id,to,update,the,global,checkpoint,for,param,global,checkpoint,the,global,checkpoint;void,update,global,checkpoint,for,shard,string,allocation,id,long,global,checkpoint
ReplicationOperation -> Primary -> long maxSeqNoOfUpdatesOrDeletes()_;1538067637;Returns the maximum seq_no of updates (index operations overwrite Lucene) or deletes on the primary._This value must be captured after the execution of a replication request on the primary is completed.;long maxSeqNoOfUpdatesOrDeletes()_;returns,the,maximum,of,updates,index,operations,overwrite,lucene,or,deletes,on,the,primary,this,value,must,be,captured,after,the,execution,of,a,replication,request,on,the,primary,is,completed;long,max,seq,no,of,updates,or,deletes
ReplicationOperation -> Primary -> long maxSeqNoOfUpdatesOrDeletes()_;1550598745;Returns the maximum seq_no of updates (index operations overwrite Lucene) or deletes on the primary._This value must be captured after the execution of a replication request on the primary is completed.;long maxSeqNoOfUpdatesOrDeletes()_;returns,the,maximum,of,updates,index,operations,overwrite,lucene,or,deletes,on,the,primary,this,value,must,be,captured,after,the,execution,of,a,replication,request,on,the,primary,is,completed;long,max,seq,no,of,updates,or,deletes
