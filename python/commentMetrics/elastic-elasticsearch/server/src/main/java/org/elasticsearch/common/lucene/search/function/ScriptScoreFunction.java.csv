commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int docID() {     return docid. }
false;public;0;4;;@Override public float score() {     return score. }
false;public;2;11;;@Override public double score(int docId, float subQueryScore) throws IOException {     leafScript.setDocument(docId).     scorer.docid = docId.     scorer.score = subQueryScore.     double result = leafScript.execute().     if (result < 0f) {         throw new IllegalArgumentException("script score function must not produce negative scores, but got: [" + result + "]").     }     return result. }
false;public;2;21;;@Override public Explanation explainScore(int docId, Explanation subQueryScore) throws IOException {     Explanation exp.     if (leafScript instanceof ExplainableScoreScript) {         leafScript.setDocument(docId).         scorer.docid = docId.         scorer.score = subQueryScore.getValue().floatValue().         exp = ((ExplainableScoreScript) leafScript).explain(subQueryScore).     } else {         double score = score(docId, subQueryScore.getValue().floatValue()).         // info about params already included in sScript         String explanation = "script score function, computed with script:\"" + sScript + "\"".         Explanation scoreExp = Explanation.match(subQueryScore.getValue(), "_score: ", subQueryScore).         return Explanation.match((float) score, explanation, scoreExp).     }     return exp. }
false;public;1;41;;@Override public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {     final ScoreScript leafScript = script.newInstance(ctx).     final CannedScorer scorer = new CannedScorer().     leafScript.setScorer(scorer).     return new LeafScoreFunction() {          @Override         public double score(int docId, float subQueryScore) throws IOException {             leafScript.setDocument(docId).             scorer.docid = docId.             scorer.score = subQueryScore.             double result = leafScript.execute().             if (result < 0f) {                 throw new IllegalArgumentException("script score function must not produce negative scores, but got: [" + result + "]").             }             return result.         }          @Override         public Explanation explainScore(int docId, Explanation subQueryScore) throws IOException {             Explanation exp.             if (leafScript instanceof ExplainableScoreScript) {                 leafScript.setDocument(docId).                 scorer.docid = docId.                 scorer.score = subQueryScore.getValue().floatValue().                 exp = ((ExplainableScoreScript) leafScript).explain(subQueryScore).             } else {                 double score = score(docId, subQueryScore.getValue().floatValue()).                 // info about params already included in sScript                 String explanation = "script score function, computed with script:\"" + sScript + "\"".                 Explanation scoreExp = Explanation.match(subQueryScore.getValue(), "_score: ", subQueryScore).                 return Explanation.match((float) score, explanation, scoreExp).             }             return exp.         }     }. }
false;public;0;4;;@Override public boolean needsScores() {     return script.needs_score(). }
false;public;0;4;;@Override public String toString() {     return "script" + sScript.toString(). }
false;protected;1;5;;@Override protected boolean doEquals(ScoreFunction other) {     ScriptScoreFunction scriptScoreFunction = (ScriptScoreFunction) other.     return Objects.equals(this.sScript, scriptScoreFunction.sScript). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(sScript). }
