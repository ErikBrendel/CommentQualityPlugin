commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "nodes_hot_threads_action". }
false;public;1;10;;@Override public RestResponse buildResponse(NodesHotThreadsResponse response) throws Exception {     StringBuilder sb = new StringBuilder().     for (NodeHotThreads node : response.getNodes()) {         sb.append("::: ").append(node.getNode().toString()).append("\n").         Strings.spaceify(3, node.getHotThreads(), sb).         sb.append('\n').     }     return new BytesRestResponse(RestStatus.OK, sb.toString()). }
false;public;2;25;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     String[] nodesIds = Strings.splitStringByCommaToArray(request.param("nodeId")).     NodesHotThreadsRequest nodesHotThreadsRequest = new NodesHotThreadsRequest(nodesIds).     nodesHotThreadsRequest.threads(request.paramAsInt("threads", nodesHotThreadsRequest.threads())).     nodesHotThreadsRequest.ignoreIdleThreads(request.paramAsBoolean("ignore_idle_threads", nodesHotThreadsRequest.ignoreIdleThreads())).     nodesHotThreadsRequest.type(request.param("type", nodesHotThreadsRequest.type())).     nodesHotThreadsRequest.interval(TimeValue.parseTimeValue(request.param("interval"), nodesHotThreadsRequest.interval(), "interval")).     nodesHotThreadsRequest.snapshots(request.paramAsInt("snapshots", nodesHotThreadsRequest.snapshots())).     nodesHotThreadsRequest.timeout(request.param("timeout")).     return channel -> client.admin().cluster().nodesHotThreads(nodesHotThreadsRequest, new RestResponseListener<NodesHotThreadsResponse>(channel) {          @Override         public RestResponse buildResponse(NodesHotThreadsResponse response) throws Exception {             StringBuilder sb = new StringBuilder().             for (NodeHotThreads node : response.getNodes()) {                 sb.append("::: ").append(node.getNode().toString()).append("\n").                 Strings.spaceify(3, node.getHotThreads(), sb).                 sb.append('\n').             }             return new BytesRestResponse(RestStatus.OK, sb.toString()).         }     }). }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
