commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeDouble(alpha). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;4;;@Override public boolean canBeMinimized() {     return true. }
false;public;0;5;;@Override public MovAvgModel neighboringModel() {     double alpha = Math.random().     return new EwmaModel(alpha). }
false;public;0;4;;@Override public MovAvgModel clone() {     return new EwmaModel(this.alpha). }
false;protected;2;9;;@Override protected double[] doPredict(Collection<Double> values, int numPredictions) {     double[] predictions = new double[numPredictions].     // EWMA just emits the same final prediction repeatedly.     Arrays.fill(predictions, next(values)).     return predictions. }
false;public;1;4;;@Override public double next(Collection<Double> values) {     return MovingFunctions.ewma(values.stream().mapToDouble(Double::doubleValue).toArray(), alpha). }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(MovAvgPipelineAggregationBuilder.MODEL.getPreferredName(), NAME).     builder.startObject(MovAvgPipelineAggregationBuilder.SETTINGS.getPreferredName()).     builder.field("alpha", alpha).     builder.endObject().     return builder. }
false;public;3;6;;@Override public MovAvgModel parse(@Nullable Map<String, Object> settings, String pipelineName, int windowSize) throws ParseException {     double alpha = parseDoubleParam(settings, "alpha", DEFAULT_ALPHA).     checkUnrecognizedParams(settings).     return new EwmaModel(alpha). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(alpha). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     EwmaModel other = (EwmaModel) obj.     return Objects.equals(alpha, other.alpha). }
true;public;1;4;/**  * Alpha controls the smoothing of the data.  Alpha = 1 retains no memory of past values  * (e.g. a random walk), while alpha = 0 retains infinite memory of past values (e.g.  * the series mean).  Useful values are somewhere in between.  Defaults to 0.5.  *  * @param alpha A double between 0-1 inclusive, controls data smoothing  *  * @return The builder to continue chaining  */ ;/**  * Alpha controls the smoothing of the data.  Alpha = 1 retains no memory of past values  * (e.g. a random walk), while alpha = 0 retains infinite memory of past values (e.g.  * the series mean).  Useful values are somewhere in between.  Defaults to 0.5.  *  * @param alpha A double between 0-1 inclusive, controls data smoothing  *  * @return The builder to continue chaining  */ public EWMAModelBuilder alpha(double alpha) {     this.alpha = alpha.     return this. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(MovAvgPipelineAggregationBuilder.MODEL.getPreferredName(), NAME).     builder.startObject(MovAvgPipelineAggregationBuilder.SETTINGS.getPreferredName()).     builder.field("alpha", alpha).     builder.endObject().     return builder. }
false;public;0;4;;@Override public MovAvgModel build() {     return new EwmaModel(alpha). }
