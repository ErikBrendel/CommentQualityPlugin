# id;timestamp;commentText;codeText;commentWords;codeWords
ElasticsearchException -> public static String getExceptionName(Throwable ex);1524684173;Returns a underscore case name for the given exception. This method strips <tt>Elasticsearch</tt> prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,tt,elasticsearch,tt,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1525248068;Returns a underscore case name for the given exception. This method strips <tt>Elasticsearch</tt> prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,tt,elasticsearch,tt,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1525334055;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1527840262;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1528804324;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1535139672;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1541592065;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1544081506;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1544462583;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1547760072;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1548155031;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1548402798;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1548404322;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1548952100;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public static String getExceptionName(Throwable ex);1549949489;Returns a underscore case name for the given exception. This method strips {@code Elasticsearch} prefixes from exception names.;public static String getExceptionName(Throwable ex) {_        String simpleName = ex.getClass().getSimpleName()__        if (simpleName.startsWith("Elasticsearch")) {_            simpleName = simpleName.substring("Elasticsearch".length())__        }_        _        return toUnderscoreCase(simpleName)__    };returns,a,underscore,case,name,for,the,given,exception,this,method,strips,code,elasticsearch,prefixes,from,exception,names;public,static,string,get,exception,name,throwable,ex,string,simple,name,ex,get,class,get,simple,name,if,simple,name,starts,with,elasticsearch,simple,name,simple,name,substring,elasticsearch,length,return,to,underscore,case,simple,name
ElasticsearchException -> public Set<String> getMetadataKeys();1524684173;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1525248068;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1525334055;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1527840262;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1528804324;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1535139672;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1541592065;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1544081506;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1544462583;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1547760072;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1548155031;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1548402798;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1548404322;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1548952100;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public Set<String> getMetadataKeys();1549949489;Returns a set of all metadata keys on this exception;public Set<String> getMetadataKeys() {_        return metadata.keySet()__    };returns,a,set,of,all,metadata,keys,on,this,exception;public,set,string,get,metadata,keys,return,metadata,key,set
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1524684173;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1525248068;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1525334055;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1527840262;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1528804324;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1535139672;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1541592065;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1544081506;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1544462583;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1547760072;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1548155031;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1548402798;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1548404322;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1548952100;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public ElasticsearchException(String msg, Object... args);1549949489;Construct a <code>ElasticsearchException</code> with the specified detail message.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg  the detail message_@param args the arguments for the message;public ElasticsearchException(String msg, Object... args) {_        super(LoggerMessageFormat.format(msg, args))__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,object,args,super,logger,message,format,format,msg,args
ElasticsearchException -> public void addHeader(String key, List<String> value);1524684173;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1525248068;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1525334055;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1527840262;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1528804324;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1535139672;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1541592065;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1544081506;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1544462583;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1547760072;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1548155031;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1548402798;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1548404322;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1548952100;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public void addHeader(String key, List<String> value);1549949489;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, List<String> value) {_        _        if (key.startsWith("es.")) {_            throw new IllegalArgumentException("exception headers must not start with [es.], found [" + key + "] instead")__        }_        this.headers.put(key, value)__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,list,string,value,if,key,starts,with,es,throw,new,illegal,argument,exception,exception,headers,must,not,start,with,es,found,key,instead,this,headers,put,key,value
ElasticsearchException -> public String getDetailedMessage();1524684173;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1525248068;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1525334055;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1527840262;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1528804324;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1535139672;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1541592065;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1544081506;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1544462583;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1547760072;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1548155031;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1548402798;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1548404322;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1548952100;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public String getDetailedMessage();1549949489;Return the detail message, including the message from the nested exception_if there is one.;public String getDetailedMessage() {_        if (getCause() != null) {_            StringBuilder sb = new StringBuilder()__            sb.append(toString()).append("_ ")__            if (getCause() instanceof ElasticsearchException) {_                sb.append(((ElasticsearchException) getCause()).getDetailedMessage())__            } else {_                sb.append(getCause())__            }_            return sb.toString()__        } else {_            return super.toString()__        }_    };return,the,detail,message,including,the,message,from,the,nested,exception,if,there,is,one;public,string,get,detailed,message,if,get,cause,null,string,builder,sb,new,string,builder,sb,append,to,string,append,if,get,cause,instanceof,elasticsearch,exception,sb,append,elasticsearch,exception,get,cause,get,detailed,message,else,sb,append,get,cause,return,sb,to,string,else,return,super,to,string
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1524684173;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1525248068;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1525334055;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1527840262;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1528804324;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1535139672;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1541592065;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1544081506;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1544462583;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1547760072;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1548155031;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1548402798;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1548404322;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1548952100;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> public ElasticsearchException[] guessRootCauses();1549949489;Returns the root cause of this exception or multiple if different shards caused different exceptions;public ElasticsearchException[] guessRootCauses() {_        final Throwable cause = getCause()__        if (cause != null && cause instanceof ElasticsearchException) {_            return ((ElasticsearchException) cause).guessRootCauses()__        }_        return new ElasticsearchException[]{this}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions;public,elasticsearch,exception,guess,root,causes,final,throwable,cause,get,cause,if,cause,null,cause,instanceof,elasticsearch,exception,return,elasticsearch,exception,cause,guess,root,causes,return,new,elasticsearch,exception,this
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1524684173;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1525248068;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1525334055;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1527840262;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1528804324;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1535139672;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1541592065;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1544081506;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1544462583;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1547760072;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1548155031;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1548402798;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1548404322;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1548952100;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes();1549949489;Returns an array of all registered pairs of handle IDs and exception classes. These pairs are_provided for every registered exception.__@return an array of all registered pairs of handle IDs and exception classes;static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {_        @SuppressWarnings("unchecked")_        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =_                Arrays.stream(ElasticsearchExceptionHandle.values())_                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new)__        return ts__    };returns,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes,these,pairs,are,provided,for,every,registered,exception,return,an,array,of,all,registered,pairs,of,handle,ids,and,exception,classes;static,tuple,integer,class,extends,elasticsearch,exception,classes,suppress,warnings,unchecked,final,tuple,integer,class,extends,elasticsearch,exception,ts,arrays,stream,elasticsearch,exception,handle,values,map,h,tuple,tuple,h,id,h,exception,class,to,array,tuple,new,return,ts
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1524684173;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1525248068;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1525334055;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1527840262;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1528804324;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1535139672;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1541592065;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1544081506;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1544462583;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1547760072;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1548155031;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1548402798;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1548404322;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1548952100;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)             throws IOException;1549949489;Render any exception as a xcontent, encapsulated within a field or object named "error". The level of details that are rendered_depends on the value of the "detailed" parameter: when it's false only a simple message based on the type and message of the_exception is rendered. When it's true all detail are provided including guesses root causes, cause and potentially stack_trace.__This method is usually used when the {@link Exception} is rendered as a full XContent object, and its output can be parsed_by the {@link #failureFromXContent(XContentParser)} method.;public static void generateFailureXContent(XContentBuilder builder, Params params, @Nullable Exception e, boolean detailed)_            throws IOException {_        _        if (e == null) {_            builder.field(ERROR, "unknown")__            return__        }__        _        if (detailed == false) {_            String message = "No ElasticsearchException found"__            Throwable t = e__            for (int counter = 0_ counter < 10 && t != null_ counter++) {_                if (t instanceof ElasticsearchException) {_                    message = t.getClass().getSimpleName() + "[" + t.getMessage() + "]"__                    break__                }_                t = t.getCause()__            }_            builder.field(ERROR, message)__            return__        }__        _        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(e)__        builder.startObject(ERROR)__        {_            builder.startArray(ROOT_CAUSE)__            for (ElasticsearchException rootCause : rootCauses) {_                builder.startObject()__                rootCause.toXContent(builder, new DelegatingMapParams(singletonMap(REST_EXCEPTION_SKIP_CAUSE, "true"), params))__                builder.endObject()__            }_            builder.endArray()__        }_        generateThrowableXContent(builder, params, e)__        builder.endObject()__    };render,any,exception,as,a,xcontent,encapsulated,within,a,field,or,object,named,error,the,level,of,details,that,are,rendered,depends,on,the,value,of,the,detailed,parameter,when,it,s,false,only,a,simple,message,based,on,the,type,and,message,of,the,exception,is,rendered,when,it,s,true,all,detail,are,provided,including,guesses,root,causes,cause,and,potentially,stack,trace,this,method,is,usually,used,when,the,link,exception,is,rendered,as,a,full,xcontent,object,and,its,output,can,be,parsed,by,the,link,failure,from,xcontent,xcontent,parser,method;public,static,void,generate,failure,xcontent,xcontent,builder,builder,params,params,nullable,exception,e,boolean,detailed,throws,ioexception,if,e,null,builder,field,error,unknown,return,if,detailed,false,string,message,no,elasticsearch,exception,found,throwable,t,e,for,int,counter,0,counter,10,t,null,counter,if,t,instanceof,elasticsearch,exception,message,t,get,class,get,simple,name,t,get,message,break,t,t,get,cause,builder,field,error,message,return,final,elasticsearch,exception,root,causes,elasticsearch,exception,guess,root,causes,e,builder,start,object,error,builder,start,array,for,elasticsearch,exception,root,cause,root,causes,builder,start,object,root,cause,to,xcontent,builder,new,delegating,map,params,singleton,map,true,params,builder,end,object,builder,end,array,generate,throwable,xcontent,builder,params,e,builder,end,object
ElasticsearchException -> public Throwable unwrapCause();1524684173;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1525248068;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1525334055;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1527840262;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1528804324;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1535139672;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1541592065;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1544081506;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1544462583;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1547760072;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1548155031;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1548402798;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1548404322;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1548952100;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public Throwable unwrapCause();1549949489;Unwraps the actual cause from the exception for cases when the exception is a_{@link ElasticsearchWrapperException}.__@see ExceptionsHelper#unwrapCause(Throwable);public Throwable unwrapCause() {_        return ExceptionsHelper.unwrapCause(this)__    };unwraps,the,actual,cause,from,the,exception,for,cases,when,the,exception,is,a,link,elasticsearch,wrapper,exception,see,exceptions,helper,unwrap,cause,throwable;public,throwable,unwrap,cause,return,exceptions,helper,unwrap,cause,this
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1524684173;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1525248068;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1525334055;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1527840262;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1528804324;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1535139672;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1541592065;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1544081506;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1544462583;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1547760072;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1548155031;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1548402798;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1548404322;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1548952100;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException;1549949489;Static toXContent helper method that renders {@link org.elasticsearch.ElasticsearchException} or {@link Throwable} instances_as XContent, delegating the rendering to {@link #toXContent(XContentBuilder, Params)}_or {@link #innerToXContent(XContentBuilder, Params, Throwable, String, String, Map, Map, Throwable)}.__This method is usually used when the {@link Throwable} is rendered as a part of another XContent object, and its result can_be parsed back using the {@link #fromXContent(XContentParser)} method.;public static void generateThrowableXContent(XContentBuilder builder, Params params, Throwable t) throws IOException {_        t = ExceptionsHelper.unwrapCause(t)___        if (t instanceof ElasticsearchException) {_            ((ElasticsearchException) t).toXContent(builder, params)__        } else {_            innerToXContent(builder, params, t, getExceptionName(t), t.getMessage(), emptyMap(), emptyMap(), t.getCause())__        }_    };static,to,xcontent,helper,method,that,renders,link,org,elasticsearch,elasticsearch,exception,or,link,throwable,instances,as,xcontent,delegating,the,rendering,to,link,to,xcontent,xcontent,builder,params,or,link,inner,to,xcontent,xcontent,builder,params,throwable,string,string,map,map,throwable,this,method,is,usually,used,when,the,link,throwable,is,rendered,as,a,part,of,another,xcontent,object,and,its,result,can,be,parsed,back,using,the,link,from,xcontent,xcontent,parser,method;public,static,void,generate,throwable,xcontent,xcontent,builder,builder,params,params,throwable,t,throws,ioexception,t,exceptions,helper,unwrap,cause,t,if,t,instanceof,elasticsearch,exception,elasticsearch,exception,t,to,xcontent,builder,params,else,inner,to,xcontent,builder,params,t,get,exception,name,t,t,get,message,empty,map,empty,map,t,get,cause
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1524684173;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1525248068;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1525334055;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1527840262;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1528804324;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1535139672;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1541592065;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1544081506;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1544462583;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1547760072;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1548155031;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1548402798;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1548404322;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1548952100;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException;1549949489;Serializes the given exceptions stacktrace elements as well as it's suppressed exceptions to the given output stream.;public static <T extends Throwable> T writeStackTraces(T throwable, StreamOutput out) throws IOException {_        StackTraceElement[] stackTrace = throwable.getStackTrace()__        out.writeVInt(stackTrace.length)__        for (StackTraceElement element : stackTrace) {_            out.writeString(element.getClassName())__            out.writeOptionalString(element.getFileName())__            out.writeString(element.getMethodName())__            out.writeVInt(element.getLineNumber())__        }_        Throwable[] suppressed = throwable.getSuppressed()__        out.writeVInt(suppressed.length)__        for (Throwable t : suppressed) {_            out.writeException(t)__        }_        return throwable__    };serializes,the,given,exceptions,stacktrace,elements,as,well,as,it,s,suppressed,exceptions,to,the,given,output,stream;public,static,t,extends,throwable,t,write,stack,traces,t,throwable,stream,output,out,throws,ioexception,stack,trace,element,stack,trace,throwable,get,stack,trace,out,write,vint,stack,trace,length,for,stack,trace,element,element,stack,trace,out,write,string,element,get,class,name,out,write,optional,string,element,get,file,name,out,write,string,element,get,method,name,out,write,vint,element,get,line,number,throwable,suppressed,throwable,get,suppressed,out,write,vint,suppressed,length,for,throwable,t,suppressed,out,write,exception,t,return,throwable
ElasticsearchException -> public List<String> getMetadata(String key);1524684173;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1525248068;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1525334055;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1527840262;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1528804324;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1535139672;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1541592065;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1544081506;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1544462583;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1547760072;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1548155031;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1548402798;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1548404322;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1548952100;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public List<String> getMetadata(String key);1549949489;Returns the list of metadata values for the given key or {@code null} if no metadata for the_given key exists.;public List<String> getMetadata(String key) {_        return metadata.get(key)__    };returns,the,list,of,metadata,values,for,the,given,key,or,code,null,if,no,metadata,for,the,given,key,exists;public,list,string,get,metadata,string,key,return,metadata,get,key
ElasticsearchException -> public void addMetadata(String key, List<String> values);1524684173;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1525248068;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1525334055;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1527840262;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1528804324;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1535139672;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1541592065;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1544081506;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1544462583;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1547760072;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1548155031;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1548402798;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1548404322;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1548952100;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public void addMetadata(String key, List<String> values);1549949489;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, List<String> values) {_        _        if (key.startsWith("es.") == false) {_            throw new IllegalArgumentException("exception metadata must start with [es.], found [" + key + "] instead")__        }_        this.metadata.put(key, values)__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,list,string,values,if,key,starts,with,es,false,throw,new,illegal,argument,exception,exception,metadata,must,start,with,es,found,key,instead,this,metadata,put,key,values
ElasticsearchException -> public List<String> getHeader(String key);1524684173;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1525248068;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1525334055;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1527840262;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1528804324;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1535139672;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1541592065;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1544081506;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1544462583;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1547760072;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1548155031;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1548402798;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1548404322;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1548952100;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public List<String> getHeader(String key);1549949489;Returns the list of header values for the given key or {@code null} if no header for the_given key exists.;public List<String> getHeader(String key) {_        return headers.get(key)__    };returns,the,list,of,header,values,for,the,given,key,or,code,null,if,no,header,for,the,given,key,exists;public,list,string,get,header,string,key,return,headers,get,key
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1524684173;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1525248068;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1525334055;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1527840262;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1528804324;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1535139672;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1541592065;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1544081506;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1544462583;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1547760072;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1548155031;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1548402798;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1548404322;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1548952100;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException;1549949489;Deserializes stacktrace elements as well as suppressed exceptions from the given output stream and_adds it to the given exception.;public static <T extends Throwable> T readStackTrace(T throwable, StreamInput in) throws IOException {_        final int stackTraceElements = in.readVInt()__        StackTraceElement[] stackTrace = new StackTraceElement[stackTraceElements]__        for (int i = 0_ i < stackTraceElements_ i++) {_            final String declaringClasss = in.readString()__            final String fileName = in.readOptionalString()__            final String methodName = in.readString()__            final int lineNumber = in.readVInt()__            stackTrace[i] = new StackTraceElement(declaringClasss, methodName, fileName, lineNumber)__        }_        throwable.setStackTrace(stackTrace)___        int numSuppressed = in.readVInt()__        for (int i = 0_ i < numSuppressed_ i++) {_            throwable.addSuppressed(in.readException())__        }_        return throwable__    };deserializes,stacktrace,elements,as,well,as,suppressed,exceptions,from,the,given,output,stream,and,adds,it,to,the,given,exception;public,static,t,extends,throwable,t,read,stack,trace,t,throwable,stream,input,in,throws,ioexception,final,int,stack,trace,elements,in,read,vint,stack,trace,element,stack,trace,new,stack,trace,element,stack,trace,elements,for,int,i,0,i,stack,trace,elements,i,final,string,declaring,classs,in,read,string,final,string,file,name,in,read,optional,string,final,string,method,name,in,read,string,final,int,line,number,in,read,vint,stack,trace,i,new,stack,trace,element,declaring,classs,method,name,file,name,line,number,throwable,set,stack,trace,stack,trace,int,num,suppressed,in,read,vint,for,int,i,0,i,num,suppressed,i,throwable,add,suppressed,in,read,exception,return,throwable
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1524684173;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1525248068;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1525334055;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1527840262;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1528804324;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1535139672;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1541592065;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1544081506;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1544462583;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1547760072;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1548155031;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1548402798;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1548404322;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1548952100;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException;1549949489;Renders additional per exception information into the XContent;protected void metadataToXContent(XContentBuilder builder, Params params) throws IOException {_    };renders,additional,per,exception,information,into,the,xcontent;protected,void,metadata,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1524684173;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            return ((ElasticsearchException) ex).guessRootCauses()__        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1525248068;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1525334055;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1527840262;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1528804324;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1535139672;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1541592065;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1544081506;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1544462583;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1547760072;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1548155031;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1548402798;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1548404322;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1548952100;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public static ElasticsearchException[] guessRootCauses(Throwable t);1549949489;Returns the root cause of this exception or multiple if different shards caused different exceptions._If the given exception is not an instance of {@link org.elasticsearch.ElasticsearchException} an empty array_is returned.;public static ElasticsearchException[] guessRootCauses(Throwable t) {_        Throwable ex = ExceptionsHelper.unwrapCause(t)__        if (ex instanceof ElasticsearchException) {_            _            return ((ElasticsearchException) ex).guessRootCauses()__        }_        if (ex instanceof XContentParseException) {_            _            Throwable cause = ex.getCause()__            if (cause != null) {_                if (cause instanceof XContentParseException || cause instanceof ElasticsearchException) {_                    return guessRootCauses(ex.getCause())__                }_            }_        }_        return new ElasticsearchException[]{new ElasticsearchException(t.getMessage(), t) {_            @Override_            protected String getExceptionName() {_                return getExceptionName(getCause())__            }_        }}__    };returns,the,root,cause,of,this,exception,or,multiple,if,different,shards,caused,different,exceptions,if,the,given,exception,is,not,an,instance,of,link,org,elasticsearch,elasticsearch,exception,an,empty,array,is,returned;public,static,elasticsearch,exception,guess,root,causes,throwable,t,throwable,ex,exceptions,helper,unwrap,cause,t,if,ex,instanceof,elasticsearch,exception,return,elasticsearch,exception,ex,guess,root,causes,if,ex,instanceof,xcontent,parse,exception,throwable,cause,ex,get,cause,if,cause,null,if,cause,instanceof,xcontent,parse,exception,cause,instanceof,elasticsearch,exception,return,guess,root,causes,ex,get,cause,return,new,elasticsearch,exception,new,elasticsearch,exception,t,get,message,t,override,protected,string,get,exception,name,return,get,exception,name,get,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1524684173;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1525248068;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1525334055;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1527840262;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1528804324;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1535139672;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1541592065;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1544081506;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1544462583;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1547760072;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1548155031;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1548402798;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1548404322;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1548952100;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public ElasticsearchException(String msg, Throwable cause, Object... args);1549949489;Construct a <code>ElasticsearchException</code> with the specified detail message_and nested exception.__The message can be parameterized using <code>{}</code> as placeholders for the given_arguments__@param msg   the detail message_@param cause the nested exception_@param args  the arguments for the message;public ElasticsearchException(String msg, Throwable cause, Object... args) {_        super(LoggerMessageFormat.format(msg, args), cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,detail,message,and,nested,exception,the,message,can,be,parameterized,using,code,code,as,placeholders,for,the,given,arguments,param,msg,the,detail,message,param,cause,the,nested,exception,param,args,the,arguments,for,the,message;public,elasticsearch,exception,string,msg,throwable,cause,object,args,super,logger,message,format,format,msg,args,cause
ElasticsearchException -> public Throwable getRootCause();1524684173;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1525248068;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1525334055;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1527840262;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1528804324;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1535139672;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1541592065;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1544081506;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1544462583;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1547760072;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1548155031;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1548402798;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1548404322;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1548952100;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public Throwable getRootCause();1549949489;Retrieve the innermost cause of this exception, if none, returns the current exception.;public Throwable getRootCause() {_        Throwable rootCause = this__        Throwable cause = getCause()__        while (cause != null && cause != rootCause) {_            rootCause = cause__            cause = cause.getCause()__        }_        return rootCause__    };retrieve,the,innermost,cause,of,this,exception,if,none,returns,the,current,exception;public,throwable,get,root,cause,throwable,root,cause,this,throwable,cause,get,cause,while,cause,null,cause,root,cause,root,cause,cause,cause,cause,get,cause,return,root,cause
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1524684173;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1525248068;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1525334055;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1527840262;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1528804324;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1535139672;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1541592065;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1544081506;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1544462583;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1547760072;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1548155031;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1548402798;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1548404322;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1548952100;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public static boolean isRegistered(Class<? extends Throwable> exception, Version version);1549949489;Returns <code>true</code> iff the given class is a registered for an exception to be read.;public static boolean isRegistered(Class<? extends Throwable> exception, Version version) {_        ElasticsearchExceptionHandle elasticsearchExceptionHandle = CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception)__        if (elasticsearchExceptionHandle != null) {_            return version.onOrAfter(elasticsearchExceptionHandle.versionAdded)__        }_        return false__    };returns,code,true,code,iff,the,given,class,is,a,registered,for,an,exception,to,be,read;public,static,boolean,is,registered,class,extends,throwable,exception,version,version,elasticsearch,exception,handle,elasticsearch,exception,handle,get,exception,if,elasticsearch,exception,handle,null,return,version,on,or,after,elasticsearch,exception,handle,version,added,return,false
ElasticsearchException -> public void addHeader(String key, String... value);1524684173;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1525248068;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1525334055;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1527840262;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1528804324;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1535139672;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1541592065;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1544081506;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1544462583;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1547760072;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1548155031;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1548402798;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1548404322;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1548952100;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public void addHeader(String key, String... value);1549949489;Adds a new header with the given key._This method will replace existing header if a header with the same key already exists;public void addHeader(String key, String... value) {_        addHeader(key, Arrays.asList(value))__    };adds,a,new,header,with,the,given,key,this,method,will,replace,existing,header,if,a,header,with,the,same,key,already,exists;public,void,add,header,string,key,string,value,add,header,key,arrays,as,list,value
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1524684173;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1525248068;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1525334055;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1527840262;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1528804324;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1535139672;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1541592065;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1544081506;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1544462583;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1547760072;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1548155031;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1548402798;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1548404322;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1548952100;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static int getId(Class<? extends ElasticsearchException> exception);1549949489;Returns the serialization id the given exception.;public static int getId(Class<? extends ElasticsearchException> exception) {_        return CLASS_TO_ELASTICSEARCH_EXCEPTION_HANDLE.get(exception).id__    };returns,the,serialization,id,the,given,exception;public,static,int,get,id,class,extends,elasticsearch,exception,exception,return,get,exception,id
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1524684173;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1525248068;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1525334055;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1527840262;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1528804324;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1535139672;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1541592065;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1544081506;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1544462583;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1547760072;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1548155031;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1548402798;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1548404322;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1548952100;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException;1549949489;Parses the output of {@link #generateFailureXContent(XContentBuilder, Params, Exception, boolean)};public static ElasticsearchException failureFromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.currentToken()__        ensureFieldName(parser, token, ERROR)___        token = parser.nextToken()__        if (token.isValue()) {_            return new ElasticsearchException(buildMessage("exception", parser.text(), null))__        }__        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation)__        token = parser.nextToken()___        _        return innerFromXContent(parser, true)__    };parses,the,output,of,link,generate,failure,xcontent,xcontent,builder,params,exception,boolean;public,static,elasticsearch,exception,failure,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,current,token,ensure,field,name,parser,token,error,token,parser,next,token,if,token,is,value,return,new,elasticsearch,exception,build,message,exception,parser,text,null,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,token,parser,next,token,return,inner,from,xcontent,parser,true
ElasticsearchException -> public Set<String> getHeaderKeys();1524684173;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1525248068;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1525334055;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1527840262;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1528804324;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1535139672;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1541592065;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1544081506;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1544462583;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1547760072;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1548155031;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1548402798;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1548404322;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1548952100;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> public Set<String> getHeaderKeys();1549949489;Returns a set of all header keys on this exception;public Set<String> getHeaderKeys() {_        return headers.keySet()__    };returns,a,set,of,all,header,keys,on,this,exception;public,set,string,get,header,keys,return,headers,key,set
ElasticsearchException -> static int[] ids();1524684173;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1525248068;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1525334055;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1527840262;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1528804324;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1535139672;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1541592065;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1544081506;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1544462583;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1547760072;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1548155031;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1548402798;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1548404322;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1548952100;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> static int[] ids();1549949489;Returns an array of all registered handle IDs. These are the IDs for every registered_exception.__@return an array of all registered handle IDs;static int[] ids() {_        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray()__    };returns,an,array,of,all,registered,handle,ids,these,are,the,ids,for,every,registered,exception,return,an,array,of,all,registered,handle,ids;static,int,ids,return,arrays,stream,elasticsearch,exception,handle,values,map,to,int,h,h,id,to,array
ElasticsearchException -> public RestStatus status();1524684173;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1525248068;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1525334055;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1527840262;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1528804324;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1535139672;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1541592065;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1544081506;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1544462583;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1547760072;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1548155031;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1548402798;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1548404322;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1548952100;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public RestStatus status();1549949489;Returns the rest status code associated with this exception.;public RestStatus status() {_        Throwable cause = unwrapCause()__        if (cause == this) {_            return RestStatus.INTERNAL_SERVER_ERROR__        } else {_            return ExceptionsHelper.status(cause)__        }_    };returns,the,rest,status,code,associated,with,this,exception;public,rest,status,status,throwable,cause,unwrap,cause,if,cause,this,return,rest,status,else,return,exceptions,helper,status,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1524684173;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1525248068;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1525334055;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1527840262;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1528804324;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1535139672;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1541592065;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1544081506;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1544462583;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1547760072;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1548155031;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1548402798;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1548404322;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1548952100;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public ElasticsearchException(Throwable cause);1549949489;Construct a <code>ElasticsearchException</code> with the specified cause exception.;public ElasticsearchException(Throwable cause) {_        super(cause)__    };construct,a,code,elasticsearch,exception,code,with,the,specified,cause,exception;public,elasticsearch,exception,throwable,cause,super,cause
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1524684173;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1525248068;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1525334055;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1527840262;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1528804324;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1535139672;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1541592065;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1544081506;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1544462583;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1547760072;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1548155031;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1548402798;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1548404322;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1548952100;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public static ElasticsearchException fromXContent(XContentParser parser) throws IOException;1549949489;Generate a {@link ElasticsearchException} from a {@link XContentParser}. This does not_return the original exception type (ie NodeClosedException for example) but just wraps_the type, the reason and the cause of the exception. It also recursively parses the_tree structure of the cause, returning it as a tree structure of {@link ElasticsearchException}_instances.;public static ElasticsearchException fromXContent(XContentParser parser) throws IOException {_        XContentParser.Token token = parser.nextToken()__        ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation)__        return innerFromXContent(parser, false)__    };generate,a,link,elasticsearch,exception,from,a,link,xcontent,parser,this,does,not,return,the,original,exception,type,ie,node,closed,exception,for,example,but,just,wraps,the,type,the,reason,and,the,cause,of,the,exception,it,also,recursively,parses,the,tree,structure,of,the,cause,returning,it,as,a,tree,structure,of,link,elasticsearch,exception,instances;public,static,elasticsearch,exception,from,xcontent,xcontent,parser,parser,throws,ioexception,xcontent,parser,token,token,parser,next,token,ensure,expected,token,xcontent,parser,token,token,parser,get,token,location,return,inner,from,xcontent,parser,false
ElasticsearchException -> public void addMetadata(String key, String... values);1524684173;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1525248068;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1525334055;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1527840262;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1528804324;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1535139672;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1541592065;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1544081506;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1544462583;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1547760072;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1548155031;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1548402798;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1548404322;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1548952100;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
ElasticsearchException -> public void addMetadata(String key, String... values);1549949489;Adds a new piece of metadata with the given key._If the provided key is already present, the corresponding metadata will be replaced;public void addMetadata(String key, String... values) {_        addMetadata(key, Arrays.asList(values))__    };adds,a,new,piece,of,metadata,with,the,given,key,if,the,provided,key,is,already,present,the,corresponding,metadata,will,be,replaced;public,void,add,metadata,string,key,string,values,add,metadata,key,arrays,as,list,values
