commented;modifiers;parameterAmount;loc;comment;code
false;public;2;51;;@Override public void hitsExecute(SearchContext context, SearchHit[] hits) throws IOException {     if (context.hasScriptFields() == false) {         return.     }     // don't modify the incoming hits     hits = hits.clone().     Arrays.sort(hits, Comparator.comparingInt(SearchHit::docId)).     int lastReaderId = -1.     FieldScript[] leafScripts = null.     List<ScriptFieldsContext.ScriptField> scriptFields = context.scriptFields().fields().     final IndexReader reader = context.searcher().getIndexReader().     for (SearchHit hit : hits) {         int readerId = ReaderUtil.subIndex(hit.docId(), reader.leaves()).         LeafReaderContext leafReaderContext = reader.leaves().get(readerId).         if (readerId != lastReaderId) {             leafScripts = createLeafScripts(leafReaderContext, scriptFields).             lastReaderId = readerId.         }         int docId = hit.docId() - leafReaderContext.docBase.         for (int i = 0. i < leafScripts.length. i++) {             leafScripts[i].setDocument(docId).             final Object value.             try {                 value = leafScripts[i].execute().                 CollectionUtils.ensureNoSelfReferences(value, "ScriptFieldsFetchSubPhase leaf script " + i).             } catch (RuntimeException e) {                 if (scriptFields.get(i).ignoreException()) {                     continue.                 }                 throw e.             }             if (hit.fieldsOrNull() == null) {                 hit.fields(new HashMap<>(2)).             }             String scriptFieldName = scriptFields.get(i).name().             DocumentField hitField = hit.getFields().get(scriptFieldName).             if (hitField == null) {                 final List<Object> values.                 if (value instanceof Collection) {                     values = new ArrayList<>((Collection<?>) value).                 } else {                     values = Collections.singletonList(value).                 }                 hitField = new DocumentField(scriptFieldName, values).                 hit.getFields().put(scriptFieldName, hitField).             }         }     } }
false;private;2;12;;private FieldScript[] createLeafScripts(LeafReaderContext context, List<ScriptFieldsContext.ScriptField> scriptFields) {     FieldScript[] scripts = new FieldScript[scriptFields.size()].     for (int i = 0. i < scripts.length. i++) {         try {             scripts[i] = scriptFields.get(i).script().newInstance(context).         } catch (IOException e1) {             throw new IllegalStateException("Failed to load script " + scriptFields.get(i).name(), e1).         }     }     return scripts. }
