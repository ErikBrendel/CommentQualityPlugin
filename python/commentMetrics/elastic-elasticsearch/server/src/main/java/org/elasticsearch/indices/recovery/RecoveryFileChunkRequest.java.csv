commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long recoveryId() {     return this.recoveryId. }
false;public;0;3;;public ShardId shardId() {     return shardId. }
false;public;0;3;;public String name() {     return metaData.name(). }
false;public;0;3;;public long position() {     return position. }
false;public;0;3;;public String checksum() {     return metaData.checksum(). }
false;public;0;3;;public long length() {     return metaData.length(). }
false;public;0;3;;public BytesReference content() {     return content. }
false;public;0;3;;public int totalTranslogOps() {     return totalTranslogOps. }
false;public;0;3;;public long sourceThrottleTimeInNanos() {     return sourceThrottleTimeInNanos. }
false;public;1;17;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     recoveryId = in.readLong().     shardId = ShardId.readShardId(in).     String name = in.readString().     position = in.readVLong().     long length = in.readVLong().     String checksum = in.readString().     content = in.readBytesReference().     Version writtenBy = Lucene.parseVersionLenient(in.readString(), null).     assert writtenBy != null.     metaData = new StoreFileMetaData(name, length, checksum, writtenBy).     lastChunk = in.readBoolean().     totalTranslogOps = in.readVInt().     sourceThrottleTimeInNanos = in.readLong(). }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(recoveryId).     shardId.writeTo(out).     out.writeString(metaData.name()).     out.writeVLong(position).     out.writeVLong(metaData.length()).     out.writeString(metaData.checksum()).     out.writeBytesReference(content).     out.writeString(metaData.writtenBy().toString()).     out.writeBoolean(lastChunk).     out.writeVInt(totalTranslogOps).     out.writeLong(sourceThrottleTimeInNanos). }
false;public;0;6;;@Override public String toString() {     return shardId + ": name='" + name() + '\'' + ", position=" + position + ", length=" + length(). }
false;public;0;3;;public StoreFileMetaData metadata() {     return metaData. }
true;public;0;3;/**  * Returns <code>true</code> if this chunk is the last chunk in the stream.  */ ;/**  * Returns <code>true</code> if this chunk is the last chunk in the stream.  */ public boolean lastChunk() {     return lastChunk. }
