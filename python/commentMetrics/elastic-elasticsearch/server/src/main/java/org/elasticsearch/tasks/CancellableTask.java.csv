commented;modifiers;parameterAmount;loc;comment;code
true;final;1;5;/**  * This method is called by the task manager when this task is cancelled.  */ ;/**  * This method is called by the task manager when this task is cancelled.  */ final void cancel(String reason) {     assert reason != null.     this.reason.compareAndSet(null, reason).     onCancelled(). }
true;public;0;3;/**  * Returns true if this task should be automatically cancelled if the coordinating node that  * requested this task left the cluster.  */ ;/**  * Returns true if this task should be automatically cancelled if the coordinating node that  * requested this task left the cluster.  */ public boolean cancelOnParentLeaving() {     return true. }
true;public,abstract;0;1;/**  * Returns true if this task can potentially have children that need to be cancelled when it parent is cancelled.  */ ;/**  * Returns true if this task can potentially have children that need to be cancelled when it parent is cancelled.  */ public abstract boolean shouldCancelChildrenOnCancellation().
false;public;0;3;;public boolean isCancelled() {     return reason.get() != null. }
true;public;0;4;/**  * The reason the task was cancelled or null if it hasn't been cancelled.  */ ;/**  * The reason the task was cancelled or null if it hasn't been cancelled.  */ @Nullable public String getReasonCancelled() {     return reason.get(). }
true;protected;0;2;/**  * Called after the task is cancelled so that it can take any actions that it has to take.  */ ;/**  * Called after the task is cancelled so that it can take any actions that it has to take.  */ protected void onCancelled() { }
