commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns node id where failure occurred  *  * @return node id  */ ;/**  * Returns node id where failure occurred  *  * @return node id  */ @Nullable public String nodeId() {     return nodeId. }
true;static;1;5;/**  * Reads shard failure information from stream input  *  * @param in stream input  * @return shard failure information  */ ;/**  * Reads shard failure information from stream input  *  * @param in stream input  * @return shard failure information  */ static SnapshotShardFailure readSnapshotShardFailure(StreamInput in) throws IOException {     SnapshotShardFailure exp = new SnapshotShardFailure().     exp.readFrom(in).     return exp. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     nodeId = in.readOptionalString().     shardId = ShardId.readShardId(in).     super.shardId = shardId.getId().     index = shardId.getIndexName().     reason = in.readString().     status = RestStatus.readFrom(in). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(nodeId).     shardId.writeTo(out).     out.writeString(reason).     RestStatus.writeTo(out, status). }
false;public;0;9;;@Override public String toString() {     return "SnapshotShardFailure{" + "shardId=" + shardId + ", reason='" + reason + '\'' + ", nodeId='" + nodeId + '\'' + ", status=" + status + '}'. }
false;private,static;1;36;;private static SnapshotShardFailure constructSnapshotShardFailure(Object[] args) {     String index = (String) args[0].     String indexUuid = (String) args[1].     String nodeId = (String) args[2].     String reason = (String) args[3].     Integer intShardId = (Integer) args[4].     String status = (String) args[5].     if (index == null) {         throw new ElasticsearchParseException("index name was not set").     }     if (intShardId == null) {         throw new ElasticsearchParseException("index shard was not set").     }     ShardId shardId = new ShardId(index, indexUuid != null ? indexUuid : IndexMetaData.INDEX_UUID_NA_VALUE, intShardId).     // Workaround for https://github.com/elastic/elasticsearch/issues/25878     // Some old snapshot might still have null in shard failure reasons     String nonNullReason.     if (reason != null) {         nonNullReason = reason.     } else {         nonNullReason = "".     }     RestStatus restStatus.     if (status != null) {         restStatus = RestStatus.valueOf(status).     } else {         restStatus = RestStatus.INTERNAL_SERVER_ERROR.     }     return new SnapshotShardFailure(nodeId, shardId, nonNullReason, restStatus). }
true;public,static;1;3;/**  * Deserializes snapshot failure information from JSON  *  * @param parser JSON parser  * @return snapshot failure information  */ ;/**  * Deserializes snapshot failure information from JSON  *  * @param parser JSON parser  * @return snapshot failure information  */ public static SnapshotShardFailure fromXContent(XContentParser parser) throws IOException {     return SNAPSHOT_SHARD_FAILURE_PARSER.parse(parser, null). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field("index", shardId.getIndexName()).     builder.field("index_uuid", shardId.getIndexName()).     builder.field("shard_id", shardId.id()).     builder.field("reason", reason).     if (nodeId != null) {         builder.field("node_id", nodeId).     }     builder.field("status", status.name()).     return builder. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     SnapshotShardFailure that = (SnapshotShardFailure) o.     // customized to account for discrepancies in shardId/Index toXContent/fromXContent related to uuid     return shardId.id() == that.shardId.id() && shardId.getIndexName().equals(shardId.getIndexName()) && Objects.equals(reason, that.reason) && Objects.equals(nodeId, that.nodeId) && status.getStatus() == that.status.getStatus(). }
false;public;0;5;;@Override public int hashCode() {     // customized to account for discrepancies in shardId/Index toXContent/fromXContent related to uuid     return Objects.hash(shardId.id(), shardId.getIndexName(), reason, nodeId, status.getStatus()). }
