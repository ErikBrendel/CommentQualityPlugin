commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return PercentilesBucketPipelineAggregationBuilder.NAME. }
false;public;1;9;;@Override public double percentile(double percent) throws IllegalArgumentException {     Double value = percentiles.get(percent).     if (value == null) {         throw new IllegalArgumentException("Percent requested [" + String.valueOf(percent) + "] was not" + " one of the computed percentiles. Available keys are: " + percentiles.keySet()).     }     return value. }
false;public;1;10;;@Override public String percentileAsString(double percent) {     // check availability as unformatted value     double value = percentile(percent).     String valueAsString = percentilesAsString.get(percent).     if (valueAsString != null) {         return valueAsString.     } else {         return Double.toString(value).     } }
false;public;2;16;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.startObject("values").     for (Entry<Double, Double> percent : percentiles.entrySet()) {         double value = percent.getValue().         boolean hasValue = !(Double.isNaN(value)).         Double key = percent.getKey().         builder.field(Double.toString(key), hasValue ? value : null).         String valueAsString = percentilesAsString.get(key).         if (hasValue && valueAsString != null) {             builder.field(key + "_as_string", valueAsString).         }     }     builder.endObject().     return builder. }
false;public,static;2;5;;public static ParsedPercentilesBucket fromXContent(XContentParser parser, String name) throws IOException {     ParsedPercentilesBucket aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
