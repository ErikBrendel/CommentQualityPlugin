# id;timestamp;commentText;codeText;commentWords;codeWords
DiscoveryNodes -> public Version getSmallestNonClientNodeVersion();1524684173;Returns the version of the node with the oldest version in the cluster that is not a client node__If there are no non-client nodes, Version.CURRENT will be returned.__@return the oldest version in the cluster;public Version getSmallestNonClientNodeVersion() {_        return minNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,oldest,version,in,the,cluster;public,version,get,smallest,non,client,node,version,return,min,non,client,node,version
DiscoveryNodes -> public Version getSmallestNonClientNodeVersion();1525334055;Returns the version of the node with the oldest version in the cluster that is not a client node__If there are no non-client nodes, Version.CURRENT will be returned.__@return the oldest version in the cluster;public Version getSmallestNonClientNodeVersion() {_        return minNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,oldest,version,in,the,cluster;public,version,get,smallest,non,client,node,version,return,min,non,client,node,version
DiscoveryNodes -> public Version getSmallestNonClientNodeVersion();1526029249;Returns the version of the node with the oldest version in the cluster that is not a client node__If there are no non-client nodes, Version.CURRENT will be returned.__@return the oldest version in the cluster;public Version getSmallestNonClientNodeVersion() {_        return minNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,oldest,version,in,the,cluster;public,version,get,smallest,non,client,node,version,return,min,non,client,node,version
DiscoveryNodes -> public Version getSmallestNonClientNodeVersion();1548161590;Returns the version of the node with the oldest version in the cluster that is not a client node__If there are no non-client nodes, Version.CURRENT will be returned.__@return the oldest version in the cluster;public Version getSmallestNonClientNodeVersion() {_        return minNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,oldest,version,in,the,cluster;public,version,get,smallest,non,client,node,version,return,min,non,client,node,version
DiscoveryNodes -> public Delta delta(DiscoveryNodes other);1524684173;Returns the changes comparing this nodes to the provided nodes.;public Delta delta(DiscoveryNodes other) {_        final List<DiscoveryNode> removed = new ArrayList<>()__        final List<DiscoveryNode> added = new ArrayList<>()__        for (DiscoveryNode node : other) {_            if (this.nodeExists(node) == false) {_                removed.add(node)__            }_        }_        for (DiscoveryNode node : this) {_            if (other.nodeExists(node) == false) {_                added.add(node)__            }_        }__        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),_            Collections.unmodifiableList(added))__    };returns,the,changes,comparing,this,nodes,to,the,provided,nodes;public,delta,delta,discovery,nodes,other,final,list,discovery,node,removed,new,array,list,final,list,discovery,node,added,new,array,list,for,discovery,node,node,other,if,this,node,exists,node,false,removed,add,node,for,discovery,node,node,this,if,other,node,exists,node,false,added,add,node,return,new,delta,other,get,master,node,get,master,node,local,node,id,collections,unmodifiable,list,removed,collections,unmodifiable,list,added
DiscoveryNodes -> public Delta delta(DiscoveryNodes other);1525334055;Returns the changes comparing this nodes to the provided nodes.;public Delta delta(DiscoveryNodes other) {_        final List<DiscoveryNode> removed = new ArrayList<>()__        final List<DiscoveryNode> added = new ArrayList<>()__        for (DiscoveryNode node : other) {_            if (this.nodeExists(node) == false) {_                removed.add(node)__            }_        }_        for (DiscoveryNode node : this) {_            if (other.nodeExists(node) == false) {_                added.add(node)__            }_        }__        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),_            Collections.unmodifiableList(added))__    };returns,the,changes,comparing,this,nodes,to,the,provided,nodes;public,delta,delta,discovery,nodes,other,final,list,discovery,node,removed,new,array,list,final,list,discovery,node,added,new,array,list,for,discovery,node,node,other,if,this,node,exists,node,false,removed,add,node,for,discovery,node,node,this,if,other,node,exists,node,false,added,add,node,return,new,delta,other,get,master,node,get,master,node,local,node,id,collections,unmodifiable,list,removed,collections,unmodifiable,list,added
DiscoveryNodes -> public Delta delta(DiscoveryNodes other);1526029249;Returns the changes comparing this nodes to the provided nodes.;public Delta delta(DiscoveryNodes other) {_        final List<DiscoveryNode> removed = new ArrayList<>()__        final List<DiscoveryNode> added = new ArrayList<>()__        for (DiscoveryNode node : other) {_            if (this.nodeExists(node) == false) {_                removed.add(node)__            }_        }_        for (DiscoveryNode node : this) {_            if (other.nodeExists(node) == false) {_                added.add(node)__            }_        }__        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),_            Collections.unmodifiableList(added))__    };returns,the,changes,comparing,this,nodes,to,the,provided,nodes;public,delta,delta,discovery,nodes,other,final,list,discovery,node,removed,new,array,list,final,list,discovery,node,added,new,array,list,for,discovery,node,node,other,if,this,node,exists,node,false,removed,add,node,for,discovery,node,node,this,if,other,node,exists,node,false,added,add,node,return,new,delta,other,get,master,node,get,master,node,local,node,id,collections,unmodifiable,list,removed,collections,unmodifiable,list,added
DiscoveryNodes -> public Delta delta(DiscoveryNodes other);1548161590;Returns the changes comparing this nodes to the provided nodes.;public Delta delta(DiscoveryNodes other) {_        final List<DiscoveryNode> removed = new ArrayList<>()__        final List<DiscoveryNode> added = new ArrayList<>()__        for (DiscoveryNode node : other) {_            if (this.nodeExists(node) == false) {_                removed.add(node)__            }_        }_        for (DiscoveryNode node : this) {_            if (other.nodeExists(node) == false) {_                added.add(node)__            }_        }__        return new Delta(other.getMasterNode(), getMasterNode(), localNodeId, Collections.unmodifiableList(removed),_            Collections.unmodifiableList(added))__    };returns,the,changes,comparing,this,nodes,to,the,provided,nodes;public,delta,delta,discovery,nodes,other,final,list,discovery,node,removed,new,array,list,final,list,discovery,node,added,new,array,list,for,discovery,node,node,other,if,this,node,exists,node,false,removed,add,node,for,discovery,node,node,this,if,other,node,exists,node,false,added,add,node,return,new,delta,other,get,master,node,get,master,node,local,node,id,collections,unmodifiable,list,removed,collections,unmodifiable,list,added
DiscoveryNodes -> Builder -> public Builder add(DiscoveryNode node);1524684173;adds a disco node to the builder. Will throw an {@link IllegalArgumentException} if_the supplied node doesn't pass the pre-flight checks performed by {@link #validateAdd(DiscoveryNode)};public Builder add(DiscoveryNode node) {_            final String preflight = validateAdd(node)__            if (preflight != null) {_                throw new IllegalArgumentException(preflight)__            }_            putUnsafe(node)__            return this__        };adds,a,disco,node,to,the,builder,will,throw,an,link,illegal,argument,exception,if,the,supplied,node,doesn,t,pass,the,pre,flight,checks,performed,by,link,validate,add,discovery,node;public,builder,add,discovery,node,node,final,string,preflight,validate,add,node,if,preflight,null,throw,new,illegal,argument,exception,preflight,put,unsafe,node,return,this
DiscoveryNodes -> Builder -> public Builder add(DiscoveryNode node);1525334055;adds a disco node to the builder. Will throw an {@link IllegalArgumentException} if_the supplied node doesn't pass the pre-flight checks performed by {@link #validateAdd(DiscoveryNode)};public Builder add(DiscoveryNode node) {_            final String preflight = validateAdd(node)__            if (preflight != null) {_                throw new IllegalArgumentException(preflight)__            }_            putUnsafe(node)__            return this__        };adds,a,disco,node,to,the,builder,will,throw,an,link,illegal,argument,exception,if,the,supplied,node,doesn,t,pass,the,pre,flight,checks,performed,by,link,validate,add,discovery,node;public,builder,add,discovery,node,node,final,string,preflight,validate,add,node,if,preflight,null,throw,new,illegal,argument,exception,preflight,put,unsafe,node,return,this
DiscoveryNodes -> Builder -> public Builder add(DiscoveryNode node);1526029249;adds a disco node to the builder. Will throw an {@link IllegalArgumentException} if_the supplied node doesn't pass the pre-flight checks performed by {@link #validateAdd(DiscoveryNode)};public Builder add(DiscoveryNode node) {_            final String preflight = validateAdd(node)__            if (preflight != null) {_                throw new IllegalArgumentException(preflight)__            }_            putUnsafe(node)__            return this__        };adds,a,disco,node,to,the,builder,will,throw,an,link,illegal,argument,exception,if,the,supplied,node,doesn,t,pass,the,pre,flight,checks,performed,by,link,validate,add,discovery,node;public,builder,add,discovery,node,node,final,string,preflight,validate,add,node,if,preflight,null,throw,new,illegal,argument,exception,preflight,put,unsafe,node,return,this
DiscoveryNodes -> Builder -> public Builder add(DiscoveryNode node);1548161590;adds a disco node to the builder. Will throw an {@link IllegalArgumentException} if_the supplied node doesn't pass the pre-flight checks performed by {@link #validateAdd(DiscoveryNode)};public Builder add(DiscoveryNode node) {_            final String preflight = validateAdd(node)__            if (preflight != null) {_                throw new IllegalArgumentException(preflight)__            }_            putUnsafe(node)__            return this__        };adds,a,disco,node,to,the,builder,will,throw,an,link,illegal,argument,exception,if,the,supplied,node,doesn,t,pass,the,pre,flight,checks,performed,by,link,validate,add,discovery,node;public,builder,add,discovery,node,node,final,string,preflight,validate,add,node,if,preflight,null,throw,new,illegal,argument,exception,preflight,put,unsafe,node,return,this
DiscoveryNodes -> public boolean isLocalNodeElectedMaster();1524684173;Returns <tt>true</tt> if the local node is the elected master node.;public boolean isLocalNodeElectedMaster() {_        if (localNodeId == null) {_            _            return false__        }_        return localNodeId.equals(masterNodeId)__    };returns,tt,true,tt,if,the,local,node,is,the,elected,master,node;public,boolean,is,local,node,elected,master,if,local,node,id,null,return,false,return,local,node,id,equals,master,node,id
DiscoveryNodes -> public boolean isLocalNodeElectedMaster();1525334055;Returns {@code true} if the local node is the elected master node.;public boolean isLocalNodeElectedMaster() {_        if (localNodeId == null) {_            _            return false__        }_        return localNodeId.equals(masterNodeId)__    };returns,code,true,if,the,local,node,is,the,elected,master,node;public,boolean,is,local,node,elected,master,if,local,node,id,null,return,false,return,local,node,id,equals,master,node,id
DiscoveryNodes -> public boolean isLocalNodeElectedMaster();1526029249;Returns {@code true} if the local node is the elected master node.;public boolean isLocalNodeElectedMaster() {_        if (localNodeId == null) {_            _            return false__        }_        return localNodeId.equals(masterNodeId)__    };returns,code,true,if,the,local,node,is,the,elected,master,node;public,boolean,is,local,node,elected,master,if,local,node,id,null,return,false,return,local,node,id,equals,master,node,id
DiscoveryNodes -> public boolean isLocalNodeElectedMaster();1548161590;Returns {@code true} if the local node is the elected master node.;public boolean isLocalNodeElectedMaster() {_        if (localNodeId == null) {_            _            return false__        }_        return localNodeId.equals(masterNodeId)__    };returns,code,true,if,the,local,node,is,the,elected,master,node;public,boolean,is,local,node,elected,master,if,local,node,id,null,return,false,return,local,node,id,equals,master,node,id
DiscoveryNodes -> public Version getLargestNonClientNodeVersion();1524684173;Returns the version of the node with the youngest version in the cluster that is not a client node.__If there are no non-client nodes, Version.CURRENT will be returned.__@return the youngest version in the cluster;public Version getLargestNonClientNodeVersion() {_        return maxNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,youngest,version,in,the,cluster;public,version,get,largest,non,client,node,version,return,max,non,client,node,version
DiscoveryNodes -> public Version getLargestNonClientNodeVersion();1525334055;Returns the version of the node with the youngest version in the cluster that is not a client node.__If there are no non-client nodes, Version.CURRENT will be returned.__@return the youngest version in the cluster;public Version getLargestNonClientNodeVersion() {_        return maxNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,youngest,version,in,the,cluster;public,version,get,largest,non,client,node,version,return,max,non,client,node,version
DiscoveryNodes -> public Version getLargestNonClientNodeVersion();1526029249;Returns the version of the node with the youngest version in the cluster that is not a client node.__If there are no non-client nodes, Version.CURRENT will be returned.__@return the youngest version in the cluster;public Version getLargestNonClientNodeVersion() {_        return maxNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,youngest,version,in,the,cluster;public,version,get,largest,non,client,node,version,return,max,non,client,node,version
DiscoveryNodes -> public Version getLargestNonClientNodeVersion();1548161590;Returns the version of the node with the youngest version in the cluster that is not a client node.__If there are no non-client nodes, Version.CURRENT will be returned.__@return the youngest version in the cluster;public Version getLargestNonClientNodeVersion() {_        return maxNonClientNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,that,is,not,a,client,node,if,there,are,no,non,client,nodes,version,current,will,be,returned,return,the,youngest,version,in,the,cluster;public,version,get,largest,non,client,node,version,return,max,non,client,node,version
DiscoveryNodes -> public DiscoveryNode resolveNode(String node);1524684173;Resolve a node with a given id__@param node id of the node to discover_@return discovered node matching the given id_@throws IllegalArgumentException if more than one node matches the request or no nodes have been resolved;public DiscoveryNode resolveNode(String node) {_        String[] resolvedNodeIds = resolveNodes(node)__        if (resolvedNodeIds.length > 1) {_            throw new IllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length_                + "] nodes, where expected to be resolved to a single node")__        }_        if (resolvedNodeIds.length == 0) {_            throw new IllegalArgumentException("failed to resolve [" + node + "], no matching nodes")__        }_        return nodes.get(resolvedNodeIds[0])__    };resolve,a,node,with,a,given,id,param,node,id,of,the,node,to,discover,return,discovered,node,matching,the,given,id,throws,illegal,argument,exception,if,more,than,one,node,matches,the,request,or,no,nodes,have,been,resolved;public,discovery,node,resolve,node,string,node,string,resolved,node,ids,resolve,nodes,node,if,resolved,node,ids,length,1,throw,new,illegal,argument,exception,resolved,node,into,resolved,node,ids,length,nodes,where,expected,to,be,resolved,to,a,single,node,if,resolved,node,ids,length,0,throw,new,illegal,argument,exception,failed,to,resolve,node,no,matching,nodes,return,nodes,get,resolved,node,ids,0
DiscoveryNodes -> public DiscoveryNode resolveNode(String node);1525334055;Resolve a node with a given id__@param node id of the node to discover_@return discovered node matching the given id_@throws IllegalArgumentException if more than one node matches the request or no nodes have been resolved;public DiscoveryNode resolveNode(String node) {_        String[] resolvedNodeIds = resolveNodes(node)__        if (resolvedNodeIds.length > 1) {_            throw new IllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length_                + "] nodes, where expected to be resolved to a single node")__        }_        if (resolvedNodeIds.length == 0) {_            throw new IllegalArgumentException("failed to resolve [" + node + "], no matching nodes")__        }_        return nodes.get(resolvedNodeIds[0])__    };resolve,a,node,with,a,given,id,param,node,id,of,the,node,to,discover,return,discovered,node,matching,the,given,id,throws,illegal,argument,exception,if,more,than,one,node,matches,the,request,or,no,nodes,have,been,resolved;public,discovery,node,resolve,node,string,node,string,resolved,node,ids,resolve,nodes,node,if,resolved,node,ids,length,1,throw,new,illegal,argument,exception,resolved,node,into,resolved,node,ids,length,nodes,where,expected,to,be,resolved,to,a,single,node,if,resolved,node,ids,length,0,throw,new,illegal,argument,exception,failed,to,resolve,node,no,matching,nodes,return,nodes,get,resolved,node,ids,0
DiscoveryNodes -> public DiscoveryNode resolveNode(String node);1526029249;Resolve a node with a given id__@param node id of the node to discover_@return discovered node matching the given id_@throws IllegalArgumentException if more than one node matches the request or no nodes have been resolved;public DiscoveryNode resolveNode(String node) {_        String[] resolvedNodeIds = resolveNodes(node)__        if (resolvedNodeIds.length > 1) {_            throw new IllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length_                + "] nodes, where expected to be resolved to a single node")__        }_        if (resolvedNodeIds.length == 0) {_            throw new IllegalArgumentException("failed to resolve [" + node + "], no matching nodes")__        }_        return nodes.get(resolvedNodeIds[0])__    };resolve,a,node,with,a,given,id,param,node,id,of,the,node,to,discover,return,discovered,node,matching,the,given,id,throws,illegal,argument,exception,if,more,than,one,node,matches,the,request,or,no,nodes,have,been,resolved;public,discovery,node,resolve,node,string,node,string,resolved,node,ids,resolve,nodes,node,if,resolved,node,ids,length,1,throw,new,illegal,argument,exception,resolved,node,into,resolved,node,ids,length,nodes,where,expected,to,be,resolved,to,a,single,node,if,resolved,node,ids,length,0,throw,new,illegal,argument,exception,failed,to,resolve,node,no,matching,nodes,return,nodes,get,resolved,node,ids,0
DiscoveryNodes -> public DiscoveryNode resolveNode(String node);1548161590;Resolve a node with a given id__@param node id of the node to discover_@return discovered node matching the given id_@throws IllegalArgumentException if more than one node matches the request or no nodes have been resolved;public DiscoveryNode resolveNode(String node) {_        String[] resolvedNodeIds = resolveNodes(node)__        if (resolvedNodeIds.length > 1) {_            throw new IllegalArgumentException("resolved [" + node + "] into [" + resolvedNodeIds.length_                + "] nodes, where expected to be resolved to a single node")__        }_        if (resolvedNodeIds.length == 0) {_            throw new IllegalArgumentException("failed to resolve [" + node + "], no matching nodes")__        }_        return nodes.get(resolvedNodeIds[0])__    };resolve,a,node,with,a,given,id,param,node,id,of,the,node,to,discover,return,discovered,node,matching,the,given,id,throws,illegal,argument,exception,if,more,than,one,node,matches,the,request,or,no,nodes,have,been,resolved;public,discovery,node,resolve,node,string,node,string,resolved,node,ids,resolve,nodes,node,if,resolved,node,ids,length,1,throw,new,illegal,argument,exception,resolved,node,into,resolved,node,ids,length,nodes,where,expected,to,be,resolved,to,a,single,node,if,resolved,node,ids,length,0,throw,new,illegal,argument,exception,failed,to,resolve,node,no,matching,nodes,return,nodes,get,resolved,node,ids,0
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getNodes();1524684173;Get a {@link Map} of the discovered nodes arranged by their ids__@return {@link Map} of the discovered nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getNodes() {_        return this.nodes__    };get,a,link,map,of,the,discovered,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,nodes,return,this,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getNodes();1525334055;Get a {@link Map} of the discovered nodes arranged by their ids__@return {@link Map} of the discovered nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getNodes() {_        return this.nodes__    };get,a,link,map,of,the,discovered,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,nodes,return,this,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getNodes();1526029249;Get a {@link Map} of the discovered nodes arranged by their ids__@return {@link Map} of the discovered nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getNodes() {_        return this.nodes__    };get,a,link,map,of,the,discovered,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,nodes,return,this,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getNodes();1548161590;Get a {@link Map} of the discovered nodes arranged by their ids__@return {@link Map} of the discovered nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getNodes() {_        return this.nodes__    };get,a,link,map,of,the,discovered,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,nodes,return,this,nodes
DiscoveryNodes -> public int getSize();1524684173;Get the number of known nodes__@return number of nodes;public int getSize() {_        return nodes.size()__    };get,the,number,of,known,nodes,return,number,of,nodes;public,int,get,size,return,nodes,size
DiscoveryNodes -> public int getSize();1525334055;Get the number of known nodes__@return number of nodes;public int getSize() {_        return nodes.size()__    };get,the,number,of,known,nodes,return,number,of,nodes;public,int,get,size,return,nodes,size
DiscoveryNodes -> public int getSize();1526029249;Get the number of known nodes__@return number of nodes;public int getSize() {_        return nodes.size()__    };get,the,number,of,known,nodes,return,number,of,nodes;public,int,get,size,return,nodes,size
DiscoveryNodes -> public int getSize();1548161590;Get the number of known nodes__@return number of nodes;public int getSize() {_        return nodes.size()__    };get,the,number,of,known,nodes,return,number,of,nodes;public,int,get,size,return,nodes,size
DiscoveryNodes -> public Version getMaxNodeVersion();1524684173;Returns the version of the node with the youngest version in the cluster__@return the youngest version in the cluster;public Version getMaxNodeVersion() {_        return maxNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,return,the,youngest,version,in,the,cluster;public,version,get,max,node,version,return,max,node,version
DiscoveryNodes -> public Version getMaxNodeVersion();1525334055;Returns the version of the node with the youngest version in the cluster__@return the youngest version in the cluster;public Version getMaxNodeVersion() {_        return maxNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,return,the,youngest,version,in,the,cluster;public,version,get,max,node,version,return,max,node,version
DiscoveryNodes -> public Version getMaxNodeVersion();1526029249;Returns the version of the node with the youngest version in the cluster__@return the youngest version in the cluster;public Version getMaxNodeVersion() {_        return maxNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,return,the,youngest,version,in,the,cluster;public,version,get,max,node,version,return,max,node,version
DiscoveryNodes -> public Version getMaxNodeVersion();1548161590;Returns the version of the node with the youngest version in the cluster__@return the youngest version in the cluster;public Version getMaxNodeVersion() {_        return maxNodeVersion__    };returns,the,version,of,the,node,with,the,youngest,version,in,the,cluster,return,the,youngest,version,in,the,cluster;public,version,get,max,node,version,return,max,node,version
DiscoveryNodes -> public Version getMinNodeVersion();1524684173;Returns the version of the node with the oldest version in the cluster.__@return the oldest version in the cluster;public Version getMinNodeVersion() {_        return minNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,return,the,oldest,version,in,the,cluster;public,version,get,min,node,version,return,min,node,version
DiscoveryNodes -> public Version getMinNodeVersion();1525334055;Returns the version of the node with the oldest version in the cluster.__@return the oldest version in the cluster;public Version getMinNodeVersion() {_        return minNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,return,the,oldest,version,in,the,cluster;public,version,get,min,node,version,return,min,node,version
DiscoveryNodes -> public Version getMinNodeVersion();1526029249;Returns the version of the node with the oldest version in the cluster.__@return the oldest version in the cluster;public Version getMinNodeVersion() {_        return minNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,return,the,oldest,version,in,the,cluster;public,version,get,min,node,version,return,min,node,version
DiscoveryNodes -> public Version getMinNodeVersion();1548161590;Returns the version of the node with the oldest version in the cluster.__@return the oldest version in the cluster;public Version getMinNodeVersion() {_        return minNodeVersion__    };returns,the,version,of,the,node,with,the,oldest,version,in,the,cluster,return,the,oldest,version,in,the,cluster;public,version,get,min,node,version,return,min,node,version
DiscoveryNodes -> public String[] resolveNodes(String... nodes);1524684173;resolves a set of node "descriptions" to concrete and existing node ids. "descriptions" can be (resolved in this order):_- "_local" or "_master" for the relevant nodes_- a node id_- a wild card pattern that will be matched against node names_- a "attr:value" pattern, where attr can be a node role (master, data, ingest etc.) in which case the value can be true of false_or a generic node attribute name in which case value will be treated as a wildcard and matched against the node attribute values.;public String[] resolveNodes(String... nodes) {_        if (nodes == null || nodes.length == 0) {_            return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new)__        } else {_            ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length)__            for (String nodeId : nodes) {_                if (nodeId.equals("_local")) {_                    String localNodeId = getLocalNodeId()__                    if (localNodeId != null) {_                        resolvedNodesIds.add(localNodeId)__                    }_                } else if (nodeId.equals("_master")) {_                    String masterNodeId = getMasterNodeId()__                    if (masterNodeId != null) {_                        resolvedNodesIds.add(masterNodeId)__                    }_                } else if (nodeExists(nodeId)) {_                    resolvedNodesIds.add(nodeId)__                } else {_                    for (DiscoveryNode node : this) {_                        if ("_all".equals(nodeId)_                                || Regex.simpleMatch(nodeId, node.getName())_                                || Regex.simpleMatch(nodeId, node.getHostAddress())_                                || Regex.simpleMatch(nodeId, node.getHostName())) {_                            resolvedNodesIds.add(node.getId())__                        }_                    }_                    int index = nodeId.indexOf(':')__                    if (index != -1) {_                        String matchAttrName = nodeId.substring(0, index)__                        String matchAttrValue = nodeId.substring(index + 1)__                        if (DiscoveryNode.Role.DATA.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(dataNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(dataNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.MASTER.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(masterNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(masterNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.INGEST.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(ingestNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(ingestNodes.keys())__                            }_                        } else {_                            for (DiscoveryNode node : this) {_                                for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {_                                    String attrName = entry.getKey()__                                    String attrValue = entry.getValue()__                                    if (Regex.simpleMatch(matchAttrName, attrName) && Regex.simpleMatch(matchAttrValue, attrValue)) {_                                        resolvedNodesIds.add(node.getId())__                                    }_                                }_                            }_                        }_                    }_                }_            }_            return resolvedNodesIds.toArray(String.class)__        }_    };resolves,a,set,of,node,descriptions,to,concrete,and,existing,node,ids,descriptions,can,be,resolved,in,this,order,or,for,the,relevant,nodes,a,node,id,a,wild,card,pattern,that,will,be,matched,against,node,names,a,attr,value,pattern,where,attr,can,be,a,node,role,master,data,ingest,etc,in,which,case,the,value,can,be,true,of,false,or,a,generic,node,attribute,name,in,which,case,value,will,be,treated,as,a,wildcard,and,matched,against,the,node,attribute,values;public,string,resolve,nodes,string,nodes,if,nodes,null,nodes,length,0,return,stream,support,stream,this,spliterator,false,map,discovery,node,get,id,to,array,string,new,else,object,hash,set,string,resolved,nodes,ids,new,object,hash,set,nodes,length,for,string,node,id,nodes,if,node,id,equals,string,local,node,id,get,local,node,id,if,local,node,id,null,resolved,nodes,ids,add,local,node,id,else,if,node,id,equals,string,master,node,id,get,master,node,id,if,master,node,id,null,resolved,nodes,ids,add,master,node,id,else,if,node,exists,node,id,resolved,nodes,ids,add,node,id,else,for,discovery,node,node,this,if,equals,node,id,regex,simple,match,node,id,node,get,name,regex,simple,match,node,id,node,get,host,address,regex,simple,match,node,id,node,get,host,name,resolved,nodes,ids,add,node,get,id,int,index,node,id,index,of,if,index,1,string,match,attr,name,node,id,substring,0,index,string,match,attr,value,node,id,substring,index,1,if,discovery,node,role,data,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,data,nodes,keys,else,resolved,nodes,ids,remove,all,data,nodes,keys,else,if,discovery,node,role,master,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,master,nodes,keys,else,resolved,nodes,ids,remove,all,master,nodes,keys,else,if,discovery,node,role,ingest,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,ingest,nodes,keys,else,resolved,nodes,ids,remove,all,ingest,nodes,keys,else,for,discovery,node,node,this,for,map,entry,string,string,entry,node,get,attributes,entry,set,string,attr,name,entry,get,key,string,attr,value,entry,get,value,if,regex,simple,match,match,attr,name,attr,name,regex,simple,match,match,attr,value,attr,value,resolved,nodes,ids,add,node,get,id,return,resolved,nodes,ids,to,array,string,class
DiscoveryNodes -> public String[] resolveNodes(String... nodes);1525334055;resolves a set of node "descriptions" to concrete and existing node ids. "descriptions" can be (resolved in this order):_- "_local" or "_master" for the relevant nodes_- a node id_- a wild card pattern that will be matched against node names_- a "attr:value" pattern, where attr can be a node role (master, data, ingest etc.) in which case the value can be true of false_or a generic node attribute name in which case value will be treated as a wildcard and matched against the node attribute values.;public String[] resolveNodes(String... nodes) {_        if (nodes == null || nodes.length == 0) {_            return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new)__        } else {_            ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length)__            for (String nodeId : nodes) {_                if (nodeId.equals("_local")) {_                    String localNodeId = getLocalNodeId()__                    if (localNodeId != null) {_                        resolvedNodesIds.add(localNodeId)__                    }_                } else if (nodeId.equals("_master")) {_                    String masterNodeId = getMasterNodeId()__                    if (masterNodeId != null) {_                        resolvedNodesIds.add(masterNodeId)__                    }_                } else if (nodeExists(nodeId)) {_                    resolvedNodesIds.add(nodeId)__                } else {_                    for (DiscoveryNode node : this) {_                        if ("_all".equals(nodeId)_                                || Regex.simpleMatch(nodeId, node.getName())_                                || Regex.simpleMatch(nodeId, node.getHostAddress())_                                || Regex.simpleMatch(nodeId, node.getHostName())) {_                            resolvedNodesIds.add(node.getId())__                        }_                    }_                    int index = nodeId.indexOf(':')__                    if (index != -1) {_                        String matchAttrName = nodeId.substring(0, index)__                        String matchAttrValue = nodeId.substring(index + 1)__                        if (DiscoveryNode.Role.DATA.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(dataNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(dataNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.MASTER.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(masterNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(masterNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.INGEST.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(ingestNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(ingestNodes.keys())__                            }_                        } else {_                            for (DiscoveryNode node : this) {_                                for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {_                                    String attrName = entry.getKey()__                                    String attrValue = entry.getValue()__                                    if (Regex.simpleMatch(matchAttrName, attrName) && Regex.simpleMatch(matchAttrValue, attrValue)) {_                                        resolvedNodesIds.add(node.getId())__                                    }_                                }_                            }_                        }_                    }_                }_            }_            return resolvedNodesIds.toArray(String.class)__        }_    };resolves,a,set,of,node,descriptions,to,concrete,and,existing,node,ids,descriptions,can,be,resolved,in,this,order,or,for,the,relevant,nodes,a,node,id,a,wild,card,pattern,that,will,be,matched,against,node,names,a,attr,value,pattern,where,attr,can,be,a,node,role,master,data,ingest,etc,in,which,case,the,value,can,be,true,of,false,or,a,generic,node,attribute,name,in,which,case,value,will,be,treated,as,a,wildcard,and,matched,against,the,node,attribute,values;public,string,resolve,nodes,string,nodes,if,nodes,null,nodes,length,0,return,stream,support,stream,this,spliterator,false,map,discovery,node,get,id,to,array,string,new,else,object,hash,set,string,resolved,nodes,ids,new,object,hash,set,nodes,length,for,string,node,id,nodes,if,node,id,equals,string,local,node,id,get,local,node,id,if,local,node,id,null,resolved,nodes,ids,add,local,node,id,else,if,node,id,equals,string,master,node,id,get,master,node,id,if,master,node,id,null,resolved,nodes,ids,add,master,node,id,else,if,node,exists,node,id,resolved,nodes,ids,add,node,id,else,for,discovery,node,node,this,if,equals,node,id,regex,simple,match,node,id,node,get,name,regex,simple,match,node,id,node,get,host,address,regex,simple,match,node,id,node,get,host,name,resolved,nodes,ids,add,node,get,id,int,index,node,id,index,of,if,index,1,string,match,attr,name,node,id,substring,0,index,string,match,attr,value,node,id,substring,index,1,if,discovery,node,role,data,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,data,nodes,keys,else,resolved,nodes,ids,remove,all,data,nodes,keys,else,if,discovery,node,role,master,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,master,nodes,keys,else,resolved,nodes,ids,remove,all,master,nodes,keys,else,if,discovery,node,role,ingest,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,ingest,nodes,keys,else,resolved,nodes,ids,remove,all,ingest,nodes,keys,else,for,discovery,node,node,this,for,map,entry,string,string,entry,node,get,attributes,entry,set,string,attr,name,entry,get,key,string,attr,value,entry,get,value,if,regex,simple,match,match,attr,name,attr,name,regex,simple,match,match,attr,value,attr,value,resolved,nodes,ids,add,node,get,id,return,resolved,nodes,ids,to,array,string,class
DiscoveryNodes -> public String[] resolveNodes(String... nodes);1526029249;resolves a set of node "descriptions" to concrete and existing node ids. "descriptions" can be (resolved in this order):_- "_local" or "_master" for the relevant nodes_- a node id_- a wild card pattern that will be matched against node names_- a "attr:value" pattern, where attr can be a node role (master, data, ingest etc.) in which case the value can be true or false,_or a generic node attribute name in which case value will be treated as a wildcard and matched against the node attribute values.;public String[] resolveNodes(String... nodes) {_        if (nodes == null || nodes.length == 0) {_            return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new)__        } else {_            ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length)__            for (String nodeId : nodes) {_                if (nodeId.equals("_local")) {_                    String localNodeId = getLocalNodeId()__                    if (localNodeId != null) {_                        resolvedNodesIds.add(localNodeId)__                    }_                } else if (nodeId.equals("_master")) {_                    String masterNodeId = getMasterNodeId()__                    if (masterNodeId != null) {_                        resolvedNodesIds.add(masterNodeId)__                    }_                } else if (nodeExists(nodeId)) {_                    resolvedNodesIds.add(nodeId)__                } else {_                    for (DiscoveryNode node : this) {_                        if ("_all".equals(nodeId)_                                || Regex.simpleMatch(nodeId, node.getName())_                                || Regex.simpleMatch(nodeId, node.getHostAddress())_                                || Regex.simpleMatch(nodeId, node.getHostName())) {_                            resolvedNodesIds.add(node.getId())__                        }_                    }_                    int index = nodeId.indexOf(':')__                    if (index != -1) {_                        String matchAttrName = nodeId.substring(0, index)__                        String matchAttrValue = nodeId.substring(index + 1)__                        if (DiscoveryNode.Role.DATA.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(dataNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(dataNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.MASTER.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(masterNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(masterNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.INGEST.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(ingestNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(ingestNodes.keys())__                            }_                        } else if (DiscoveryNode.COORDINATING_ONLY.equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(getCoordinatingOnlyNodes().keys())__                            } else {_                                resolvedNodesIds.removeAll(getCoordinatingOnlyNodes().keys())__                            }_                        } else {_                            for (DiscoveryNode node : this) {_                                for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {_                                    String attrName = entry.getKey()__                                    String attrValue = entry.getValue()__                                    if (Regex.simpleMatch(matchAttrName, attrName) && Regex.simpleMatch(matchAttrValue, attrValue)) {_                                        resolvedNodesIds.add(node.getId())__                                    }_                                }_                            }_                        }_                    }_                }_            }_            return resolvedNodesIds.toArray(String.class)__        }_    };resolves,a,set,of,node,descriptions,to,concrete,and,existing,node,ids,descriptions,can,be,resolved,in,this,order,or,for,the,relevant,nodes,a,node,id,a,wild,card,pattern,that,will,be,matched,against,node,names,a,attr,value,pattern,where,attr,can,be,a,node,role,master,data,ingest,etc,in,which,case,the,value,can,be,true,or,false,or,a,generic,node,attribute,name,in,which,case,value,will,be,treated,as,a,wildcard,and,matched,against,the,node,attribute,values;public,string,resolve,nodes,string,nodes,if,nodes,null,nodes,length,0,return,stream,support,stream,this,spliterator,false,map,discovery,node,get,id,to,array,string,new,else,object,hash,set,string,resolved,nodes,ids,new,object,hash,set,nodes,length,for,string,node,id,nodes,if,node,id,equals,string,local,node,id,get,local,node,id,if,local,node,id,null,resolved,nodes,ids,add,local,node,id,else,if,node,id,equals,string,master,node,id,get,master,node,id,if,master,node,id,null,resolved,nodes,ids,add,master,node,id,else,if,node,exists,node,id,resolved,nodes,ids,add,node,id,else,for,discovery,node,node,this,if,equals,node,id,regex,simple,match,node,id,node,get,name,regex,simple,match,node,id,node,get,host,address,regex,simple,match,node,id,node,get,host,name,resolved,nodes,ids,add,node,get,id,int,index,node,id,index,of,if,index,1,string,match,attr,name,node,id,substring,0,index,string,match,attr,value,node,id,substring,index,1,if,discovery,node,role,data,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,data,nodes,keys,else,resolved,nodes,ids,remove,all,data,nodes,keys,else,if,discovery,node,role,master,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,master,nodes,keys,else,resolved,nodes,ids,remove,all,master,nodes,keys,else,if,discovery,node,role,ingest,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,ingest,nodes,keys,else,resolved,nodes,ids,remove,all,ingest,nodes,keys,else,if,discovery,node,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,get,coordinating,only,nodes,keys,else,resolved,nodes,ids,remove,all,get,coordinating,only,nodes,keys,else,for,discovery,node,node,this,for,map,entry,string,string,entry,node,get,attributes,entry,set,string,attr,name,entry,get,key,string,attr,value,entry,get,value,if,regex,simple,match,match,attr,name,attr,name,regex,simple,match,match,attr,value,attr,value,resolved,nodes,ids,add,node,get,id,return,resolved,nodes,ids,to,array,string,class
DiscoveryNodes -> public String[] resolveNodes(String... nodes);1548161590;resolves a set of node "descriptions" to concrete and existing node ids. "descriptions" can be (resolved in this order):_- "_local" or "_master" for the relevant nodes_- a node id_- a wild card pattern that will be matched against node names_- a "attr:value" pattern, where attr can be a node role (master, data, ingest etc.) in which case the value can be true or false,_or a generic node attribute name in which case value will be treated as a wildcard and matched against the node attribute values.;public String[] resolveNodes(String... nodes) {_        if (nodes == null || nodes.length == 0) {_            return StreamSupport.stream(this.spliterator(), false).map(DiscoveryNode::getId).toArray(String[]::new)__        } else {_            ObjectHashSet<String> resolvedNodesIds = new ObjectHashSet<>(nodes.length)__            for (String nodeId : nodes) {_                if (nodeId.equals("_local")) {_                    String localNodeId = getLocalNodeId()__                    if (localNodeId != null) {_                        resolvedNodesIds.add(localNodeId)__                    }_                } else if (nodeId.equals("_master")) {_                    String masterNodeId = getMasterNodeId()__                    if (masterNodeId != null) {_                        resolvedNodesIds.add(masterNodeId)__                    }_                } else if (nodeExists(nodeId)) {_                    resolvedNodesIds.add(nodeId)__                } else {_                    for (DiscoveryNode node : this) {_                        if ("_all".equals(nodeId)_                                || Regex.simpleMatch(nodeId, node.getName())_                                || Regex.simpleMatch(nodeId, node.getHostAddress())_                                || Regex.simpleMatch(nodeId, node.getHostName())) {_                            resolvedNodesIds.add(node.getId())__                        }_                    }_                    int index = nodeId.indexOf(':')__                    if (index != -1) {_                        String matchAttrName = nodeId.substring(0, index)__                        String matchAttrValue = nodeId.substring(index + 1)__                        if (DiscoveryNode.Role.DATA.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(dataNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(dataNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.MASTER.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(masterNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(masterNodes.keys())__                            }_                        } else if (DiscoveryNode.Role.INGEST.getRoleName().equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(ingestNodes.keys())__                            } else {_                                resolvedNodesIds.removeAll(ingestNodes.keys())__                            }_                        } else if (DiscoveryNode.COORDINATING_ONLY.equals(matchAttrName)) {_                            if (Booleans.parseBoolean(matchAttrValue, true)) {_                                resolvedNodesIds.addAll(getCoordinatingOnlyNodes().keys())__                            } else {_                                resolvedNodesIds.removeAll(getCoordinatingOnlyNodes().keys())__                            }_                        } else {_                            for (DiscoveryNode node : this) {_                                for (Map.Entry<String, String> entry : node.getAttributes().entrySet()) {_                                    String attrName = entry.getKey()__                                    String attrValue = entry.getValue()__                                    if (Regex.simpleMatch(matchAttrName, attrName) && Regex.simpleMatch(matchAttrValue, attrValue)) {_                                        resolvedNodesIds.add(node.getId())__                                    }_                                }_                            }_                        }_                    }_                }_            }_            return resolvedNodesIds.toArray(String.class)__        }_    };resolves,a,set,of,node,descriptions,to,concrete,and,existing,node,ids,descriptions,can,be,resolved,in,this,order,or,for,the,relevant,nodes,a,node,id,a,wild,card,pattern,that,will,be,matched,against,node,names,a,attr,value,pattern,where,attr,can,be,a,node,role,master,data,ingest,etc,in,which,case,the,value,can,be,true,or,false,or,a,generic,node,attribute,name,in,which,case,value,will,be,treated,as,a,wildcard,and,matched,against,the,node,attribute,values;public,string,resolve,nodes,string,nodes,if,nodes,null,nodes,length,0,return,stream,support,stream,this,spliterator,false,map,discovery,node,get,id,to,array,string,new,else,object,hash,set,string,resolved,nodes,ids,new,object,hash,set,nodes,length,for,string,node,id,nodes,if,node,id,equals,string,local,node,id,get,local,node,id,if,local,node,id,null,resolved,nodes,ids,add,local,node,id,else,if,node,id,equals,string,master,node,id,get,master,node,id,if,master,node,id,null,resolved,nodes,ids,add,master,node,id,else,if,node,exists,node,id,resolved,nodes,ids,add,node,id,else,for,discovery,node,node,this,if,equals,node,id,regex,simple,match,node,id,node,get,name,regex,simple,match,node,id,node,get,host,address,regex,simple,match,node,id,node,get,host,name,resolved,nodes,ids,add,node,get,id,int,index,node,id,index,of,if,index,1,string,match,attr,name,node,id,substring,0,index,string,match,attr,value,node,id,substring,index,1,if,discovery,node,role,data,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,data,nodes,keys,else,resolved,nodes,ids,remove,all,data,nodes,keys,else,if,discovery,node,role,master,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,master,nodes,keys,else,resolved,nodes,ids,remove,all,master,nodes,keys,else,if,discovery,node,role,ingest,get,role,name,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,ingest,nodes,keys,else,resolved,nodes,ids,remove,all,ingest,nodes,keys,else,if,discovery,node,equals,match,attr,name,if,booleans,parse,boolean,match,attr,value,true,resolved,nodes,ids,add,all,get,coordinating,only,nodes,keys,else,resolved,nodes,ids,remove,all,get,coordinating,only,nodes,keys,else,for,discovery,node,node,this,for,map,entry,string,string,entry,node,get,attributes,entry,set,string,attr,name,entry,get,key,string,attr,value,entry,get,value,if,regex,simple,match,match,attr,name,attr,name,regex,simple,match,match,attr,value,attr,value,resolved,nodes,ids,add,node,get,id,return,resolved,nodes,ids,to,array,string,class
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes();1524684173;@return All the ingest nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes() {_        return ingestNodes__    };return,all,the,ingest,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,ingest,nodes,return,ingest,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes();1525334055;@return All the ingest nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes() {_        return ingestNodes__    };return,all,the,ingest,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,ingest,nodes,return,ingest,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes();1526029249;@return All the ingest nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes() {_        return ingestNodes__    };return,all,the,ingest,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,ingest,nodes,return,ingest,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes();1548161590;@return All the ingest nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getIngestNodes() {_        return ingestNodes__    };return,all,the,ingest,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,ingest,nodes,return,ingest,nodes
DiscoveryNodes -> public DiscoveryNode findByAddress(TransportAddress address);1524684173;Get a node by its address__@param address {@link TransportAddress} of the wanted node_@return node identified by the given address or <code>null</code> if no such node exists;public DiscoveryNode findByAddress(TransportAddress address) {_        for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_            DiscoveryNode node = cursor.value__            if (node.getAddress().equals(address)) {_                return node__            }_        }_        return null__    };get,a,node,by,its,address,param,address,link,transport,address,of,the,wanted,node,return,node,identified,by,the,given,address,or,code,null,code,if,no,such,node,exists;public,discovery,node,find,by,address,transport,address,address,for,object,cursor,discovery,node,cursor,nodes,values,discovery,node,node,cursor,value,if,node,get,address,equals,address,return,node,return,null
DiscoveryNodes -> public DiscoveryNode findByAddress(TransportAddress address);1525334055;Get a node by its address__@param address {@link TransportAddress} of the wanted node_@return node identified by the given address or <code>null</code> if no such node exists;public DiscoveryNode findByAddress(TransportAddress address) {_        for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_            DiscoveryNode node = cursor.value__            if (node.getAddress().equals(address)) {_                return node__            }_        }_        return null__    };get,a,node,by,its,address,param,address,link,transport,address,of,the,wanted,node,return,node,identified,by,the,given,address,or,code,null,code,if,no,such,node,exists;public,discovery,node,find,by,address,transport,address,address,for,object,cursor,discovery,node,cursor,nodes,values,discovery,node,node,cursor,value,if,node,get,address,equals,address,return,node,return,null
DiscoveryNodes -> public DiscoveryNode findByAddress(TransportAddress address);1526029249;Get a node by its address__@param address {@link TransportAddress} of the wanted node_@return node identified by the given address or <code>null</code> if no such node exists;public DiscoveryNode findByAddress(TransportAddress address) {_        for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_            DiscoveryNode node = cursor.value__            if (node.getAddress().equals(address)) {_                return node__            }_        }_        return null__    };get,a,node,by,its,address,param,address,link,transport,address,of,the,wanted,node,return,node,identified,by,the,given,address,or,code,null,code,if,no,such,node,exists;public,discovery,node,find,by,address,transport,address,address,for,object,cursor,discovery,node,cursor,nodes,values,discovery,node,node,cursor,value,if,node,get,address,equals,address,return,node,return,null
DiscoveryNodes -> public DiscoveryNode findByAddress(TransportAddress address);1548161590;Get a node by its address__@param address {@link TransportAddress} of the wanted node_@return node identified by the given address or <code>null</code> if no such node exists;public DiscoveryNode findByAddress(TransportAddress address) {_        for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_            DiscoveryNode node = cursor.value__            if (node.getAddress().equals(address)) {_                return node__            }_        }_        return null__    };get,a,node,by,its,address,param,address,link,transport,address,of,the,wanted,node,return,node,identified,by,the,given,address,or,code,null,code,if,no,such,node,exists;public,discovery,node,find,by,address,transport,address,address,for,object,cursor,discovery,node,cursor,nodes,values,discovery,node,node,cursor,value,if,node,get,address,equals,address,return,node,return,null
DiscoveryNodes -> public String getMasterNodeId();1524684173;Get the id of the master node__@return id of the master;public String getMasterNodeId() {_        return this.masterNodeId__    };get,the,id,of,the,master,node,return,id,of,the,master;public,string,get,master,node,id,return,this,master,node,id
DiscoveryNodes -> public String getMasterNodeId();1525334055;Get the id of the master node__@return id of the master;public String getMasterNodeId() {_        return this.masterNodeId__    };get,the,id,of,the,master,node,return,id,of,the,master;public,string,get,master,node,id,return,this,master,node,id
DiscoveryNodes -> public String getMasterNodeId();1526029249;Get the id of the master node__@return id of the master;public String getMasterNodeId() {_        return this.masterNodeId__    };get,the,id,of,the,master,node,return,id,of,the,master;public,string,get,master,node,id,return,this,master,node,id
DiscoveryNodes -> public String getMasterNodeId();1548161590;Get the id of the master node__@return id of the master;public String getMasterNodeId() {_        return this.masterNodeId__    };get,the,id,of,the,master,node,return,id,of,the,master;public,string,get,master,node,id,return,this,master,node,id
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes();1524684173;Get a {@link Map} of the discovered master nodes arranged by their ids__@return {@link Map} of the discovered master nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes() {_        return this.masterNodes__    };get,a,link,map,of,the,discovered,master,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,nodes,return,this,master,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes();1525334055;Get a {@link Map} of the discovered master nodes arranged by their ids__@return {@link Map} of the discovered master nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes() {_        return this.masterNodes__    };get,a,link,map,of,the,discovered,master,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,nodes,return,this,master,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes();1526029249;Get a {@link Map} of the discovered master nodes arranged by their ids__@return {@link Map} of the discovered master nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes() {_        return this.masterNodes__    };get,a,link,map,of,the,discovered,master,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,nodes,return,this,master,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes();1548161590;Get a {@link Map} of the discovered master nodes arranged by their ids__@return {@link Map} of the discovered master nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterNodes() {_        return this.masterNodes__    };get,a,link,map,of,the,discovered,master,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,nodes,return,this,master,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getDataNodes();1524684173;Get a {@link Map} of the discovered data nodes arranged by their ids__@return {@link Map} of the discovered data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getDataNodes() {_        return this.dataNodes__    };get,a,link,map,of,the,discovered,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,data,nodes,return,this,data,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getDataNodes();1525334055;Get a {@link Map} of the discovered data nodes arranged by their ids__@return {@link Map} of the discovered data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getDataNodes() {_        return this.dataNodes__    };get,a,link,map,of,the,discovered,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,data,nodes,return,this,data,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getDataNodes();1526029249;Get a {@link Map} of the discovered data nodes arranged by their ids__@return {@link Map} of the discovered data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getDataNodes() {_        return this.dataNodes__    };get,a,link,map,of,the,discovered,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,data,nodes,return,this,data,nodes
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getDataNodes();1548161590;Get a {@link Map} of the discovered data nodes arranged by their ids__@return {@link Map} of the discovered data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getDataNodes() {_        return this.dataNodes__    };get,a,link,map,of,the,discovered,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,data,nodes,return,this,data,nodes
DiscoveryNodes -> public DiscoveryNode getLocalNode();1524684173;Get the local node__@return local node;public DiscoveryNode getLocalNode() {_        return nodes.get(localNodeId)__    };get,the,local,node,return,local,node;public,discovery,node,get,local,node,return,nodes,get,local,node,id
DiscoveryNodes -> public DiscoveryNode getLocalNode();1525334055;Get the local node__@return local node;public DiscoveryNode getLocalNode() {_        return nodes.get(localNodeId)__    };get,the,local,node,return,local,node;public,discovery,node,get,local,node,return,nodes,get,local,node,id
DiscoveryNodes -> public DiscoveryNode getLocalNode();1526029249;Get the local node__@return local node;public DiscoveryNode getLocalNode() {_        return nodes.get(localNodeId)__    };get,the,local,node,return,local,node;public,discovery,node,get,local,node,return,nodes,get,local,node,id
DiscoveryNodes -> public DiscoveryNode getLocalNode();1548161590;Get the local node__@return local node;public DiscoveryNode getLocalNode() {_        return nodes.get(localNodeId)__    };get,the,local,node,return,local,node;public,discovery,node,get,local,node,return,nodes,get,local,node,id
DiscoveryNodes -> public String getLocalNodeId();1524684173;Get the id of the local node__@return id of the local node;public String getLocalNodeId() {_        return this.localNodeId__    };get,the,id,of,the,local,node,return,id,of,the,local,node;public,string,get,local,node,id,return,this,local,node,id
DiscoveryNodes -> public String getLocalNodeId();1525334055;Get the id of the local node__@return id of the local node;public String getLocalNodeId() {_        return this.localNodeId__    };get,the,id,of,the,local,node,return,id,of,the,local,node;public,string,get,local,node,id,return,this,local,node,id
DiscoveryNodes -> public String getLocalNodeId();1526029249;Get the id of the local node__@return id of the local node;public String getLocalNodeId() {_        return this.localNodeId__    };get,the,id,of,the,local,node,return,id,of,the,local,node;public,string,get,local,node,id,return,this,local,node,id
DiscoveryNodes -> public String getLocalNodeId();1548161590;Get the id of the local node__@return id of the local node;public String getLocalNodeId() {_        return this.localNodeId__    };get,the,id,of,the,local,node,return,id,of,the,local,node;public,string,get,local,node,id,return,this,local,node,id
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes();1524684173;Get a {@link Map} of the discovered master and data nodes arranged by their ids__@return {@link Map} of the discovered master and data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(dataNodes)__        nodes.putAll(masterNodes)__        return nodes.build()__    };get,a,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,and,data,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,data,nodes,nodes,put,all,master,nodes,return,nodes,build
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes();1525334055;Get a {@link Map} of the discovered master and data nodes arranged by their ids__@return {@link Map} of the discovered master and data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(dataNodes)__        nodes.putAll(masterNodes)__        return nodes.build()__    };get,a,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,and,data,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,data,nodes,nodes,put,all,master,nodes,return,nodes,build
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes();1526029249;Get a {@link Map} of the discovered master and data nodes arranged by their ids__@return {@link Map} of the discovered master and data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(dataNodes)__        nodes.putAll(masterNodes)__        return nodes.build()__    };get,a,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,and,data,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,data,nodes,nodes,put,all,master,nodes,return,nodes,build
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes();1548161590;Get a {@link Map} of the discovered master and data nodes arranged by their ids__@return {@link Map} of the discovered master and data nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getMasterAndDataNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(dataNodes)__        nodes.putAll(masterNodes)__        return nodes.build()__    };get,a,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids,return,link,map,of,the,discovered,master,and,data,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,master,and,data,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,data,nodes,nodes,put,all,master,nodes,return,nodes,build
DiscoveryNodes -> public DiscoveryNode get(String nodeId);1524684173;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;public DiscoveryNode get(String nodeId) {_        return nodes.get(nodeId)__    };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> public DiscoveryNode get(String nodeId);1525334055;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;public DiscoveryNode get(String nodeId) {_        return nodes.get(nodeId)__    };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> public DiscoveryNode get(String nodeId);1526029249;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;public DiscoveryNode get(String nodeId) {_        return nodes.get(nodeId)__    };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> public DiscoveryNode get(String nodeId);1548161590;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;public DiscoveryNode get(String nodeId) {_        return nodes.get(nodeId)__    };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> @Nullable     public DiscoveryNode getMasterNode();1524684173;Returns the master node, or {@code null} if there is no master node;@Nullable_    public DiscoveryNode getMasterNode() {_        if (masterNodeId != null) {_            return nodes.get(masterNodeId)__        }_        return null__    };returns,the,master,node,or,code,null,if,there,is,no,master,node;nullable,public,discovery,node,get,master,node,if,master,node,id,null,return,nodes,get,master,node,id,return,null
DiscoveryNodes -> @Nullable     public DiscoveryNode getMasterNode();1525334055;Returns the master node, or {@code null} if there is no master node;@Nullable_    public DiscoveryNode getMasterNode() {_        if (masterNodeId != null) {_            return nodes.get(masterNodeId)__        }_        return null__    };returns,the,master,node,or,code,null,if,there,is,no,master,node;nullable,public,discovery,node,get,master,node,if,master,node,id,null,return,nodes,get,master,node,id,return,null
DiscoveryNodes -> @Nullable     public DiscoveryNode getMasterNode();1526029249;Returns the master node, or {@code null} if there is no master node;@Nullable_    public DiscoveryNode getMasterNode() {_        if (masterNodeId != null) {_            return nodes.get(masterNodeId)__        }_        return null__    };returns,the,master,node,or,code,null,if,there,is,no,master,node;nullable,public,discovery,node,get,master,node,if,master,node,id,null,return,nodes,get,master,node,id,return,null
DiscoveryNodes -> @Nullable     public DiscoveryNode getMasterNode();1548161590;Returns the master node, or {@code null} if there is no master node;@Nullable_    public DiscoveryNode getMasterNode() {_        if (masterNodeId != null) {_            return nodes.get(masterNodeId)__        }_        return null__    };returns,the,master,node,or,code,null,if,there,is,no,master,node;nullable,public,discovery,node,get,master,node,if,master,node,id,null,return,nodes,get,master,node,id,return,null
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getCoordinatingOnlyNodes();1526029249;Get a {@link Map} of the coordinating only nodes (nodes which are neither master, nor data, nor ingest nodes) arranged by their ids__@return {@link Map} of the coordinating only nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getCoordinatingOnlyNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(this.nodes)__        nodes.removeAll(masterNodes.keys())__        nodes.removeAll(dataNodes.keys())__        nodes.removeAll(ingestNodes.keys())__        return nodes.build()__    };get,a,link,map,of,the,coordinating,only,nodes,nodes,which,are,neither,master,nor,data,nor,ingest,nodes,arranged,by,their,ids,return,link,map,of,the,coordinating,only,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,coordinating,only,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,this,nodes,nodes,remove,all,master,nodes,keys,nodes,remove,all,data,nodes,keys,nodes,remove,all,ingest,nodes,keys,return,nodes,build
DiscoveryNodes -> public ImmutableOpenMap<String, DiscoveryNode> getCoordinatingOnlyNodes();1548161590;Get a {@link Map} of the coordinating only nodes (nodes which are neither master, nor data, nor ingest nodes) arranged by their ids__@return {@link Map} of the coordinating only nodes arranged by their ids;public ImmutableOpenMap<String, DiscoveryNode> getCoordinatingOnlyNodes() {_        ImmutableOpenMap.Builder<String, DiscoveryNode> nodes = ImmutableOpenMap.builder(this.nodes)__        nodes.removeAll(masterNodes.keys())__        nodes.removeAll(dataNodes.keys())__        nodes.removeAll(ingestNodes.keys())__        return nodes.build()__    };get,a,link,map,of,the,coordinating,only,nodes,nodes,which,are,neither,master,nor,data,nor,ingest,nodes,arranged,by,their,ids,return,link,map,of,the,coordinating,only,nodes,arranged,by,their,ids;public,immutable,open,map,string,discovery,node,get,coordinating,only,nodes,immutable,open,map,builder,string,discovery,node,nodes,immutable,open,map,builder,this,nodes,nodes,remove,all,master,nodes,keys,nodes,remove,all,data,nodes,keys,nodes,remove,all,ingest,nodes,keys,return,nodes,build
DiscoveryNodes -> public boolean nodeExists(String nodeId);1524684173;Determine if a given node id exists__@param nodeId id of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(String nodeId) {_        return nodes.containsKey(nodeId)__    };determine,if,a,given,node,id,exists,param,node,id,id,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,string,node,id,return,nodes,contains,key,node,id
DiscoveryNodes -> public boolean nodeExists(String nodeId);1525334055;Determine if a given node id exists__@param nodeId id of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(String nodeId) {_        return nodes.containsKey(nodeId)__    };determine,if,a,given,node,id,exists,param,node,id,id,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,string,node,id,return,nodes,contains,key,node,id
DiscoveryNodes -> public boolean nodeExists(String nodeId);1526029249;Determine if a given node id exists__@param nodeId id of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(String nodeId) {_        return nodes.containsKey(nodeId)__    };determine,if,a,given,node,id,exists,param,node,id,id,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,string,node,id,return,nodes,contains,key,node,id
DiscoveryNodes -> public boolean nodeExists(String nodeId);1548161590;Determine if a given node id exists__@param nodeId id of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(String nodeId) {_        return nodes.containsKey(nodeId)__    };determine,if,a,given,node,id,exists,param,node,id,id,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,string,node,id,return,nodes,contains,key,node,id
DiscoveryNodes -> Builder -> private String validateAdd(DiscoveryNode node);1524684173;Checks that a node can be safely added to this node collection.__@return null if all is OK or an error message explaining why a node can not be added.__Note: if this method returns a non-null value, calling {@link #add(DiscoveryNode)} will fail with an_exception;private String validateAdd(DiscoveryNode node) {_            for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_                final DiscoveryNode existingNode = cursor.value__                if (node.getAddress().equals(existingNode.getAddress()) &&_                    node.getId().equals(existingNode.getId()) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode + " with same address"__                }_                if (node.getId().equals(existingNode.getId()) &&_                    node.equals(existingNode) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode_                        + " with the same id but is a different node instance"__                }_            }_            return null__        };checks,that,a,node,can,be,safely,added,to,this,node,collection,return,null,if,all,is,ok,or,an,error,message,explaining,why,a,node,can,not,be,added,note,if,this,method,returns,a,non,null,value,calling,link,add,discovery,node,will,fail,with,an,exception;private,string,validate,add,discovery,node,node,for,object,cursor,discovery,node,cursor,nodes,values,final,discovery,node,existing,node,cursor,value,if,node,get,address,equals,existing,node,get,address,node,get,id,equals,existing,node,get,id,false,return,can,t,add,node,node,found,existing,node,existing,node,with,same,address,if,node,get,id,equals,existing,node,get,id,node,equals,existing,node,false,return,can,t,add,node,node,found,existing,node,existing,node,with,the,same,id,but,is,a,different,node,instance,return,null
DiscoveryNodes -> Builder -> private String validateAdd(DiscoveryNode node);1525334055;Checks that a node can be safely added to this node collection.__@return null if all is OK or an error message explaining why a node can not be added.__Note: if this method returns a non-null value, calling {@link #add(DiscoveryNode)} will fail with an_exception;private String validateAdd(DiscoveryNode node) {_            for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_                final DiscoveryNode existingNode = cursor.value__                if (node.getAddress().equals(existingNode.getAddress()) &&_                    node.getId().equals(existingNode.getId()) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode + " with same address"__                }_                if (node.getId().equals(existingNode.getId()) &&_                    node.equals(existingNode) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode_                        + " with the same id but is a different node instance"__                }_            }_            return null__        };checks,that,a,node,can,be,safely,added,to,this,node,collection,return,null,if,all,is,ok,or,an,error,message,explaining,why,a,node,can,not,be,added,note,if,this,method,returns,a,non,null,value,calling,link,add,discovery,node,will,fail,with,an,exception;private,string,validate,add,discovery,node,node,for,object,cursor,discovery,node,cursor,nodes,values,final,discovery,node,existing,node,cursor,value,if,node,get,address,equals,existing,node,get,address,node,get,id,equals,existing,node,get,id,false,return,can,t,add,node,node,found,existing,node,existing,node,with,same,address,if,node,get,id,equals,existing,node,get,id,node,equals,existing,node,false,return,can,t,add,node,node,found,existing,node,existing,node,with,the,same,id,but,is,a,different,node,instance,return,null
DiscoveryNodes -> Builder -> private String validateAdd(DiscoveryNode node);1526029249;Checks that a node can be safely added to this node collection.__@return null if all is OK or an error message explaining why a node can not be added.__Note: if this method returns a non-null value, calling {@link #add(DiscoveryNode)} will fail with an_exception;private String validateAdd(DiscoveryNode node) {_            for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_                final DiscoveryNode existingNode = cursor.value__                if (node.getAddress().equals(existingNode.getAddress()) &&_                    node.getId().equals(existingNode.getId()) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode + " with same address"__                }_                if (node.getId().equals(existingNode.getId()) &&_                    node.equals(existingNode) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode_                        + " with the same id but is a different node instance"__                }_            }_            return null__        };checks,that,a,node,can,be,safely,added,to,this,node,collection,return,null,if,all,is,ok,or,an,error,message,explaining,why,a,node,can,not,be,added,note,if,this,method,returns,a,non,null,value,calling,link,add,discovery,node,will,fail,with,an,exception;private,string,validate,add,discovery,node,node,for,object,cursor,discovery,node,cursor,nodes,values,final,discovery,node,existing,node,cursor,value,if,node,get,address,equals,existing,node,get,address,node,get,id,equals,existing,node,get,id,false,return,can,t,add,node,node,found,existing,node,existing,node,with,same,address,if,node,get,id,equals,existing,node,get,id,node,equals,existing,node,false,return,can,t,add,node,node,found,existing,node,existing,node,with,the,same,id,but,is,a,different,node,instance,return,null
DiscoveryNodes -> Builder -> private String validateAdd(DiscoveryNode node);1548161590;Checks that a node can be safely added to this node collection.__@return null if all is OK or an error message explaining why a node can not be added.__Note: if this method returns a non-null value, calling {@link #add(DiscoveryNode)} will fail with an_exception;private String validateAdd(DiscoveryNode node) {_            for (ObjectCursor<DiscoveryNode> cursor : nodes.values()) {_                final DiscoveryNode existingNode = cursor.value__                if (node.getAddress().equals(existingNode.getAddress()) &&_                    node.getId().equals(existingNode.getId()) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode + " with same address"__                }_                if (node.getId().equals(existingNode.getId()) &&_                    node.equals(existingNode) == false) {_                    return "can't add node " + node + ", found existing node " + existingNode_                        + " with the same id but is a different node instance"__                }_            }_            return null__        };checks,that,a,node,can,be,safely,added,to,this,node,collection,return,null,if,all,is,ok,or,an,error,message,explaining,why,a,node,can,not,be,added,note,if,this,method,returns,a,non,null,value,calling,link,add,discovery,node,will,fail,with,an,exception;private,string,validate,add,discovery,node,node,for,object,cursor,discovery,node,cursor,nodes,values,final,discovery,node,existing,node,cursor,value,if,node,get,address,equals,existing,node,get,address,node,get,id,equals,existing,node,get,id,false,return,can,t,add,node,node,found,existing,node,existing,node,with,same,address,if,node,get,id,equals,existing,node,get,id,node,equals,existing,node,false,return,can,t,add,node,node,found,existing,node,existing,node,with,the,same,id,but,is,a,different,node,instance,return,null
DiscoveryNodes -> public boolean nodeExists(DiscoveryNode node);1524684173;Determine if a given node exists__@param node of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(DiscoveryNode node) {_        DiscoveryNode existing = nodes.get(node.getId())__        return existing != null && existing.equals(node)__    };determine,if,a,given,node,exists,param,node,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,discovery,node,node,discovery,node,existing,nodes,get,node,get,id,return,existing,null,existing,equals,node
DiscoveryNodes -> public boolean nodeExists(DiscoveryNode node);1525334055;Determine if a given node exists__@param node of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(DiscoveryNode node) {_        DiscoveryNode existing = nodes.get(node.getId())__        return existing != null && existing.equals(node)__    };determine,if,a,given,node,exists,param,node,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,discovery,node,node,discovery,node,existing,nodes,get,node,get,id,return,existing,null,existing,equals,node
DiscoveryNodes -> public boolean nodeExists(DiscoveryNode node);1526029249;Determine if a given node exists__@param node of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(DiscoveryNode node) {_        DiscoveryNode existing = nodes.get(node.getId())__        return existing != null && existing.equals(node)__    };determine,if,a,given,node,exists,param,node,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,discovery,node,node,discovery,node,existing,nodes,get,node,get,id,return,existing,null,existing,equals,node
DiscoveryNodes -> public boolean nodeExists(DiscoveryNode node);1548161590;Determine if a given node exists__@param node of the node which existence should be verified_@return <code>true</code> if the node exists. Otherwise <code>false</code>;public boolean nodeExists(DiscoveryNode node) {_        DiscoveryNode existing = nodes.get(node.getId())__        return existing != null && existing.equals(node)__    };determine,if,a,given,node,exists,param,node,of,the,node,which,existence,should,be,verified,return,code,true,code,if,the,node,exists,otherwise,code,false,code;public,boolean,node,exists,discovery,node,node,discovery,node,existing,nodes,get,node,get,id,return,existing,null,existing,equals,node
DiscoveryNodes -> Builder -> @Nullable public DiscoveryNode get(String nodeId);1524684173;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;@Nullable public DiscoveryNode get(String nodeId) {_            return nodes.get(nodeId)__        };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;nullable,public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> Builder -> @Nullable public DiscoveryNode get(String nodeId);1525334055;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;@Nullable public DiscoveryNode get(String nodeId) {_            return nodes.get(nodeId)__        };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;nullable,public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> Builder -> @Nullable public DiscoveryNode get(String nodeId);1526029249;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;@Nullable public DiscoveryNode get(String nodeId) {_            return nodes.get(nodeId)__        };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;nullable,public,discovery,node,get,string,node,id,return,nodes,get,node,id
DiscoveryNodes -> Builder -> @Nullable public DiscoveryNode get(String nodeId);1548161590;Get a node by its id__@param nodeId id of the wanted node_@return wanted node if it exists. Otherwise <code>null</code>;@Nullable public DiscoveryNode get(String nodeId) {_            return nodes.get(nodeId)__        };get,a,node,by,its,id,param,node,id,id,of,the,wanted,node,return,wanted,node,if,it,exists,otherwise,code,null,code;nullable,public,discovery,node,get,string,node,id,return,nodes,get,node,id
