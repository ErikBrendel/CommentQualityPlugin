commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * The search shard target the failure occurred on.  */ ;/**  * The search shard target the failure occurred on.  */ @Nullable public SearchShardTarget shard() {     return this.shardTarget. }
false;public;0;5;;@Override public String toString() {     return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "], cause [" + (cause == null ? "_na" : ExceptionsHelper.stackTrace(cause)) + "]". }
false;public,static;1;5;;public static ShardSearchFailure readShardSearchFailure(StreamInput in) throws IOException {     ShardSearchFailure shardSearchFailure = new ShardSearchFailure().     shardSearchFailure.readFrom(in).     return shardSearchFailure. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     shardTarget = in.readOptionalWriteable(SearchShardTarget::new).     if (shardTarget != null) {         index = shardTarget.getFullyQualifiedIndexName().         shardId = shardTarget.getShardId().getId().     }     reason = in.readString().     status = RestStatus.readFrom(in).     cause = in.readException(). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalWriteable(shardTarget).     out.writeString(reason).     RestStatus.writeTo(out, status).     out.writeException(cause). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(SHARD_FIELD, shardId()).     builder.field(INDEX_FIELD, index()).     if (shardTarget != null) {         builder.field(NODE_FIELD, shardTarget.getNodeId()).     }     builder.field(REASON_FIELD).     builder.startObject().     ElasticsearchException.generateThrowableXContent(builder, params, cause).     builder.endObject().     return builder. }
false;public,static;1;44;;public static ShardSearchFailure fromXContent(XContentParser parser) throws IOException {     XContentParser.Token token.     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     String currentFieldName = null.     int shardId = -1.     String indexName = null.     String clusterAlias = null.     String nodeId = null.     ElasticsearchException exception = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (SHARD_FIELD.equals(currentFieldName)) {                 shardId = parser.intValue().             } else if (INDEX_FIELD.equals(currentFieldName)) {                 indexName = parser.text().                 int indexOf = indexName.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR).                 if (indexOf > 0) {                     clusterAlias = indexName.substring(0, indexOf).                     indexName = indexName.substring(indexOf + 1).                 }             } else if (NODE_FIELD.equals(currentFieldName)) {                 nodeId = parser.text().             } else {                 parser.skipChildren().             }         } else if (token == XContentParser.Token.START_OBJECT) {             if (REASON_FIELD.equals(currentFieldName)) {                 exception = ElasticsearchException.fromXContent(parser).             } else {                 parser.skipChildren().             }         } else {             parser.skipChildren().         }     }     SearchShardTarget searchShardTarget = null.     if (nodeId != null) {         searchShardTarget = new SearchShardTarget(nodeId, new ShardId(new Index(indexName, IndexMetaData.INDEX_UUID_NA_VALUE), shardId), clusterAlias, OriginalIndices.NONE).     }     return new ShardSearchFailure(exception, searchShardTarget). }
