commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SNAPSHOT. }
false;protected;0;4;;@Override protected RestoreSnapshotResponse newResponse() {     return new RestoreSnapshotResponse(). }
false;protected;2;11;;@Override protected ClusterBlockException checkBlock(RestoreSnapshotRequest request, ClusterState state) {     // Restoring a snapshot might change the global state and create/change an index,     // so we need to check for METADATA_WRITE and WRITE blocks     ClusterBlockException blockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE).     if (blockException != null) {         return blockException.     }     return state.blocks().globalBlockedException(ClusterBlockLevel.WRITE). }
false;public;1;8;;@Override public void onResponse(RestoreCompletionResponse restoreCompletionResponse) {     if (restoreCompletionResponse.getRestoreInfo() == null && request.waitForCompletion()) {         RestoreClusterStateListener.createAndRegisterListener(clusterService, restoreCompletionResponse, listener).     } else {         listener.onResponse(new RestoreSnapshotResponse(restoreCompletionResponse.getRestoreInfo())).     } }
false;public;1;4;;@Override public void onFailure(Exception t) {     listener.onFailure(t). }
false;protected;3;19;;@Override protected void masterOperation(final RestoreSnapshotRequest request, final ClusterState state, final ActionListener<RestoreSnapshotResponse> listener) {     restoreService.restoreSnapshot(request, new ActionListener<RestoreCompletionResponse>() {          @Override         public void onResponse(RestoreCompletionResponse restoreCompletionResponse) {             if (restoreCompletionResponse.getRestoreInfo() == null && request.waitForCompletion()) {                 RestoreClusterStateListener.createAndRegisterListener(clusterService, restoreCompletionResponse, listener).             } else {                 listener.onResponse(new RestoreSnapshotResponse(restoreCompletionResponse.getRestoreInfo())).             }         }          @Override         public void onFailure(Exception t) {             listener.onFailure(t).         }     }). }
