commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public RepositoryMetaData getMetadata() {     return in.getMetadata(). }
false;public;1;4;;@Override public SnapshotInfo getSnapshotInfo(SnapshotId snapshotId) {     return in.getSnapshotInfo(snapshotId). }
false;public;1;4;;@Override public MetaData getSnapshotGlobalMetaData(SnapshotId snapshotId) {     return in.getSnapshotGlobalMetaData(snapshotId). }
false;public;2;4;;@Override public IndexMetaData getSnapshotIndexMetaData(SnapshotId snapshotId, IndexId index) throws IOException {     return in.getSnapshotIndexMetaData(snapshotId, index). }
false;public;0;4;;@Override public RepositoryData getRepositoryData() {     return in.getRepositoryData(). }
false;public;3;4;;@Override public void initializeSnapshot(SnapshotId snapshotId, List<IndexId> indices, MetaData metaData) {     in.initializeSnapshot(snapshotId, indices, metaData). }
false;public;8;6;;@Override public SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List<IndexId> indices, long startTime, String failure, int totalShards, List<SnapshotShardFailure> shardFailures, long repositoryStateId, boolean includeGlobalState) {     return in.finalizeSnapshot(snapshotId, indices, startTime, failure, totalShards, shardFailures, repositoryStateId, includeGlobalState). }
false;public;2;4;;@Override public void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId) {     in.deleteSnapshot(snapshotId, repositoryStateId). }
false;public;0;4;;@Override public long getSnapshotThrottleTimeInNanos() {     return in.getSnapshotThrottleTimeInNanos(). }
false;public;0;4;;@Override public long getRestoreThrottleTimeInNanos() {     return in.getRestoreThrottleTimeInNanos(). }
false;public;0;4;;@Override public String startVerification() {     return in.startVerification(). }
false;public;1;4;;@Override public void endVerification(String verificationToken) {     in.endVerification(verificationToken). }
false;public;2;4;;@Override public void verify(String verificationToken, DiscoveryNode localNode) {     in.verify(verificationToken, localNode). }
false;public;0;4;;@Override public boolean isReadOnly() {     return in.isReadOnly(). }
false;public;6;5;;@Override public void snapshotShard(IndexShard shard, Store store, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus) {     in.snapshotShard(shard, store, snapshotId, indexId, snapshotIndexCommit, snapshotStatus). }
false;public;6;5;;@Override public void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState) {     in.restoreShard(shard, snapshotId, version, indexId, snapshotShardId, recoveryState). }
false;public;4;4;;@Override public IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId) {     return in.getShardSnapshotStatus(snapshotId, version, indexId, shardId). }
false;public;0;4;;@Override public Lifecycle.State lifecycleState() {     return in.lifecycleState(). }
false;public;1;4;;@Override public void addLifecycleListener(LifecycleListener listener) {     in.addLifecycleListener(listener). }
false;public;1;4;;@Override public void removeLifecycleListener(LifecycleListener listener) {     in.removeLifecycleListener(listener). }
false;public;0;4;;@Override public void start() {     in.start(). }
false;public;0;4;;@Override public void stop() {     in.stop(). }
false;public;0;4;;@Override public void close() {     in.close(). }
