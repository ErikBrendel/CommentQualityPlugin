# id;timestamp;commentText;codeText;commentWords;codeWords
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field);1524684173;Adds a field to run the multi match against.;public MultiMatchQueryBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };adds,a,field,to,run,the,multi,match,against;public,multi,match,query,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,abstract,query,builder,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field);1525334055;Adds a field to run the multi match against.;public MultiMatchQueryBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };adds,a,field,to,run,the,multi,match,against;public,multi,match,query,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,abstract,query,builder,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field);1528762805;Adds a field to run the multi match against.;public MultiMatchQueryBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };adds,a,field,to,run,the,multi,match,against;public,multi,match,query,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,abstract,query,builder,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field);1544728396;Adds a field to run the multi match against.;public MultiMatchQueryBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };adds,a,field,to,run,the,multi,match,against;public,multi,match,query,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,abstract,query,builder,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field);1549017700;Adds a field to run the multi match against.;public MultiMatchQueryBuilder field(String field) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, AbstractQueryBuilder.DEFAULT_BOOST)__        return this__    };adds,a,field,to,run,the,multi,match,against;public,multi,match,query,builder,field,string,field,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,abstract,query,builder,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder operator(Operator operator);1524684173;Sets the operator to use when using a boolean query. Defaults to <tt>OR</tt>.;public MultiMatchQueryBuilder operator(Operator operator) {_        if (operator == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null")__        }_        this.operator = operator__        return this__    };sets,the,operator,to,use,when,using,a,boolean,query,defaults,to,tt,or,tt;public,multi,match,query,builder,operator,operator,operator,if,operator,null,throw,new,illegal,argument,exception,name,requires,operator,to,be,non,null,this,operator,operator,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder operator(Operator operator);1525334055;Sets the operator to use when using a boolean query. Defaults to {@code OR}.;public MultiMatchQueryBuilder operator(Operator operator) {_        if (operator == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null")__        }_        this.operator = operator__        return this__    };sets,the,operator,to,use,when,using,a,boolean,query,defaults,to,code,or;public,multi,match,query,builder,operator,operator,operator,if,operator,null,throw,new,illegal,argument,exception,name,requires,operator,to,be,non,null,this,operator,operator,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder operator(Operator operator);1528762805;Sets the operator to use when using a boolean query. Defaults to {@code OR}.;public MultiMatchQueryBuilder operator(Operator operator) {_        if (operator == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null")__        }_        this.operator = operator__        return this__    };sets,the,operator,to,use,when,using,a,boolean,query,defaults,to,code,or;public,multi,match,query,builder,operator,operator,operator,if,operator,null,throw,new,illegal,argument,exception,name,requires,operator,to,be,non,null,this,operator,operator,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder operator(Operator operator);1544728396;Sets the operator to use when using a boolean query. Defaults to {@code OR}.;public MultiMatchQueryBuilder operator(Operator operator) {_        if (operator == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null")__        }_        this.operator = operator__        return this__    };sets,the,operator,to,use,when,using,a,boolean,query,defaults,to,code,or;public,multi,match,query,builder,operator,operator,operator,if,operator,null,throw,new,illegal,argument,exception,name,requires,operator,to,be,non,null,this,operator,operator,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder operator(Operator operator);1549017700;Sets the operator to use when using a boolean query. Defaults to {@code OR}.;public MultiMatchQueryBuilder operator(Operator operator) {_        if (operator == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null")__        }_        this.operator = operator__        return this__    };sets,the,operator,to,use,when,using,a,boolean,query,defaults,to,code,or;public,multi,match,query,builder,operator,operator,operator,if,operator,null,throw,new,illegal,argument,exception,name,requires,operator,to,be,non,null,this,operator,operator,return,this
MultiMatchQueryBuilder -> @Deprecated     public MultiMatchQueryBuilder useDisMax(Boolean useDisMax);1524684173;@deprecated use a tieBreaker of 1.0f to disable "dis-max"_query or select the appropriate {@link Type};@Deprecated_    public MultiMatchQueryBuilder useDisMax(Boolean useDisMax) {_        this.useDisMax = useDisMax__        return this__    };deprecated,use,a,tie,breaker,of,1,0f,to,disable,dis,max,query,or,select,the,appropriate,link,type;deprecated,public,multi,match,query,builder,use,dis,max,boolean,use,dis,max,this,use,dis,max,use,dis,max,return,this
MultiMatchQueryBuilder -> @Deprecated     public MultiMatchQueryBuilder useDisMax(Boolean useDisMax);1525334055;@deprecated use a tieBreaker of 1.0f to disable "dis-max"_query or select the appropriate {@link Type};@Deprecated_    public MultiMatchQueryBuilder useDisMax(Boolean useDisMax) {_        this.useDisMax = useDisMax__        return this__    };deprecated,use,a,tie,breaker,of,1,0f,to,disable,dis,max,query,or,select,the,appropriate,link,type;deprecated,public,multi,match,query,builder,use,dis,max,boolean,use,dis,max,this,use,dis,max,use,dis,max,return,this
MultiMatchQueryBuilder -> @Deprecated     public MultiMatchQueryBuilder useDisMax(Boolean useDisMax);1528762805;@deprecated use a tieBreaker of 1.0f to disable "dis-max"_query or select the appropriate {@link Type};@Deprecated_    public MultiMatchQueryBuilder useDisMax(Boolean useDisMax) {_        this.useDisMax = useDisMax__        return this__    };deprecated,use,a,tie,breaker,of,1,0f,to,disable,dis,max,query,or,select,the,appropriate,link,type;deprecated,public,multi,match,query,builder,use,dis,max,boolean,use,dis,max,this,use,dis,max,use,dis,max,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(Object value, String... fields);1524684173;Constructs a new text query.;public MultiMatchQueryBuilder(Object value, String... fields) {_        if (value == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires query value")__        }_        if (fields == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires fields at initialization time")__        }_        this.value = value__        this.fieldsBoosts = new TreeMap<>()__        for (String field : fields) {_            field(field)__        }_    };constructs,a,new,text,query;public,multi,match,query,builder,object,value,string,fields,if,value,null,throw,new,illegal,argument,exception,name,requires,query,value,if,fields,null,throw,new,illegal,argument,exception,name,requires,fields,at,initialization,time,this,value,value,this,fields,boosts,new,tree,map,for,string,field,fields,field,field
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(Object value, String... fields);1525334055;Constructs a new text query.;public MultiMatchQueryBuilder(Object value, String... fields) {_        if (value == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires query value")__        }_        if (fields == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires fields at initialization time")__        }_        this.value = value__        this.fieldsBoosts = new TreeMap<>()__        for (String field : fields) {_            field(field)__        }_    };constructs,a,new,text,query;public,multi,match,query,builder,object,value,string,fields,if,value,null,throw,new,illegal,argument,exception,name,requires,query,value,if,fields,null,throw,new,illegal,argument,exception,name,requires,fields,at,initialization,time,this,value,value,this,fields,boosts,new,tree,map,for,string,field,fields,field,field
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(Object value, String... fields);1528762805;Constructs a new text query.;public MultiMatchQueryBuilder(Object value, String... fields) {_        if (value == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires query value")__        }_        if (fields == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires fields at initialization time")__        }_        this.value = value__        this.fieldsBoosts = new TreeMap<>()__        for (String field : fields) {_            field(field)__        }_    };constructs,a,new,text,query;public,multi,match,query,builder,object,value,string,fields,if,value,null,throw,new,illegal,argument,exception,name,requires,query,value,if,fields,null,throw,new,illegal,argument,exception,name,requires,fields,at,initialization,time,this,value,value,this,fields,boosts,new,tree,map,for,string,field,fields,field,field
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(Object value, String... fields);1544728396;Constructs a new text query.;public MultiMatchQueryBuilder(Object value, String... fields) {_        if (value == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires query value")__        }_        if (fields == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires fields at initialization time")__        }_        this.value = value__        this.fieldsBoosts = new TreeMap<>()__        for (String field : fields) {_            field(field)__        }_    };constructs,a,new,text,query;public,multi,match,query,builder,object,value,string,fields,if,value,null,throw,new,illegal,argument,exception,name,requires,query,value,if,fields,null,throw,new,illegal,argument,exception,name,requires,fields,at,initialization,time,this,value,value,this,fields,boosts,new,tree,map,for,string,field,fields,field,field
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(Object value, String... fields);1549017700;Constructs a new text query.;public MultiMatchQueryBuilder(Object value, String... fields) {_        if (value == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires query value")__        }_        if (fields == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires fields at initialization time")__        }_        this.value = value__        this.fieldsBoosts = new TreeMap<>()__        for (String field : fields) {_            field(field)__        }_    };constructs,a,new,text,query;public,multi,match,query,builder,object,value,string,fields,if,value,null,throw,new,illegal,argument,exception,name,requires,query,value,if,fields,null,throw,new,illegal,argument,exception,name,requires,fields,at,initialization,time,this,value,value,this,fields,boosts,new,tree,map,for,string,field,fields,field,field
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder analyzer(String analyzer);1524684173;Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not_set, the default search analyzer.;public MultiMatchQueryBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };explicitly,set,the,analyzer,to,use,defaults,to,use,explicit,mapping,config,for,the,field,or,if,not,set,the,default,search,analyzer;public,multi,match,query,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder analyzer(String analyzer);1525334055;Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not_set, the default search analyzer.;public MultiMatchQueryBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };explicitly,set,the,analyzer,to,use,defaults,to,use,explicit,mapping,config,for,the,field,or,if,not,set,the,default,search,analyzer;public,multi,match,query,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder analyzer(String analyzer);1528762805;Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not_set, the default search analyzer.;public MultiMatchQueryBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };explicitly,set,the,analyzer,to,use,defaults,to,use,explicit,mapping,config,for,the,field,or,if,not,set,the,default,search,analyzer;public,multi,match,query,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder analyzer(String analyzer);1544728396;Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not_set, the default search analyzer.;public MultiMatchQueryBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };explicitly,set,the,analyzer,to,use,defaults,to,use,explicit,mapping,config,for,the,field,or,if,not,set,the,default,search,analyzer;public,multi,match,query,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder analyzer(String analyzer);1549017700;Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not_set, the default search analyzer.;public MultiMatchQueryBuilder analyzer(String analyzer) {_        this.analyzer = analyzer__        return this__    };explicitly,set,the,analyzer,to,use,defaults,to,use,explicit,mapping,config,for,the,field,or,if,not,set,the,default,search,analyzer;public,multi,match,query,builder,analyzer,string,analyzer,this,analyzer,analyzer,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder slop(int slop);1524684173;Set the phrase slop if evaluated to a phrase query type.;public MultiMatchQueryBuilder slop(int slop) {_        if (slop < 0) {_            throw new IllegalArgumentException("No negative slop allowed.")__        }_        this.slop = slop__        return this__    };set,the,phrase,slop,if,evaluated,to,a,phrase,query,type;public,multi,match,query,builder,slop,int,slop,if,slop,0,throw,new,illegal,argument,exception,no,negative,slop,allowed,this,slop,slop,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder slop(int slop);1525334055;Set the phrase slop if evaluated to a phrase query type.;public MultiMatchQueryBuilder slop(int slop) {_        if (slop < 0) {_            throw new IllegalArgumentException("No negative slop allowed.")__        }_        this.slop = slop__        return this__    };set,the,phrase,slop,if,evaluated,to,a,phrase,query,type;public,multi,match,query,builder,slop,int,slop,if,slop,0,throw,new,illegal,argument,exception,no,negative,slop,allowed,this,slop,slop,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder slop(int slop);1528762805;Set the phrase slop if evaluated to a phrase query type.;public MultiMatchQueryBuilder slop(int slop) {_        if (slop < 0) {_            throw new IllegalArgumentException("No negative slop allowed.")__        }_        this.slop = slop__        return this__    };set,the,phrase,slop,if,evaluated,to,a,phrase,query,type;public,multi,match,query,builder,slop,int,slop,if,slop,0,throw,new,illegal,argument,exception,no,negative,slop,allowed,this,slop,slop,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder slop(int slop);1544728396;Set the phrase slop if evaluated to a phrase query type.;public MultiMatchQueryBuilder slop(int slop) {_        if (slop < 0) {_            throw new IllegalArgumentException("No negative slop allowed.")__        }_        this.slop = slop__        return this__    };set,the,phrase,slop,if,evaluated,to,a,phrase,query,type;public,multi,match,query,builder,slop,int,slop,if,slop,0,throw,new,illegal,argument,exception,no,negative,slop,allowed,this,slop,slop,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder slop(int slop);1549017700;Set the phrase slop if evaluated to a phrase query type.;public MultiMatchQueryBuilder slop(int slop) {_        if (slop < 0) {_            throw new IllegalArgumentException("No negative slop allowed.")__        }_        this.slop = slop__        return this__    };set,the,phrase,slop,if,evaluated,to,a,phrase,query,type;public,multi,match,query,builder,slop,int,slop,if,slop,0,throw,new,illegal,argument,exception,no,negative,slop,allowed,this,slop,slop,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(StreamInput in) throws IOException;1524684173;Read from a stream.;public MultiMatchQueryBuilder(StreamInput in) throws IOException {_        super(in)__        value = in.readGenericValue()__        int size = in.readVInt()__        fieldsBoosts = new TreeMap<>()__        for (int i = 0_ i < size_ i++) {_            fieldsBoosts.put(in.readString(), in.readFloat())__        }_        type = Type.readFromStream(in)__        operator = Operator.readFromStream(in)__        analyzer = in.readOptionalString()__        slop = in.readVInt()__        fuzziness = in.readOptionalWriteable(Fuzziness::new)__        prefixLength = in.readVInt()__        maxExpansions = in.readVInt()__        minimumShouldMatch = in.readOptionalString()__        fuzzyRewrite = in.readOptionalString()__        useDisMax = in.readOptionalBoolean()__        tieBreaker = in.readOptionalFloat()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            lenient = in.readOptionalBoolean()__        } else {_            lenient = in.readBoolean()__        }_        cutoffFrequency = in.readOptionalFloat()__        zeroTermsQuery = MatchQuery.ZeroTermsQuery.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            autoGenerateSynonymsPhraseQuery = in.readBoolean()__            fuzzyTranspositions = in.readBoolean()__        }_    };read,from,a,stream;public,multi,match,query,builder,stream,input,in,throws,ioexception,super,in,value,in,read,generic,value,int,size,in,read,vint,fields,boosts,new,tree,map,for,int,i,0,i,size,i,fields,boosts,put,in,read,string,in,read,float,type,type,read,from,stream,in,operator,operator,read,from,stream,in,analyzer,in,read,optional,string,slop,in,read,vint,fuzziness,in,read,optional,writeable,fuzziness,new,prefix,length,in,read,vint,max,expansions,in,read,vint,minimum,should,match,in,read,optional,string,fuzzy,rewrite,in,read,optional,string,use,dis,max,in,read,optional,boolean,tie,breaker,in,read,optional,float,if,in,get,version,on,or,after,version,lenient,in,read,optional,boolean,else,lenient,in,read,boolean,cutoff,frequency,in,read,optional,float,zero,terms,query,match,query,zero,terms,query,read,from,stream,in,if,in,get,version,on,or,after,version,auto,generate,synonyms,phrase,query,in,read,boolean,fuzzy,transpositions,in,read,boolean
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(StreamInput in) throws IOException;1525334055;Read from a stream.;public MultiMatchQueryBuilder(StreamInput in) throws IOException {_        super(in)__        value = in.readGenericValue()__        int size = in.readVInt()__        fieldsBoosts = new TreeMap<>()__        for (int i = 0_ i < size_ i++) {_            fieldsBoosts.put(in.readString(), in.readFloat())__        }_        type = Type.readFromStream(in)__        operator = Operator.readFromStream(in)__        analyzer = in.readOptionalString()__        slop = in.readVInt()__        fuzziness = in.readOptionalWriteable(Fuzziness::new)__        prefixLength = in.readVInt()__        maxExpansions = in.readVInt()__        minimumShouldMatch = in.readOptionalString()__        fuzzyRewrite = in.readOptionalString()__        useDisMax = in.readOptionalBoolean()__        tieBreaker = in.readOptionalFloat()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            lenient = in.readOptionalBoolean()__        } else {_            lenient = in.readBoolean()__        }_        cutoffFrequency = in.readOptionalFloat()__        zeroTermsQuery = MatchQuery.ZeroTermsQuery.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            autoGenerateSynonymsPhraseQuery = in.readBoolean()__            fuzzyTranspositions = in.readBoolean()__        }_    };read,from,a,stream;public,multi,match,query,builder,stream,input,in,throws,ioexception,super,in,value,in,read,generic,value,int,size,in,read,vint,fields,boosts,new,tree,map,for,int,i,0,i,size,i,fields,boosts,put,in,read,string,in,read,float,type,type,read,from,stream,in,operator,operator,read,from,stream,in,analyzer,in,read,optional,string,slop,in,read,vint,fuzziness,in,read,optional,writeable,fuzziness,new,prefix,length,in,read,vint,max,expansions,in,read,vint,minimum,should,match,in,read,optional,string,fuzzy,rewrite,in,read,optional,string,use,dis,max,in,read,optional,boolean,tie,breaker,in,read,optional,float,if,in,get,version,on,or,after,version,lenient,in,read,optional,boolean,else,lenient,in,read,boolean,cutoff,frequency,in,read,optional,float,zero,terms,query,match,query,zero,terms,query,read,from,stream,in,if,in,get,version,on,or,after,version,auto,generate,synonyms,phrase,query,in,read,boolean,fuzzy,transpositions,in,read,boolean
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(StreamInput in) throws IOException;1528762805;Read from a stream.;public MultiMatchQueryBuilder(StreamInput in) throws IOException {_        super(in)__        value = in.readGenericValue()__        int size = in.readVInt()__        fieldsBoosts = new TreeMap<>()__        for (int i = 0_ i < size_ i++) {_            fieldsBoosts.put(in.readString(), in.readFloat())__        }_        type = Type.readFromStream(in)__        operator = Operator.readFromStream(in)__        analyzer = in.readOptionalString()__        slop = in.readVInt()__        fuzziness = in.readOptionalWriteable(Fuzziness::new)__        prefixLength = in.readVInt()__        maxExpansions = in.readVInt()__        minimumShouldMatch = in.readOptionalString()__        fuzzyRewrite = in.readOptionalString()__        useDisMax = in.readOptionalBoolean()__        tieBreaker = in.readOptionalFloat()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            lenient = in.readOptionalBoolean()__        } else {_            lenient = in.readBoolean()__        }_        cutoffFrequency = in.readOptionalFloat()__        zeroTermsQuery = MatchQuery.ZeroTermsQuery.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            autoGenerateSynonymsPhraseQuery = in.readBoolean()__            fuzzyTranspositions = in.readBoolean()__        }_    };read,from,a,stream;public,multi,match,query,builder,stream,input,in,throws,ioexception,super,in,value,in,read,generic,value,int,size,in,read,vint,fields,boosts,new,tree,map,for,int,i,0,i,size,i,fields,boosts,put,in,read,string,in,read,float,type,type,read,from,stream,in,operator,operator,read,from,stream,in,analyzer,in,read,optional,string,slop,in,read,vint,fuzziness,in,read,optional,writeable,fuzziness,new,prefix,length,in,read,vint,max,expansions,in,read,vint,minimum,should,match,in,read,optional,string,fuzzy,rewrite,in,read,optional,string,use,dis,max,in,read,optional,boolean,tie,breaker,in,read,optional,float,if,in,get,version,on,or,after,version,lenient,in,read,optional,boolean,else,lenient,in,read,boolean,cutoff,frequency,in,read,optional,float,zero,terms,query,match,query,zero,terms,query,read,from,stream,in,if,in,get,version,on,or,after,version,auto,generate,synonyms,phrase,query,in,read,boolean,fuzzy,transpositions,in,read,boolean
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(StreamInput in) throws IOException;1544728396;Read from a stream.;public MultiMatchQueryBuilder(StreamInput in) throws IOException {_        super(in)__        value = in.readGenericValue()__        int size = in.readVInt()__        fieldsBoosts = new TreeMap<>()__        for (int i = 0_ i < size_ i++) {_            fieldsBoosts.put(in.readString(), in.readFloat())__        }_        type = Type.readFromStream(in)__        operator = Operator.readFromStream(in)__        analyzer = in.readOptionalString()__        slop = in.readVInt()__        fuzziness = in.readOptionalWriteable(Fuzziness::new)__        prefixLength = in.readVInt()__        maxExpansions = in.readVInt()__        minimumShouldMatch = in.readOptionalString()__        fuzzyRewrite = in.readOptionalString()__        if (in.getVersion().before(Version.V_7_0_0)) {_            in.readOptionalBoolean()_ _        }_        tieBreaker = in.readOptionalFloat()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            lenient = in.readOptionalBoolean()__        } else {_            lenient = in.readBoolean()__        }_        cutoffFrequency = in.readOptionalFloat()__        zeroTermsQuery = MatchQuery.ZeroTermsQuery.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            autoGenerateSynonymsPhraseQuery = in.readBoolean()__            fuzzyTranspositions = in.readBoolean()__        }_    };read,from,a,stream;public,multi,match,query,builder,stream,input,in,throws,ioexception,super,in,value,in,read,generic,value,int,size,in,read,vint,fields,boosts,new,tree,map,for,int,i,0,i,size,i,fields,boosts,put,in,read,string,in,read,float,type,type,read,from,stream,in,operator,operator,read,from,stream,in,analyzer,in,read,optional,string,slop,in,read,vint,fuzziness,in,read,optional,writeable,fuzziness,new,prefix,length,in,read,vint,max,expansions,in,read,vint,minimum,should,match,in,read,optional,string,fuzzy,rewrite,in,read,optional,string,if,in,get,version,before,version,in,read,optional,boolean,tie,breaker,in,read,optional,float,if,in,get,version,on,or,after,version,lenient,in,read,optional,boolean,else,lenient,in,read,boolean,cutoff,frequency,in,read,optional,float,zero,terms,query,match,query,zero,terms,query,read,from,stream,in,if,in,get,version,on,or,after,version,auto,generate,synonyms,phrase,query,in,read,boolean,fuzzy,transpositions,in,read,boolean
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder(StreamInput in) throws IOException;1549017700;Read from a stream.;public MultiMatchQueryBuilder(StreamInput in) throws IOException {_        super(in)__        value = in.readGenericValue()__        int size = in.readVInt()__        fieldsBoosts = new TreeMap<>()__        for (int i = 0_ i < size_ i++) {_            String field = in.readString()__            float boost = in.readFloat()__            checkNegativeBoost(boost)__            fieldsBoosts.put(field, boost)__        }_        type = Type.readFromStream(in)__        operator = Operator.readFromStream(in)__        analyzer = in.readOptionalString()__        slop = in.readVInt()__        fuzziness = in.readOptionalWriteable(Fuzziness::new)__        prefixLength = in.readVInt()__        maxExpansions = in.readVInt()__        minimumShouldMatch = in.readOptionalString()__        fuzzyRewrite = in.readOptionalString()__        if (in.getVersion().before(Version.V_7_0_0)) {_            in.readOptionalBoolean()_ _        }_        tieBreaker = in.readOptionalFloat()__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            lenient = in.readOptionalBoolean()__        } else {_            lenient = in.readBoolean()__        }_        cutoffFrequency = in.readOptionalFloat()__        zeroTermsQuery = MatchQuery.ZeroTermsQuery.readFromStream(in)__        if (in.getVersion().onOrAfter(Version.V_6_1_0)) {_            autoGenerateSynonymsPhraseQuery = in.readBoolean()__            fuzzyTranspositions = in.readBoolean()__        }_    };read,from,a,stream;public,multi,match,query,builder,stream,input,in,throws,ioexception,super,in,value,in,read,generic,value,int,size,in,read,vint,fields,boosts,new,tree,map,for,int,i,0,i,size,i,string,field,in,read,string,float,boost,in,read,float,check,negative,boost,boost,fields,boosts,put,field,boost,type,type,read,from,stream,in,operator,operator,read,from,stream,in,analyzer,in,read,optional,string,slop,in,read,vint,fuzziness,in,read,optional,writeable,fuzziness,new,prefix,length,in,read,vint,max,expansions,in,read,vint,minimum,should,match,in,read,optional,string,fuzzy,rewrite,in,read,optional,string,if,in,get,version,before,version,in,read,optional,boolean,tie,breaker,in,read,optional,float,if,in,get,version,on,or,after,version,lenient,in,read,optional,boolean,else,lenient,in,read,boolean,cutoff,frequency,in,read,optional,float,zero,terms,query,match,query,zero,terms,query,read,from,stream,in,if,in,get,version,on,or,after,version,auto,generate,synonyms,phrase,query,in,read,boolean,fuzzy,transpositions,in,read,boolean
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fields(Map<String, Float> fields);1524684173;Add several fields to run the query against with a specific boost.;public MultiMatchQueryBuilder fields(Map<String, Float> fields) {_        this.fieldsBoosts.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,multi,match,query,builder,fields,map,string,float,fields,this,fields,boosts,put,all,fields,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fields(Map<String, Float> fields);1525334055;Add several fields to run the query against with a specific boost.;public MultiMatchQueryBuilder fields(Map<String, Float> fields) {_        this.fieldsBoosts.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,multi,match,query,builder,fields,map,string,float,fields,this,fields,boosts,put,all,fields,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fields(Map<String, Float> fields);1528762805;Add several fields to run the query against with a specific boost.;public MultiMatchQueryBuilder fields(Map<String, Float> fields) {_        this.fieldsBoosts.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,multi,match,query,builder,fields,map,string,float,fields,this,fields,boosts,put,all,fields,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fields(Map<String, Float> fields);1544728396;Add several fields to run the query against with a specific boost.;public MultiMatchQueryBuilder fields(Map<String, Float> fields) {_        this.fieldsBoosts.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,multi,match,query,builder,fields,map,string,float,fields,this,fields,boosts,put,all,fields,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fields(Map<String, Float> fields);1549017700;Add several fields to run the query against with a specific boost.;public MultiMatchQueryBuilder fields(Map<String, Float> fields) {_        for (float fieldBoost : fields.values()) {_            checkNegativeBoost(fieldBoost)__        }_        this.fieldsBoosts.putAll(fields)__        return this__    };add,several,fields,to,run,the,query,against,with,a,specific,boost;public,multi,match,query,builder,fields,map,string,float,fields,for,float,field,boost,fields,values,check,negative,boost,field,boost,this,fields,boosts,put,all,fields,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(Float tieBreaker);1524684173;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of <tt>1.0</tt> is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(Float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,tt,1,0,tt,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(Float tieBreaker);1525334055;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(Float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(Float tieBreaker);1528762805;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(Float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(Float tieBreaker);1544728396;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(Float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(Float tieBreaker);1549017700;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(Float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(float cutoff);1524684173;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(float cutoff);1525334055;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(float cutoff);1528762805;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(float cutoff);1544728396;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(float cutoff);1549017700;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder.Type getType();1524684173;Returns the type (for testing);public MultiMatchQueryBuilder.Type getType() {_        return type__    };returns,the,type,for,testing;public,multi,match,query,builder,type,get,type,return,type
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder.Type getType();1525334055;Returns the type (for testing);public MultiMatchQueryBuilder.Type getType() {_        return type__    };returns,the,type,for,testing;public,multi,match,query,builder,type,get,type,return,type
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder.Type getType();1528762805;Returns the type (for testing);public MultiMatchQueryBuilder.Type getType() {_        return type__    };returns,the,type,for,testing;public,multi,match,query,builder,type,get,type,return,type
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder.Type getType();1544728396;Returns the type (for testing);public MultiMatchQueryBuilder.Type getType() {_        return type__    };returns,the,type,for,testing;public,multi,match,query,builder,type,get,type,return,type
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder.Type getType();1549017700;Returns the type (for testing);public MultiMatchQueryBuilder.Type getType() {_        return type__    };returns,the,type,for,testing;public,multi,match,query,builder,type,get,type,return,type
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(Float cutoff);1524684173;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(Float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(Float cutoff);1525334055;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(Float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(Float cutoff);1528762805;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(Float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(Float cutoff);1544728396;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(Float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder cutoffFrequency(Float cutoff);1549017700;Set a cutoff value in [0..1] (or absolute number &gt_=1) representing the_maximum threshold of a terms document frequency to be considered a low_frequency term.;public MultiMatchQueryBuilder cutoffFrequency(Float cutoff) {_        this.cutoffFrequency = cutoff__        return this__    };set,a,cutoff,value,in,0,1,or,absolute,number,gt,1,representing,the,maximum,threshold,of,a,terms,document,frequency,to,be,considered,a,low,frequency,term;public,multi,match,query,builder,cutoff,frequency,float,cutoff,this,cutoff,frequency,cutoff,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(Object type);1524684173;Sets the type of the text query.;public MultiMatchQueryBuilder type(Object type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = Type.parse(type.toString().toLowerCase(Locale.ROOT), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,object,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,parse,type,to,string,to,lower,case,locale,root,logging,deprecation,handler,instance,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(Object type);1525334055;Sets the type of the text query.;public MultiMatchQueryBuilder type(Object type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = Type.parse(type.toString().toLowerCase(Locale.ROOT), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,object,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,parse,type,to,string,to,lower,case,locale,root,logging,deprecation,handler,instance,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(Object type);1528762805;Sets the type of the text query.;public MultiMatchQueryBuilder type(Object type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = Type.parse(type.toString().toLowerCase(Locale.ROOT), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,object,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,parse,type,to,string,to,lower,case,locale,root,logging,deprecation,handler,instance,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(Object type);1544728396;Sets the type of the text query.;public MultiMatchQueryBuilder type(Object type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = Type.parse(type.toString().toLowerCase(Locale.ROOT), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,object,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,parse,type,to,string,to,lower,case,locale,root,logging,deprecation,handler,instance,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(Object type);1549017700;Sets the type of the text query.;public MultiMatchQueryBuilder type(Object type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = Type.parse(type.toString().toLowerCase(Locale.ROOT), LoggingDeprecationHandler.INSTANCE)__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,object,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,parse,type,to,string,to,lower,case,locale,root,logging,deprecation,handler,instance,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(float tieBreaker);1524684173;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of <tt>1.0</tt> is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,tt,1,0,tt,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(float tieBreaker);1525334055;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(float tieBreaker);1528762805;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(float tieBreaker);1544728396;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder tieBreaker(float tieBreaker);1549017700;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries)._The tie breaker capability allows documents that match more than one query clause_(in this case on more than one field) to be scored better than documents that_match only the best of the fields, without confusing this with the better case of_two distinct matches in the multiple fields.</p>__<p>A tie-breaker value of {@code 1.0} is interpreted as a signal to score queries as_"most-match" queries where all matching query clauses are considered for scoring.</p>__@see Type;public MultiMatchQueryBuilder tieBreaker(float tieBreaker) {_        this.tieBreaker = tieBreaker__        return this__    };p,tie,breaker,for,best,match,disjunction,queries,or,queries,the,tie,breaker,capability,allows,documents,that,match,more,than,one,query,clause,in,this,case,on,more,than,one,field,to,be,scored,better,than,documents,that,match,only,the,best,of,the,fields,without,confusing,this,with,the,better,case,of,two,distinct,matches,in,the,multiple,fields,p,p,a,tie,breaker,value,of,code,1,0,is,interpreted,as,a,signal,to,score,queries,as,most,match,queries,where,all,matching,query,clauses,are,considered,for,scoring,p,see,type;public,multi,match,query,builder,tie,breaker,float,tie,breaker,this,tie,breaker,tie,breaker,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1524684173;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.fuzzyTranspositions = fuzzyTranspositions__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,multi,match,query,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,fuzzy,transpositions,fuzzy,transpositions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1525334055;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.fuzzyTranspositions = fuzzyTranspositions__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,multi,match,query,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,fuzzy,transpositions,fuzzy,transpositions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1528762805;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.fuzzyTranspositions = fuzzyTranspositions__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,multi,match,query,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,fuzzy,transpositions,fuzzy,transpositions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1544728396;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.fuzzyTranspositions = fuzzyTranspositions__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,multi,match,query,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,fuzzy,transpositions,fuzzy,transpositions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions);1549017700;Sets whether transpositions are supported in fuzzy queries.<p>_The default metric used by fuzzy queries to determine a match is the Damerau-Levenshtein_distance formula which supports transpositions. Setting transposition to false will_switch to classic Levenshtein distance.<br>_If not set, Damerau-Levenshtein distance metric will be used.;public MultiMatchQueryBuilder fuzzyTranspositions(boolean fuzzyTranspositions) {_        this.fuzzyTranspositions = fuzzyTranspositions__        return this__    };sets,whether,transpositions,are,supported,in,fuzzy,queries,p,the,default,metric,used,by,fuzzy,queries,to,determine,a,match,is,the,damerau,levenshtein,distance,formula,which,supports,transpositions,setting,transposition,to,false,will,switch,to,classic,levenshtein,distance,br,if,not,set,damerau,levenshtein,distance,metric,will,be,used;public,multi,match,query,builder,fuzzy,transpositions,boolean,fuzzy,transpositions,this,fuzzy,transpositions,fuzzy,transpositions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);1524684173;Sets the type of the text query.;public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = type__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,multi,match,query,builder,type,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);1525334055;Sets the type of the text query.;public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = type__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,multi,match,query,builder,type,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);1528762805;Sets the type of the text query.;public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = type__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,multi,match,query,builder,type,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);1544728396;Sets the type of the text query.;public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = type__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,multi,match,query,builder,type,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);1549017700;Sets the type of the text query.;public MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type) {_        if (type == null) {_            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null")__        }_        this.type = type__        return this__    };sets,the,type,of,the,text,query;public,multi,match,query,builder,type,multi,match,query,builder,type,type,if,type,null,throw,new,illegal,argument,exception,name,requires,type,to,be,non,null,this,type,type,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder maxExpansions(int maxExpansions);1524684173;When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded_so its recommended to set it to a reasonable value for faster execution.;public MultiMatchQueryBuilder maxExpansions(int maxExpansions) {_        if (maxExpansions <= 0) {_            throw new IllegalArgumentException("Max expansions must be strictly great than zero.")__        }_        this.maxExpansions = maxExpansions__        return this__    };when,using,fuzzy,or,prefix,type,query,the,number,of,term,expansions,to,use,defaults,to,unbounded,so,its,recommended,to,set,it,to,a,reasonable,value,for,faster,execution;public,multi,match,query,builder,max,expansions,int,max,expansions,if,max,expansions,0,throw,new,illegal,argument,exception,max,expansions,must,be,strictly,great,than,zero,this,max,expansions,max,expansions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder maxExpansions(int maxExpansions);1525334055;When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded_so its recommended to set it to a reasonable value for faster execution.;public MultiMatchQueryBuilder maxExpansions(int maxExpansions) {_        if (maxExpansions <= 0) {_            throw new IllegalArgumentException("Max expansions must be strictly great than zero.")__        }_        this.maxExpansions = maxExpansions__        return this__    };when,using,fuzzy,or,prefix,type,query,the,number,of,term,expansions,to,use,defaults,to,unbounded,so,its,recommended,to,set,it,to,a,reasonable,value,for,faster,execution;public,multi,match,query,builder,max,expansions,int,max,expansions,if,max,expansions,0,throw,new,illegal,argument,exception,max,expansions,must,be,strictly,great,than,zero,this,max,expansions,max,expansions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder maxExpansions(int maxExpansions);1528762805;When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded_so its recommended to set it to a reasonable value for faster execution.;public MultiMatchQueryBuilder maxExpansions(int maxExpansions) {_        if (maxExpansions <= 0) {_            throw new IllegalArgumentException("Max expansions must be strictly great than zero.")__        }_        this.maxExpansions = maxExpansions__        return this__    };when,using,fuzzy,or,prefix,type,query,the,number,of,term,expansions,to,use,defaults,to,unbounded,so,its,recommended,to,set,it,to,a,reasonable,value,for,faster,execution;public,multi,match,query,builder,max,expansions,int,max,expansions,if,max,expansions,0,throw,new,illegal,argument,exception,max,expansions,must,be,strictly,great,than,zero,this,max,expansions,max,expansions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder maxExpansions(int maxExpansions);1544728396;When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded_so its recommended to set it to a reasonable value for faster execution.;public MultiMatchQueryBuilder maxExpansions(int maxExpansions) {_        if (maxExpansions <= 0) {_            throw new IllegalArgumentException("Max expansions must be strictly great than zero.")__        }_        this.maxExpansions = maxExpansions__        return this__    };when,using,fuzzy,or,prefix,type,query,the,number,of,term,expansions,to,use,defaults,to,unbounded,so,its,recommended,to,set,it,to,a,reasonable,value,for,faster,execution;public,multi,match,query,builder,max,expansions,int,max,expansions,if,max,expansions,0,throw,new,illegal,argument,exception,max,expansions,must,be,strictly,great,than,zero,this,max,expansions,max,expansions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder maxExpansions(int maxExpansions);1549017700;When using fuzzy or prefix type query, the number of term expansions to use. Defaults to unbounded_so its recommended to set it to a reasonable value for faster execution.;public MultiMatchQueryBuilder maxExpansions(int maxExpansions) {_        if (maxExpansions <= 0) {_            throw new IllegalArgumentException("Max expansions must be strictly great than zero.")__        }_        this.maxExpansions = maxExpansions__        return this__    };when,using,fuzzy,or,prefix,type,query,the,number,of,term,expansions,to,use,defaults,to,unbounded,so,its,recommended,to,set,it,to,a,reasonable,value,for,faster,execution;public,multi,match,query,builder,max,expansions,int,max,expansions,if,max,expansions,0,throw,new,illegal,argument,exception,max,expansions,must,be,strictly,great,than,zero,this,max,expansions,max,expansions,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder lenient(boolean lenient);1524684173;Sets whether format based failures will be ignored.;public MultiMatchQueryBuilder lenient(boolean lenient) {_        this.lenient = lenient__        return this__    };sets,whether,format,based,failures,will,be,ignored;public,multi,match,query,builder,lenient,boolean,lenient,this,lenient,lenient,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder lenient(boolean lenient);1525334055;Sets whether format based failures will be ignored.;public MultiMatchQueryBuilder lenient(boolean lenient) {_        this.lenient = lenient__        return this__    };sets,whether,format,based,failures,will,be,ignored;public,multi,match,query,builder,lenient,boolean,lenient,this,lenient,lenient,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder lenient(boolean lenient);1528762805;Sets whether format based failures will be ignored.;public MultiMatchQueryBuilder lenient(boolean lenient) {_        this.lenient = lenient__        return this__    };sets,whether,format,based,failures,will,be,ignored;public,multi,match,query,builder,lenient,boolean,lenient,this,lenient,lenient,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder lenient(boolean lenient);1544728396;Sets whether format based failures will be ignored.;public MultiMatchQueryBuilder lenient(boolean lenient) {_        this.lenient = lenient__        return this__    };sets,whether,format,based,failures,will,be,ignored;public,multi,match,query,builder,lenient,boolean,lenient,this,lenient,lenient,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder lenient(boolean lenient);1549017700;Sets whether format based failures will be ignored.;public MultiMatchQueryBuilder lenient(boolean lenient) {_        this.lenient = lenient__        return this__    };sets,whether,format,based,failures,will,be,ignored;public,multi,match,query,builder,lenient,boolean,lenient,this,lenient,lenient,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzziness(Object fuzziness);1524684173;Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".;public MultiMatchQueryBuilder fuzziness(Object fuzziness) {_        if (fuzziness != null) {_            this.fuzziness = Fuzziness.build(fuzziness)__        }_        return this__    };sets,the,fuzziness,used,when,evaluated,to,a,fuzzy,query,type,defaults,to,auto;public,multi,match,query,builder,fuzziness,object,fuzziness,if,fuzziness,null,this,fuzziness,fuzziness,build,fuzziness,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzziness(Object fuzziness);1525334055;Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".;public MultiMatchQueryBuilder fuzziness(Object fuzziness) {_        if (fuzziness != null) {_            this.fuzziness = Fuzziness.build(fuzziness)__        }_        return this__    };sets,the,fuzziness,used,when,evaluated,to,a,fuzzy,query,type,defaults,to,auto;public,multi,match,query,builder,fuzziness,object,fuzziness,if,fuzziness,null,this,fuzziness,fuzziness,build,fuzziness,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzziness(Object fuzziness);1528762805;Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".;public MultiMatchQueryBuilder fuzziness(Object fuzziness) {_        if (fuzziness != null) {_            this.fuzziness = Fuzziness.build(fuzziness)__        }_        return this__    };sets,the,fuzziness,used,when,evaluated,to,a,fuzzy,query,type,defaults,to,auto;public,multi,match,query,builder,fuzziness,object,fuzziness,if,fuzziness,null,this,fuzziness,fuzziness,build,fuzziness,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzziness(Object fuzziness);1544728396;Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".;public MultiMatchQueryBuilder fuzziness(Object fuzziness) {_        if (fuzziness != null) {_            this.fuzziness = Fuzziness.build(fuzziness)__        }_        return this__    };sets,the,fuzziness,used,when,evaluated,to,a,fuzzy,query,type,defaults,to,auto;public,multi,match,query,builder,fuzziness,object,fuzziness,if,fuzziness,null,this,fuzziness,fuzziness,build,fuzziness,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder fuzziness(Object fuzziness);1549017700;Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO".;public MultiMatchQueryBuilder fuzziness(Object fuzziness) {_        if (fuzziness != null) {_            this.fuzziness = Fuzziness.build(fuzziness)__        }_        return this__    };sets,the,fuzziness,used,when,evaluated,to,a,fuzzy,query,type,defaults,to,auto;public,multi,match,query,builder,fuzziness,object,fuzziness,if,fuzziness,null,this,fuzziness,fuzziness,build,fuzziness,return,this
MultiMatchQueryBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1524684173;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to <tt>true</tt>.;public boolean autoGenerateSynonymsPhraseQuery() {_        return autoGenerateSynonymsPhraseQuery__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,tt,true,tt;public,boolean,auto,generate,synonyms,phrase,query,return,auto,generate,synonyms,phrase,query
MultiMatchQueryBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1525334055;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return autoGenerateSynonymsPhraseQuery__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,auto,generate,synonyms,phrase,query
MultiMatchQueryBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1528762805;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return autoGenerateSynonymsPhraseQuery__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,auto,generate,synonyms,phrase,query
MultiMatchQueryBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1544728396;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return autoGenerateSynonymsPhraseQuery__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,auto,generate,synonyms,phrase,query
MultiMatchQueryBuilder -> public boolean autoGenerateSynonymsPhraseQuery();1549017700;Whether phrase queries should be automatically generated for multi terms synonyms._Defaults to {@code true}.;public boolean autoGenerateSynonymsPhraseQuery() {_        return autoGenerateSynonymsPhraseQuery__    };whether,phrase,queries,should,be,automatically,generated,for,multi,terms,synonyms,defaults,to,code,true;public,boolean,auto,generate,synonyms,phrase,query,return,auto,generate,synonyms,phrase,query
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field, float boost);1524684173;Adds a field to run the multi match against with a specific boost.;public MultiMatchQueryBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, boost)__        return this__    };adds,a,field,to,run,the,multi,match,against,with,a,specific,boost;public,multi,match,query,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,boost,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field, float boost);1525334055;Adds a field to run the multi match against with a specific boost.;public MultiMatchQueryBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, boost)__        return this__    };adds,a,field,to,run,the,multi,match,against,with,a,specific,boost;public,multi,match,query,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,boost,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field, float boost);1528762805;Adds a field to run the multi match against with a specific boost.;public MultiMatchQueryBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, boost)__        return this__    };adds,a,field,to,run,the,multi,match,against,with,a,specific,boost;public,multi,match,query,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,boost,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field, float boost);1544728396;Adds a field to run the multi match against with a specific boost.;public MultiMatchQueryBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        this.fieldsBoosts.put(field, boost)__        return this__    };adds,a,field,to,run,the,multi,match,against,with,a,specific,boost;public,multi,match,query,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,this,fields,boosts,put,field,boost,return,this
MultiMatchQueryBuilder -> public MultiMatchQueryBuilder field(String field, float boost);1549017700;Adds a field to run the multi match against with a specific boost.;public MultiMatchQueryBuilder field(String field, float boost) {_        if (Strings.isEmpty(field)) {_            throw new IllegalArgumentException("supplied field is null or empty.")__        }_        checkNegativeBoost(boost)__        this.fieldsBoosts.put(field, boost)__        return this__    };adds,a,field,to,run,the,multi,match,against,with,a,specific,boost;public,multi,match,query,builder,field,string,field,float,boost,if,strings,is,empty,field,throw,new,illegal,argument,exception,supplied,field,is,null,or,empty,check,negative,boost,boost,this,fields,boosts,put,field,boost,return,this
