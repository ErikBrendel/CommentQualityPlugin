commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * pkg-private for testing  */ ;/**  * pkg-private for testing  */ long nanoTime() {     return System.nanoTime(). }
true;public,final;0;15;/**  * Start the timer.  */ ;/**  * Start the timer.  */ public final void start() {     assert start == 0 : "#start call misses a matching #stop call".     // We measure the timing of each method call for the first 256     // calls, then 1/2 call up to 512 then 1/3 up to 768, etc. with     // a maximum interval of 1024, which is reached for 1024*2^8 ~= 262000     // This allows to not slow down things too much because of calls     // to System.nanoTime() when methods are called millions of time     // in tight loops, while still providing useful timings for methods     // that are only called a couple times per search execution.     doTiming = (count - lastCount) >= Math.min(lastCount >>> 8, 1024).     if (doTiming) {         start = nanoTime().     }     count++. }
true;public,final;0;7;/**  * Stop the timer.  */ ;/**  * Stop the timer.  */ public final void stop() {     if (doTiming) {         timing += (count - lastCount) * Math.max(nanoTime() - start, 1L).         lastCount = count.         start = 0.     } }
true;public,final;0;6;/**  * Return the number of times that {@link #start()} has been called.  */ ;/**  * Return the number of times that {@link #start()} has been called.  */ public final long getCount() {     if (start != 0) {         throw new IllegalStateException("#start call misses a matching #stop call").     }     return count. }
true;public,final;0;15;/**  * Return an approximation of the total time spent between consecutive calls of #start and #stop.  */ ;/**  * Return an approximation of the total time spent between consecutive calls of #start and #stop.  */ public final long getApproximateTiming() {     if (start != 0) {         throw new IllegalStateException("#start call misses a matching #stop call").     }     // We don't have timings for the last `count-lastCount` method calls     // so we assume that they had the same timing as the lastCount first     // calls. This approximation is ok since at most 1/256th of method     // calls have not been timed.     long timing = this.timing.     if (count > lastCount) {         assert lastCount > 0.         timing += (count - lastCount) * timing / lastCount.     }     return timing. }
