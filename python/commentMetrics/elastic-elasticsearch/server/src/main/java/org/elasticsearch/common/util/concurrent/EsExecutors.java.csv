# id;timestamp;commentText;codeText;commentWords;codeWords
EsExecutors -> public static ExecutorService newDirectExecutorService();1524684173;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static ExecutorService newDirectExecutorService();1534848846;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static ExecutorService newDirectExecutorService();1540583181;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static ExecutorService newDirectExecutorService();1541008027;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static ExecutorService newDirectExecutorService();1547743595;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static ExecutorService newDirectExecutorService();1548953505;Returns an {@link ExecutorService} that executes submitted tasks on the current thread. This executor service does not support being_shutdown.__@return an {@link ExecutorService} that executes submitted tasks on the current thread;public static ExecutorService newDirectExecutorService() {_        return DIRECT_EXECUTOR_SERVICE__    };returns,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread,this,executor,service,does,not,support,being,shutdown,return,an,link,executor,service,that,executes,submitted,tasks,on,the,current,thread;public,static,executor,service,new,direct,executor,service,return
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1524684173;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1534848846;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1540583181;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1541008027;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1547743595;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,                                                          int maxQueueSize, int frameSize, TimeValue targetedResponseTime,                                                          ThreadFactory threadFactory, ThreadContext contextHolder);1548953505;Return a new executor that will automatically adjust the queue size based on queue throughput.__@param size number of fixed threads to use for executing tasks_@param initialQueueCapacity initial size of the executor queue_@param minQueueSize minimum queue size that the queue can be adjusted to_@param maxQueueSize maximum queue size that the queue can be adjusted to_@param frameSize number of tasks during which stats are collected before adjusting queue size;public static EsThreadPoolExecutor newAutoQueueFixed(String name, int size, int initialQueueCapacity, int minQueueSize,_                                                         int maxQueueSize, int frameSize, TimeValue targetedResponseTime,_                                                         ThreadFactory threadFactory, ThreadContext contextHolder) {_        if (initialQueueCapacity <= 0) {_            throw new IllegalArgumentException("initial queue capacity for [" + name + "] executor must be positive, got: " +_                            initialQueueCapacity)__        }_        ResizableBlockingQueue<Runnable> queue =_                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(), initialQueueCapacity)__        return new QueueResizingEsThreadPoolExecutor(name, size, size, 0, TimeUnit.MILLISECONDS,_                queue, minQueueSize, maxQueueSize, TimedRunnable::new, frameSize, targetedResponseTime, threadFactory,_                new EsAbortPolicy(), contextHolder)__    };return,a,new,executor,that,will,automatically,adjust,the,queue,size,based,on,queue,throughput,param,size,number,of,fixed,threads,to,use,for,executing,tasks,param,initial,queue,capacity,initial,size,of,the,executor,queue,param,min,queue,size,minimum,queue,size,that,the,queue,can,be,adjusted,to,param,max,queue,size,maximum,queue,size,that,the,queue,can,be,adjusted,to,param,frame,size,number,of,tasks,during,which,stats,are,collected,before,adjusting,queue,size;public,static,es,thread,pool,executor,new,auto,queue,fixed,string,name,int,size,int,initial,queue,capacity,int,min,queue,size,int,max,queue,size,int,frame,size,time,value,targeted,response,time,thread,factory,thread,factory,thread,context,context,holder,if,initial,queue,capacity,0,throw,new,illegal,argument,exception,initial,queue,capacity,for,name,executor,must,be,positive,got,initial,queue,capacity,resizable,blocking,queue,runnable,queue,new,resizable,blocking,queue,concurrent,collections,runnable,new,blocking,queue,initial,queue,capacity,return,new,queue,resizing,es,thread,pool,executor,name,size,size,0,time,unit,milliseconds,queue,min,queue,size,max,queue,size,timed,runnable,new,frame,size,targeted,response,time,thread,factory,new,es,abort,policy,context,holder
EsExecutors -> private EsExecutors();1524684173;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> private EsExecutors();1534848846;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> private EsExecutors();1540583181;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> private EsExecutors();1541008027;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> private EsExecutors();1547743595;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> private EsExecutors();1548953505;Cannot instantiate.;private EsExecutors() {_    };cannot,instantiate;private,es,executors
EsExecutors -> public static int numberOfProcessors(final Settings settings);1524684173;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
EsExecutors -> public static int numberOfProcessors(final Settings settings);1534848846;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
EsExecutors -> public static int numberOfProcessors(final Settings settings);1540583181;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
EsExecutors -> public static int numberOfProcessors(final Settings settings);1541008027;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
EsExecutors -> public static int numberOfProcessors(final Settings settings);1547743595;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
EsExecutors -> public static int numberOfProcessors(final Settings settings);1548953505;Returns the number of available processors. Defaults to_{@link Runtime#availableProcessors()} but can be overridden by passing a {@link Settings}_instance with the key "processors" set to the desired value.__@param settings a {@link Settings} instance from which to derive the available processors_@return the number of available processors;public static int numberOfProcessors(final Settings settings) {_        return PROCESSORS_SETTING.get(settings)__    };returns,the,number,of,available,processors,defaults,to,link,runtime,available,processors,but,can,be,overridden,by,passing,a,link,settings,instance,with,the,key,processors,set,to,the,desired,value,param,settings,a,link,settings,instance,from,which,to,derive,the,available,processors,return,the,number,of,available,processors;public,static,int,number,of,processors,final,settings,settings,return,get,settings
