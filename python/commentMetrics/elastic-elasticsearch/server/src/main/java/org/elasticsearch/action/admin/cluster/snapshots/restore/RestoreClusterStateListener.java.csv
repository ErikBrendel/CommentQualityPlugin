commented;modifiers;parameterAmount;loc;comment;code
false;public;1;26;;@Override public void clusterChanged(ClusterChangedEvent changedEvent) {     final RestoreInProgress.Entry prevEntry = restoreInProgress(changedEvent.previousState(), uuid).     final RestoreInProgress.Entry newEntry = restoreInProgress(changedEvent.state(), uuid).     if (prevEntry == null) {         // When there is a master failure after a restore has been started, this listener might not be registered         // on the current master and as such it might miss some intermediary cluster states due to batching.         // Clean up listener in that case and acknowledge completion of restore operation to client.         clusterService.removeListener(this).         listener.onResponse(new RestoreSnapshotResponse(null)).     } else if (newEntry == null) {         clusterService.removeListener(this).         ImmutableOpenMap<ShardId, RestoreInProgress.ShardRestoreStatus> shards = prevEntry.shards().         assert prevEntry.state().completed() : "expected completed snapshot state but was " + prevEntry.state().         assert RestoreService.completed(shards) : "expected all restore entries to be completed".         RestoreInfo ri = new RestoreInfo(prevEntry.snapshot().getSnapshotId().getName(), prevEntry.indices(), shards.size(), shards.size() - RestoreService.failedShards(shards)).         RestoreSnapshotResponse response = new RestoreSnapshotResponse(ri).         logger.debug("restore of [{}] completed", prevEntry.snapshot().getSnapshotId()).         listener.onResponse(response).     } else {     // restore not completed yet, wait for next cluster state update     } }
true;public,static;3;4;/**  * Creates a cluster state listener and registers it with the cluster service. The listener passed as a  * parameter will be called when the restore is complete.  */ ;/**  * Creates a cluster state listener and registers it with the cluster service. The listener passed as a  * parameter will be called when the restore is complete.  */ public static void createAndRegisterListener(ClusterService clusterService, RestoreService.RestoreCompletionResponse response, ActionListener<RestoreSnapshotResponse> listener) {     clusterService.addListener(new RestoreClusterStateListener(clusterService, response, listener)). }
