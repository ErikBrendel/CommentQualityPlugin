commented;modifiers;parameterAmount;loc;comment;code
false;public;4;42;;public void build(final String tokenizerName, final TokenizerFactory tokenizerFactory, final Map<String, CharFilterFactory> charFilters, final Map<String, TokenFilterFactory> tokenFilters) {     if (analyzerSettings.get("tokenizer") != null) {         throw new IllegalArgumentException("Custom normalizer [" + name() + "] cannot configure a tokenizer").     }     List<String> charFilterNames = analyzerSettings.getAsList("char_filter").     List<CharFilterFactory> charFiltersList = new ArrayList<>(charFilterNames.size()).     for (String charFilterName : charFilterNames) {         CharFilterFactory charFilter = charFilters.get(charFilterName).         if (charFilter == null) {             throw new IllegalArgumentException("Custom normalizer [" + name() + "] failed to find char_filter under name [" + charFilterName + "]").         }         if (charFilter instanceof NormalizingCharFilterFactory == false) {             throw new IllegalArgumentException("Custom normalizer [" + name() + "] may not use char filter [" + charFilterName + "]").         }         charFiltersList.add(charFilter).     }     List<String> tokenFilterNames = analyzerSettings.getAsList("filter").     List<TokenFilterFactory> tokenFilterList = new ArrayList<>(tokenFilterNames.size()).     for (String tokenFilterName : tokenFilterNames) {         TokenFilterFactory tokenFilter = tokenFilters.get(tokenFilterName).         if (tokenFilter == null) {             throw new IllegalArgumentException("Custom Analyzer [" + name() + "] failed to find filter under name [" + tokenFilterName + "]").         }         if (tokenFilter instanceof NormalizingTokenFilterFactory == false) {             throw new IllegalArgumentException("Custom normalizer [" + name() + "] may not use filter [" + tokenFilterName + "]").         }         tokenFilterList.add(tokenFilter).     }     this.customAnalyzer = new CustomAnalyzer(tokenizerName, tokenizerFactory, charFiltersList.toArray(new CharFilterFactory[charFiltersList.size()]), tokenFilterList.toArray(new TokenFilterFactory[tokenFilterList.size()])). }
false;public;0;4;;@Override public CustomAnalyzer get() {     return this.customAnalyzer. }
