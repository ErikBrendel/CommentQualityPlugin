commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns a module which creates bindings for provider methods from the given module.  */ ;/**  * Returns a module which creates bindings for provider methods from the given module.  */ public static Module forModule(Module module) {     return forObject(module). }
true;public,static;1;8;/**  * Returns a module which creates bindings for provider methods from the given object.  * This is useful notably for <a href="http://code.google.com/p/google-gin/">GIN</a>  */ ;/**  * Returns a module which creates bindings for provider methods from the given object.  * This is useful notably for <a href="http://code.google.com/p/google-gin/">GIN</a>  */ public static Module forObject(Object object) {     // avoid infinite recursion, since installing a module always installs itself     if (object instanceof ProviderMethodsModule) {         return Modules.EMPTY_MODULE.     }     return new ProviderMethodsModule(object). }
false;public,synchronized;1;6;;@Override public synchronized void configure(Binder binder) {     for (ProviderMethod<?> providerMethod : getProviderMethods(binder)) {         providerMethod.configure(binder).     } }
false;public;1;11;;public List<ProviderMethod<?>> getProviderMethods(Binder binder) {     List<ProviderMethod<?>> result = new ArrayList<>().     for (Class<?> c = delegate.getClass(). c != Object.class. c = c.getSuperclass()) {         for (Method method : c.getMethods()) {             if (method.getAnnotation(Provides.class) != null) {                 result.add(createProviderMethod(binder, method)).             }         }     }     return result. }
false;;2;29;;<T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) {     binder = binder.withSource(method).     Errors errors = new Errors(method).     // prepare the parameter providers     Set<Dependency<?>> dependencies = new HashSet<>().     List<Provider<?>> parameterProviders = new ArrayList<>().     List<TypeLiteral<?>> parameterTypes = typeLiteral.getParameterTypes(method).     Annotation[][] parameterAnnotations = method.getParameterAnnotations().     for (int i = 0. i < parameterTypes.size(). i++) {         Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i]).         dependencies.add(Dependency.get(key)).         parameterProviders.add(binder.getProvider(key)).     }     // Define T as the method's return type.     @SuppressWarnings("unchecked")     TypeLiteral<T> returnType = (TypeLiteral<T>) typeLiteral.getReturnType(method).     Key<T> key = getKey(errors, returnType, method, method.getAnnotations()).     Class<? extends Annotation> scopeAnnotation = Annotations.findScopeAnnotation(errors, method.getAnnotations()).     for (Message message : errors.getMessages()) {         binder.addError(message).     }     return new ProviderMethod<>(key, method, delegate, unmodifiableSet(dependencies), parameterProviders, scopeAnnotation). }
false;;4;4;;<T> Key<T> getKey(Errors errors, TypeLiteral<T> type, Member member, Annotation[] annotations) {     Annotation bindingAnnotation = Annotations.findBindingAnnotation(errors, member, annotations).     return bindingAnnotation == null ? Key.get(type) : Key.get(type, bindingAnnotation). }
false;public;1;5;;@Override public boolean equals(Object o) {     return o instanceof ProviderMethodsModule && ((ProviderMethodsModule) o).delegate == delegate. }
false;public;0;4;;@Override public int hashCode() {     return delegate.hashCode(). }
