commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new ScriptedMetricAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;12;;@Override protected void doWriteTo(StreamOutput out) throws IOException {     out.writeOptionalWriteable(initScript).     out.writeOptionalWriteable(mapScript).     out.writeOptionalWriteable(combineScript).     out.writeOptionalWriteable(reduceScript).     boolean hasParams = params != null.     out.writeBoolean(hasParams).     if (hasParams) {         out.writeMap(params).     } }
true;public;1;7;/**  * Set the {@code init} script.  */ ;/**  * Set the {@code init} script.  */ public ScriptedMetricAggregationBuilder initScript(Script initScript) {     if (initScript == null) {         throw new IllegalArgumentException("[initScript] must not be null: [" + name + "]").     }     this.initScript = initScript.     return this. }
true;public;0;3;/**  * Get the {@code init} script.  */ ;/**  * Get the {@code init} script.  */ public Script initScript() {     return initScript. }
true;public;1;7;/**  * Set the {@code map} script.  */ ;/**  * Set the {@code map} script.  */ public ScriptedMetricAggregationBuilder mapScript(Script mapScript) {     if (mapScript == null) {         throw new IllegalArgumentException("[mapScript] must not be null: [" + name + "]").     }     this.mapScript = mapScript.     return this. }
true;public;0;3;/**  * Get the {@code map} script.  */ ;/**  * Get the {@code map} script.  */ public Script mapScript() {     return mapScript. }
true;public;1;7;/**  * Set the {@code combine} script.  */ ;/**  * Set the {@code combine} script.  */ public ScriptedMetricAggregationBuilder combineScript(Script combineScript) {     if (combineScript == null) {         throw new IllegalArgumentException("[combineScript] must not be null: [" + name + "]").     }     this.combineScript = combineScript.     return this. }
true;public;0;3;/**  * Get the {@code combine} script.  */ ;/**  * Get the {@code combine} script.  */ public Script combineScript() {     return combineScript. }
true;public;1;7;/**  * Set the {@code reduce} script.  */ ;/**  * Set the {@code reduce} script.  */ public ScriptedMetricAggregationBuilder reduceScript(Script reduceScript) {     if (reduceScript == null) {         throw new IllegalArgumentException("[reduceScript] must not be null: [" + name + "]").     }     this.reduceScript = reduceScript.     return this. }
true;public;0;3;/**  * Get the {@code reduce} script.  */ ;/**  * Get the {@code reduce} script.  */ public Script reduceScript() {     return reduceScript. }
true;public;1;7;/**  * Set parameters that will be available in the {@code init},  * {@code map} and {@code combine} phases.  */ ;/**  * Set parameters that will be available in the {@code init},  * {@code map} and {@code combine} phases.  */ public ScriptedMetricAggregationBuilder params(Map<String, Object> params) {     if (params == null) {         throw new IllegalArgumentException("[params] must not be null: [" + name + "]").     }     this.params = params.     return this. }
true;public;0;3;/**  * Get parameters that will be available in the {@code init},  * {@code map} and {@code combine} phases.  */ ;/**  * Get parameters that will be available in the {@code init},  * {@code map} and {@code combine} phases.  */ public Map<String, Object> params() {     return params. }
false;protected;3;43;;@Override protected ScriptedMetricAggregatorFactory doBuild(SearchContext context, AggregatorFactory<?> parent, Builder subfactoriesBuilder) throws IOException {     if (combineScript == null) {         throw new IllegalArgumentException("[combineScript] must not be null: [" + name + "]").     }     if (reduceScript == null) {         throw new IllegalArgumentException("[reduceScript] must not be null: [" + name + "]").     }     QueryShardContext queryShardContext = context.getQueryShardContext().     // Extract params from scripts and pass them along to ScriptedMetricAggregatorFactory, since it won't have     // access to them for the scripts it's given precompiled.     ScriptedMetricAggContexts.InitScript.Factory compiledInitScript.     Map<String, Object> initScriptParams.     if (initScript != null) {         compiledInitScript = queryShardContext.getScriptService().compile(initScript, ScriptedMetricAggContexts.InitScript.CONTEXT).         initScriptParams = initScript.getParams().     } else {         compiledInitScript = (p, a) -> null.         initScriptParams = Collections.emptyMap().     }     ScriptedMetricAggContexts.MapScript.Factory compiledMapScript = queryShardContext.getScriptService().compile(mapScript, ScriptedMetricAggContexts.MapScript.CONTEXT).     Map<String, Object> mapScriptParams = mapScript.getParams().     ScriptedMetricAggContexts.CombineScript.Factory compiledCombineScript.     Map<String, Object> combineScriptParams.     compiledCombineScript = queryShardContext.getScriptService().compile(combineScript, ScriptedMetricAggContexts.CombineScript.CONTEXT).     combineScriptParams = combineScript.getParams().     return new ScriptedMetricAggregatorFactory(name, compiledMapScript, mapScriptParams, compiledInitScript, initScriptParams, compiledCombineScript, combineScriptParams, reduceScript, params, queryShardContext.lookup(), context, parent, subfactoriesBuilder, metaData). }
false;protected;2;25;;@Override protected XContentBuilder internalXContent(XContentBuilder builder, Params builderParams) throws IOException {     builder.startObject().     if (initScript != null) {         builder.field(INIT_SCRIPT_FIELD.getPreferredName(), initScript).     }     if (mapScript != null) {         builder.field(MAP_SCRIPT_FIELD.getPreferredName(), mapScript).     }     if (combineScript != null) {         builder.field(COMBINE_SCRIPT_FIELD.getPreferredName(), combineScript).     }     if (reduceScript != null) {         builder.field(REDUCE_SCRIPT_FIELD.getPreferredName(), reduceScript).     }     if (params != null) {         builder.field(PARAMS_FIELD.getPreferredName()).         builder.map(params).     }     builder.endObject().     return builder. }
false;public,static;2;55;;public static ScriptedMetricAggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     Script initScript = null.     Script mapScript = null.     Script combineScript = null.     Script reduceScript = null.     Map<String, Object> params = null.     XContentParser.Token token.     String currentFieldName = null.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token == XContentParser.Token.START_OBJECT || token == XContentParser.Token.VALUE_STRING) {             if (INIT_SCRIPT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 initScript = Script.parse(parser).             } else if (MAP_SCRIPT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 mapScript = Script.parse(parser).             } else if (COMBINE_SCRIPT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 combineScript = Script.parse(parser).             } else if (REDUCE_SCRIPT_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 reduceScript = Script.parse(parser).             } else if (token == XContentParser.Token.START_OBJECT && PARAMS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {                 params = parser.map().             } else {                 throw new ParsingException(parser.getTokenLocation(), "Unknown key for a " + token + " in [" + aggregationName + "]: [" + currentFieldName + "].").             }         } else {             throw new ParsingException(parser.getTokenLocation(), "Unexpected token " + token + " in [" + aggregationName + "].").         }     }     if (mapScript == null) {         throw new ParsingException(parser.getTokenLocation(), "map_script field is required in [" + aggregationName + "].").     }     ScriptedMetricAggregationBuilder factory = new ScriptedMetricAggregationBuilder(aggregationName).     if (initScript != null) {         factory.initScript(initScript).     }     if (mapScript != null) {         factory.mapScript(mapScript).     }     if (combineScript != null) {         factory.combineScript(combineScript).     }     if (reduceScript != null) {         factory.reduceScript(reduceScript).     }     if (params != null) {         factory.params(params).     }     return factory. }
false;public;0;4;;@Override public String getType() {     return NAME. }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(initScript, mapScript, combineScript, reduceScript, params). }
false;protected;1;9;;@Override protected boolean doEquals(Object obj) {     ScriptedMetricAggregationBuilder other = (ScriptedMetricAggregationBuilder) obj.     return Objects.equals(initScript, other.initScript) && Objects.equals(mapScript, other.mapScript) && Objects.equals(combineScript, other.combineScript) && Objects.equals(reduceScript, other.reduceScript) && Objects.equals(params, other.params). }
