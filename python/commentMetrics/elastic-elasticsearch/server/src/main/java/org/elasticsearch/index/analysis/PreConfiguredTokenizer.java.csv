commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Create a pre-configured tokenizer that may not vary at all.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ ;/**  * Create a pre-configured tokenizer that may not vary at all.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ public static PreConfiguredTokenizer singleton(String name, Supplier<Tokenizer> create) {     return new PreConfiguredTokenizer(name, CachingStrategy.ONE, version -> create.get()). }
true;public,static;2;3;/**  * Create a pre-configured tokenizer that may vary based on the Lucene version.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ ;/**  * Create a pre-configured tokenizer that may vary based on the Lucene version.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ public static PreConfiguredTokenizer luceneVersion(String name, Function<org.apache.lucene.util.Version, Tokenizer> create) {     return new PreConfiguredTokenizer(name, CachingStrategy.LUCENE, version -> create.apply(version.luceneVersion)). }
true;public,static;2;3;/**  * Create a pre-configured tokenizer that may vary based on the Elasticsearch version.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ ;/**  * Create a pre-configured tokenizer that may vary based on the Elasticsearch version.  *  * @param name the name of the tokenizer in the api  * @param create builds the tokenizer  */ public static PreConfiguredTokenizer elasticsearchVersion(String name, Function<org.elasticsearch.Version, Tokenizer> create) {     return new PreConfiguredTokenizer(name, CachingStrategy.ELASTICSEARCH, create). }
false;protected;1;4;;@Override protected TokenizerFactory create(Version version) {     return () -> create.apply(version). }
