commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "list_tasks_action". }
false;public;2;7;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     final ListTasksRequest listTasksRequest = generateListTasksRequest(request).     final String groupBy = request.param("group_by", "nodes").     return channel -> client.admin().cluster().listTasks(listTasksRequest, listTasksResponseListener(nodesInCluster, groupBy, channel)). }
false;public,static;1;17;;public static ListTasksRequest generateListTasksRequest(RestRequest request) {     boolean detailed = request.paramAsBoolean("detailed", false).     String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes")).     String[] actions = Strings.splitStringByCommaToArray(request.param("actions")).     TaskId parentTaskId = new TaskId(request.param("parent_task_id")).     boolean waitForCompletion = request.paramAsBoolean("wait_for_completion", false).     TimeValue timeout = request.paramAsTime("timeout", null).     ListTasksRequest listTasksRequest = new ListTasksRequest().     listTasksRequest.setNodes(nodes).     listTasksRequest.setDetailed(detailed).     listTasksRequest.setActions(actions).     listTasksRequest.setParentTaskId(parentTaskId).     listTasksRequest.setWaitForCompletion(waitForCompletion).     listTasksRequest.setTimeout(timeout).     return listTasksRequest. }
false;public;2;7;;@Override public RestResponse buildResponse(T response, XContentBuilder builder) throws Exception {     builder.startObject().     response.toXContentGroupedByParents(builder, channel.request()).     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
false;public;2;7;;@Override public RestResponse buildResponse(T response, XContentBuilder builder) throws Exception {     builder.startObject().     response.toXContentGroupedByNode(builder, channel.request(), nodesInCluster.get()).     builder.endObject().     return new BytesRestResponse(RestStatus.OK, builder). }
true;public,static;3;30;/**  * Standard listener for extensions of {@link ListTasksResponse} that supports {@code group_by=nodes}.  */ ;/**  * Standard listener for extensions of {@link ListTasksResponse} that supports {@code group_by=nodes}.  */ public static <T extends ListTasksResponse> ActionListener<T> listTasksResponseListener(Supplier<DiscoveryNodes> nodesInCluster, String groupBy, final RestChannel channel) {     if ("nodes".equals(groupBy)) {         return new RestBuilderListener<T>(channel) {              @Override             public RestResponse buildResponse(T response, XContentBuilder builder) throws Exception {                 builder.startObject().                 response.toXContentGroupedByNode(builder, channel.request(), nodesInCluster.get()).                 builder.endObject().                 return new BytesRestResponse(RestStatus.OK, builder).             }         }.     } else if ("parents".equals(groupBy)) {         return new RestBuilderListener<T>(channel) {              @Override             public RestResponse buildResponse(T response, XContentBuilder builder) throws Exception {                 builder.startObject().                 response.toXContentGroupedByParents(builder, channel.request()).                 builder.endObject().                 return new BytesRestResponse(RestStatus.OK, builder).             }         }.     } else if ("none".equals(groupBy)) {         return new RestToXContentListener<>(channel).     } else {         throw new IllegalArgumentException("[group_by] must be one of [nodes], [parents] or [none] but was [" + groupBy + "]").     } }
false;public;0;4;;@Override public boolean canTripCircuitBreaker() {     return false. }
