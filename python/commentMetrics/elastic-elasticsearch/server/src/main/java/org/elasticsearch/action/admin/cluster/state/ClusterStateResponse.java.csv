commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The requested cluster state.  Only the parts of the cluster state that were  * requested are included in the returned {@link ClusterState} instance.  */ ;/**  * The requested cluster state.  Only the parts of the cluster state that were  * requested are included in the returned {@link ClusterState} instance.  */ public ClusterState getState() {     return this.clusterState. }
true;public;0;3;/**  * The name of the cluster.  */ ;/**  * The name of the cluster.  */ public ClusterName getClusterName() {     return this.clusterName. }
true;public;0;3;/**  * The total compressed size of the full cluster state, not just the parts  * returned by {@link #getState()}.  The total compressed size is the size  * of the cluster state as it would be transmitted over the network during  * intra-node communication.  */ ;/**  * The total compressed size of the full cluster state, not just the parts  * returned by {@link #getState()}.  The total compressed size is the size  * of the cluster state as it would be transmitted over the network during  * intra-node communication.  */ public ByteSizeValue getTotalCompressedSize() {     return totalCompressedSize. }
true;public;0;3;/**  * Returns whether the request timed out waiting for a cluster state with a metadata version equal or  * higher than the specified metadata.  */ ;/**  * Returns whether the request timed out waiting for a cluster state with a metadata version equal or  * higher than the specified metadata.  */ public boolean isWaitForTimedOut() {     return waitForTimedOut. }
false;public;1;22;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     clusterName = new ClusterName(in).     if (in.getVersion().onOrAfter(Version.V_6_6_0)) {         clusterState = in.readOptionalWriteable(innerIn -> ClusterState.readFrom(innerIn, null)).     } else {         clusterState = ClusterState.readFrom(in, null).     }     if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         totalCompressedSize = new ByteSizeValue(in).     } else {         // in a mixed cluster, if a pre 6.0 node processes the get cluster state         // request, then a compressed size won't be returned, so just return 0.         // its a temporary situation until all nodes in the cluster have been upgraded,         // at which point the correct cluster state size will always be reported         totalCompressedSize = new ByteSizeValue(0L).     }     if (in.getVersion().onOrAfter(Version.V_6_6_0)) {         waitForTimedOut = in.readBoolean().     } }
false;public;1;20;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     clusterName.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalWriteable(clusterState).     } else {         if (out.getVersion().onOrAfter(Version.V_6_3_0)) {             clusterState.writeTo(out).         } else {             ClusterModule.filterCustomsForPre63Clients(clusterState).writeTo(out).         }     }     if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {         totalCompressedSize.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeBoolean(waitForTimedOut).     } }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ClusterStateResponse response = (ClusterStateResponse) o.     return waitForTimedOut == response.waitForTimedOut && Objects.equals(clusterName, response.clusterName) && // because cluster state doesn't implement equals()     Objects.equals(getVersion(clusterState), getVersion(response.clusterState)) && Objects.equals(getMasterNodeId(clusterState), getMasterNodeId(response.clusterState)) && Objects.equals(totalCompressedSize, response.totalCompressedSize). }
false;public;0;12;;@Override public int hashCode() {     // because cluster state doesn't implement  hashcode()     return Objects.hash(clusterName, getVersion(clusterState), getMasterNodeId(clusterState), totalCompressedSize, waitForTimedOut). }
false;private,static;1;11;;private static String getMasterNodeId(ClusterState clusterState) {     if (clusterState == null) {         return null.     }     DiscoveryNodes nodes = clusterState.getNodes().     if (nodes != null) {         return nodes.getMasterNodeId().     } else {         return null.     } }
false;private,static;1;7;;private static Long getVersion(ClusterState clusterState) {     if (clusterState != null) {         return clusterState.getVersion().     } else {         return null.     } }
