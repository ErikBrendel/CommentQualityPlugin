# id;timestamp;commentText;codeText;commentWords;codeWords
HunspellService -> public Dictionary getDictionary(String locale);1524684173;Returns the hunspell dictionary for the given locale.__@param locale The name of the locale;public Dictionary getDictionary(String locale) {_        Dictionary dictionary = knownDictionaries.get(locale)__        if (dictionary == null) {_            dictionary = dictionaries.computeIfAbsent(locale, loadingFunction)__        }_        return dictionary__    };returns,the,hunspell,dictionary,for,the,given,locale,param,locale,the,name,of,the,locale;public,dictionary,get,dictionary,string,locale,dictionary,dictionary,known,dictionaries,get,locale,if,dictionary,null,dictionary,dictionaries,compute,if,absent,locale,loading,function,return,dictionary
HunspellService -> public Dictionary getDictionary(String locale);1541092382;Returns the hunspell dictionary for the given locale.__@param locale The name of the locale;public Dictionary getDictionary(String locale) {_        Dictionary dictionary = knownDictionaries.get(locale)__        if (dictionary == null) {_            dictionary = dictionaries.computeIfAbsent(locale, loadingFunction)__        }_        return dictionary__    };returns,the,hunspell,dictionary,for,the,given,locale,param,locale,the,name,of,the,locale;public,dictionary,get,dictionary,string,locale,dictionary,dictionary,known,dictionaries,get,locale,if,dictionary,null,dictionary,dictionaries,compute,if,absent,locale,loading,function,return,dictionary
HunspellService -> public Dictionary getDictionary(String locale);1542402632;Returns the hunspell dictionary for the given locale.__@param locale The name of the locale;public Dictionary getDictionary(String locale) {_        Dictionary dictionary = knownDictionaries.get(locale)__        if (dictionary == null) {_            dictionary = dictionaries.computeIfAbsent(locale, loadingFunction)__        }_        return dictionary__    };returns,the,hunspell,dictionary,for,the,given,locale,param,locale,the,name,of,the,locale;public,dictionary,get,dictionary,string,locale,dictionary,dictionary,known,dictionaries,get,locale,if,dictionary,null,dictionary,dictionaries,compute,if,absent,locale,loading,function,return,dictionary
HunspellService -> private void scanAndLoadDictionaries() throws IOException;1524684173;Scans the hunspell directory and loads all found dictionaries;private void scanAndLoadDictionaries() throws IOException {_        if (Files.isDirectory(hunspellDir)) {_            try (DirectoryStream<Path> stream = Files.newDirectoryStream(hunspellDir)) {_                for (Path file : stream) {_                    if (Files.isDirectory(file)) {_                        try (DirectoryStream<Path> inner = Files.newDirectoryStream(hunspellDir.resolve(file), "*.dic")) {_                            if (inner.iterator().hasNext()) { _                                try {_                                    getDictionary(file.getFileName().toString())__                                } catch (Exception e) {_                                    _                                    _                                    logger.error(() -> new ParameterizedMessage(_                                            "exception while loading dictionary {}", file.getFileName()), e)__                                }_                            }_                        }_                    }_                }_            }_        }_    };scans,the,hunspell,directory,and,loads,all,found,dictionaries;private,void,scan,and,load,dictionaries,throws,ioexception,if,files,is,directory,hunspell,dir,try,directory,stream,path,stream,files,new,directory,stream,hunspell,dir,for,path,file,stream,if,files,is,directory,file,try,directory,stream,path,inner,files,new,directory,stream,hunspell,dir,resolve,file,dic,if,inner,iterator,has,next,try,get,dictionary,file,get,file,name,to,string,catch,exception,e,logger,error,new,parameterized,message,exception,while,loading,dictionary,file,get,file,name,e
HunspellService -> private void scanAndLoadDictionaries() throws IOException;1541092382;Scans the hunspell directory and loads all found dictionaries;private void scanAndLoadDictionaries() throws IOException {_        if (Files.isDirectory(hunspellDir)) {_            try (DirectoryStream<Path> stream = Files.newDirectoryStream(hunspellDir)) {_                for (Path file : stream) {_                    if (Files.isDirectory(file)) {_                        try (DirectoryStream<Path> inner = Files.newDirectoryStream(hunspellDir.resolve(file), "*.dic")) {_                            if (inner.iterator().hasNext()) { _                                try {_                                    getDictionary(file.getFileName().toString())__                                } catch (Exception e) {_                                    _                                    _                                    logger.error(() -> new ParameterizedMessage(_                                            "exception while loading dictionary {}", file.getFileName()), e)__                                }_                            }_                        }_                    }_                }_            }_        }_    };scans,the,hunspell,directory,and,loads,all,found,dictionaries;private,void,scan,and,load,dictionaries,throws,ioexception,if,files,is,directory,hunspell,dir,try,directory,stream,path,stream,files,new,directory,stream,hunspell,dir,for,path,file,stream,if,files,is,directory,file,try,directory,stream,path,inner,files,new,directory,stream,hunspell,dir,resolve,file,dic,if,inner,iterator,has,next,try,get,dictionary,file,get,file,name,to,string,catch,exception,e,logger,error,new,parameterized,message,exception,while,loading,dictionary,file,get,file,name,e
HunspellService -> private void scanAndLoadDictionaries() throws IOException;1542402632;Scans the hunspell directory and loads all found dictionaries;private void scanAndLoadDictionaries() throws IOException {_        if (Files.isDirectory(hunspellDir)) {_            try (DirectoryStream<Path> stream = Files.newDirectoryStream(hunspellDir)) {_                for (Path file : stream) {_                    if (Files.isDirectory(file)) {_                        try (DirectoryStream<Path> inner = Files.newDirectoryStream(hunspellDir.resolve(file), "*.dic")) {_                            if (inner.iterator().hasNext()) { _                                try {_                                    getDictionary(file.getFileName().toString())__                                } catch (Exception e) {_                                    _                                    _                                    logger.error(() -> new ParameterizedMessage(_                                            "exception while loading dictionary {}", file.getFileName()), e)__                                }_                            }_                        }_                    }_                }_            }_        }_    };scans,the,hunspell,directory,and,loads,all,found,dictionaries;private,void,scan,and,load,dictionaries,throws,ioexception,if,files,is,directory,hunspell,dir,try,directory,stream,path,stream,files,new,directory,stream,hunspell,dir,for,path,file,stream,if,files,is,directory,file,try,directory,stream,path,inner,files,new,directory,stream,hunspell,dir,resolve,file,dic,if,inner,iterator,has,next,try,get,dictionary,file,get,file,name,to,string,catch,exception,e,logger,error,new,parameterized,message,exception,while,loading,dictionary,file,get,file,name,e
HunspellService -> private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception;1524684173;Loads the hunspell dictionary for the given local.__@param locale       The locale of the hunspell dictionary to be loaded._@param nodeSettings The node level settings_@param env          The node environment (from which the conf path will be resolved)_@return The loaded Hunspell dictionary_@throws Exception when loading fails (due to IO errors or malformed dictionary files);private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception {_        if (logger.isDebugEnabled()) {_            logger.debug("Loading hunspell dictionary [{}]...", locale)__        }_        Path dicDir = hunspellDir.resolve(locale)__        if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Could not find hunspell dictionary [%s]", locale))__        }__        _        Settings dictSettings = HUNSPELL_DICTIONARY_OPTIONS.get(nodeSettings)__        nodeSettings = loadDictionarySettings(dicDir, dictSettings.getByPrefix(locale + "."))___        boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)___        Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff")__        if (affixFiles.length == 0) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Missing affix file for hunspell dictionary [%s]", locale))__        }_        if (affixFiles.length != 1) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Too many affix files exist for hunspell dictionary [%s]", locale))__        }_        InputStream affixStream = null___        Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic")__        List<InputStream> dicStreams = new ArrayList<>(dicFiles.length)__        try {__            for (int i = 0_ i < dicFiles.length_ i++) {_                dicStreams.add(Files.newInputStream(dicFiles[i]))__            }__            affixStream = Files.newInputStream(affixFiles[0])___            try (Directory tmp = new SimpleFSDirectory(env.tmpFile())) {_                return new Dictionary(tmp, "hunspell", affixStream, dicStreams, ignoreCase)__            }__        } catch (Exception e) {_            logger.error(() -> new ParameterizedMessage("Could not load hunspell dictionary [{}]", locale), e)__            throw e__        } finally {_            IOUtils.close(affixStream)__            IOUtils.close(dicStreams)__        }_    };loads,the,hunspell,dictionary,for,the,given,local,param,locale,the,locale,of,the,hunspell,dictionary,to,be,loaded,param,node,settings,the,node,level,settings,param,env,the,node,environment,from,which,the,conf,path,will,be,resolved,return,the,loaded,hunspell,dictionary,throws,exception,when,loading,fails,due,to,io,errors,or,malformed,dictionary,files;private,dictionary,load,dictionary,string,locale,settings,node,settings,environment,env,throws,exception,if,logger,is,debug,enabled,logger,debug,loading,hunspell,dictionary,locale,path,dic,dir,hunspell,dir,resolve,locale,if,file,system,utils,is,accessible,directory,dic,dir,logger,false,throw,new,elasticsearch,exception,string,format,locale,root,could,not,find,hunspell,dictionary,s,locale,settings,dict,settings,get,node,settings,node,settings,load,dictionary,settings,dic,dir,dict,settings,get,by,prefix,locale,boolean,ignore,case,node,settings,get,as,boolean,default,ignore,case,path,affix,files,file,system,utils,files,dic,dir,aff,if,affix,files,length,0,throw,new,elasticsearch,exception,string,format,locale,root,missing,affix,file,for,hunspell,dictionary,s,locale,if,affix,files,length,1,throw,new,elasticsearch,exception,string,format,locale,root,too,many,affix,files,exist,for,hunspell,dictionary,s,locale,input,stream,affix,stream,null,path,dic,files,file,system,utils,files,dic,dir,dic,list,input,stream,dic,streams,new,array,list,dic,files,length,try,for,int,i,0,i,dic,files,length,i,dic,streams,add,files,new,input,stream,dic,files,i,affix,stream,files,new,input,stream,affix,files,0,try,directory,tmp,new,simple,fsdirectory,env,tmp,file,return,new,dictionary,tmp,hunspell,affix,stream,dic,streams,ignore,case,catch,exception,e,logger,error,new,parameterized,message,could,not,load,hunspell,dictionary,locale,e,throw,e,finally,ioutils,close,affix,stream,ioutils,close,dic,streams
HunspellService -> private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception;1541092382;Loads the hunspell dictionary for the given local.__@param locale       The locale of the hunspell dictionary to be loaded._@param nodeSettings The node level settings_@param env          The node environment (from which the conf path will be resolved)_@return The loaded Hunspell dictionary_@throws Exception when loading fails (due to IO errors or malformed dictionary files);private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception {_        if (logger.isDebugEnabled()) {_            logger.debug("Loading hunspell dictionary [{}]...", locale)__        }_        Path dicDir = hunspellDir.resolve(locale)__        if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Could not find hunspell dictionary [%s]", locale))__        }__        _        Settings dictSettings = HUNSPELL_DICTIONARY_OPTIONS.get(nodeSettings)__        nodeSettings = loadDictionarySettings(dicDir, dictSettings.getByPrefix(locale + "."))___        boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)___        Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff")__        if (affixFiles.length == 0) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Missing affix file for hunspell dictionary [%s]", locale))__        }_        if (affixFiles.length != 1) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Too many affix files exist for hunspell dictionary [%s]", locale))__        }_        InputStream affixStream = null___        Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic")__        List<InputStream> dicStreams = new ArrayList<>(dicFiles.length)__        try {__            for (int i = 0_ i < dicFiles.length_ i++) {_                dicStreams.add(Files.newInputStream(dicFiles[i]))__            }__            affixStream = Files.newInputStream(affixFiles[0])___            try (Directory tmp = new SimpleFSDirectory(env.tmpFile())) {_                return new Dictionary(tmp, "hunspell", affixStream, dicStreams, ignoreCase)__            }__        } catch (Exception e) {_            logger.error(() -> new ParameterizedMessage("Could not load hunspell dictionary [{}]", locale), e)__            throw e__        } finally {_            IOUtils.close(affixStream)__            IOUtils.close(dicStreams)__        }_    };loads,the,hunspell,dictionary,for,the,given,local,param,locale,the,locale,of,the,hunspell,dictionary,to,be,loaded,param,node,settings,the,node,level,settings,param,env,the,node,environment,from,which,the,conf,path,will,be,resolved,return,the,loaded,hunspell,dictionary,throws,exception,when,loading,fails,due,to,io,errors,or,malformed,dictionary,files;private,dictionary,load,dictionary,string,locale,settings,node,settings,environment,env,throws,exception,if,logger,is,debug,enabled,logger,debug,loading,hunspell,dictionary,locale,path,dic,dir,hunspell,dir,resolve,locale,if,file,system,utils,is,accessible,directory,dic,dir,logger,false,throw,new,elasticsearch,exception,string,format,locale,root,could,not,find,hunspell,dictionary,s,locale,settings,dict,settings,get,node,settings,node,settings,load,dictionary,settings,dic,dir,dict,settings,get,by,prefix,locale,boolean,ignore,case,node,settings,get,as,boolean,default,ignore,case,path,affix,files,file,system,utils,files,dic,dir,aff,if,affix,files,length,0,throw,new,elasticsearch,exception,string,format,locale,root,missing,affix,file,for,hunspell,dictionary,s,locale,if,affix,files,length,1,throw,new,elasticsearch,exception,string,format,locale,root,too,many,affix,files,exist,for,hunspell,dictionary,s,locale,input,stream,affix,stream,null,path,dic,files,file,system,utils,files,dic,dir,dic,list,input,stream,dic,streams,new,array,list,dic,files,length,try,for,int,i,0,i,dic,files,length,i,dic,streams,add,files,new,input,stream,dic,files,i,affix,stream,files,new,input,stream,affix,files,0,try,directory,tmp,new,simple,fsdirectory,env,tmp,file,return,new,dictionary,tmp,hunspell,affix,stream,dic,streams,ignore,case,catch,exception,e,logger,error,new,parameterized,message,could,not,load,hunspell,dictionary,locale,e,throw,e,finally,ioutils,close,affix,stream,ioutils,close,dic,streams
HunspellService -> private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception;1542402632;Loads the hunspell dictionary for the given local.__@param locale       The locale of the hunspell dictionary to be loaded._@param nodeSettings The node level settings_@param env          The node environment (from which the conf path will be resolved)_@return The loaded Hunspell dictionary_@throws Exception when loading fails (due to IO errors or malformed dictionary files);private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception {_        if (logger.isDebugEnabled()) {_            logger.debug("Loading hunspell dictionary [{}]...", locale)__        }_        Path dicDir = hunspellDir.resolve(locale)__        if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Could not find hunspell dictionary [%s]", locale))__        }__        _        Settings dictSettings = HUNSPELL_DICTIONARY_OPTIONS.get(nodeSettings)__        nodeSettings = loadDictionarySettings(dicDir, dictSettings.getByPrefix(locale + "."))___        boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)___        Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff")__        if (affixFiles.length == 0) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Missing affix file for hunspell dictionary [%s]", locale))__        }_        if (affixFiles.length != 1) {_            throw new ElasticsearchException(String.format(Locale.ROOT, "Too many affix files exist for hunspell dictionary [%s]", locale))__        }_        InputStream affixStream = null___        Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic")__        List<InputStream> dicStreams = new ArrayList<>(dicFiles.length)__        try {__            for (int i = 0_ i < dicFiles.length_ i++) {_                dicStreams.add(Files.newInputStream(dicFiles[i]))__            }__            affixStream = Files.newInputStream(affixFiles[0])___            try (Directory tmp = new SimpleFSDirectory(env.tmpFile())) {_                return new Dictionary(tmp, "hunspell", affixStream, dicStreams, ignoreCase)__            }__        } catch (Exception e) {_            logger.error(() -> new ParameterizedMessage("Could not load hunspell dictionary [{}]", locale), e)__            throw e__        } finally {_            IOUtils.close(affixStream)__            IOUtils.close(dicStreams)__        }_    };loads,the,hunspell,dictionary,for,the,given,local,param,locale,the,locale,of,the,hunspell,dictionary,to,be,loaded,param,node,settings,the,node,level,settings,param,env,the,node,environment,from,which,the,conf,path,will,be,resolved,return,the,loaded,hunspell,dictionary,throws,exception,when,loading,fails,due,to,io,errors,or,malformed,dictionary,files;private,dictionary,load,dictionary,string,locale,settings,node,settings,environment,env,throws,exception,if,logger,is,debug,enabled,logger,debug,loading,hunspell,dictionary,locale,path,dic,dir,hunspell,dir,resolve,locale,if,file,system,utils,is,accessible,directory,dic,dir,logger,false,throw,new,elasticsearch,exception,string,format,locale,root,could,not,find,hunspell,dictionary,s,locale,settings,dict,settings,get,node,settings,node,settings,load,dictionary,settings,dic,dir,dict,settings,get,by,prefix,locale,boolean,ignore,case,node,settings,get,as,boolean,default,ignore,case,path,affix,files,file,system,utils,files,dic,dir,aff,if,affix,files,length,0,throw,new,elasticsearch,exception,string,format,locale,root,missing,affix,file,for,hunspell,dictionary,s,locale,if,affix,files,length,1,throw,new,elasticsearch,exception,string,format,locale,root,too,many,affix,files,exist,for,hunspell,dictionary,s,locale,input,stream,affix,stream,null,path,dic,files,file,system,utils,files,dic,dir,dic,list,input,stream,dic,streams,new,array,list,dic,files,length,try,for,int,i,0,i,dic,files,length,i,dic,streams,add,files,new,input,stream,dic,files,i,affix,stream,files,new,input,stream,affix,files,0,try,directory,tmp,new,simple,fsdirectory,env,tmp,file,return,new,dictionary,tmp,hunspell,affix,stream,dic,streams,ignore,case,catch,exception,e,logger,error,new,parameterized,message,could,not,load,hunspell,dictionary,locale,e,throw,e,finally,ioutils,close,affix,stream,ioutils,close,dic,streams
HunspellService -> private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException;1524684173;Each hunspell dictionary directory may contain a {@code settings.yml} which holds dictionary specific settings. Default_values for these settings are defined in the given default settings.__@param dir      The directory of the dictionary_@param defaults The default settings for this dictionary_@return The resolved settings.;private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException {_        Path file = dir.resolve("settings.yml")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        file = dir.resolve("settings.json")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        return defaults__    };each,hunspell,dictionary,directory,may,contain,a,code,settings,yml,which,holds,dictionary,specific,settings,default,values,for,these,settings,are,defined,in,the,given,default,settings,param,dir,the,directory,of,the,dictionary,param,defaults,the,default,settings,for,this,dictionary,return,the,resolved,settings;private,static,settings,load,dictionary,settings,path,dir,settings,defaults,throws,ioexception,path,file,dir,resolve,settings,yml,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,file,dir,resolve,settings,json,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,return,defaults
HunspellService -> private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException;1541092382;Each hunspell dictionary directory may contain a {@code settings.yml} which holds dictionary specific settings. Default_values for these settings are defined in the given default settings.__@param dir      The directory of the dictionary_@param defaults The default settings for this dictionary_@return The resolved settings.;private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException {_        Path file = dir.resolve("settings.yml")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        file = dir.resolve("settings.json")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        return defaults__    };each,hunspell,dictionary,directory,may,contain,a,code,settings,yml,which,holds,dictionary,specific,settings,default,values,for,these,settings,are,defined,in,the,given,default,settings,param,dir,the,directory,of,the,dictionary,param,defaults,the,default,settings,for,this,dictionary,return,the,resolved,settings;private,static,settings,load,dictionary,settings,path,dir,settings,defaults,throws,ioexception,path,file,dir,resolve,settings,yml,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,file,dir,resolve,settings,json,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,return,defaults
HunspellService -> private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException;1542402632;Each hunspell dictionary directory may contain a {@code settings.yml} which holds dictionary specific settings. Default_values for these settings are defined in the given default settings.__@param dir      The directory of the dictionary_@param defaults The default settings for this dictionary_@return The resolved settings.;private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException {_        Path file = dir.resolve("settings.yml")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        file = dir.resolve("settings.json")__        if (Files.exists(file)) {_            return Settings.builder().loadFromPath(file).put(defaults).build()__        }__        return defaults__    };each,hunspell,dictionary,directory,may,contain,a,code,settings,yml,which,holds,dictionary,specific,settings,default,values,for,these,settings,are,defined,in,the,given,default,settings,param,dir,the,directory,of,the,dictionary,param,defaults,the,default,settings,for,this,dictionary,return,the,resolved,settings;private,static,settings,load,dictionary,settings,path,dir,settings,defaults,throws,ioexception,path,file,dir,resolve,settings,yml,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,file,dir,resolve,settings,json,if,files,exists,file,return,settings,builder,load,from,path,file,put,defaults,build,return,defaults
