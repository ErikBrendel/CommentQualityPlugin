commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Returns the hunspell dictionary for the given locale.  *  * @param locale The name of the locale  */ ;/**  * Returns the hunspell dictionary for the given locale.  *  * @param locale The name of the locale  */ public Dictionary getDictionary(String locale) {     Dictionary dictionary = knownDictionaries.get(locale).     if (dictionary == null) {         dictionary = dictionaries.computeIfAbsent(locale, loadingFunction).     }     return dictionary. }
false;private;1;3;;private Path resolveHunspellDirectory(Environment env) {     return env.configFile().resolve("hunspell"). }
true;private;0;22;/**  * Scans the hunspell directory and loads all found dictionaries  */ ;/**  * Scans the hunspell directory and loads all found dictionaries  */ private void scanAndLoadDictionaries() throws IOException {     if (Files.isDirectory(hunspellDir)) {         try (DirectoryStream<Path> stream = Files.newDirectoryStream(hunspellDir)) {             for (Path file : stream) {                 if (Files.isDirectory(file)) {                     try (DirectoryStream<Path> inner = Files.newDirectoryStream(hunspellDir.resolve(file), "*.dic")) {                         if (inner.iterator().hasNext()) {                             // just making sure it's indeed a dictionary dir                             try {                                 getDictionary(file.getFileName().toString()).                             } catch (Exception e) {                                 // The cache loader throws unchecked exception (see #loadDictionary()),                                 // here we simply report the exception and continue loading the dictionaries                                 logger.error(() -> new ParameterizedMessage("exception while loading dictionary {}", file.getFileName()), e).                             }                         }                     }                 }             }         }     } }
true;private;3;46;/**  * Loads the hunspell dictionary for the given local.  *  * @param locale       The locale of the hunspell dictionary to be loaded.  * @param nodeSettings The node level settings  * @param env          The node environment (from which the conf path will be resolved)  * @return The loaded Hunspell dictionary  * @throws Exception when loading fails (due to IO errors or malformed dictionary files)  */ ;/**  * Loads the hunspell dictionary for the given local.  *  * @param locale       The locale of the hunspell dictionary to be loaded.  * @param nodeSettings The node level settings  * @param env          The node environment (from which the conf path will be resolved)  * @return The loaded Hunspell dictionary  * @throws Exception when loading fails (due to IO errors or malformed dictionary files)  */ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception {     if (logger.isDebugEnabled()) {         logger.debug("Loading hunspell dictionary [{}]...", locale).     }     Path dicDir = hunspellDir.resolve(locale).     if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) {         throw new ElasticsearchException(String.format(Locale.ROOT, "Could not find hunspell dictionary [%s]", locale)).     }     // merging node settings with hunspell dictionary specific settings     Settings dictSettings = HUNSPELL_DICTIONARY_OPTIONS.get(nodeSettings).     nodeSettings = loadDictionarySettings(dicDir, dictSettings.getByPrefix(locale + ".")).     boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase).     Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff").     if (affixFiles.length == 0) {         throw new ElasticsearchException(String.format(Locale.ROOT, "Missing affix file for hunspell dictionary [%s]", locale)).     }     if (affixFiles.length != 1) {         throw new ElasticsearchException(String.format(Locale.ROOT, "Too many affix files exist for hunspell dictionary [%s]", locale)).     }     InputStream affixStream = null.     Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic").     List<InputStream> dicStreams = new ArrayList<>(dicFiles.length).     try {         for (int i = 0. i < dicFiles.length. i++) {             dicStreams.add(Files.newInputStream(dicFiles[i])).         }         affixStream = Files.newInputStream(affixFiles[0]).         try (Directory tmp = new SimpleFSDirectory(env.tmpFile())) {             return new Dictionary(tmp, "hunspell", affixStream, dicStreams, ignoreCase).         }     } catch (Exception e) {         logger.error(() -> new ParameterizedMessage("Could not load hunspell dictionary [{}]", locale), e).         throw e.     } finally {         IOUtils.close(affixStream).         IOUtils.close(dicStreams).     } }
true;private,static;2;13;/**  * Each hunspell dictionary directory may contain a {@code settings.yml} which holds dictionary specific settings. Default  * values for these settings are defined in the given default settings.  *  * @param dir      The directory of the dictionary  * @param defaults The default settings for this dictionary  * @return The resolved settings.  */ ;/**  * Each hunspell dictionary directory may contain a {@code settings.yml} which holds dictionary specific settings. Default  * values for these settings are defined in the given default settings.  *  * @param dir      The directory of the dictionary  * @param defaults The default settings for this dictionary  * @return The resolved settings.  */ private static Settings loadDictionarySettings(Path dir, Settings defaults) throws IOException {     Path file = dir.resolve("settings.yml").     if (Files.exists(file)) {         return Settings.builder().loadFromPath(file).put(defaults).build().     }     file = dir.resolve("settings.json").     if (Files.exists(file)) {         return Settings.builder().loadFromPath(file).put(defaults).build().     }     return defaults. }
