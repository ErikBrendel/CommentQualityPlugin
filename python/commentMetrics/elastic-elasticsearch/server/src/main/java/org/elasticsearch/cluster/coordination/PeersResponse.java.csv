commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalWriteable(masterNode.orElse(null)).     out.writeList(knownPeers).     out.writeLong(term). }
true;public;0;3;/**  * @return the node that is currently leading, according to the responding node.  */ ;/**  * @return the node that is currently leading, according to the responding node.  */ public Optional<DiscoveryNode> getMasterNode() {     return masterNode. }
true;public;0;3;/**  * @return the collection of known peers of the responding node, or an empty collection if the responding node believes there  * is currently a leader.  */ ;/**  * @return the collection of known peers of the responding node, or an empty collection if the responding node believes there  * is currently a leader.  */ public List<DiscoveryNode> getKnownPeers() {     return knownPeers. }
true;public;0;3;/**  * @return the current term of the responding node. If the responding node is the leader then this is the term in which it is  * currently leading.  */ ;/**  * @return the current term of the responding node. If the responding node is the leader then this is the term in which it is  * currently leading.  */ public long getTerm() {     return term. }
false;public;0;8;;@Override public String toString() {     return "PeersResponse{" + "masterNode=" + masterNode + ", knownPeers=" + knownPeers + ", term=" + term + '}'. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     PeersResponse that = (PeersResponse) o.     return term == that.term && Objects.equals(masterNode, that.masterNode) && Objects.equals(knownPeers, that.knownPeers). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(masterNode, knownPeers, term). }
