commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected List<NodeStats> readNodesFrom(StreamInput in) throws IOException {     return in.readList(NodeStats::readNodeStats). }
false;protected;2;4;;@Override protected void writeNodesTo(StreamOutput out, List<NodeStats> nodes) throws IOException {     out.writeStreamableList(nodes). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject("nodes").     for (NodeStats nodeStats : getNodes()) {         builder.startObject(nodeStats.getNode().getId()).         builder.field("timestamp", nodeStats.getTimestamp()).         nodeStats.toXContent(builder, params).         builder.endObject().     }     builder.endObject().     return builder. }
false;public;0;12;;@Override public String toString() {     try {         XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint().         builder.startObject().         toXContent(builder, EMPTY_PARAMS).         builder.endObject().         return Strings.toString(builder).     } catch (IOException e) {         return "{ \"error\" : \"" + e.getMessage() + "\"}".     } }
