# id;timestamp;commentText;codeText;commentWords;codeWords
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1544081506;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1544203400;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1544254415;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1544789742;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1549608646;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;1551256179;Invoked on receipt of a PeersResponse from a node that believes it's an active leader, which this node should therefore try and join._Note that invocations of this method are not synchronised. By the time it is called we may have been deactivated.;protected abstract void onActiveMasterFound(DiscoveryNode masterNode, long term)_;invoked,on,receipt,of,a,peers,response,from,a,node,that,believes,it,s,an,active,leader,which,this,node,should,therefore,try,and,join,note,that,invocations,of,this,method,are,not,synchronised,by,the,time,it,is,called,we,may,have,been,deactivated;protected,abstract,void,on,active,master,found,discovery,node,master,node,long,term
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1544081506;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1544203400;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1544254415;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1544789742;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1549608646;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> protected abstract void onFoundPeersUpdated()_;1551256179;Invoked when the set of found peers changes. Note that invocations of this method are not fully synchronised, so we only guarantee_that the change to the set of found peers happens before this method is invoked. If there are multiple concurrent changes then there_will be multiple concurrent invocations of this method, with no guarantee as to their order. For this reason we do not pass the_updated set of peers as an argument to this method, leaving it to the implementation to call getFoundPeers() with appropriate_synchronisation to avoid lost updates. Also, by the time this method is invoked we may have been deactivated.;protected abstract void onFoundPeersUpdated()_;invoked,when,the,set,of,found,peers,changes,note,that,invocations,of,this,method,are,not,fully,synchronised,so,we,only,guarantee,that,the,change,to,the,set,of,found,peers,happens,before,this,method,is,invoked,if,there,are,multiple,concurrent,changes,then,there,will,be,multiple,concurrent,invocations,of,this,method,with,no,guarantee,as,to,their,order,for,this,reason,we,do,not,pass,the,updated,set,of,peers,as,an,argument,to,this,method,leaving,it,to,the,implementation,to,call,get,found,peers,with,appropriate,synchronisation,to,avoid,lost,updates,also,by,the,time,this,method,is,invoked,we,may,have,been,deactivated;protected,abstract,void,on,found,peers,updated
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1544081506;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1544203400;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1544254415;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1544789742;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1549608646;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> TransportAddressConnector -> void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;1551256179;Identify the node at the given address and, if it is a master node and not the local node then establish a full connection to it.;void connectToRemoteMasterNode(TransportAddress transportAddress, ActionListener<DiscoveryNode> listener)_;identify,the,node,at,the,given,address,and,if,it,is,a,master,node,and,not,the,local,node,then,establish,a,full,connection,to,it;void,connect,to,remote,master,node,transport,address,transport,address,action,listener,discovery,node,listener
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1544081506;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1544203400;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1544254415;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1544789742;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1549608646;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> ConfiguredHostsResolver -> void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;1551256179;Attempt to resolve the configured unicast hosts list to a list of transport addresses.__@param consumer Consumer for the resolved list. May not be called if an error occurs or if another resolution attempt is in_progress.;void resolveConfiguredHosts(Consumer<List<TransportAddress>> consumer)_;attempt,to,resolve,the,configured,unicast,hosts,list,to,a,list,of,transport,addresses,param,consumer,consumer,for,the,resolved,list,may,not,be,called,if,an,error,occurs,or,if,another,resolution,attempt,is,in,progress;void,resolve,configured,hosts,consumer,list,transport,address,consumer
PeerFinder -> private boolean handleWakeUp();1544081506;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        boolean peersRemoved = false___        for (final Peer peer : peersByAddress.values()) {_            peersRemoved = peer.handleWakeUp() || peersRemoved_ _        }__        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,boolean,peers,removed,false,for,final,peer,peer,peers,by,address,values,peers,removed,peer,handle,wake,up,peers,removed,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
PeerFinder -> private boolean handleWakeUp();1544203400;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        boolean peersRemoved = false___        for (final Peer peer : peersByAddress.values()) {_            peersRemoved = peer.handleWakeUp() || peersRemoved_ _        }__        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                lastResolvedAddresses = providedAddresses__                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,boolean,peers,removed,false,for,final,peer,peer,peers,by,address,values,peers,removed,peer,handle,wake,up,peers,removed,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,last,resolved,addresses,provided,addresses,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
PeerFinder -> private boolean handleWakeUp();1544254415;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        boolean peersRemoved = false___        for (final Peer peer : peersByAddress.values()) {_            peersRemoved = peer.handleWakeUp() || peersRemoved_ _        }__        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                lastResolvedAddresses = providedAddresses__                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,boolean,peers,removed,false,for,final,peer,peer,peers,by,address,values,peers,removed,peer,handle,wake,up,peers,removed,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,last,resolved,addresses,provided,addresses,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
PeerFinder -> private boolean handleWakeUp();1544789742;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        final boolean peersRemoved = peersByAddress.values().removeIf(Peer::handleWakeUp)___        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                lastResolvedAddresses = providedAddresses__                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,final,boolean,peers,removed,peers,by,address,values,remove,if,peer,handle,wake,up,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,last,resolved,addresses,provided,addresses,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
PeerFinder -> private boolean handleWakeUp();1549608646;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        final boolean peersRemoved = peersByAddress.values().removeIf(Peer::handleWakeUp)___        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                lastResolvedAddresses = providedAddresses__                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,final,boolean,peers,removed,peers,by,address,values,remove,if,peer,handle,wake,up,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,last,resolved,addresses,provided,addresses,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
PeerFinder -> private boolean handleWakeUp();1551256179;@return whether any peers were removed due to disconnection;private boolean handleWakeUp() {_        assert holdsLock() : "PeerFinder mutex not held"___        final boolean peersRemoved = peersByAddress.values().removeIf(Peer::handleWakeUp)___        if (active == false) {_            logger.trace("not active")__            return peersRemoved__        }__        logger.trace("probing master nodes from cluster state: {}", lastAcceptedNodes)__        for (ObjectCursor<DiscoveryNode> discoveryNodeObjectCursor : lastAcceptedNodes.getMasterNodes().values()) {_            startProbe(discoveryNodeObjectCursor.value.getAddress())__        }__        configuredHostsResolver.resolveConfiguredHosts(providedAddresses -> {_            synchronized (mutex) {_                lastResolvedAddresses = providedAddresses__                logger.trace("probing resolved transport addresses {}", providedAddresses)__                providedAddresses.forEach(this::startProbe)__            }_        })___        transportService.getThreadPool().scheduleUnlessShuttingDown(findPeersInterval, Names.GENERIC, new AbstractRunnable() {_            @Override_            public boolean isForceExecution() {_                return true__            }__            @Override_            public void onFailure(Exception e) {_                assert false : e__                logger.debug("unexpected exception in wakeup", e)__            }__            @Override_            protected void doRun() {_                synchronized (mutex) {_                    if (handleWakeUp() == false) {_                        return__                    }_                }_                onFoundPeersUpdated()__            }__            @Override_            public String toString() {_                return "PeerFinder handling wakeup"__            }_        })___        return peersRemoved__    };return,whether,any,peers,were,removed,due,to,disconnection;private,boolean,handle,wake,up,assert,holds,lock,peer,finder,mutex,not,held,final,boolean,peers,removed,peers,by,address,values,remove,if,peer,handle,wake,up,if,active,false,logger,trace,not,active,return,peers,removed,logger,trace,probing,master,nodes,from,cluster,state,last,accepted,nodes,for,object,cursor,discovery,node,discovery,node,object,cursor,last,accepted,nodes,get,master,nodes,values,start,probe,discovery,node,object,cursor,value,get,address,configured,hosts,resolver,resolve,configured,hosts,provided,addresses,synchronized,mutex,last,resolved,addresses,provided,addresses,logger,trace,probing,resolved,transport,addresses,provided,addresses,provided,addresses,for,each,this,start,probe,transport,service,get,thread,pool,schedule,unless,shutting,down,find,peers,interval,names,generic,new,abstract,runnable,override,public,boolean,is,force,execution,return,true,override,public,void,on,failure,exception,e,assert,false,e,logger,debug,unexpected,exception,in,wakeup,e,override,protected,void,do,run,synchronized,mutex,if,handle,wake,up,false,return,on,found,peers,updated,override,public,string,to,string,return,peer,finder,handling,wakeup,return,peers,removed
