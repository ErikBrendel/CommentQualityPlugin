commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the name of the index to be created  */ ;/**  * Sets the name of the index to be created  */ public CreateIndexRequestBuilder setIndex(String index) {     request.index(index).     return this. }
true;public;1;4;/**  * The settings to create the index with.  */ ;/**  * The settings to create the index with.  */ public CreateIndexRequestBuilder setSettings(Settings settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * The settings to create the index with.  */ ;/**  * The settings to create the index with.  */ public CreateIndexRequestBuilder setSettings(Settings.Builder settings) {     request.settings(settings).     return this. }
true;public;1;4;/**  * Allows to set the settings using a json builder.  */ ;/**  * Allows to set the settings using a json builder.  */ public CreateIndexRequestBuilder setSettings(XContentBuilder builder) {     request.settings(builder).     return this. }
true;public;2;4;/**  * The settings to create the index with (either json or yaml format)  */ ;/**  * The settings to create the index with (either json or yaml format)  */ public CreateIndexRequestBuilder setSettings(String source, XContentType xContentType) {     request.settings(source, xContentType).     return this. }
true;public;1;4;/**  * The settings to create the index with (either json/yaml/properties format)  */ ;/**  * The settings to create the index with (either json/yaml/properties format)  */ public CreateIndexRequestBuilder setSettings(Map<String, ?> source) {     request.settings(source).     return this. }
true;public;3;4;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  * @param xContentType The content type of the source  */ ;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  * @param xContentType The content type of the source  */ public CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType) {     request.mapping(type, source, xContentType).     return this. }
true;public;1;4;/**  * The cause for this index creation.  */ ;/**  * The cause for this index creation.  */ public CreateIndexRequestBuilder setCause(String cause) {     request.cause(cause).     return this. }
true;public;2;4;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ ;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ public CreateIndexRequestBuilder addMapping(String type, XContentBuilder source) {     request.mapping(type, source).     return this. }
true;public;2;4;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ ;/**  * Adds mapping that will be added when the index gets created.  *  * @param type   The mapping type  * @param source The mapping source  */ public CreateIndexRequestBuilder addMapping(String type, Map<String, Object> source) {     request.mapping(type, source).     return this. }
true;public;2;4;/**  * A specialized simplified mapping source method, takes the form of simple properties definition:  * ("field1", "type=string,store=true").  */ ;/**  * A specialized simplified mapping source method, takes the form of simple properties definition:  * ("field1", "type=string,store=true").  */ public CreateIndexRequestBuilder addMapping(String type, Object... source) {     request.mapping(type, source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public CreateIndexRequestBuilder setAliases(Map<String, ?> source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public CreateIndexRequestBuilder setAliases(String source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public CreateIndexRequestBuilder setAliases(XContentBuilder source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Sets the aliases that will be associated with the index when it gets created  */ ;/**  * Sets the aliases that will be associated with the index when it gets created  */ public CreateIndexRequestBuilder setAliases(BytesReference source) {     request.aliases(source).     return this. }
true;public;1;4;/**  * Adds an alias that will be associated with the index when it gets created  */ ;/**  * Adds an alias that will be associated with the index when it gets created  */ public CreateIndexRequestBuilder addAlias(Alias alias) {     request.alias(alias).     return this. }
true;public;2;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(String source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;2;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;2;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType) {     request.source(source, xContentType).     return this. }
true;public;4;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType) {     request.source(source, offset, length, xContentType).     return this. }
true;public;1;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(Map<String, ?> source) {     request.source(source, LoggingDeprecationHandler.INSTANCE).     return this. }
true;public;1;4;/**  * Sets the settings and mappings as a single source.  */ ;/**  * Sets the settings and mappings as a single source.  */ public CreateIndexRequestBuilder setSource(XContentBuilder source) {     request.source(source).     return this. }
true;public;1;4;/**  * Sets the number of shard copies that should be active for index creation to return.  * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy  * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to  * wait for all shards (primary and all replicas) to be active before returning.  * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ ;/**  * Sets the number of shard copies that should be active for index creation to return.  * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy  * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to  * wait for all shards (primary and all replicas) to be active before returning.  * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any  * non-negative integer, up to the number of copies per shard (number of replicas + 1),  * to wait for the desired amount of shard copies to become active before returning.  * Index creation will only wait up until the timeout value for the number of shard copies  * to be active before returning.  Check {@link CreateIndexResponse#isShardsAcknowledged()} to  * determine if the requisite shard copies were all started before returning or timing out.  *  * @param waitForActiveShards number of active shard copies to wait on  */ public CreateIndexRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {     request.waitForActiveShards(waitForActiveShards).     return this. }
true;public;1;3;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {     return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
