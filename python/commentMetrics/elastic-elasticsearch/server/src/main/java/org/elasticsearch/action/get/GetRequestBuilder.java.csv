commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the type of the document to fetch. If set to {@code null}, will use just the id to fetch the  * first document matching it.  */ ;/**  * Sets the type of the document to fetch. If set to {@code null}, will use just the id to fetch the  * first document matching it.  */ public GetRequestBuilder setType(@Nullable String type) {     request.type(type).     return this. }
true;public;1;4;/**  * Sets the id of the document to fetch.  */ ;/**  * Sets the id of the document to fetch.  */ public GetRequestBuilder setId(String id) {     request.id(id).     return this. }
true;public;1;4;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ ;/**  * Controls the shard routing of the request. Using this value to hash the shard  * and not the id.  */ public GetRequestBuilder setRouting(String routing) {     request.routing(routing).     return this. }
true;public;1;4;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ ;/**  * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to  * {@code _local} to prefer local shards or a custom value, which guarantees that the same order  * will be used across different requests.  */ public GetRequestBuilder setPreference(String preference) {     request.preference(preference).     return this. }
true;public;1;4;/**  * Explicitly specify the fields that will be returned. By default, the {@code _source}  * field will be returned.  */ ;/**  * Explicitly specify the fields that will be returned. By default, the {@code _source}  * field will be returned.  */ public GetRequestBuilder setStoredFields(String... fields) {     request.storedFields(fields).     return this. }
true;public;1;5;/**  * Indicates whether the response should contain the stored _source.  *  * @return this for chaining  */ ;/**  * Indicates whether the response should contain the stored _source.  *  * @return this for chaining  */ public GetRequestBuilder setFetchSource(boolean fetch) {     FetchSourceContext context = request.fetchSourceContext() == null ? FetchSourceContext.FETCH_SOURCE : request.fetchSourceContext().     request.fetchSourceContext(new FetchSourceContext(fetch, context.includes(), context.excludes())).     return this. }
true;public;2;5;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param include An optional include (optionally wildcarded) pattern to filter the returned _source  * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source  */ public GetRequestBuilder setFetchSource(@Nullable String include, @Nullable String exclude) {     return setFetchSource(include == null ? Strings.EMPTY_ARRAY : new String[] { include }, exclude == null ? Strings.EMPTY_ARRAY : new String[] { exclude }). }
true;public;2;5;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ ;/**  * Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard  * elements.  *  * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source  * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source  */ public GetRequestBuilder setFetchSource(@Nullable String[] includes, @Nullable String[] excludes) {     FetchSourceContext context = request.fetchSourceContext() == null ? FetchSourceContext.FETCH_SOURCE : request.fetchSourceContext().     request.fetchSourceContext(new FetchSourceContext(context.fetchSource(), includes, excludes)).     return this. }
true;public;1;4;/**  * Should a refresh be executed before this get operation causing the operation to  * return the latest value. Note, heavy get should not set this to {@code true}. Defaults  * to {@code false}.  */ ;/**  * Should a refresh be executed before this get operation causing the operation to  * return the latest value. Note, heavy get should not set this to {@code true}. Defaults  * to {@code false}.  */ public GetRequestBuilder setRefresh(boolean refresh) {     request.refresh(refresh).     return this. }
false;public;1;4;;public GetRequestBuilder setRealtime(boolean realtime) {     request.realtime(realtime).     return this. }
true;public;1;4;/**  * Sets the version, which will cause the get operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ ;/**  * Sets the version, which will cause the get operation to only be performed if a matching  * version exists and no changes happened on the doc since then.  */ public GetRequestBuilder setVersion(long version) {     request.version(version).     return this. }
true;public;1;4;/**  * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.  */ ;/**  * Sets the versioning type. Defaults to {@link org.elasticsearch.index.VersionType#INTERNAL}.  */ public GetRequestBuilder setVersionType(VersionType versionType) {     request.versionType(versionType).     return this. }
