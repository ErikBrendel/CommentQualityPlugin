# id;timestamp;commentText;codeText;commentWords;codeWords
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1524684173;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1525334055;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1533738061;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1541592065;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1547451165;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> Option -> public Text getText();1551177682;@return The actual suggested text.;public Text getText() {_                    return text__                };return,the,actual,suggested,text;public,text,get,text,return,text
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1524684173;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1525334055;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1533738061;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1541592065;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1547451165;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> public Suggestion<T> reduce(List<Suggestion<T>> toReduce);1551177682;Merges the result of another suggestion into this suggestion._For internal usage.;public Suggestion<T> reduce(List<Suggestion<T>> toReduce) {_            if (toReduce.size() == 1) {_                return toReduce.get(0)__            } else if (toReduce.isEmpty()) {_                return null__            }_            Suggestion<T> leader = toReduce.get(0)__            List<T> entries = leader.entries__            final int size = entries.size()__            Comparator<Option> sortComparator = sortComparator()__            List<T> currentEntries = new ArrayList<>()__            for (int i = 0_ i < size_ i++) {_                for (Suggestion<T> suggestion : toReduce) {_                    if(suggestion.entries.size() != size) {_                        throw new IllegalStateException("Can't merge suggest result, this might be caused by suggest calls " +_                                "across multiple indices with different analysis chains. Suggest entries have different sizes actual [" +_                                suggestion.entries.size() + "] expected [" + size +"]")__                    }_                    assert suggestion.name.equals(leader.name)__                    currentEntries.add(suggestion.entries.get(i))__                }_                T entry = (T) entries.get(i).reduce(currentEntries)__                entry.sort(sortComparator)__                entries.set(i, entry)__                currentEntries.clear()__            }_            return leader__        };merges,the,result,of,another,suggestion,into,this,suggestion,for,internal,usage;public,suggestion,t,reduce,list,suggestion,t,to,reduce,if,to,reduce,size,1,return,to,reduce,get,0,else,if,to,reduce,is,empty,return,null,suggestion,t,leader,to,reduce,get,0,list,t,entries,leader,entries,final,int,size,entries,size,comparator,option,sort,comparator,sort,comparator,list,t,current,entries,new,array,list,for,int,i,0,i,size,i,for,suggestion,t,suggestion,to,reduce,if,suggestion,entries,size,size,throw,new,illegal,state,exception,can,t,merge,suggest,result,this,might,be,caused,by,suggest,calls,across,multiple,indices,with,different,analysis,chains,suggest,entries,have,different,sizes,actual,suggestion,entries,size,expected,size,assert,suggestion,name,equals,leader,name,current,entries,add,suggestion,entries,get,i,t,entry,t,entries,get,i,reduce,current,entries,entry,sort,sort,comparator,entries,set,i,entry,current,entries,clear,return,leader
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1524684173;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1525334055;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1533738061;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1541592065;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1547451165;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> Entry -> protected void merge(Entry<O> other);1551177682;Merge any extra fields for this subtype.;protected void merge(Entry<O> other) {_            };merge,any,extra,fields,for,this,subtype;protected,void,merge,entry,o,other
Suggest -> Suggestion -> protected String getType();1524684173;Returns a string representing the type of the suggestion. This type is added to_the suggestion name in the XContent response, so that it can later be used by_REST clients to determine the internal type of the suggestion.;protected String getType() {_            return NAME__        };returns,a,string,representing,the,type,of,the,suggestion,this,type,is,added,to,the,suggestion,name,in,the,xcontent,response,so,that,it,can,later,be,used,by,rest,clients,to,determine,the,internal,type,of,the,suggestion;protected,string,get,type,return,name
Suggest -> Suggestion -> protected String getType();1525334055;Returns a string representing the type of the suggestion. This type is added to_the suggestion name in the XContent response, so that it can later be used by_REST clients to determine the internal type of the suggestion.;protected String getType() {_            return NAME__        };returns,a,string,representing,the,type,of,the,suggestion,this,type,is,added,to,the,suggestion,name,in,the,xcontent,response,so,that,it,can,later,be,used,by,rest,clients,to,determine,the,internal,type,of,the,suggestion;protected,string,get,type,return,name
Suggest -> Suggestion -> public String getName();1524684173;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> public String getName();1525334055;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> public String getName();1533738061;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> public String getName();1541592065;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> public String getName();1547451165;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> public String getName();1551177682;@return The name of the suggestion as is defined in the request.;public String getName() {_            return name__        };return,the,name,of,the,suggestion,as,is,defined,in,the,request;public,string,get,name,return,name
Suggest -> Suggestion -> @Deprecated         public int getWriteableType();1533738061;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.__This class is now serialized as a NamedWriteable and this method only remains for backwards compatibility;@Deprecated_        public int getWriteableType() {_            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network,this,class,is,now,serialized,as,a,named,writeable,and,this,method,only,remains,for,backwards,compatibility;deprecated,public,int,get,writeable,type,return,type
Suggest -> Suggestion -> @Deprecated         public int getWriteableType();1541592065;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.__This class is now serialized as a NamedWriteable and this method only remains for backwards compatibility;@Deprecated_        public int getWriteableType() {_            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network,this,class,is,now,serialized,as,a,named,writeable,and,this,method,only,remains,for,backwards,compatibility;deprecated,public,int,get,writeable,type,return,type
Suggest -> Suggestion -> @Deprecated         public int getWriteableType();1547451165;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.__This class is now serialized as a NamedWriteable and this method only remains for backwards compatibility;@Deprecated_        public int getWriteableType() {_            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network,this,class,is,now,serialized,as,a,named,writeable,and,this,method,only,remains,for,backwards,compatibility;deprecated,public,int,get,writeable,type,return,type
Suggest -> Suggestion -> @Deprecated         public int getWriteableType();1551177682;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.__This class is now serialized as a NamedWriteable and this method only remains for backwards compatibility;@Deprecated_        public int getWriteableType() {_            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network,this,class,is,now,serialized,as,a,named,writeable,and,this,method,only,remains,for,backwards,compatibility;deprecated,public,int,get,writeable,type,return,type
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1524684173;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1525334055;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1533738061;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1541592065;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1547451165;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> public <T extends Suggestion> List<T> filter(Class<T> suggestionType);1551177682;@return only suggestions of type <code>suggestionType</code> contained in this {@link Suggest} instance;public <T extends Suggestion> List<T> filter(Class<T> suggestionType) {_         return suggestions.stream()_            .filter(suggestion -> suggestion.getClass() == suggestionType)_            .map(suggestion -> (T) suggestion)_            .collect(Collectors.toList())__    };return,only,suggestions,of,type,code,suggestion,type,code,contained,in,this,link,suggest,instance;public,t,extends,suggestion,list,t,filter,class,t,suggestion,type,return,suggestions,stream,filter,suggestion,suggestion,get,class,suggestion,type,map,suggestion,t,suggestion,collect,collectors,to,list
Suggest -> Suggestion -> Entry -> public Text getText();1524684173;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public Text getText();1525334055;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public Text getText();1533738061;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public Text getText();1541592065;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public Text getText();1547451165;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public Text getText();1551177682;@return the text (analyzed by suggest analyzer) originating from the suggest text. Usually this is a_single term.;public Text getText() {_                return text__            };return,the,text,analyzed,by,suggest,analyzer,originating,from,the,suggest,text,usually,this,is,a,single,term;public,text,get,text,return,text
Suggest -> Suggestion -> Entry -> public int getLength();1524684173;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> Suggestion -> Entry -> public int getLength();1525334055;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> Suggestion -> Entry -> public int getLength();1533738061;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> Suggestion -> Entry -> public int getLength();1541592065;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> Suggestion -> Entry -> public int getLength();1547451165;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> Suggestion -> Entry -> public int getLength();1551177682;@return the length (not analyzed) for this entry in the suggest text.;public int getLength() {_                return length__            };return,the,length,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,length,return,length
Suggest -> public int size();1524684173;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> public int size();1525334055;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> public int size();1533738061;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> public int size();1541592065;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> public int size();1547451165;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> public int size();1551177682;The number of suggestions in this {@link Suggest} result;public int size() {_        return suggestions.size()__    };the,number,of,suggestions,in,this,link,suggest,result;public,int,size,return,suggestions,size
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1524684173;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1525334055;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1533738061;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1541592065;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1547451165;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> Suggestion -> Entry -> Option -> public float getScore();1551177682;@return The score based on the edit distance difference between the suggested term and the_term in the suggest text.;public float getScore() {_                    return score__                };return,the,score,based,on,the,edit,distance,difference,between,the,suggested,term,and,the,term,in,the,suggest,text;public,float,get,score,return,score
Suggest -> public boolean hasScoreDocs();1524684173;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> public boolean hasScoreDocs();1525334055;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> public boolean hasScoreDocs();1533738061;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> public boolean hasScoreDocs();1541592065;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> public boolean hasScoreDocs();1547451165;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> public boolean hasScoreDocs();1551177682;Whether any suggestions had query hits;public boolean hasScoreDocs() {_        return hasScoreDocs__    };whether,any,suggestions,had,query,hits;public,boolean,has,score,docs,return,has,score,docs
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1524684173;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1525334055;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1533738061;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1541592065;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1547451165;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> Entry -> Option -> public Text getHighlighted();1551177682;@return Copy of suggested text with changes from user supplied text highlighted.;public Text getHighlighted() {_                    return highlighted__                };return,copy,of,suggested,text,with,changes,from,user,supplied,text,highlighted;public,text,get,highlighted,return,highlighted
Suggest -> Suggestion -> public List<T> getEntries();1524684173;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> public List<T> getEntries();1525334055;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> public List<T> getEntries();1533738061;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> public List<T> getEntries();1541592065;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> public List<T> getEntries();1547451165;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> public List<T> getEntries();1551177682;@return The entries for this suggestion.;public List<T> getEntries() {_            return entries__        };return,the,entries,for,this,suggestion;public,list,t,get,entries,return,entries
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1524684173;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1525334055;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1533738061;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1541592065;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1547451165;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> Suggestion -> Entry -> Option -> public boolean collateMatch();1551177682;@return true if collation has found a match for the entry._if collate was not set, the value defaults to <code>true</code>;public boolean collateMatch() {_                    return (collateMatch != null) ? collateMatch : true__                };return,true,if,collation,has,found,a,match,for,the,entry,if,collate,was,not,set,the,value,defaults,to,code,true,code;public,boolean,collate,match,return,collate,match,null,collate,match,true
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1524684173;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1525334055;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1533738061;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1541592065;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1547451165;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> public static Suggest fromXContent(XContentParser parser) throws IOException;1551177682;this parsing method assumes that the leading "suggest" field name has already been parsed by the caller;public static Suggest fromXContent(XContentParser parser) throws IOException {_        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation)__        List<Suggestion<? extends Entry<? extends Option>>> suggestions = new ArrayList<>()__        while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {_            ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation)__            String currentField = parser.currentName()__            ensureExpectedToken(XContentParser.Token.START_ARRAY, parser.nextToken(), parser::getTokenLocation)__            Suggestion<? extends Entry<? extends Option>> suggestion = Suggestion.fromXContent(parser)__            if (suggestion != null) {_                suggestions.add(suggestion)__            } else {_                throw new ParsingException(parser.getTokenLocation(),_                        String.format(Locale.ROOT, "Could not parse suggestion keyed as [%s]", currentField))__            }_        }_        return new Suggest(suggestions)__    };this,parsing,method,assumes,that,the,leading,suggest,field,name,has,already,been,parsed,by,the,caller;public,static,suggest,from,xcontent,xcontent,parser,parser,throws,ioexception,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,list,suggestion,extends,entry,extends,option,suggestions,new,array,list,while,parser,next,token,xcontent,parser,token,ensure,expected,token,xcontent,parser,token,parser,current,token,parser,get,token,location,string,current,field,parser,current,name,ensure,expected,token,xcontent,parser,token,parser,next,token,parser,get,token,location,suggestion,extends,entry,extends,option,suggestion,suggestion,from,xcontent,parser,if,suggestion,null,suggestions,add,suggestion,else,throw,new,parsing,exception,parser,get,token,location,string,format,locale,root,could,not,parse,suggestion,keyed,as,s,current,field,return,new,suggest,suggestions
Suggest -> Suggestion -> public int getWriteableType();1524684173;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.;public int getWriteableType() { _            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network;public,int,get,writeable,type,return,type
Suggest -> Suggestion -> public int getWriteableType();1525334055;Returns a integer representing the type of the suggestion. This is used for_internal serialization over the network.;public int getWriteableType() { _            return TYPE__        };returns,a,integer,representing,the,type,of,the,suggestion,this,is,used,for,internal,serialization,over,the,network;public,int,get,writeable,type,return,type
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1524684173;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1525334055;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1533738061;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1541592065;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1547451165;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> Entry -> public List<O> getOptions();1551177682;@return The suggested options for this particular suggest entry. If there are no suggested terms then_an empty list is returned.;public List<O> getOptions() {_                return options__            };return,the,suggested,options,for,this,particular,suggest,entry,if,there,are,no,suggested,terms,then,an,empty,list,is,returned;public,list,o,get,options,return,options
Suggest -> Suggestion -> public int getSize();1524684173;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public int getSize();1525334055;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public int getSize();1533738061;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public int getSize();1541592065;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public int getSize();1547451165;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public int getSize();1551177682;@return The number of requested suggestion option size;public int getSize() {_            return size__        };return,the,number,of,requested,suggestion,option,size;public,int,get,size,return,size
Suggest -> Suggestion -> public void trim();1524684173;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> public void trim();1525334055;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> public void trim();1533738061;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> public void trim();1541592065;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> public void trim();1547451165;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> public void trim();1551177682;Trims the number of options per suggest text term to the requested size._For internal usage.;public void trim() {_            for (Entry<?> entry : entries) {_                entry.trim(size)__            }_        };trims,the,number,of,options,per,suggest,text,term,to,the,requested,size,for,internal,usage;public,void,trim,for,entry,entry,entries,entry,trim,size
Suggest -> Suggestion -> Entry -> public int getOffset();1524684173;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
Suggest -> Suggestion -> Entry -> public int getOffset();1525334055;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
Suggest -> Suggestion -> Entry -> public int getOffset();1533738061;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
Suggest -> Suggestion -> Entry -> public int getOffset();1541592065;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
Suggest -> Suggestion -> Entry -> public int getOffset();1547451165;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
Suggest -> Suggestion -> Entry -> public int getOffset();1551177682;@return the start offset (not analyzed) for this entry in the suggest text.;public int getOffset() {_                return offset__            };return,the,start,offset,not,analyzed,for,this,entry,in,the,suggest,text;public,int,get,offset,return,offset
