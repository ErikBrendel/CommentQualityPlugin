commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static String validateMissingValue(String missing) {     if ("_last".equals(missing) == false && "_first".equals(missing) == false) {         throw new IllegalArgumentException("Illegal missing value:[" + missing + "], " + "must be one of [_last, _first]").     }     return missing. }
false;private,static;1;7;;private static SortOrder parseOrderMode(String value) {     try {         return SortOrder.fromString(value).     } catch (Exception e) {         throw new IllegalArgumentException("Illegal sort order:" + value).     } }
false;private,static;1;8;;private static MultiValueMode parseMultiValueMode(String value) {     MultiValueMode mode = MultiValueMode.fromString(value).     if (mode != MultiValueMode.MAX && mode != MultiValueMode.MIN) {         throw new IllegalArgumentException("Illegal index sort mode:[" + mode + "], " + "must be one of [" + MultiValueMode.MAX + ", " + MultiValueMode.MIN + "]").     }     return mode. }
true;public;0;3;/**  * Returns true if the index should be sorted  */ ;/**  * Returns true if the index should be sorted  */ public boolean hasIndexSort() {     return sortSpecs.length > 0. }
true;public;2;32;/**  * Builds the {@link Sort} order from the settings for this index  * or returns null if this index has no sort.  */ ;/**  * Builds the {@link Sort} order from the settings for this index  * or returns null if this index has no sort.  */ public Sort buildIndexSort(Function<String, MappedFieldType> fieldTypeLookup, Function<MappedFieldType, IndexFieldData<?>> fieldDataLookup) {     if (hasIndexSort() == false) {         return null.     }     final SortField[] sortFields = new SortField[sortSpecs.length].     for (int i = 0. i < sortSpecs.length. i++) {         FieldSortSpec sortSpec = sortSpecs[i].         final MappedFieldType ft = fieldTypeLookup.apply(sortSpec.field).         if (ft == null) {             throw new IllegalArgumentException("unknown index sort field:[" + sortSpec.field + "]").         }         boolean reverse = sortSpec.order == null ? false : (sortSpec.order == SortOrder.DESC).         MultiValueMode mode = sortSpec.mode.         if (mode == null) {             mode = reverse ? MultiValueMode.MAX : MultiValueMode.MIN.         }         IndexFieldData<?> fieldData.         try {             fieldData = fieldDataLookup.apply(ft).         } catch (Exception e) {             throw new IllegalArgumentException("docvalues not found for index sort field:[" + sortSpec.field + "]").         }         if (fieldData == null) {             throw new IllegalArgumentException("docvalues not found for index sort field:[" + sortSpec.field + "]").         }         sortFields[i] = fieldData.sortField(sortSpec.missingValue, mode, null, reverse).         validateIndexSortField(sortFields[i]).     }     return new Sort(sortFields). }
false;private;1;6;;private void validateIndexSortField(SortField sortField) {     SortField.Type type = getSortFieldType(sortField).     if (ALLOWED_INDEX_SORT_TYPES.contains(type) == false) {         throw new IllegalArgumentException("invalid index sort field:[" + sortField.getField() + "]").     } }
false;public,static;1;9;;public static SortField.Type getSortFieldType(SortField sortField) {     if (sortField instanceof SortedSetSortField) {         return SortField.Type.STRING.     } else if (sortField instanceof SortedNumericSortField) {         return ((SortedNumericSortField) sortField).getNumericType().     } else {         return sortField.getType().     } }
