commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ReindexRequest self() {     return this. }
false;public;0;36;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException e = super.validate().     if (getSearchRequest().indices() == null || getSearchRequest().indices().length == 0) {         e = addValidationError("use _all if you really want to copy from all existing indexes", e).     }     if (getSearchRequest().source().fetchSource() != null && getSearchRequest().source().fetchSource().fetchSource() == false) {         e = addValidationError("_source:false is not supported in this context", e).     }     /*          * Note that we don't call index's validator - it won't work because          * we'll be filling in portions of it as we receive the docs. But we can          * validate some things so we do that below.          */     if (destination.index() == null) {         e = addValidationError("index must be specified", e).         return e.     }     if (false == routingIsValid()) {         e = addValidationError("routing must be unset, [keep], [discard] or [=<some new value>]", e).     }     if (destination.versionType() == INTERNAL) {         if (destination.version() != Versions.MATCH_ANY && destination.version() != Versions.MATCH_DELETED) {             e = addValidationError("unsupported version for internal versioning [" + destination.version() + ']', e).         }     }     if (getRemoteInfo() != null) {         if (getSearchRequest().source().query() != null) {             e = addValidationError("reindex from remote sources should use RemoteInfo's query instead of source's query", e).         }         if (getSlices() == AbstractBulkByScrollRequest.AUTO_SLICES || getSlices() > 1) {             e = addValidationError("reindex from remote sources doesn't support slices > 1 but was [" + getSlices() + "]", e).         }     }     return e. }
false;private;0;12;;private boolean routingIsValid() {     if (destination.routing() == null || destination.routing().startsWith("=")) {         return true.     }     switch(destination.routing()) {         case "keep":         case "discard":             return true.         default:             return false.     } }
true;public;1;6;/**  * Set the indices which will act as the source for the ReindexRequest  */ ;/**  * Set the indices which will act as the source for the ReindexRequest  */ public ReindexRequest setSourceIndices(String... sourceIndices) {     if (sourceIndices != null) {         this.getSearchRequest().indices(sourceIndices).     }     return this. }
true;public;1;6;/**  * Set the document types which need to be copied from the source indices  */ ;/**  * Set the document types which need to be copied from the source indices  */ public ReindexRequest setSourceDocTypes(String... docTypes) {     if (docTypes != null) {         this.getSearchRequest().types(docTypes).     }     return this. }
true;public;1;4;/**  * Sets the scroll size for setting how many documents are to be processed in one batch during reindex  */ ;/**  * Sets the scroll size for setting how many documents are to be processed in one batch during reindex  */ public ReindexRequest setSourceBatchSize(int size) {     this.getSearchRequest().source().size(size).     return this. }
true;public;1;6;/**  * Set the query for selecting documents from the source indices  */ ;/**  * Set the query for selecting documents from the source indices  */ public ReindexRequest setSourceQuery(QueryBuilder queryBuilder) {     if (queryBuilder != null) {         this.getSearchRequest().source().query(queryBuilder).     }     return this. }
true;public;2;4;/**  * Add a sort against the given field name.  *  * @param name The name of the field to sort by  * @param order The order in which to sort  */ ;/**  * Add a sort against the given field name.  *  * @param name The name of the field to sort by  * @param order The order in which to sort  */ public ReindexRequest addSortField(String name, SortOrder order) {     this.getSearchRequest().source().sort(name, order).     return this. }
true;public;1;6;/**  * Set the target index for the ReindexRequest  */ ;/**  * Set the target index for the ReindexRequest  */ public ReindexRequest setDestIndex(String destIndex) {     if (destIndex != null) {         this.getDestination().index(destIndex).     }     return this. }
true;public;1;4;/**  * Set the document type for the destination index  */ ;/**  * Set the document type for the destination index  */ public ReindexRequest setDestDocType(String docType) {     this.getDestination().type(docType).     return this. }
true;public;1;4;/**  * Set the routing to decide which shard the documents need to be routed to  */ ;/**  * Set the routing to decide which shard the documents need to be routed to  */ public ReindexRequest setDestRouting(String routing) {     this.getDestination().routing(routing).     return this. }
true;public;1;4;/**  * Set the version type for the target index. A {@link VersionType#EXTERNAL} helps preserve the version  * if the document already existed in the target index.  */ ;/**  * Set the version type for the target index. A {@link VersionType#EXTERNAL} helps preserve the version  * if the document already existed in the target index.  */ public ReindexRequest setDestVersionType(VersionType versionType) {     this.getDestination().versionType(versionType).     return this. }
true;public;1;3;/**  * Allows to set the ingest pipeline for the target index.  */ ;/**  * Allows to set the ingest pipeline for the target index.  */ public void setDestPipeline(String pipelineName) {     this.getDestination().setPipeline(pipelineName). }
true;public;1;4;/**  * Sets the optype on the destination index  * @param opType must be one of {create, index}  */ ;/**  * Sets the optype on the destination index  * @param opType must be one of {create, index}  */ public ReindexRequest setDestOpType(String opType) {     this.getDestination().opType(opType).     return this. }
true;public;1;4;/**  * Set the {@link RemoteInfo} if the source indices are in a remote cluster.  */ ;/**  * Set the {@link RemoteInfo} if the source indices are in a remote cluster.  */ public ReindexRequest setRemoteInfo(RemoteInfo remoteInfo) {     this.remoteInfo = remoteInfo.     return this. }
true;public;0;3;/**  * Gets the target for this reindex request in the for of an {@link IndexRequest}  */ ;/**  * Gets the target for this reindex request in the for of an {@link IndexRequest}  */ public IndexRequest getDestination() {     return destination. }
true;public;0;3;/**  * Get the {@link RemoteInfo} if it was set for this request.  */ ;/**  * Get the {@link RemoteInfo} if it was set for this request.  */ public RemoteInfo getRemoteInfo() {     return remoteInfo. }
false;public;3;6;;@Override public ReindexRequest forSlice(TaskId slicingTask, SearchRequest slice, int totalSlices) {     ReindexRequest sliced = doForSlice(new ReindexRequest(slice, destination, false), slicingTask, totalSlices).     sliced.setRemoteInfo(remoteInfo).     return sliced. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     destination.writeTo(out).     out.writeOptionalWriteable(remoteInfo). }
false;public;0;14;;@Override public String toString() {     StringBuilder b = new StringBuilder().     b.append("reindex from ").     if (remoteInfo != null) {         b.append('[').append(remoteInfo).append(']').     }     searchToString(b).     b.append(" to [").append(destination.index()).append(']').     if (destination.type() != null) {         b.append('[').append(destination.type()).append(']').     }     return b.toString(). }
false;public;2;51;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         // build source         builder.startObject("source").         if (remoteInfo != null) {             builder.field("remote", remoteInfo).             builder.rawField("query", remoteInfo.getQuery().streamInput(), builder.contentType()).         }         builder.array("index", getSearchRequest().indices()).         String[] types = getSearchRequest().types().         if (types.length > 0) {             builder.array("type", types).         }         getSearchRequest().source().innerToXContent(builder, params).         builder.endObject().     }     {         // build destination         builder.startObject("dest").         builder.field("index", getDestination().index()).         String type = getDestination().type().         if (type != null && type.equals(MapperService.SINGLE_MAPPING_NAME) == false) {             builder.field("type", getDestination().type()).         }         if (getDestination().routing() != null) {             builder.field("routing", getDestination().routing()).         }         builder.field("op_type", getDestination().opType().getLowercase()).         if (getDestination().getPipeline() != null) {             builder.field("pipeline", getDestination().getPipeline()).         }         builder.field("version_type", VersionType.toString(getDestination().versionType())).         builder.endObject().     }     {         // Other fields         if (getSize() != -1 || getSize() > 0) {             builder.field("size", getSize()).         }         if (getScript() != null) {             builder.field("script", getScript()).         }         if (isAbortOnVersionConflict() == false) {             builder.field("conflicts", "proceed").         }     }     builder.endObject().     return builder. }
