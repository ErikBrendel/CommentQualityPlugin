commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AnalyzeToken that = (AnalyzeToken) o.     return startOffset == that.startOffset && endOffset == that.endOffset && position == that.position && positionLength == that.positionLength && Objects.equals(term, that.term) && Objects.equals(attributes, that.attributes) && Objects.equals(type, that.type). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(term, startOffset, endOffset, position, positionLength, attributes, type). }
false;public;0;3;;public String getTerm() {     return this.term. }
false;public;0;3;;public int getStartOffset() {     return this.startOffset. }
false;public;0;3;;public int getEndOffset() {     return this.endOffset. }
false;public;0;3;;public int getPosition() {     return this.position. }
false;public;0;3;;public int getPositionLength() {     return this.positionLength. }
false;public;0;3;;public String getType() {     return this.type. }
false;public;0;3;;public Map<String, Object> getAttributes() {     return this.attributes. }
false;public;2;20;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Fields.TOKEN, term).     builder.field(Fields.START_OFFSET, startOffset).     builder.field(Fields.END_OFFSET, endOffset).     builder.field(Fields.TYPE, type).     builder.field(Fields.POSITION, position).     if (positionLength > 1) {         builder.field(Fields.POSITION_LENGTH, positionLength).     }     if (attributes != null && !attributes.isEmpty()) {         Map<String, Object> sortedAttributes = new TreeMap<>(attributes).         for (Map.Entry<String, Object> entity : sortedAttributes.entrySet()) {             builder.field(entity.getKey(), entity.getValue()).         }     }     builder.endObject().     return builder. }
false;public,static;1;5;;public static AnalyzeToken readAnalyzeToken(StreamInput in) throws IOException {     AnalyzeToken analyzeToken = new AnalyzeToken().     analyzeToken.readFrom(in).     return analyzeToken. }
false;public,static;1;43;;public static AnalyzeToken fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation).     String field = null.     String term = "".     int position = -1.     int startOffset = -1.     int endOffset = -1.     int positionLength = 1.     String type = "".     Map<String, Object> attributes = new HashMap<>().     for (XContentParser.Token t = parser.nextToken(). t != XContentParser.Token.END_OBJECT. t = parser.nextToken()) {         if (t == XContentParser.Token.FIELD_NAME) {             field = parser.currentName().             continue.         }         if (Fields.TOKEN.equals(field)) {             term = parser.text().         } else if (Fields.POSITION.equals(field)) {             position = parser.intValue().         } else if (Fields.START_OFFSET.equals(field)) {             startOffset = parser.intValue().         } else if (Fields.END_OFFSET.equals(field)) {             endOffset = parser.intValue().         } else if (Fields.POSITION_LENGTH.equals(field)) {             positionLength = parser.intValue().         } else if (Fields.TYPE.equals(field)) {             type = parser.text().         } else {             if (t == XContentParser.Token.VALUE_STRING) {                 attributes.put(field, parser.text()).             } else if (t == XContentParser.Token.VALUE_NUMBER) {                 attributes.put(field, parser.numberValue()).             } else if (t == XContentParser.Token.VALUE_BOOLEAN) {                 attributes.put(field, parser.booleanValue()).             } else if (t == XContentParser.Token.START_OBJECT) {                 attributes.put(field, parser.map()).             } else if (t == XContentParser.Token.START_ARRAY) {                 attributes.put(field, parser.list()).             }         }     }     return new AnalyzeToken(term, position, startOffset, endOffset, positionLength, type, attributes). }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     term = in.readString().     startOffset = in.readInt().     endOffset = in.readInt().     position = in.readVInt().     Integer len = in.readOptionalVInt().     if (len != null) {         positionLength = len.     } else {         positionLength = 1.     }     type = in.readOptionalString().     attributes = in.readMap(). }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(term).     out.writeInt(startOffset).     out.writeInt(endOffset).     out.writeVInt(position).     out.writeOptionalVInt(positionLength > 1 ? positionLength : null).     out.writeOptionalString(type).     out.writeMapWithConsistentOrder(attributes). }
false;public;0;3;;public List<AnalyzeToken> getTokens() {     return this.tokens. }
false;public;0;3;;public DetailAnalyzeResponse detail() {     return this.detail. }
false;public;0;4;;@Override public Iterator<AnalyzeToken> iterator() {     return tokens.iterator(). }
false;public;2;19;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (tokens != null) {         builder.startArray(Fields.TOKENS).         for (AnalyzeToken token : tokens) {             token.toXContent(builder, params).         }         builder.endArray().     }     if (detail != null) {         builder.startObject(Fields.DETAIL).         detail.toXContent(builder, params).         builder.endObject().     }     builder.endObject().     return builder. }
false;public,static;1;3;;public static AnalyzeResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;13;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     tokens = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         tokens.add(AnalyzeToken.readAnalyzeToken(in)).     }     if (tokens.size() == 0) {         tokens = null.     }     detail = in.readOptionalStreamable(DetailAnalyzeResponse::new). }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (tokens != null) {         out.writeVInt(tokens.size()).         for (AnalyzeToken token : tokens) {             token.writeTo(out).         }     } else {         out.writeVInt(0).     }     out.writeOptionalStreamable(detail). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     AnalyzeResponse that = (AnalyzeResponse) o.     return Objects.equals(detail, that.detail) && Objects.equals(tokens, that.tokens). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(detail, tokens). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
