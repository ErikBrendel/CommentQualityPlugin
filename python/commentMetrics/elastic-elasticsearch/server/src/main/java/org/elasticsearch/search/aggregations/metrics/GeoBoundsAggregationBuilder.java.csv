commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static AggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {     return PARSER.parse(parser, new GeoBoundsAggregationBuilder(aggregationName), null). }
false;protected;2;4;;@Override protected AggregationBuilder shallowCopy(Builder factoriesBuilder, Map<String, Object> metaData) {     return new GeoBoundsAggregationBuilder(this, factoriesBuilder, metaData). }
false;protected;1;4;;@Override protected void innerWriteTo(StreamOutput out) throws IOException {     out.writeBoolean(wrapLongitude). }
true;public;1;4;/**  * Set whether to wrap longitudes. Defaults to true.  */ ;/**  * Set whether to wrap longitudes. Defaults to true.  */ public GeoBoundsAggregationBuilder wrapLongitude(boolean wrapLongitude) {     this.wrapLongitude = wrapLongitude.     return this. }
true;public;0;3;/**  * Get whether to wrap longitudes.  */ ;/**  * Get whether to wrap longitudes.  */ public boolean wrapLongitude() {     return wrapLongitude. }
false;protected;4;5;;@Override protected GeoBoundsAggregatorFactory innerBuild(SearchContext context, ValuesSourceConfig<ValuesSource.GeoPoint> config, AggregatorFactory<?> parent, Builder subFactoriesBuilder) throws IOException {     return new GeoBoundsAggregatorFactory(name, config, wrapLongitude, context, parent, subFactoriesBuilder, metaData). }
false;public;2;5;;@Override public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(GeoBoundsAggregator.WRAP_LONGITUDE_FIELD.getPreferredName(), wrapLongitude).     return builder. }
false;protected;0;4;;@Override protected int innerHashCode() {     return Objects.hash(wrapLongitude). }
false;protected;1;5;;@Override protected boolean innerEquals(Object obj) {     GeoBoundsAggregationBuilder other = (GeoBoundsAggregationBuilder) obj.     return Objects.equals(wrapLongitude, other.wrapLongitude). }
false;public;0;4;;@Override public String getType() {     return NAME. }
