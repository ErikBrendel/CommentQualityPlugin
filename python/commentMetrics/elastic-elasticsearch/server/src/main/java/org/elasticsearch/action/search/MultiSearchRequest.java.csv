commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add a search request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ ;/**  * Add a search request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ public MultiSearchRequest add(SearchRequestBuilder request) {     requests.add(request.request()).     return this. }
true;public;1;4;/**  * Add a search request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ ;/**  * Add a search request to execute. Note, the order is important, the search response will be returned in the  * same order as the search requests.  */ public MultiSearchRequest add(SearchRequest request) {     requests.add(request).     return this. }
true;public;0;3;/**  * Returns the amount of search requests specified in this multi search requests are allowed to be ran concurrently.  */ ;/**  * Returns the amount of search requests specified in this multi search requests are allowed to be ran concurrently.  */ public int maxConcurrentSearchRequests() {     return maxConcurrentSearchRequests. }
true;public;1;8;/**  * Sets how many search requests specified in this multi search requests are allowed to be ran concurrently.  */ ;/**  * Sets how many search requests specified in this multi search requests are allowed to be ran concurrently.  */ public MultiSearchRequest maxConcurrentSearchRequests(int maxConcurrentSearchRequests) {     if (maxConcurrentSearchRequests < 1) {         throw new IllegalArgumentException("maxConcurrentSearchRequests must be positive").     }     this.maxConcurrentSearchRequests = maxConcurrentSearchRequests.     return this. }
false;public;0;3;;public List<SearchRequest> requests() {     return this.requests. }
false;public;0;18;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (requests.isEmpty()) {         validationException = addValidationError("no requests added", validationException).     }     for (int i = 0. i < requests.size(). i++) {         ActionRequestValidationException ex = requests.get(i).validate().         if (ex != null) {             if (validationException == null) {                 validationException = new ActionRequestValidationException().             }             validationException.addValidationErrors(ex.validationErrors()).         }     }     return validationException. }
false;public;0;3;;public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;1;4;;public MultiSearchRequest indicesOptions(IndicesOptions indicesOptions) {     this.indicesOptions = indicesOptions.     return this. }
false;public;1;10;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     maxConcurrentSearchRequests = in.readVInt().     int size = in.readVInt().     for (int i = 0. i < size. i++) {         SearchRequest request = new SearchRequest(in).         requests.add(request).     } }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(maxConcurrentSearchRequests).     out.writeVInt(requests.size()).     for (SearchRequest request : requests) {         request.writeTo(out).     } }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     MultiSearchRequest that = (MultiSearchRequest) o.     return maxConcurrentSearchRequests == that.maxConcurrentSearchRequests && Objects.equals(requests, that.requests) && Objects.equals(indicesOptions, that.indicesOptions). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(maxConcurrentSearchRequests, requests, indicesOptions). }
false;public,static;11;109;;public static void readMultiLineFormat(BytesReference data, XContent xContent, CheckedBiConsumer<SearchRequest, XContentParser, IOException> consumer, String[] indices, IndicesOptions indicesOptions, String[] types, String routing, String searchType, Boolean ccsMinimizeRoundtrips, NamedXContentRegistry registry, boolean allowExplicitIndex) throws IOException {     int from = 0.     int length = data.length().     byte marker = xContent.streamSeparator().     while (true) {         int nextMarker = findNextMarker(marker, from, data, length).         if (nextMarker == -1) {             break.         }         // support first line with \n         if (nextMarker == 0) {             from = nextMarker + 1.             continue.         }         SearchRequest searchRequest = new SearchRequest().         if (indices != null) {             searchRequest.indices(indices).         }         if (indicesOptions != null) {             searchRequest.indicesOptions(indicesOptions).         }         if (types != null && types.length > 0) {             searchRequest.types(types).         }         if (routing != null) {             searchRequest.routing(routing).         }         if (searchType != null) {             searchRequest.searchType(searchType).         }         if (ccsMinimizeRoundtrips != null) {             searchRequest.setCcsMinimizeRoundtrips(ccsMinimizeRoundtrips).         }         IndicesOptions defaultOptions = searchRequest.indicesOptions().         // now parse the action         if (nextMarker - from > 0) {             try (InputStream stream = data.slice(from, nextMarker - from).streamInput().                 XContentParser parser = xContent.createParser(registry, LoggingDeprecationHandler.INSTANCE, stream)) {                 Map<String, Object> source = parser.map().                 Object expandWildcards = null.                 Object ignoreUnavailable = null.                 Object ignoreThrottled = null.                 Object allowNoIndices = null.                 for (Map.Entry<String, Object> entry : source.entrySet()) {                     Object value = entry.getValue().                     if ("index".equals(entry.getKey()) || "indices".equals(entry.getKey())) {                         if (!allowExplicitIndex) {                             throw new IllegalArgumentException("explicit index in multi search is not allowed").                         }                         searchRequest.indices(nodeStringArrayValue(value)).                     } else if ("type".equals(entry.getKey()) || "types".equals(entry.getKey())) {                         searchRequest.types(nodeStringArrayValue(value)).                     } else if ("search_type".equals(entry.getKey()) || "searchType".equals(entry.getKey())) {                         searchRequest.searchType(nodeStringValue(value, null)).                     } else if ("ccs_minimize_roundtrips".equals(entry.getKey()) || "ccsMinimizeRoundtrips".equals(entry.getKey())) {                         searchRequest.setCcsMinimizeRoundtrips(nodeBooleanValue(value)).                     } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {                         searchRequest.requestCache(nodeBooleanValue(value, entry.getKey())).                     } else if ("preference".equals(entry.getKey())) {                         searchRequest.preference(nodeStringValue(value, null)).                     } else if ("routing".equals(entry.getKey())) {                         searchRequest.routing(nodeStringValue(value, null)).                     } else if ("allow_partial_search_results".equals(entry.getKey())) {                         searchRequest.allowPartialSearchResults(nodeBooleanValue(value, null)).                     } else if ("expand_wildcards".equals(entry.getKey()) || "expandWildcards".equals(entry.getKey())) {                         expandWildcards = value.                     } else if ("ignore_unavailable".equals(entry.getKey()) || "ignoreUnavailable".equals(entry.getKey())) {                         ignoreUnavailable = value.                     } else if ("allow_no_indices".equals(entry.getKey()) || "allowNoIndices".equals(entry.getKey())) {                         allowNoIndices = value.                     } else if ("ignore_throttled".equals(entry.getKey()) || "ignoreThrottled".equals(entry.getKey())) {                         ignoreThrottled = value.                     } else {                         throw new IllegalArgumentException("key [" + entry.getKey() + "] is not supported in the metadata section").                     }                 }                 defaultOptions = IndicesOptions.fromParameters(expandWildcards, ignoreUnavailable, allowNoIndices, ignoreThrottled, defaultOptions).             }         }         searchRequest.indicesOptions(defaultOptions).         // move pointers         from = nextMarker + 1.         // now for the body         nextMarker = findNextMarker(marker, from, data, length).         if (nextMarker == -1) {             break.         }         BytesReference bytes = data.slice(from, nextMarker - from).         try (InputStream stream = bytes.streamInput().             XContentParser parser = xContent.createParser(registry, LoggingDeprecationHandler.INSTANCE, stream)) {             consumer.accept(searchRequest, parser).         }         // move pointers         from = nextMarker + 1.     } }
false;private,static;4;11;;private static int findNextMarker(byte marker, int from, BytesReference data, int length) {     for (int i = from. i < length. i++) {         if (data.get(i) == marker) {             return i.         }     }     if (from != length) {         throw new IllegalArgumentException("The msearch request must be terminated by a newline [\n]").     }     return -1. }
false;public,static;2;21;;public static byte[] writeMultiLineFormat(MultiSearchRequest multiSearchRequest, XContent xContent) throws IOException {     ByteArrayOutputStream output = new ByteArrayOutputStream().     for (SearchRequest request : multiSearchRequest.requests()) {         try (XContentBuilder xContentBuilder = XContentBuilder.builder(xContent)) {             writeSearchRequestParams(request, xContentBuilder).             BytesReference.bytes(xContentBuilder).writeTo(output).         }         output.write(xContent.streamSeparator()).         try (XContentBuilder xContentBuilder = XContentBuilder.builder(xContent)) {             if (request.source() != null) {                 request.source().toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS).             } else {                 xContentBuilder.startObject().                 xContentBuilder.endObject().             }             BytesReference.bytes(xContentBuilder).writeTo(output).         }         output.write(xContent.streamSeparator()).     }     return output.toByteArray(). }
false;public,static;2;39;;public static void writeSearchRequestParams(SearchRequest request, XContentBuilder xContentBuilder) throws IOException {     xContentBuilder.startObject().     if (request.indices() != null) {         xContentBuilder.field("index", request.indices()).     }     if (request.indicesOptions() != null && request.indicesOptions() != SearchRequest.DEFAULT_INDICES_OPTIONS) {         if (request.indicesOptions().expandWildcardsOpen() && request.indicesOptions().expandWildcardsClosed()) {             xContentBuilder.field("expand_wildcards", "all").         } else if (request.indicesOptions().expandWildcardsOpen()) {             xContentBuilder.field("expand_wildcards", "open").         } else if (request.indicesOptions().expandWildcardsClosed()) {             xContentBuilder.field("expand_wildcards", "closed").         } else {             xContentBuilder.field("expand_wildcards", "none").         }         xContentBuilder.field("ignore_unavailable", request.indicesOptions().ignoreUnavailable()).         xContentBuilder.field("allow_no_indices", request.indicesOptions().allowNoIndices()).     }     if (request.types() != null) {         xContentBuilder.field("types", request.types()).     }     if (request.searchType() != null) {         xContentBuilder.field("search_type", request.searchType().name().toLowerCase(Locale.ROOT)).     }     xContentBuilder.field("ccs_minimize_roundtrips", request.isCcsMinimizeRoundtrips()).     if (request.requestCache() != null) {         xContentBuilder.field("request_cache", request.requestCache()).     }     if (request.preference() != null) {         xContentBuilder.field("preference", request.preference()).     }     if (request.routing() != null) {         xContentBuilder.field("routing", request.routing()).     }     if (request.allowPartialSearchResults() != null) {         xContentBuilder.field("allow_partial_search_results", request.allowPartialSearchResults()).     }     xContentBuilder.endObject(). }
