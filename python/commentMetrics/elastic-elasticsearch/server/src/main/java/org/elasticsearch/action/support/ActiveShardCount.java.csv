# id;timestamp;commentText;codeText;commentWords;codeWords
ActiveShardCount -> public static ActiveShardCount from(final int value);1524684173;Get an ActiveShardCount instance for the given value.  The value is first validated to ensure_it is a valid shard count and throws an IllegalArgumentException if validation fails.  Valid_values are any non-negative number.  Directly use {@link ActiveShardCount#DEFAULT} for the_default value (which is one shard copy) or {@link ActiveShardCount#ALL} to specify all the shards.;public static ActiveShardCount from(final int value) {_        if (value < 0) {_            throw new IllegalArgumentException("shard count cannot be a negative value")__        }_        return get(value)__    };get,an,active,shard,count,instance,for,the,given,value,the,value,is,first,validated,to,ensure,it,is,a,valid,shard,count,and,throws,an,illegal,argument,exception,if,validation,fails,valid,values,are,any,non,negative,number,directly,use,link,active,shard,count,default,for,the,default,value,which,is,one,shard,copy,or,link,active,shard,count,all,to,specify,all,the,shards;public,static,active,shard,count,from,final,int,value,if,value,0,throw,new,illegal,argument,exception,shard,count,cannot,be,a,negative,value,return,get,value
ActiveShardCount -> public static ActiveShardCount from(final int value);1532353780;Get an ActiveShardCount instance for the given value.  The value is first validated to ensure_it is a valid shard count and throws an IllegalArgumentException if validation fails.  Valid_values are any non-negative number.  Directly use {@link ActiveShardCount#DEFAULT} for the_default value (which is one shard copy) or {@link ActiveShardCount#ALL} to specify all the shards.;public static ActiveShardCount from(final int value) {_        if (value < 0) {_            throw new IllegalArgumentException("shard count cannot be a negative value")__        }_        return get(value)__    };get,an,active,shard,count,instance,for,the,given,value,the,value,is,first,validated,to,ensure,it,is,a,valid,shard,count,and,throws,an,illegal,argument,exception,if,validation,fails,valid,values,are,any,non,negative,number,directly,use,link,active,shard,count,default,for,the,default,value,which,is,one,shard,copy,or,link,active,shard,count,all,to,specify,all,the,shards;public,static,active,shard,count,from,final,int,value,if,value,0,throw,new,illegal,argument,exception,shard,count,cannot,be,a,negative,value,return,get,value
ActiveShardCount -> public static ActiveShardCount from(final int value);1543478910;Get an ActiveShardCount instance for the given value.  The value is first validated to ensure_it is a valid shard count and throws an IllegalArgumentException if validation fails.  Valid_values are any non-negative number.  Directly use {@link ActiveShardCount#DEFAULT} for the_default value (which is one shard copy) or {@link ActiveShardCount#ALL} to specify all the shards.;public static ActiveShardCount from(final int value) {_        if (value < 0) {_            throw new IllegalArgumentException("shard count cannot be a negative value")__        }_        return get(value)__    };get,an,active,shard,count,instance,for,the,given,value,the,value,is,first,validated,to,ensure,it,is,a,valid,shard,count,and,throws,an,illegal,argument,exception,if,validation,fails,valid,values,are,any,non,negative,number,directly,use,link,active,shard,count,default,for,the,default,value,which,is,one,shard,copy,or,link,active,shard,count,all,to,specify,all,the,shards;public,static,active,shard,count,from,final,int,value,if,value,0,throw,new,illegal,argument,exception,shard,count,cannot,be,a,negative,value,return,get,value
ActiveShardCount -> public static ActiveShardCount parseString(final String str);1524684173;Parses the active shard count from the given string.  Valid values are "all" for_all shard copies, null for the default value (which defaults to one shard copy),_or a numeric value greater than or equal to 0. Any other input will throw an_IllegalArgumentException.;public static ActiveShardCount parseString(final String str) {_        if (str == null) {_            return ActiveShardCount.DEFAULT__        } else if (str.equals("all")) {_            return ActiveShardCount.ALL__        } else {_            int val__            try {_                val = Integer.parseInt(str)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("cannot parse ActiveShardCount[" + str + "]", e)__            }_            return ActiveShardCount.from(val)__        }_    };parses,the,active,shard,count,from,the,given,string,valid,values,are,all,for,all,shard,copies,null,for,the,default,value,which,defaults,to,one,shard,copy,or,a,numeric,value,greater,than,or,equal,to,0,any,other,input,will,throw,an,illegal,argument,exception;public,static,active,shard,count,parse,string,final,string,str,if,str,null,return,active,shard,count,default,else,if,str,equals,all,return,active,shard,count,all,else,int,val,try,val,integer,parse,int,str,catch,number,format,exception,e,throw,new,illegal,argument,exception,cannot,parse,active,shard,count,str,e,return,active,shard,count,from,val
ActiveShardCount -> public static ActiveShardCount parseString(final String str);1532353780;Parses the active shard count from the given string.  Valid values are "all" for_all shard copies, null for the default value (which defaults to one shard copy),_or a numeric value greater than or equal to 0. Any other input will throw an_IllegalArgumentException.;public static ActiveShardCount parseString(final String str) {_        if (str == null) {_            return ActiveShardCount.DEFAULT__        } else if (str.equals("all")) {_            return ActiveShardCount.ALL__        } else {_            int val__            try {_                val = Integer.parseInt(str)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("cannot parse ActiveShardCount[" + str + "]", e)__            }_            return ActiveShardCount.from(val)__        }_    };parses,the,active,shard,count,from,the,given,string,valid,values,are,all,for,all,shard,copies,null,for,the,default,value,which,defaults,to,one,shard,copy,or,a,numeric,value,greater,than,or,equal,to,0,any,other,input,will,throw,an,illegal,argument,exception;public,static,active,shard,count,parse,string,final,string,str,if,str,null,return,active,shard,count,default,else,if,str,equals,all,return,active,shard,count,all,else,int,val,try,val,integer,parse,int,str,catch,number,format,exception,e,throw,new,illegal,argument,exception,cannot,parse,active,shard,count,str,e,return,active,shard,count,from,val
ActiveShardCount -> public static ActiveShardCount parseString(final String str);1543478910;Parses the active shard count from the given string.  Valid values are "all" for_all shard copies, null for the default value (which defaults to one shard copy),_or a numeric value greater than or equal to 0. Any other input will throw an_IllegalArgumentException.;public static ActiveShardCount parseString(final String str) {_        if (str == null) {_            return ActiveShardCount.DEFAULT__        } else if (str.equals("all")) {_            return ActiveShardCount.ALL__        } else {_            int val__            try {_                val = Integer.parseInt(str)__            } catch (NumberFormatException e) {_                throw new IllegalArgumentException("cannot parse ActiveShardCount[" + str + "]", e)__            }_            return ActiveShardCount.from(val)__        }_    };parses,the,active,shard,count,from,the,given,string,valid,values,are,all,for,all,shard,copies,null,for,the,default,value,which,defaults,to,one,shard,copy,or,a,numeric,value,greater,than,or,equal,to,0,any,other,input,will,throw,an,illegal,argument,exception;public,static,active,shard,count,parse,string,final,string,str,if,str,null,return,active,shard,count,default,else,if,str,equals,all,return,active,shard,count,all,else,int,val,try,val,integer,parse,int,str,catch,number,format,exception,e,throw,new,illegal,argument,exception,cannot,parse,active,shard,count,str,e,return,active,shard,count,from,val
ActiveShardCount -> public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable);1524684173;Returns true iff the active shard count in the shard routing table is enough_to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable) {_        final int activeShardCount = shardRoutingTable.activeShards().size()__        if (this == ActiveShardCount.ALL) {_            _            _            return activeShardCount == shardRoutingTable.replicaShards().size() + 1__        } else if (this == ActiveShardCount.DEFAULT) {_            return activeShardCount >= 1__        } else {_            return activeShardCount >= value__        }_    };returns,true,iff,the,active,shard,count,in,the,shard,routing,table,is,enough,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,index,shard,routing,table,shard,routing,table,final,int,active,shard,count,shard,routing,table,active,shards,size,if,this,active,shard,count,all,return,active,shard,count,shard,routing,table,replica,shards,size,1,else,if,this,active,shard,count,default,return,active,shard,count,1,else,return,active,shard,count,value
ActiveShardCount -> public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable);1532353780;Returns true iff the active shard count in the shard routing table is enough_to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable) {_        final int activeShardCount = shardRoutingTable.activeShards().size()__        if (this == ActiveShardCount.ALL) {_            _            _            return activeShardCount == shardRoutingTable.replicaShards().size() + 1__        } else if (this == ActiveShardCount.DEFAULT) {_            return activeShardCount >= 1__        } else {_            return activeShardCount >= value__        }_    };returns,true,iff,the,active,shard,count,in,the,shard,routing,table,is,enough,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,index,shard,routing,table,shard,routing,table,final,int,active,shard,count,shard,routing,table,active,shards,size,if,this,active,shard,count,all,return,active,shard,count,shard,routing,table,replica,shards,size,1,else,if,this,active,shard,count,default,return,active,shard,count,1,else,return,active,shard,count,value
ActiveShardCount -> public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable);1543478910;Returns true iff the active shard count in the shard routing table is enough_to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable) {_        final int activeShardCount = shardRoutingTable.activeShards().size()__        if (this == ActiveShardCount.ALL) {_            _            _            return activeShardCount == shardRoutingTable.replicaShards().size() + 1__        } else if (this == ActiveShardCount.DEFAULT) {_            return activeShardCount >= 1__        } else {_            return activeShardCount >= value__        }_    };returns,true,iff,the,active,shard,count,in,the,shard,routing,table,is,enough,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,index,shard,routing,table,shard,routing,table,final,int,active,shard,count,shard,routing,table,active,shards,size,if,this,active,shard,count,all,return,active,shard,count,shard,routing,table,replica,shards,size,1,else,if,this,active,shard,count,default,return,active,shard,count,1,else,return,active,shard,count,value
ActiveShardCount -> public boolean validate(final int numberOfReplicas);1524684173;Validates that the instance is valid for the given number of replicas in an index.;public boolean validate(final int numberOfReplicas) {_        assert numberOfReplicas >= 0__        return value <= numberOfReplicas + 1__    };validates,that,the,instance,is,valid,for,the,given,number,of,replicas,in,an,index;public,boolean,validate,final,int,number,of,replicas,assert,number,of,replicas,0,return,value,number,of,replicas,1
ActiveShardCount -> public boolean validate(final int numberOfReplicas);1532353780;Validates that the instance is valid for the given number of replicas in an index.;public boolean validate(final int numberOfReplicas) {_        assert numberOfReplicas >= 0__        return value <= numberOfReplicas + 1__    };validates,that,the,instance,is,valid,for,the,given,number,of,replicas,in,an,index;public,boolean,validate,final,int,number,of,replicas,assert,number,of,replicas,0,return,value,number,of,replicas,1
ActiveShardCount -> public boolean validate(final int numberOfReplicas);1543478910;Validates that the instance is valid for the given number of replicas in an index.;public boolean validate(final int numberOfReplicas) {_        assert numberOfReplicas >= 0__        return value <= numberOfReplicas + 1__    };validates,that,the,instance,is,valid,for,the,given,number,of,replicas,in,an,index;public,boolean,validate,final,int,number,of,replicas,assert,number,of,replicas,0,return,value,number,of,replicas,1
ActiveShardCount -> public boolean enoughShardsActive(final int activeShardCount);1524684173;Returns true iff the given number of active shards is enough to meet_the required shard count represented by this instance.  This method_should only be invoked with {@link ActiveShardCount} objects created_from {@link #from(int)}, or {@link #NONE} or {@link #ONE}.;public boolean enoughShardsActive(final int activeShardCount) {_        if (this.value < 0) {_            throw new IllegalStateException("not enough information to resolve to shard count")__        }_        if (activeShardCount < 0) {_            throw new IllegalArgumentException("activeShardCount cannot be negative")__        }_        return this.value <= activeShardCount__    };returns,true,iff,the,given,number,of,active,shards,is,enough,to,meet,the,required,shard,count,represented,by,this,instance,this,method,should,only,be,invoked,with,link,active,shard,count,objects,created,from,link,from,int,or,link,none,or,link,one;public,boolean,enough,shards,active,final,int,active,shard,count,if,this,value,0,throw,new,illegal,state,exception,not,enough,information,to,resolve,to,shard,count,if,active,shard,count,0,throw,new,illegal,argument,exception,active,shard,count,cannot,be,negative,return,this,value,active,shard,count
ActiveShardCount -> public boolean enoughShardsActive(final int activeShardCount);1532353780;Returns true iff the given number of active shards is enough to meet_the required shard count represented by this instance.  This method_should only be invoked with {@link ActiveShardCount} objects created_from {@link #from(int)}, or {@link #NONE} or {@link #ONE}.;public boolean enoughShardsActive(final int activeShardCount) {_        if (this.value < 0) {_            throw new IllegalStateException("not enough information to resolve to shard count")__        }_        if (activeShardCount < 0) {_            throw new IllegalArgumentException("activeShardCount cannot be negative")__        }_        return this.value <= activeShardCount__    };returns,true,iff,the,given,number,of,active,shards,is,enough,to,meet,the,required,shard,count,represented,by,this,instance,this,method,should,only,be,invoked,with,link,active,shard,count,objects,created,from,link,from,int,or,link,none,or,link,one;public,boolean,enough,shards,active,final,int,active,shard,count,if,this,value,0,throw,new,illegal,state,exception,not,enough,information,to,resolve,to,shard,count,if,active,shard,count,0,throw,new,illegal,argument,exception,active,shard,count,cannot,be,negative,return,this,value,active,shard,count
ActiveShardCount -> public boolean enoughShardsActive(final int activeShardCount);1543478910;Returns true iff the given number of active shards is enough to meet_the required shard count represented by this instance.  This method_should only be invoked with {@link ActiveShardCount} objects created_from {@link #from(int)}, or {@link #NONE} or {@link #ONE}.;public boolean enoughShardsActive(final int activeShardCount) {_        if (this.value < 0) {_            throw new IllegalStateException("not enough information to resolve to shard count")__        }_        if (activeShardCount < 0) {_            throw new IllegalArgumentException("activeShardCount cannot be negative")__        }_        return this.value <= activeShardCount__    };returns,true,iff,the,given,number,of,active,shards,is,enough,to,meet,the,required,shard,count,represented,by,this,instance,this,method,should,only,be,invoked,with,link,active,shard,count,objects,created,from,link,from,int,or,link,none,or,link,one;public,boolean,enough,shards,active,final,int,active,shard,count,if,this,value,0,throw,new,illegal,state,exception,not,enough,information,to,resolve,to,shard,count,if,active,shard,count,0,throw,new,illegal,argument,exception,active,shard,count,cannot,be,negative,return,this,value,active,shard,count
ActiveShardCount -> public boolean enoughShardsActive(final ClusterState clusterState, final String... indices);1524684173;Returns true iff the given cluster state's routing table contains enough active_shards for the given indices to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final ClusterState clusterState, final String... indices) {_        if (this == ActiveShardCount.NONE) {_            _            return true__        }__        for (final String indexName : indices) {_            final IndexMetaData indexMetaData = clusterState.metaData().index(indexName)__            if (indexMetaData == null) {_                _                _                _                continue__            }_            final IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(indexName)__            assert indexRoutingTable != null__            if (indexRoutingTable.allPrimaryShardsActive() == false) {_                _                return false__            }_            ActiveShardCount waitForActiveShards = this__            if (waitForActiveShards == ActiveShardCount.DEFAULT) {_                waitForActiveShards = SETTING_WAIT_FOR_ACTIVE_SHARDS.get(indexMetaData.getSettings())__            }_            for (final IntObjectCursor<IndexShardRoutingTable> shardRouting : indexRoutingTable.getShards()) {_                if (waitForActiveShards.enoughShardsActive(shardRouting.value) == false) {_                    _                    return false__                }_            }_        }__        return true__    };returns,true,iff,the,given,cluster,state,s,routing,table,contains,enough,active,shards,for,the,given,indices,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,cluster,state,cluster,state,final,string,indices,if,this,active,shard,count,none,return,true,for,final,string,index,name,indices,final,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,name,if,index,meta,data,null,continue,final,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,name,assert,index,routing,table,null,if,index,routing,table,all,primary,shards,active,false,return,false,active,shard,count,wait,for,active,shards,this,if,wait,for,active,shards,active,shard,count,default,wait,for,active,shards,get,index,meta,data,get,settings,for,final,int,object,cursor,index,shard,routing,table,shard,routing,index,routing,table,get,shards,if,wait,for,active,shards,enough,shards,active,shard,routing,value,false,return,false,return,true
ActiveShardCount -> public boolean enoughShardsActive(final ClusterState clusterState, final String... indices);1532353780;Returns true iff the given cluster state's routing table contains enough active_shards for the given indices to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final ClusterState clusterState, final String... indices) {_        if (this == ActiveShardCount.NONE) {_            _            return true__        }__        for (final String indexName : indices) {_            final IndexMetaData indexMetaData = clusterState.metaData().index(indexName)__            if (indexMetaData == null) {_                _                _                _                continue__            }_            final IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(indexName)__            assert indexRoutingTable != null__            if (indexRoutingTable.allPrimaryShardsActive() == false) {_                _                return false__            }_            ActiveShardCount waitForActiveShards = this__            if (waitForActiveShards == ActiveShardCount.DEFAULT) {_                waitForActiveShards = SETTING_WAIT_FOR_ACTIVE_SHARDS.get(indexMetaData.getSettings())__            }_            for (final IntObjectCursor<IndexShardRoutingTable> shardRouting : indexRoutingTable.getShards()) {_                if (waitForActiveShards.enoughShardsActive(shardRouting.value) == false) {_                    _                    return false__                }_            }_        }__        return true__    };returns,true,iff,the,given,cluster,state,s,routing,table,contains,enough,active,shards,for,the,given,indices,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,cluster,state,cluster,state,final,string,indices,if,this,active,shard,count,none,return,true,for,final,string,index,name,indices,final,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,name,if,index,meta,data,null,continue,final,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,name,assert,index,routing,table,null,if,index,routing,table,all,primary,shards,active,false,return,false,active,shard,count,wait,for,active,shards,this,if,wait,for,active,shards,active,shard,count,default,wait,for,active,shards,get,index,meta,data,get,settings,for,final,int,object,cursor,index,shard,routing,table,shard,routing,index,routing,table,get,shards,if,wait,for,active,shards,enough,shards,active,shard,routing,value,false,return,false,return,true
ActiveShardCount -> public boolean enoughShardsActive(final ClusterState clusterState, final String... indices);1543478910;Returns true iff the given cluster state's routing table contains enough active_shards for the given indices to meet the required shard count represented by this instance.;public boolean enoughShardsActive(final ClusterState clusterState, final String... indices) {_        if (this == ActiveShardCount.NONE) {_            _            return true__        }__        for (final String indexName : indices) {_            final IndexMetaData indexMetaData = clusterState.metaData().index(indexName)__            if (indexMetaData == null) {_                _                _                _                continue__            }_            final IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(indexName)__            if (indexRoutingTable == null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {_                _                _                _                continue__            }_            assert indexRoutingTable != null__            if (indexRoutingTable.allPrimaryShardsActive() == false) {_                _                return false__            }_            ActiveShardCount waitForActiveShards = this__            if (waitForActiveShards == ActiveShardCount.DEFAULT) {_                waitForActiveShards = SETTING_WAIT_FOR_ACTIVE_SHARDS.get(indexMetaData.getSettings())__            }_            for (final IntObjectCursor<IndexShardRoutingTable> shardRouting : indexRoutingTable.getShards()) {_                if (waitForActiveShards.enoughShardsActive(shardRouting.value) == false) {_                    _                    return false__                }_            }_        }__        return true__    };returns,true,iff,the,given,cluster,state,s,routing,table,contains,enough,active,shards,for,the,given,indices,to,meet,the,required,shard,count,represented,by,this,instance;public,boolean,enough,shards,active,final,cluster,state,cluster,state,final,string,indices,if,this,active,shard,count,none,return,true,for,final,string,index,name,indices,final,index,meta,data,index,meta,data,cluster,state,meta,data,index,index,name,if,index,meta,data,null,continue,final,index,routing,table,index,routing,table,cluster,state,routing,table,index,index,name,if,index,routing,table,null,index,meta,data,get,state,index,meta,data,state,close,continue,assert,index,routing,table,null,if,index,routing,table,all,primary,shards,active,false,return,false,active,shard,count,wait,for,active,shards,this,if,wait,for,active,shards,active,shard,count,default,wait,for,active,shards,get,index,meta,data,get,settings,for,final,int,object,cursor,index,shard,routing,table,shard,routing,index,routing,table,get,shards,if,wait,for,active,shards,enough,shards,active,shard,routing,value,false,return,false,return,true
