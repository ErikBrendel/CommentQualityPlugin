commented;modifiers;parameterAmount;loc;comment;code
true;public;3;6;/**  * Ensures a given request not executed multiple times when another equal request is already in-flight.  * If the request is not yet known to the deduplicator it will invoke the passed callback with an {@link ActionListener}  * that must be completed by the caller when the request completes. Once that listener is completed the request will be removed from  * the deduplicator's internal state. If the request is already known to the deduplicator it will keep  * track of the given listener and invoke it when the listener passed to the callback on first invocation is completed.  * @param request Request to deduplicate  * @param listener Listener to invoke on request completion  * @param callback Callback to be invoked with request and completion listener the first time the request is added to the deduplicator  */ ;/**  * Ensures a given request not executed multiple times when another equal request is already in-flight.  * If the request is not yet known to the deduplicator it will invoke the passed callback with an {@link ActionListener}  * that must be completed by the caller when the request completes. Once that listener is completed the request will be removed from  * the deduplicator's internal state. If the request is already known to the deduplicator it will keep  * track of the given listener and invoke it when the listener passed to the callback on first invocation is completed.  * @param request Request to deduplicate  * @param listener Listener to invoke on request completion  * @param callback Callback to be invoked with request and completion listener the first time the request is added to the deduplicator  */ public void executeOnce(T request, ActionListener<Void> listener, BiConsumer<T, ActionListener<Void>> callback) {     ActionListener<Void> completionListener = requests.computeIfAbsent(request, CompositeListener::new).addListener(listener).     if (completionListener != null) {         callback.accept(request, completionListener).     } }
false;public;0;3;;public int size() {     return requests.size(). }
false;;1;14;;CompositeListener addListener(ActionListener<Void> listener) {     synchronized (this) {         if (this.isNotified == false) {             listeners.add(listener).             return listeners.size() == 1 ? this : null.         }     }     if (failure != null) {         listener.onFailure(failure).     } else {         listener.onResponse(null).     }     return null. }
false;private;1;15;;private void onCompleted(Exception failure) {     synchronized (this) {         this.failure = failure.         this.isNotified = true.     }     try {         if (failure == null) {             ActionListener.onResponse(listeners, null).         } else {             ActionListener.onFailure(listeners, failure).         }     } finally {         requests.remove(request).     } }
false;public;1;4;;@Override public void onResponse(final Void aVoid) {     onCompleted(null). }
false;public;1;4;;@Override public void onFailure(Exception failure) {     onCompleted(failure). }
