commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public DiscoveryNode node() {     return node. }
false;public;0;3;;public String reason() {     return reason. }
false;public;0;4;;@Override public String toString() {     return node + " " + reason. }
false;public;2;22;;@Override public ClusterTasksResult<Task> execute(final ClusterState currentState, final List<Task> tasks) throws Exception {     final DiscoveryNodes.Builder remainingNodesBuilder = DiscoveryNodes.builder(currentState.nodes()).     boolean removed = false.     for (final Task task : tasks) {         if (currentState.nodes().nodeExists(task.node())) {             remainingNodesBuilder.remove(task.node()).             removed = true.         } else {             logger.debug("node [{}] does not exist in cluster state, ignoring", task).         }     }     if (!removed) {         // no nodes to remove, keep the current cluster state         return ClusterTasksResult.<Task>builder().successes(tasks).build(currentState).     }     final ClusterState remainingNodesClusterState = remainingNodesClusterState(currentState, remainingNodesBuilder).     return getTaskClusterTasksResult(currentState, tasks, remainingNodesClusterState). }
false;protected;3;6;;protected ClusterTasksResult<Task> getTaskClusterTasksResult(ClusterState currentState, List<Task> tasks, ClusterState remainingNodesClusterState) {     ClusterState ptasksDisassociatedState = PersistentTasksCustomMetaData.disassociateDeadNodes(remainingNodesClusterState).     final ClusterTasksResult.Builder<Task> resultBuilder = ClusterTasksResult.<Task>builder().successes(tasks).     return resultBuilder.build(allocationService.disassociateDeadNodes(ptasksDisassociatedState, true, describeTasks(tasks))). }
true;protected;2;3;// rejoin or reroute is needed ;// visible for testing // hook is used in testing to ensure that correct cluster state is used to test whether a // rejoin or reroute is needed protected ClusterState remainingNodesClusterState(final ClusterState currentState, DiscoveryNodes.Builder remainingNodesBuilder) {     return ClusterState.builder(currentState).nodes(remainingNodesBuilder).build(). }
false;public;2;4;;@Override public void onFailure(final String source, final Exception e) {     logger.error(() -> new ParameterizedMessage("unexpected failure during [{}]", source), e). }
false;public;1;4;;@Override public void onNoLongerMaster(String source) {     logger.debug("no longer master while processing node removal [{}]", source). }
