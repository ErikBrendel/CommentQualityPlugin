commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The primary term of this retention lease collection.  *  * @return the primary term  */ ;/**  * The primary term of this retention lease collection.  *  * @return the primary term  */ public long primaryTerm() {     return primaryTerm. }
true;public;0;3;/**  * The version of this retention lease collection. The version is managed on the primary and incremented any time that a retention lease  * is added, renewed, or when retention leases expire.  *  * @return the version of this retention lease collection  */ ;/**  * The version of this retention lease collection. The version is managed on the primary and incremented any time that a retention lease  * is added, renewed, or when retention leases expire.  *  * @return the version of this retention lease collection  */ public long version() {     return version. }
true;public;1;3;/**  * Checks if this retention leases collection supersedes the specified retention leases collection. A retention leases collection  * supersedes another retention leases collection if its primary term is higher, or if for equal primary terms its version is higher  *  * @param that the retention leases collection to test against  * @return true if this retention leases collection supercedes the specified retention lease collection, otherwise false  */ ;/**  * Checks if this retention leases collection supersedes the specified retention leases collection. A retention leases collection  * supersedes another retention leases collection if its primary term is higher, or if for equal primary terms its version is higher  *  * @param that the retention leases collection to test against  * @return true if this retention leases collection supercedes the specified retention lease collection, otherwise false  */ public boolean supersedes(final RetentionLeases that) {     return primaryTerm > that.primaryTerm || primaryTerm == that.primaryTerm && version > that.version. }
true;public;0;3;/**  * The underlying collection of retention leases  *  * @return the retention leases  */ ;/**  * The underlying collection of retention leases  *  * @return the retention leases  */ public Collection<RetentionLease> leases() {     return Collections.unmodifiableCollection(leases.values()). }
true;public;1;3;/**  * Checks if this retention lease collection contains a retention lease with the specified {@link RetentionLease#id()}.  *  * @param id the retention lease ID  * @return true if this retention lease collection contains a retention lease with the specified ID, otherwise false  */ ;/**  * Checks if this retention lease collection contains a retention lease with the specified {@link RetentionLease#id()}.  *  * @param id the retention lease ID  * @return true if this retention lease collection contains a retention lease with the specified ID, otherwise false  */ public boolean contains(final String id) {     return leases.containsKey(id). }
true;public;1;3;/**  * Returns the retention lease with the specified ID, or null if no such retention lease exists.  *  * @param id the retention lease ID  * @return the retention lease, or null if no retention lease with the specified ID exists  */ ;/**  * Returns the retention lease with the specified ID, or null if no such retention lease exists.  *  * @param id the retention lease ID  * @return the retention lease, or null if no retention lease with the specified ID exists  */ public RetentionLease get(final String id) {     return leases.get(id). }
true;public;1;6;/**  * Writes a retention lease collection to a stream in a manner suitable for later reconstruction via  * {@link #RetentionLeases(StreamInput)} (StreamInput)}.  *  * @param out the stream to write the retention lease collection to  * @throws IOException if an I/O exception occurs writing to the stream  */ ;/**  * Writes a retention lease collection to a stream in a manner suitable for later reconstruction via  * {@link #RetentionLeases(StreamInput)} (StreamInput)}.  *  * @param out the stream to write the retention lease collection to  * @throws IOException if an I/O exception occurs writing to the stream  */ @Override public void writeTo(final StreamOutput out) throws IOException {     out.writeVLong(primaryTerm).     out.writeVLong(version).     out.writeCollection(leases.values()). }
false;public;2;13;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.field(PRIMARY_TERM_FIELD.getPreferredName(), primaryTerm).     builder.field(VERSION_FIELD.getPreferredName(), version).     builder.startArray(LEASES_FIELD.getPreferredName()).     {         for (final RetentionLease retentionLease : leases.values()) {             retentionLease.toXContent(builder, params).         }     }     builder.endArray().     return builder. }
true;public,static;1;3;/**  * Parses a retention leases collection from {@link org.elasticsearch.common.xcontent.XContent}. This method assumes that the retention  * leases were converted to {@link org.elasticsearch.common.xcontent.XContent} via {@link #toXContent(XContentBuilder, Params)}.  *  * @param parser the parser  * @return a retention leases collection  */ ;/**  * Parses a retention leases collection from {@link org.elasticsearch.common.xcontent.XContent}. This method assumes that the retention  * leases were converted to {@link org.elasticsearch.common.xcontent.XContent} via {@link #toXContent(XContentBuilder, Params)}.  *  * @param parser the parser  * @return a retention leases collection  */ public static RetentionLeases fromXContent(final XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;4;;@Override public void toXContent(final XContentBuilder builder, final RetentionLeases retentionLeases) throws IOException {     retentionLeases.toXContent(builder, ToXContent.EMPTY_PARAMS). }
false;public;1;4;;@Override public RetentionLeases fromXContent(final XContentParser parser) {     return RetentionLeases.fromXContent(parser). }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     final RetentionLeases that = (RetentionLeases) o.     return primaryTerm == that.primaryTerm && version == that.version && Objects.equals(leases, that.leases). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(primaryTerm, version, leases). }
false;public;0;8;;@Override public String toString() {     return "RetentionLeases{" + "primaryTerm=" + primaryTerm + ", version=" + version + ", leases=" + leases + '}'. }
true;private,static;1;12;/**  * A utility method to convert retention leases to a map from retention lease ID to retention lease.  *  * @param leases the retention leases  * @return the map from retention lease ID to retention lease  */ ;/**  * A utility method to convert retention leases to a map from retention lease ID to retention lease.  *  * @param leases the retention leases  * @return the map from retention lease ID to retention lease  */ private static Map<String, RetentionLease> toMap(final Collection<RetentionLease> leases) {     // use a linked hash map to preserve order     return leases.stream().collect(Collectors.toMap(RetentionLease::id, Function.identity(), (left, right) -> {         assert left.id().equals(right.id()) : "expected [" + left.id() + "] to equal [" + right.id() + "]".         throw new IllegalStateException("duplicate retention lease ID [" + left.id() + "]").     }, LinkedHashMap::new)). }
true;static;1;3;/**  * A utility method to convert a retention lease collection to a map from retention lease ID to retention lease.  *  * @param retentionLeases the retention lease collection  * @return the map from retention lease ID to retention lease  */ ;/**  * A utility method to convert a retention lease collection to a map from retention lease ID to retention lease.  *  * @param retentionLeases the retention lease collection  * @return the map from retention lease ID to retention lease  */ static Map<String, RetentionLease> toMap(final RetentionLeases retentionLeases) {     return retentionLeases.leases. }
