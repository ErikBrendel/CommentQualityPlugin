commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return Whether the attempt to clear a scroll was successful.  */ ;/**  * @return Whether the attempt to clear a scroll was successful.  */ public boolean isSucceeded() {     return succeeded. }
true;public;0;3;/**  * @return The number of search contexts that were freed. If this is <code>0</code> the assumption can be made,  * that the scroll id specified in the request did not exist. (never existed, was expired, or completely consumed)  */ ;/**  * @return The number of search contexts that were freed. If this is <code>0</code> the assumption can be made,  * that the scroll id specified in the request did not exist. (never existed, was expired, or completely consumed)  */ public int getNumFreed() {     return numFreed. }
false;public;0;4;;@Override public RestStatus status() {     return numFreed == 0 ? NOT_FOUND : OK. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(SUCCEEDED.getPreferredName(), succeeded).     builder.field(NUMFREED.getPreferredName(), numFreed).     builder.endObject().     return builder. }
true;public,static;1;3;/**  * Parse the clear scroll response body into a new {@link ClearScrollResponse} object  */ ;/**  * Parse the clear scroll response body into a new {@link ClearScrollResponse} object  */ public static ClearScrollResponse fromXContent(XContentParser parser) throws IOException {     return PARSER.apply(parser, null). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     succeeded = in.readBoolean().     numFreed = in.readVInt(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(succeeded).     out.writeVInt(numFreed). }
