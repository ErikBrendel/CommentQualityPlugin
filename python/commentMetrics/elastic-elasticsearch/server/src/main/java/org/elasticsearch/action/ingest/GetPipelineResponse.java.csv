commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Get the list of pipelines that were a part of this response.  * The pipeline id can be obtained using getId on the PipelineConfiguration object.  * @return A list of {@link PipelineConfiguration} objects.  */ ;/**  * Get the list of pipelines that were a part of this response.  * The pipeline id can be obtained using getId on the PipelineConfiguration object.  * @return A list of {@link PipelineConfiguration} objects.  */ public List<PipelineConfiguration> pipelines() {     return Collections.unmodifiableList(pipelines). }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     int size = in.readVInt().     pipelines = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         pipelines.add(PipelineConfiguration.readFrom(in)).     } }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(pipelines.size()).     for (PipelineConfiguration pipeline : pipelines) {         pipeline.writeTo(out).     } }
false;public;0;3;;public boolean isFound() {     return !pipelines.isEmpty(). }
false;public;0;4;;@Override public RestStatus status() {     return isFound() ? RestStatus.OK : RestStatus.NOT_FOUND. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     for (PipelineConfiguration pipeline : pipelines) {         builder.field(pipeline.getId(), pipeline.getConfigAsMap()).     }     builder.endObject().     return builder. }
true;public,static;1;16;/**  * @param parser the parser for the XContent that contains the serialized GetPipelineResponse.  * @return an instance of GetPipelineResponse read from the parser  * @throws IOException If the parsing fails  */ ;/**  * @param parser the parser for the XContent that contains the serialized GetPipelineResponse.  * @return an instance of GetPipelineResponse read from the parser  * @throws IOException If the parsing fails  */ public static GetPipelineResponse fromXContent(XContentParser parser) throws IOException {     ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     List<PipelineConfiguration> pipelines = new ArrayList<>().     while (parser.nextToken().equals(Token.FIELD_NAME)) {         String pipelineId = parser.currentName().         parser.nextToken().         try (XContentBuilder contentBuilder = XContentBuilder.builder(parser.contentType().xContent())) {             contentBuilder.generator().copyCurrentStructure(parser).             PipelineConfiguration pipeline = new PipelineConfiguration(pipelineId, BytesReference.bytes(contentBuilder), contentBuilder.contentType()).             pipelines.add(pipeline).         }     }     ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.currentToken(), parser::getTokenLocation).     return new GetPipelineResponse(pipelines). }
false;public;1;26;;@Override public boolean equals(Object other) {     if (other == null) {         return false.     } else if (other instanceof GetPipelineResponse) {         GetPipelineResponse otherResponse = (GetPipelineResponse) other.         if (pipelines == null) {             return otherResponse.pipelines == null.         } else {             // We need a map here because order does not matter for equality             Map<String, PipelineConfiguration> otherPipelineMap = new HashMap<>().             for (PipelineConfiguration pipeline : otherResponse.pipelines) {                 otherPipelineMap.put(pipeline.getId(), pipeline).             }             for (PipelineConfiguration pipeline : pipelines) {                 PipelineConfiguration otherPipeline = otherPipelineMap.get(pipeline.getId()).                 if (!pipeline.equals(otherPipeline)) {                     return false.                 }             }             return true.         }     } else {         return false.     } }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;public;0;9;;@Override public int hashCode() {     int result = 1.     for (PipelineConfiguration pipeline : pipelines) {         // We only take the sum here to ensure that the order does not matter.         result += (pipeline == null ? 0 : pipeline.hashCode()).     }     return result. }
