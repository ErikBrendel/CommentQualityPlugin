commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;1;5;;protected static <T extends Builder<?>> ObjectParser<T, Void> createAllocatePrimaryParser(String command) {     ObjectParser<T, Void> parser = AbstractAllocateAllocationCommand.createAllocateParser(command).     parser.declareBoolean(Builder::setAcceptDataLoss, new ParseField(ACCEPT_DATA_LOSS_FIELD)).     return parser. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(acceptDataLoss). }
true;public;0;3;/**  * The operation only executes if the user explicitly agrees to possible data loss  *  * @return whether data loss is acceptable  */ ;/**  * The operation only executes if the user explicitly agrees to possible data loss  *  * @return whether data loss is acceptable  */ public boolean acceptDataLoss() {     return acceptDataLoss. }
false;public;1;3;;public void setAcceptDataLoss(boolean acceptDataLoss) {     this.acceptDataLoss = acceptDataLoss. }
false;protected;1;4;;@Override protected void extraXContent(XContentBuilder builder) throws IOException {     builder.field(ACCEPT_DATA_LOSS_FIELD, acceptDataLoss). }
false;public;1;8;;@Override public boolean equals(Object obj) {     if (false == super.equals(obj)) {         return false.     }     BasePrimaryAllocationCommand other = (BasePrimaryAllocationCommand) obj.     return acceptDataLoss == other.acceptDataLoss. }
false;public;0;4;;@Override public int hashCode() {     return 31 * super.hashCode() + Boolean.hashCode(acceptDataLoss). }
