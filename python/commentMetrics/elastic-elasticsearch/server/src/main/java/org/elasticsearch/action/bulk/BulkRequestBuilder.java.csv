commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}  * (for example, if no id is provided, one will be generated, or usage of the create flag).  */ ;/**  * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}  * (for example, if no id is provided, one will be generated, or usage of the create flag).  */ public BulkRequestBuilder add(IndexRequest request) {     super.request.add(request).     return this. }
true;public;1;4;/**  * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}  * (for example, if no id is provided, one will be generated, or usage of the create flag).  */ ;/**  * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}  * (for example, if no id is provided, one will be generated, or usage of the create flag).  */ public BulkRequestBuilder add(IndexRequestBuilder request) {     super.request.add(request.request()).     return this. }
true;public;1;4;/**  * Adds an {@link DeleteRequest} to the list of actions to execute.  */ ;/**  * Adds an {@link DeleteRequest} to the list of actions to execute.  */ public BulkRequestBuilder add(DeleteRequest request) {     super.request.add(request).     return this. }
true;public;1;4;/**  * Adds an {@link DeleteRequest} to the list of actions to execute.  */ ;/**  * Adds an {@link DeleteRequest} to the list of actions to execute.  */ public BulkRequestBuilder add(DeleteRequestBuilder request) {     super.request.add(request.request()).     return this. }
true;public;1;4;/**  * Adds an {@link UpdateRequest} to the list of actions to execute.  */ ;/**  * Adds an {@link UpdateRequest} to the list of actions to execute.  */ public BulkRequestBuilder add(UpdateRequest request) {     super.request.add(request).     return this. }
true;public;1;4;/**  * Adds an {@link UpdateRequest} to the list of actions to execute.  */ ;/**  * Adds an {@link UpdateRequest} to the list of actions to execute.  */ public BulkRequestBuilder add(UpdateRequestBuilder request) {     super.request.add(request.request()).     return this. }
true;public;4;4;/**  * Adds a framed data in binary format  */ ;/**  * Adds a framed data in binary format  */ public BulkRequestBuilder add(byte[] data, int from, int length, XContentType xContentType) throws Exception {     request.add(data, from, length, null, xContentType).     return this. }
true;public;6;6;/**  * Adds a framed data in binary format  * @deprecated use {@link #add(byte[], int, int, String, XContentType)} instead  */ ;/**  * Adds a framed data in binary format  * @deprecated use {@link #add(byte[], int, int, String, XContentType)} instead  */ @Deprecated public BulkRequestBuilder add(byte[] data, int from, int length, @Nullable String defaultIndex, @Nullable String defaultType, XContentType xContentType) throws Exception {     request.add(data, from, length, defaultIndex, defaultType, xContentType).     return this. }
true;public;5;5;/**  * Adds a framed data in binary format  */ ;/**  * Adds a framed data in binary format  */ public BulkRequestBuilder add(byte[] data, int from, int length, @Nullable String defaultIndex, XContentType xContentType) throws Exception {     request.add(data, from, length, defaultIndex, MapperService.SINGLE_MAPPING_NAME, xContentType).     return this. }
true;public;1;4;/**  * Sets the number of shard copies that must be active before proceeding with the write.  * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.  */ ;/**  * Sets the number of shard copies that must be active before proceeding with the write.  * See {@link ReplicationRequest#waitForActiveShards(ActiveShardCount)} for details.  */ public BulkRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {     request.waitForActiveShards(waitForActiveShards).     return this. }
true;public;1;3;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ ;/**  * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical  * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}  * to get the ActiveShardCount.  */ public BulkRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {     return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards)). }
true;public,final;1;4;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ public final BulkRequestBuilder setTimeout(TimeValue timeout) {     request.timeout(timeout).     return this. }
true;public,final;1;4;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ ;/**  * A timeout to wait if the index operation can't be performed immediately. Defaults to {@code 1m}.  */ public final BulkRequestBuilder setTimeout(String timeout) {     request.timeout(timeout).     return this. }
true;public;0;3;/**  * The number of actions currently in the bulk.  */ ;/**  * The number of actions currently in the bulk.  */ public int numberOfActions() {     return request.numberOfActions(). }
false;public;1;4;;public BulkRequestBuilder pipeline(String globalPipeline) {     request.pipeline(globalPipeline).     return this. }
false;public;1;4;;public BulkRequestBuilder routing(String globalRouting) {     request.routing(globalRouting).     return this. }
