commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;4;/**  * Create a pre-configured char filter that may not vary at all.  */ ;/**  * Create a pre-configured char filter that may not vary at all.  */ public static PreConfiguredCharFilter singleton(String name, boolean useFilterForMultitermQueries, Function<Reader, Reader> create) {     return new PreConfiguredCharFilter(name, CachingStrategy.ONE, useFilterForMultitermQueries, (reader, version) -> create.apply(reader)). }
true;public,static;3;5;/**  * Create a pre-configured char filter that may not vary at all, provide access to the elasticsearch version  */ ;/**  * Create a pre-configured char filter that may not vary at all, provide access to the elasticsearch version  */ public static PreConfiguredCharFilter singletonWithVersion(String name, boolean useFilterForMultitermQueries, BiFunction<Reader, org.elasticsearch.Version, Reader> create) {     return new PreConfiguredCharFilter(name, CachingStrategy.ONE, useFilterForMultitermQueries, (reader, version) -> create.apply(reader, version)). }
true;public,static;3;5;/**  * Create a pre-configured token filter that may vary based on the Lucene version.  */ ;/**  * Create a pre-configured token filter that may vary based on the Lucene version.  */ public static PreConfiguredCharFilter luceneVersion(String name, boolean useFilterForMultitermQueries, BiFunction<Reader, org.apache.lucene.util.Version, Reader> create) {     return new PreConfiguredCharFilter(name, CachingStrategy.LUCENE, useFilterForMultitermQueries, (reader, version) -> create.apply(reader, version.luceneVersion)). }
true;public,static;3;4;/**  * Create a pre-configured token filter that may vary based on the Elasticsearch version.  */ ;/**  * Create a pre-configured token filter that may vary based on the Elasticsearch version.  */ public static PreConfiguredCharFilter elasticsearchVersion(String name, boolean useFilterForMultitermQueries, BiFunction<Reader, org.elasticsearch.Version, Reader> create) {     return new PreConfiguredCharFilter(name, CachingStrategy.ELASTICSEARCH, useFilterForMultitermQueries, create). }
true;public;0;3;/**  * Can this {@link TokenFilter} be used in multi-term queries?  */ ;/**  * Can this {@link TokenFilter} be used in multi-term queries?  */ public boolean shouldUseFilterForMultitermQueries() {     return useFilterForMultitermQueries. }
false;public;0;4;;@Override public String name() {     return getName(). }
false;public;1;4;;@Override public Reader create(Reader reader) {     return create.apply(reader, version). }
false;public;1;4;;@Override public Reader create(Reader reader) {     return create.apply(reader, version). }
false;public;0;4;;@Override public String name() {     return getName(). }
false;protected;1;27;;@Override protected CharFilterFactory create(Version version) {     if (useFilterForMultitermQueries) {         return new NormalizingCharFilterFactory() {              @Override             public String name() {                 return getName().             }              @Override             public Reader create(Reader reader) {                 return create.apply(reader, version).             }         }.     }     return new CharFilterFactory() {          @Override         public Reader create(Reader reader) {             return create.apply(reader, version).         }          @Override         public String name() {             return getName().         }     }. }
