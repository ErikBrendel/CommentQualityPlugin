commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeBoolean(backgroundIsSuperset). }
false;public;1;7;;@Override public boolean equals(Object other) {     if (!(other instanceof GND)) {         return false.     }     return super.equals(other). }
false;public;0;6;;@Override public int hashCode() {     int result = NAME.hashCode().     result = 31 * result + super.hashCode().     return result. }
true;public;4;23;/**  * Calculates Google Normalized Distance, as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007  * link: http://arxiv.org/pdf/cs/0412098v3.pdf  */ ;/**  * Calculates Google Normalized Distance, as described in "The Google Similarity Distance", Cilibrasi and Vitanyi, 2007  * link: http://arxiv.org/pdf/cs/0412098v3.pdf  */ @Override public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) {     Frequencies frequencies = computeNxys(subsetFreq, subsetSize, supersetFreq, supersetSize, "GND").     double fx = frequencies.N1_.     double fy = frequencies.N_1.     double fxy = frequencies.N11.     double N = frequencies.N.     if (fxy == 0) {         // no co-occurrence         return 0.0.     }     if ((fx == fy) && (fx == fxy)) {         // perfect co-occurrence         return 1.0.     }     double score = (Math.max(Math.log(fx), Math.log(fy)) - Math.log(fxy)) / (Math.log(N) - Math.min(Math.log(fx), Math.log(fy))).     // we must invert the order of terms because GND scores relevant terms low     score = Math.exp(-1.0d * score).     return score. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(BACKGROUND_IS_SUPERSET.getPreferredName(), backgroundIsSuperset).     builder.endObject().     return builder. }
false;protected;2;4;;@Override protected SignificanceHeuristic newHeuristic(boolean includeNegatives, boolean backgroundIsSuperset) {     return new GND(backgroundIsSuperset). }
false;public;1;17;;@Override public SignificanceHeuristic parse(XContentParser parser) throws IOException, QueryShardException {     String givenName = parser.currentName().     boolean backgroundIsSuperset = true.     XContentParser.Token token = parser.nextToken().     while (!token.equals(XContentParser.Token.END_OBJECT)) {         if (BACKGROUND_IS_SUPERSET.match(parser.currentName(), parser.getDeprecationHandler())) {             parser.nextToken().             backgroundIsSuperset = parser.booleanValue().         } else {             throw new ElasticsearchParseException("failed to parse [{}] significance heuristic. unknown field [{}]", givenName, parser.currentName()).         }         token = parser.nextToken().     }     return newHeuristic(true, backgroundIsSuperset). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(NAME).     builder.field(BACKGROUND_IS_SUPERSET.getPreferredName(), backgroundIsSuperset).     builder.endObject().     return builder. }
