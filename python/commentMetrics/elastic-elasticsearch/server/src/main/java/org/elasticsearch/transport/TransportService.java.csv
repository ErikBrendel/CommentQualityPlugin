# id;timestamp;commentText;codeText;commentWords;codeWords
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1544632755;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1544823664;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1547625930;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1548953505;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1549094096;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> @Override     public void onRequestReceived(long requestId, String action);1550601141;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);@Override_    public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;override,public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> private ExecutorService getExecutorService();1531179852;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1534203100;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1534362961;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1534755962;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1535046779;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1538067637;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1540583181;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1541698679;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1542646292;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1544518921;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1544632755;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1544823664;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1547625930;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1548953505;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1549094096;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> private ExecutorService getExecutorService();1550601141;The executor service for this transport service.__@return the executor service;private ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;private,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1527840262;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1529341607;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1529687475;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1531179852;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1534203100;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1534362961;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1534755962;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1535046779;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1538067637;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1540583181;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1541698679;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1542646292;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1544518921;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1544632755;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1544823664;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1547625930;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1548953505;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1549094096;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(DiscoveryNode node) throws ConnectTransportException;1550601141;Connect to the specified node with the default connection profile__@param node the node to connect to;public void connectToNode(DiscoveryNode node) throws ConnectTransportException {_        connectToNode(node, null)__    };connect,to,the,specified,node,with,the,default,connection,profile,param,node,the,node,to,connect,to;public,void,connect,to,node,discovery,node,node,throws,connect,transport,exception,connect,to,node,node,null
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1524684173;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        transport.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true)__            if (node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,transport,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,if,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1527840262;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        transport.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true)__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,transport,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1529341607;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        transport.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,transport,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1529687475;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        transport.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,transport,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1531179852;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        transport.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,transport,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1534203100;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }__        ConnectionProfile resolvedProfile = TcpTransport.resolveConnectionProfile(connectionProfile, defaultConnectionProfile)__        connectionManager.connectToNode(node, resolvedProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,profile,resolved,profile,tcp,transport,resolve,connection,profile,connection,profile,default,connection,profile,connection,manager,connect,to,node,node,resolved,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1534362961;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }__        connectionManager.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1534755962;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }__        connectionManager.connectToNode(node, connectionProfile, (newConnection, actualProfile) -> {_            _            final DiscoveryNode remote = handshake(newConnection, actualProfile.getHandshakeTimeout().millis(), cn -> true).discoveryNode__            if (validateConnections && node.equals(remote) == false) {_                throw new ConnectTransportException(node, "handshake failed. unexpected remote node " + remote)__            }_        })__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,new,connection,actual,profile,final,discovery,node,remote,handshake,new,connection,actual,profile,get,handshake,timeout,millis,cn,true,discovery,node,if,validate,connections,node,equals,remote,false,throw,new,connect,transport,exception,node,handshake,failed,unexpected,remote,node,remote
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1535046779;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1538067637;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1540583181;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1541698679;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1542646292;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1544518921;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1544632755;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1544823664;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1547625930;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1548953505;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1549094096;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile);1550601141;Connect to the specified node with the given connection profile__@param node the node to connect to_@param connectionProfile the connection profile to use when connecting to this node;public void connectToNode(final DiscoveryNode node, ConnectionProfile connectionProfile) {_        if (isLocalNode(node)) {_            return__        }_        connectionManager.connectToNode(node, connectionProfile, connectionValidator(node))__    };connect,to,the,specified,node,with,the,given,connection,profile,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use,when,connecting,to,this,node;public,void,connect,to,node,final,discovery,node,node,connection,profile,connection,profile,if,is,local,node,node,return,connection,manager,connect,to,node,node,connection,profile,connection,validator,node
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1524684173;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1527840262;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1529341607;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1529687475;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1531179852;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1534203100;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1534362961;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1534755962;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1535046779;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1538067637;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1540583181;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1541698679;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1542646292;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1544518921;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1544632755;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1544823664;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1547625930;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1548953505;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1549094096;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,                                                     String executor, TransportRequestHandler<Request> handler);1550601141;Registers a new request handler__@param action         The action the request handler is associated with_@param requestFactory a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> requestFactory,_                                                    String executor, TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(requestFactory), taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,factory,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,factory,string,executor,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,factory,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public static boolean isValidActionName(String actionName);1531179852;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1534203100;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1534362961;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1534755962;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1535046779;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1538067637;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1540583181;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1541698679;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1542646292;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1544518921;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1544632755;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1544823664;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1547625930;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1548953505;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1549094096;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public static boolean isValidActionName(String actionName);1550601141;Returns <code>true</code> iff the action name starts with a valid prefix.__@see #VALID_ACTION_PREFIXES;public static boolean isValidActionName(String actionName) {_        for (String prefix : VALID_ACTION_PREFIXES) {_            if (actionName.startsWith(prefix)) {_                return true__            }_        }_        return false__    };returns,code,true,code,iff,the,action,name,starts,with,a,valid,prefix,see;public,static,boolean,is,valid,action,name,string,action,name,for,string,prefix,if,action,name,starts,with,prefix,return,true,return,false
TransportService -> public boolean nodeConnected(DiscoveryNode node);1524684173;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || transport.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,transport,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1527840262;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || transport.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,transport,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1529341607;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || transport.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,transport,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1529687475;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || transport.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,transport,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1531179852;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || transport.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,transport,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1534203100;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1534362961;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1534755962;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1535046779;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1538067637;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1540583181;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1541698679;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1542646292;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1544518921;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1544632755;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1544823664;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1547625930;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1548953505;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1549094096;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public boolean nodeConnected(DiscoveryNode node);1550601141;Returns <code>true</code> iff the given node is already connected.;public boolean nodeConnected(DiscoveryNode node) {_        return isLocalNode(node) || connectionManager.nodeConnected(node)__    };returns,code,true,code,iff,the,given,node,is,already,connected;public,boolean,node,connected,discovery,node,node,return,is,local,node,node,connection,manager,node,connected,node
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1524684173;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1527840262;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1529341607;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1529687475;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1531179852;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534203100;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534362961;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534755962;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1535046779;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1538067637;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1540583181;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1541698679;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1542646292;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544518921;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544632755;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544823664;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1547625930;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1548953505;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1549094096;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1550601141;Registers a new request handler__@param action                The action the request handler is associated with_@param requestReader               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1531179852;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1534203100;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1534362961;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1534755962;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1535046779;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1538067637;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1540583181;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1541698679;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1542646292;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1544518921;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1544632755;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1544823664;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1547625930;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1548953505;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1549094096;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                               TransportRequestOptions options);1550601141;called by the {@link Transport} implementation once a request has been sent;public void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                              TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;public,void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1531179852;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1534203100;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1534362961;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1534755962;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1535046779;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1538067637;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1540583181;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1541698679;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1542646292;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public void onResponseSent(long requestId, String action, Exception e);1544518921;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1524684173;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        super(settings)__        this.transport = transport__        this.threadPool = threadPool__        this.localNodeFactory = localNodeFactory__        this.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        setTracerLogInclude(TRACE_LOG_INCLUDE_SETTING.get(settings))__        setTracerLogExclude(TRACE_LOG_EXCLUDE_SETTING.get(settings))__        tracerLog = Loggers.getLogger(logger, ".tracer")__        taskManager = createTaskManager(settings, threadPool, taskHeaders)__        this.interceptor = transportInterceptor__        this.asyncSender = interceptor.interceptSender(this::sendRequestInternal)__        this.connectToRemoteCluster = RemoteClusterService.ENABLE_REMOTE_CLUSTERS.get(settings)__        remoteClusterService = new RemoteClusterService(settings, this)__        if (clusterSettings != null) {_            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_INCLUDE_SETTING, this::setTracerLogInclude)__            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_EXCLUDE_SETTING, this::setTracerLogExclude)__            if (connectToRemoteCluster) {_                remoteClusterService.listenForUpdates(clusterSettings)__            }_        }_    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,super,settings,this,transport,transport,this,thread,pool,thread,pool,this,local,node,factory,local,node,factory,this,cluster,name,cluster,name,get,settings,set,tracer,log,include,get,settings,set,tracer,log,exclude,get,settings,tracer,log,loggers,get,logger,logger,tracer,task,manager,create,task,manager,settings,thread,pool,task,headers,this,interceptor,transport,interceptor,this,async,sender,interceptor,intercept,sender,this,send,request,internal,this,connect,to,remote,cluster,remote,cluster,service,get,settings,remote,cluster,service,new,remote,cluster,service,settings,this,if,cluster,settings,null,cluster,settings,add,settings,update,consumer,this,set,tracer,log,include,cluster,settings,add,settings,update,consumer,this,set,tracer,log,exclude,if,connect,to,remote,cluster,remote,cluster,service,listen,for,updates,cluster,settings
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1527840262;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        super(settings)__        _        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||_            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings)__        this.transport = transport__        this.threadPool = threadPool__        this.localNodeFactory = localNodeFactory__        this.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        setTracerLogInclude(TRACE_LOG_INCLUDE_SETTING.get(settings))__        setTracerLogExclude(TRACE_LOG_EXCLUDE_SETTING.get(settings))__        tracerLog = Loggers.getLogger(logger, ".tracer")__        taskManager = createTaskManager(settings, threadPool, taskHeaders)__        this.interceptor = transportInterceptor__        this.asyncSender = interceptor.interceptSender(this::sendRequestInternal)__        this.connectToRemoteCluster = RemoteClusterService.ENABLE_REMOTE_CLUSTERS.get(settings)__        remoteClusterService = new RemoteClusterService(settings, this)__        if (clusterSettings != null) {_            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_INCLUDE_SETTING, this::setTracerLogInclude)__            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_EXCLUDE_SETTING, this::setTracerLogExclude)__            if (connectToRemoteCluster) {_                remoteClusterService.listenForUpdates(clusterSettings)__            }_        }_    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,super,settings,this,validate,connections,transport,client,equals,settings,get,client,get,key,false,transport,client,get,settings,this,transport,transport,this,thread,pool,thread,pool,this,local,node,factory,local,node,factory,this,cluster,name,cluster,name,get,settings,set,tracer,log,include,get,settings,set,tracer,log,exclude,get,settings,tracer,log,loggers,get,logger,logger,tracer,task,manager,create,task,manager,settings,thread,pool,task,headers,this,interceptor,transport,interceptor,this,async,sender,interceptor,intercept,sender,this,send,request,internal,this,connect,to,remote,cluster,remote,cluster,service,get,settings,remote,cluster,service,new,remote,cluster,service,settings,this,if,cluster,settings,null,cluster,settings,add,settings,update,consumer,this,set,tracer,log,include,cluster,settings,add,settings,update,consumer,this,set,tracer,log,exclude,if,connect,to,remote,cluster,remote,cluster,service,listen,for,updates,cluster,settings
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1529341607;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        super(settings)__        _        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||_            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings)__        this.transport = transport__        this.threadPool = threadPool__        this.localNodeFactory = localNodeFactory__        this.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        setTracerLogInclude(TRACE_LOG_INCLUDE_SETTING.get(settings))__        setTracerLogExclude(TRACE_LOG_EXCLUDE_SETTING.get(settings))__        tracerLog = Loggers.getLogger(logger, ".tracer")__        taskManager = createTaskManager(settings, threadPool, taskHeaders)__        this.interceptor = transportInterceptor__        this.asyncSender = interceptor.interceptSender(this::sendRequestInternal)__        this.connectToRemoteCluster = RemoteClusterService.ENABLE_REMOTE_CLUSTERS.get(settings)__        remoteClusterService = new RemoteClusterService(settings, this)__        if (clusterSettings != null) {_            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_INCLUDE_SETTING, this::setTracerLogInclude)__            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_EXCLUDE_SETTING, this::setTracerLogExclude)__            if (connectToRemoteCluster) {_                remoteClusterService.listenForUpdates(clusterSettings)__            }_        }_    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,super,settings,this,validate,connections,transport,client,equals,settings,get,client,get,key,false,transport,client,get,settings,this,transport,transport,this,thread,pool,thread,pool,this,local,node,factory,local,node,factory,this,cluster,name,cluster,name,get,settings,set,tracer,log,include,get,settings,set,tracer,log,exclude,get,settings,tracer,log,loggers,get,logger,logger,tracer,task,manager,create,task,manager,settings,thread,pool,task,headers,this,interceptor,transport,interceptor,this,async,sender,interceptor,intercept,sender,this,send,request,internal,this,connect,to,remote,cluster,remote,cluster,service,get,settings,remote,cluster,service,new,remote,cluster,service,settings,this,if,cluster,settings,null,cluster,settings,add,settings,update,consumer,this,set,tracer,log,include,cluster,settings,add,settings,update,consumer,this,set,tracer,log,exclude,if,connect,to,remote,cluster,remote,cluster,service,listen,for,updates,cluster,settings
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1529687475;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        super(settings)__        _        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||_            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings)__        this.transport = transport__        this.threadPool = threadPool__        this.localNodeFactory = localNodeFactory__        this.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        setTracerLogInclude(TRACE_LOG_INCLUDE_SETTING.get(settings))__        setTracerLogExclude(TRACE_LOG_EXCLUDE_SETTING.get(settings))__        tracerLog = Loggers.getLogger(logger, ".tracer")__        taskManager = createTaskManager(settings, threadPool, taskHeaders)__        this.interceptor = transportInterceptor__        this.asyncSender = interceptor.interceptSender(this::sendRequestInternal)__        this.connectToRemoteCluster = RemoteClusterService.ENABLE_REMOTE_CLUSTERS.get(settings)__        remoteClusterService = new RemoteClusterService(settings, this)__        if (clusterSettings != null) {_            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_INCLUDE_SETTING, this::setTracerLogInclude)__            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_EXCLUDE_SETTING, this::setTracerLogExclude)__            if (connectToRemoteCluster) {_                remoteClusterService.listenForUpdates(clusterSettings)__            }_        }_    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,super,settings,this,validate,connections,transport,client,equals,settings,get,client,get,key,false,transport,client,get,settings,this,transport,transport,this,thread,pool,thread,pool,this,local,node,factory,local,node,factory,this,cluster,name,cluster,name,get,settings,set,tracer,log,include,get,settings,set,tracer,log,exclude,get,settings,tracer,log,loggers,get,logger,logger,tracer,task,manager,create,task,manager,settings,thread,pool,task,headers,this,interceptor,transport,interceptor,this,async,sender,interceptor,intercept,sender,this,send,request,internal,this,connect,to,remote,cluster,remote,cluster,service,get,settings,remote,cluster,service,new,remote,cluster,service,settings,this,if,cluster,settings,null,cluster,settings,add,settings,update,consumer,this,set,tracer,log,include,cluster,settings,add,settings,update,consumer,this,set,tracer,log,exclude,if,connect,to,remote,cluster,remote,cluster,service,listen,for,updates,cluster,settings
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1531179852;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        super(settings)__        _        this.validateConnections = TransportClient.CLIENT_TYPE.equals(settings.get(Client.CLIENT_TYPE_SETTING_S.getKey())) == false ||_            TransportClient.CLIENT_TRANSPORT_SNIFF.get(settings)__        this.transport = transport__        this.threadPool = threadPool__        this.localNodeFactory = localNodeFactory__        this.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings)__        setTracerLogInclude(TRACE_LOG_INCLUDE_SETTING.get(settings))__        setTracerLogExclude(TRACE_LOG_EXCLUDE_SETTING.get(settings))__        tracerLog = Loggers.getLogger(logger, ".tracer")__        taskManager = createTaskManager(settings, threadPool, taskHeaders)__        this.interceptor = transportInterceptor__        this.asyncSender = interceptor.interceptSender(this::sendRequestInternal)__        this.connectToRemoteCluster = RemoteClusterService.ENABLE_REMOTE_CLUSTERS.get(settings)__        remoteClusterService = new RemoteClusterService(settings, this)__        responseHandlers = transport.getResponseHandlers()__        if (clusterSettings != null) {_            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_INCLUDE_SETTING, this::setTracerLogInclude)__            clusterSettings.addSettingsUpdateConsumer(TRACE_LOG_EXCLUDE_SETTING, this::setTracerLogExclude)__            if (connectToRemoteCluster) {_                remoteClusterService.listenForUpdates(clusterSettings)__            }_        }_        registerRequestHandler(_            HANDSHAKE_ACTION_NAME,_            () -> HandshakeRequest.INSTANCE,_            ThreadPool.Names.SAME,_            false, false,_            (request, channel, task) -> channel.sendResponse(_                new HandshakeResponse(localNode, clusterName, localNode.getVersion())))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,super,settings,this,validate,connections,transport,client,equals,settings,get,client,get,key,false,transport,client,get,settings,this,transport,transport,this,thread,pool,thread,pool,this,local,node,factory,local,node,factory,this,cluster,name,cluster,name,get,settings,set,tracer,log,include,get,settings,set,tracer,log,exclude,get,settings,tracer,log,loggers,get,logger,logger,tracer,task,manager,create,task,manager,settings,thread,pool,task,headers,this,interceptor,transport,interceptor,this,async,sender,interceptor,intercept,sender,this,send,request,internal,this,connect,to,remote,cluster,remote,cluster,service,get,settings,remote,cluster,service,new,remote,cluster,service,settings,this,response,handlers,transport,get,response,handlers,if,cluster,settings,null,cluster,settings,add,settings,update,consumer,this,set,tracer,log,include,cluster,settings,add,settings,update,consumer,this,set,tracer,log,exclude,if,connect,to,remote,cluster,remote,cluster,service,listen,for,updates,cluster,settings,register,request,handler,handshake,request,instance,thread,pool,names,same,false,false,request,channel,task,channel,send,response,new,handshake,response,local,node,cluster,name,local,node,get,version
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1534203100;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1534362961;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1534755962;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1535046779;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1538067637;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1540583181;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1541698679;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1542646292;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1544518921;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1544632755;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_updates for {@link #TRACE_LOG_EXCLUDE_SETTING} and {@link #TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,and,link;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1544823664;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_*    updates for {@link TransportSettings#TRACE_LOG_EXCLUDE_SETTING} and {@link TransportSettings#TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,transport,settings,and,link,transport,settings;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1547625930;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_*    updates for {@link TransportSettings#TRACE_LOG_EXCLUDE_SETTING} and {@link TransportSettings#TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,transport,settings,and,link,transport,settings;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1548953505;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_*    updates for {@link TransportSettings#TRACE_LOG_EXCLUDE_SETTING} and {@link TransportSettings#TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,transport,settings,and,link,transport,settings;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1549094096;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_*    updates for {@link TransportSettings#TRACE_LOG_EXCLUDE_SETTING} and {@link TransportSettings#TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport, threadPool))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,transport,settings,and,link,transport,settings;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport,thread,pool
TransportService -> public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,                             Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,                             Set<String> taskHeaders);1550601141;Build the service.__@param clusterSettings if non null, the {@linkplain TransportService} will register with the {@link ClusterSettings} for settings_*    updates for {@link TransportSettings#TRACE_LOG_EXCLUDE_SETTING} and {@link TransportSettings#TRACE_LOG_INCLUDE_SETTING}.;public TransportService(Settings settings, Transport transport, ThreadPool threadPool, TransportInterceptor transportInterceptor,_                            Function<BoundTransportAddress, DiscoveryNode> localNodeFactory, @Nullable ClusterSettings clusterSettings,_                            Set<String> taskHeaders) {_        this(settings, transport, threadPool, transportInterceptor, localNodeFactory, clusterSettings, taskHeaders,_            new ConnectionManager(settings, transport))__    };build,the,service,param,cluster,settings,if,non,null,the,linkplain,transport,service,will,register,with,the,link,cluster,settings,for,settings,updates,for,link,transport,settings,and,link,transport,settings;public,transport,service,settings,settings,transport,transport,thread,pool,thread,pool,transport,interceptor,transport,interceptor,function,bound,transport,address,discovery,node,local,node,factory,nullable,cluster,settings,cluster,settings,set,string,task,headers,this,settings,transport,thread,pool,transport,interceptor,local,node,factory,cluster,settings,task,headers,new,connection,manager,settings,transport
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1544632755;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1544823664;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1547625930;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1548953505;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1549094096;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> @Override     public void onResponseSent(long requestId, String action, Exception e);1550601141;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;@Override_    public void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;override,public,void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                        TransportRequestOptions options);1524684173;called by the {@link Transport} implementation once a request has been sent;void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                       TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                        TransportRequestOptions options);1527840262;called by the {@link Transport} implementation once a request has been sent;void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                       TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                        TransportRequestOptions options);1529341607;called by the {@link Transport} implementation once a request has been sent;void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                       TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,                        TransportRequestOptions options);1529687475;called by the {@link Transport} implementation once a request has been sent;void onRequestSent(DiscoveryNode node, long requestId, String action, TransportRequest request,_                       TransportRequestOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceRequestSent(node, requestId, action, options)__        }_    };called,by,the,link,transport,implementation,once,a,request,has,been,sent;void,on,request,sent,discovery,node,node,long,request,id,string,action,transport,request,request,transport,request,options,options,if,trace,enabled,should,trace,action,action,trace,request,sent,node,request,id,action,options
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException;1529341607;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,throws,connect,transport,exception,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException;1529687475;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,throws,connect,transport,exception,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException;1531179852;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,throws,connect,transport,exception,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1531179852;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1534203100;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1534362961;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1534755962;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1535046779;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1538067637;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1540583181;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1541698679;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1542646292;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1544518921;called by the {@link Transport} implementation once a response was sent to calling node;public void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;public,void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1534362961;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1534755962;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1535046779;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1538067637;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1540583181;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1541698679;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1542646292;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1544518921;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1544632755;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1544823664;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1547625930;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1548953505;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1549094096;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException;1550601141;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param connectionProfile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile connectionProfile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.openConnection(node, connectionProfile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,connection,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,connection,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,open,connection,node,connection,profile
TransportService -> public final void acceptIncomingRequests();1524684173;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1527840262;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1529341607;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1529687475;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1531179852;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1534203100;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1534362961;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1534755962;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1535046779;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1538067637;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1540583181;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1541698679;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1542646292;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1544518921;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1544632755;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1544823664;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1547625930;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1548953505;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1549094096;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public final void acceptIncomingRequests();1550601141;start accepting incoming requests._when the transport layer starts up it will block any incoming requests until_this method is called;public final void acceptIncomingRequests() {_        blockIncomingRequestsLatch.countDown()__    };start,accepting,incoming,requests,when,the,transport,layer,starts,up,it,will,block,any,incoming,requests,until,this,method,is,called;public,final,void,accept,incoming,requests,block,incoming,requests,latch,count,down
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1524684173;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,transport,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1527840262;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,transport,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1529341607;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,transport,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1529687475;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,transport,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1531179852;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,transport,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1534203100;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1534362961;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1534755962;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1535046779;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1538067637;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1540583181;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1541698679;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1542646292;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1544518921;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1544632755;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1544823664;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1547625930;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1548953505;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1549094096;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public Transport.Connection getConnection(DiscoveryNode node);1550601141;Returns either a real transport connection or a local node connection if we are using the local node optimization._@throws NodeNotConnectedException if the given node is not connected;public Transport.Connection getConnection(DiscoveryNode node) {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return connectionManager.getConnection(node)__        }_    };returns,either,a,real,transport,connection,or,a,local,node,connection,if,we,are,using,the,local,node,optimization,throws,node,not,connected,exception,if,the,given,node,is,not,connected;public,transport,connection,get,connection,discovery,node,node,if,is,local,node,node,return,local,node,connection,else,return,connection,manager,get,connection,node
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1534203100;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1534362961;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1534755962;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1535046779;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1538067637;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1540583181;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1541698679;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1542646292;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1544518921;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1544632755;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1544823664;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1547625930;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1548953505;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1549094096;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> public HandshakeResponse handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate);1550601141;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the handshake response_@throws IllegalStateException if the handshake failed;public HandshakeResponse handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse read(StreamInput in) throws IOException {_                    return new HandshakeResponse(in)__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,handshake,response,throws,illegal,state,exception,if,the,handshake,failed;public,handshake,response,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,read,stream,input,in,throws,ioexception,return,new,handshake,response,in,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1544632755;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1544823664;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1547625930;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1548953505;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1549094096;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> @Override     public void onResponseSent(long requestId, String action, TransportResponse response);1550601141;called by the {@link Transport} implementation once a response was sent to calling node;@Override_    public void onResponseSent(long requestId, String action, TransportResponse response) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;override,public,void,on,response,sent,long,request,id,string,action,transport,response,response,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1524684173;called by the {@link Transport} implementation once a response was sent to calling node;void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1527840262;called by the {@link Transport} implementation once a response was sent to calling node;void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1529341607;called by the {@link Transport} implementation once a response was sent to calling node;void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options);1529687475;called by the {@link Transport} implementation once a response was sent to calling node;void onResponseSent(long requestId, String action, TransportResponse response, TransportResponseOptions options) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action)__        }_    };called,by,the,link,transport,implementation,once,a,response,was,sent,to,calling,node;void,on,response,sent,long,request,id,string,action,transport,response,response,transport,response,options,options,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action
TransportService -> void onResponseSent(long requestId, String action, Exception e);1524684173;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> void onResponseSent(long requestId, String action, Exception e);1527840262;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> void onResponseSent(long requestId, String action, Exception e);1529341607;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> void onResponseSent(long requestId, String action, Exception e);1529687475;called by the {@link Transport} implementation after an exception was sent as a response to an incoming request;void onResponseSent(long requestId, String action, Exception e) {_        if (traceEnabled() && shouldTraceAction(action)) {_            traceResponseSent(requestId, action, e)__        }_    };called,by,the,link,transport,implementation,after,an,exception,was,sent,as,a,response,to,an,incoming,request;void,on,response,sent,long,request,id,string,action,exception,e,if,trace,enabled,should,trace,action,action,trace,response,sent,request,id,action,e
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1524684173;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals)__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1527840262;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals)__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1529341607;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1529687475;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1531179852;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1534203100;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1534362961;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1534755962;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1535046779;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1538067637;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1540583181;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1541698679;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1542646292;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1544518921;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1544632755;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1544823664;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1547625930;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1548953505;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1549094096;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public DiscoveryNode handshake(             final Transport.Connection connection,             final long handshakeTimeout) throws ConnectTransportException;1550601141;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node mismatches the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_            final Transport.Connection connection,_            final long handshakeTimeout) throws ConnectTransportException {_        return handshake(connection, handshakeTimeout, clusterName::equals).discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,mismatches,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,throws,connect,transport,exception,return,handshake,connection,handshake,timeout,cluster,name,equals,discovery,node
TransportService -> public ThreadPool getThreadPool();1524684173;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1527840262;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1529341607;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1529687475;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1531179852;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1534203100;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1534362961;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1534755962;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1535046779;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1538067637;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1540583181;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1541698679;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1542646292;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1544518921;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1544632755;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1544823664;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1547625930;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1548953505;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1549094096;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public ThreadPool getThreadPool();1550601141;Returns the internal thread pool;public ThreadPool getThreadPool() {_        return threadPool__    };returns,the,internal,thread,pool;public,thread,pool,get,thread,pool,return,thread,pool
TransportService -> public void onRequestReceived(long requestId, String action);1531179852;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1534203100;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1534362961;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1534755962;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1535046779;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1538067637;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1540583181;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1541698679;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1542646292;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public void onRequestReceived(long requestId, String action);1544518921;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);public void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;public,void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1524684173;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1527840262;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1529341607;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1529687475;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1531179852;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException;1534203100;Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers_responsibility to close the connection once it goes out of scope._@param node the node to connect to_@param profile the connection profile to use;public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {_        if (isLocalNode(node)) {_            return localNodeConnection__        } else {_            return transport.openConnection(node, profile)__        }_    };establishes,and,returns,a,new,connection,to,the,given,node,the,connection,is,not,maintained,by,this,service,it,s,the,callers,responsibility,to,close,the,connection,once,it,goes,out,of,scope,param,node,the,node,to,connect,to,param,profile,the,connection,profile,to,use;public,transport,connection,open,connection,final,discovery,node,node,connection,profile,profile,throws,ioexception,if,is,local,node,node,return,local,node,connection,else,return,transport,open,connection,node,profile
TransportService -> void onRequestReceived(long requestId, String action);1524684173;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> void onRequestReceived(long requestId, String action);1527840262;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> void onRequestReceived(long requestId, String action);1529341607;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> void onRequestReceived(long requestId, String action);1529687475;called by the {@link Transport} implementation when an incoming request arrives but before_any parsing of it has happened (with the exception of the requestId and action);void onRequestReceived(long requestId, String action) {_        try {_            blockIncomingRequestsLatch.await()__        } catch (InterruptedException e) {_            logger.trace("interrupted while waiting for incoming requests block to be removed")__        }_        if (traceEnabled() && shouldTraceAction(action)) {_            traceReceivedRequest(requestId, action)__        }_    };called,by,the,link,transport,implementation,when,an,incoming,request,arrives,but,before,any,parsing,of,it,has,happened,with,the,exception,of,the,request,id,and,action;void,on,request,received,long,request,id,string,action,try,block,incoming,requests,latch,await,catch,interrupted,exception,e,logger,trace,interrupted,while,waiting,for,incoming,requests,block,to,be,removed,if,trace,enabled,should,trace,action,action,trace,received,request,request,id,action
TransportService -> public TransportResponseHandler onResponseReceived(final long requestId);1524684173;called by the {@link Transport} implementation when a response or an exception has been received for a previously_sent request (before any processing or deserialization was done). Returns the appropriate response handler or null if not_found.;public TransportResponseHandler onResponseReceived(final long requestId) {_        RequestHolder holder = clientHandlers.remove(requestId)___        if (holder == null) {_            checkForTimeout(requestId)__            return null__        }_        holder.cancelTimeout()__        if (traceEnabled() && shouldTraceAction(holder.action())) {_            traceReceivedResponse(requestId, holder.connection().getNode(), holder.action())__        }_        return holder.handler()__    };called,by,the,link,transport,implementation,when,a,response,or,an,exception,has,been,received,for,a,previously,sent,request,before,any,processing,or,deserialization,was,done,returns,the,appropriate,response,handler,or,null,if,not,found;public,transport,response,handler,on,response,received,final,long,request,id,request,holder,holder,client,handlers,remove,request,id,if,holder,null,check,for,timeout,request,id,return,null,holder,cancel,timeout,if,trace,enabled,should,trace,action,holder,action,trace,received,response,request,id,holder,connection,get,node,holder,action,return,holder,handler
TransportService -> public TransportResponseHandler onResponseReceived(final long requestId);1527840262;called by the {@link Transport} implementation when a response or an exception has been received for a previously_sent request (before any processing or deserialization was done). Returns the appropriate response handler or null if not_found.;public TransportResponseHandler onResponseReceived(final long requestId) {_        RequestHolder holder = clientHandlers.remove(requestId)___        if (holder == null) {_            checkForTimeout(requestId)__            return null__        }_        holder.cancelTimeout()__        if (traceEnabled() && shouldTraceAction(holder.action())) {_            traceReceivedResponse(requestId, holder.connection().getNode(), holder.action())__        }_        return holder.handler()__    };called,by,the,link,transport,implementation,when,a,response,or,an,exception,has,been,received,for,a,previously,sent,request,before,any,processing,or,deserialization,was,done,returns,the,appropriate,response,handler,or,null,if,not,found;public,transport,response,handler,on,response,received,final,long,request,id,request,holder,holder,client,handlers,remove,request,id,if,holder,null,check,for,timeout,request,id,return,null,holder,cancel,timeout,if,trace,enabled,should,trace,action,holder,action,trace,received,response,request,id,holder,connection,get,node,holder,action,return,holder,handler
TransportService -> public TransportResponseHandler onResponseReceived(final long requestId);1529341607;called by the {@link Transport} implementation when a response or an exception has been received for a previously_sent request (before any processing or deserialization was done). Returns the appropriate response handler or null if not_found.;public TransportResponseHandler onResponseReceived(final long requestId) {_        RequestHolder holder = clientHandlers.remove(requestId)___        if (holder == null) {_            checkForTimeout(requestId)__            return null__        }_        holder.cancelTimeout()__        if (traceEnabled() && shouldTraceAction(holder.action())) {_            traceReceivedResponse(requestId, holder.connection().getNode(), holder.action())__        }_        return holder.handler()__    };called,by,the,link,transport,implementation,when,a,response,or,an,exception,has,been,received,for,a,previously,sent,request,before,any,processing,or,deserialization,was,done,returns,the,appropriate,response,handler,or,null,if,not,found;public,transport,response,handler,on,response,received,final,long,request,id,request,holder,holder,client,handlers,remove,request,id,if,holder,null,check,for,timeout,request,id,return,null,holder,cancel,timeout,if,trace,enabled,should,trace,action,holder,action,trace,received,response,request,id,holder,connection,get,node,holder,action,return,holder,handler
TransportService -> public TransportResponseHandler onResponseReceived(final long requestId);1529687475;called by the {@link Transport} implementation when a response or an exception has been received for a previously_sent request (before any processing or deserialization was done). Returns the appropriate response handler or null if not_found.;public TransportResponseHandler onResponseReceived(final long requestId) {_        RequestHolder holder = clientHandlers.remove(requestId)___        if (holder == null) {_            checkForTimeout(requestId)__            return null__        }_        holder.cancelTimeout()__        if (traceEnabled() && shouldTraceAction(holder.action())) {_            traceReceivedResponse(requestId, holder.connection().getNode(), holder.action())__        }_        return holder.handler()__    };called,by,the,link,transport,implementation,when,a,response,or,an,exception,has,been,received,for,a,previously,sent,request,before,any,processing,or,deserialization,was,done,returns,the,appropriate,response,handler,or,null,if,not,found;public,transport,response,handler,on,response,received,final,long,request,id,request,holder,holder,client,handlers,remove,request,id,if,holder,null,check,for,timeout,request,id,return,null,holder,cancel,timeout,if,trace,enabled,should,trace,action,holder,action,trace,received,response,request,id,holder,connection,get,node,holder,action,return,holder,handler
TransportService -> TimeoutHandler -> public void cancel();1524684173;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #clientHandlers}_to make sure this doesn't run.;public void cancel() {_            assert clientHandlers.get(requestId) == null :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,client,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,client,handlers,get,request,id,null,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1527840262;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #clientHandlers}_to make sure this doesn't run.;public void cancel() {_            assert clientHandlers.get(requestId) == null :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,client,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,client,handlers,get,request,id,null,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1529341607;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #clientHandlers}_to make sure this doesn't run.;public void cancel() {_            assert clientHandlers.get(requestId) == null :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,client,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,client,handlers,get,request,id,null,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1529687475;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #clientHandlers}_to make sure this doesn't run.;public void cancel() {_            assert clientHandlers.get(requestId) == null :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,client,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,client,handlers,get,request,id,null,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1531179852;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1534203100;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1534362961;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1534755962;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1535046779;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1538067637;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1540583181;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1541698679;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1542646292;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1544518921;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1544632755;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1544823664;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1547625930;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            FutureUtils.cancel(future)__        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,future,utils,cancel,future
TransportService -> TimeoutHandler -> public void cancel();1548953505;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            if (cancellable != null) {_                cancellable.cancel()__            }_        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,if,cancellable,null,cancellable,cancel
TransportService -> TimeoutHandler -> public void cancel();1549094096;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            if (cancellable != null) {_                cancellable.cancel()__            }_        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,if,cancellable,null,cancellable,cancel
TransportService -> TimeoutHandler -> public void cancel();1550601141;cancels timeout handling. this is a best effort only to avoid running it. remove the requestId from {@link #responseHandlers}_to make sure this doesn't run.;public void cancel() {_            assert responseHandlers.contains(requestId) == false :_                "cancel must be called after the requestId [" + requestId + "] has been removed from clientHandlers"__            if (cancellable != null) {_                cancellable.cancel()__            }_        };cancels,timeout,handling,this,is,a,best,effort,only,to,avoid,running,it,remove,the,request,id,from,link,response,handlers,to,make,sure,this,doesn,t,run;public,void,cancel,assert,response,handlers,contains,request,id,false,cancel,must,be,called,after,the,request,id,request,id,has,been,removed,from,client,handlers,if,cancellable,null,cancellable,cancel
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1524684173;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1527840262;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1529341607;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1529687475;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1531179852;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534203100;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534362961;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1534755962;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1535046779;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1538067637;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1540583181;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1541698679;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1542646292;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544518921;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544632755;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1544823664;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1547625930;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1548953505;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1549094096;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,                                                                           Writeable.Reader<Request> requestReader,                                                                           TransportRequestHandler<Request> handler);1550601141;Registers a new request handler__@param action         The action the request handler is associated with_@param requestReader  a callable to be used construct new instances for streaming_@param executor       The executor the request handling will be executed on_@param handler        The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, String executor,_                                                                          Writeable.Reader<Request> requestReader,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, false, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, requestReader, taskManager, handler, executor, false, true)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,reader,a,callable,to,be,used,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,string,executor,writeable,reader,request,request,reader,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,false,handler,request,handler,registry,request,reg,new,request,handler,registry,action,request,reader,task,manager,handler,executor,false,true,transport,register,request,handler,reg
TransportService -> protected ExecutorService getExecutorService();1524684173;The executor service for this transport service.__@return the executor service;protected ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;protected,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> protected ExecutorService getExecutorService();1527840262;The executor service for this transport service.__@return the executor service;protected ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;protected,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> protected ExecutorService getExecutorService();1529341607;The executor service for this transport service.__@return the executor service;protected ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;protected,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> protected ExecutorService getExecutorService();1529687475;The executor service for this transport service.__@return the executor service;protected ExecutorService getExecutorService() {_        return threadPool.generic()__    };the,executor,service,for,this,transport,service,return,the,executor,service;protected,executor,service,get,executor,service,return,thread,pool,generic
TransportService -> public DiscoveryNode handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException;1524684173;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response.discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,throws,connect,transport,exception,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response,discovery,node
TransportService -> public DiscoveryNode handshake(         final Transport.Connection connection,         final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException;1527840262;Executes a high-level handshake using the given connection_and returns the discovery node of the node the connection_was established with. The handshake will fail if the cluster_name on the target node doesn't match the local cluster name.__@param connection       the connection to a specific node_@param handshakeTimeout handshake timeout_@param clusterNamePredicate cluster name validation predicate_@return the connected node_@throws ConnectTransportException if the connection failed_@throws IllegalStateException if the handshake failed;public DiscoveryNode handshake(_        final Transport.Connection connection,_        final long handshakeTimeout, Predicate<ClusterName> clusterNamePredicate) throws ConnectTransportException {_        final HandshakeResponse response__        final DiscoveryNode node = connection.getNode()__        try {_            PlainTransportFuture<HandshakeResponse> futureHandler = new PlainTransportFuture<>(_                new FutureTransportResponseHandler<HandshakeResponse>() {_                @Override_                public HandshakeResponse newInstance() {_                    return new HandshakeResponse()__                }_            })__            sendRequest(connection, HANDSHAKE_ACTION_NAME, HandshakeRequest.INSTANCE,_                TransportRequestOptions.builder().withTimeout(handshakeTimeout).build(), futureHandler)__            response = futureHandler.txGet()__        } catch (Exception e) {_            throw new IllegalStateException("handshake failed with " + node, e)__        }__        if (!clusterNamePredicate.test(response.clusterName)) {_            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node)__        } else if (response.version.isCompatible(localNode.getVersion()) == false) {_            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node)__        }__        return response.discoveryNode__    };executes,a,high,level,handshake,using,the,given,connection,and,returns,the,discovery,node,of,the,node,the,connection,was,established,with,the,handshake,will,fail,if,the,cluster,name,on,the,target,node,doesn,t,match,the,local,cluster,name,param,connection,the,connection,to,a,specific,node,param,handshake,timeout,handshake,timeout,param,cluster,name,predicate,cluster,name,validation,predicate,return,the,connected,node,throws,connect,transport,exception,if,the,connection,failed,throws,illegal,state,exception,if,the,handshake,failed;public,discovery,node,handshake,final,transport,connection,connection,final,long,handshake,timeout,predicate,cluster,name,cluster,name,predicate,throws,connect,transport,exception,final,handshake,response,response,final,discovery,node,node,connection,get,node,try,plain,transport,future,handshake,response,future,handler,new,plain,transport,future,new,future,transport,response,handler,handshake,response,override,public,handshake,response,new,instance,return,new,handshake,response,send,request,connection,handshake,request,instance,transport,request,options,builder,with,timeout,handshake,timeout,build,future,handler,response,future,handler,tx,get,catch,exception,e,throw,new,illegal,state,exception,handshake,failed,with,node,e,if,cluster,name,predicate,test,response,cluster,name,throw,new,illegal,state,exception,handshake,failed,mismatched,cluster,name,response,cluster,name,node,else,if,response,version,is,compatible,local,node,get,version,false,throw,new,illegal,state,exception,handshake,failed,incompatible,version,response,version,node,return,response,discovery,node
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1524684173;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1527840262;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1529341607;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1529687475;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1531179852;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1534203100;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1534362961;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1534755962;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1535046779;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1538067637;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1540583181;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1541698679;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1542646292;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1544518921;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1544632755;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1544823664;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1547625930;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1548953505;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1549094096;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
TransportService -> public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,                                                                           String executor, boolean forceExecution,                                                                           boolean canTripCircuitBreaker,                                                                           TransportRequestHandler<Request> handler);1550601141;Registers a new request handler__@param action                The action the request handler is associated with_@param request               The request class that will be used to construct new instances for streaming_@param executor              The executor the request handling will be executed on_@param forceExecution        Force execution on the executor queue and never reject it_@param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached._@param handler               The handler itself that implements the request handling;public <Request extends TransportRequest> void registerRequestHandler(String action, Supplier<Request> request,_                                                                          String executor, boolean forceExecution,_                                                                          boolean canTripCircuitBreaker,_                                                                          TransportRequestHandler<Request> handler) {_        validateActionName(action)__        handler = interceptor.interceptHandler(action, executor, forceExecution, handler)__        RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(_            action, Streamable.newWriteableReader(request), taskManager, handler, executor, forceExecution, canTripCircuitBreaker)__        transport.registerRequestHandler(reg)__    };registers,a,new,request,handler,param,action,the,action,the,request,handler,is,associated,with,param,request,the,request,class,that,will,be,used,to,construct,new,instances,for,streaming,param,executor,the,executor,the,request,handling,will,be,executed,on,param,force,execution,force,execution,on,the,executor,queue,and,never,reject,it,param,can,trip,circuit,breaker,check,the,request,size,and,raise,an,exception,in,case,the,limit,is,breached,param,handler,the,handler,itself,that,implements,the,request,handling;public,request,extends,transport,request,void,register,request,handler,string,action,supplier,request,request,string,executor,boolean,force,execution,boolean,can,trip,circuit,breaker,transport,request,handler,request,handler,validate,action,name,action,handler,interceptor,intercept,handler,action,executor,force,execution,handler,request,handler,registry,request,reg,new,request,handler,registry,action,streamable,new,writeable,reader,request,task,manager,handler,executor,force,execution,can,trip,circuit,breaker,transport,register,request,handler,reg
