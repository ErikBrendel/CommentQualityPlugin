# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1524684173;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())__                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,id,link,stored,script,source,from,xcontent,xcontent,parser,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1526374795;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                            } else {_                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1528103657;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                            } else {_                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1535139672;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                            } else {_                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1540486836;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                DEPRECATION_LOGGER.deprecated("empty templates should no longer be used")__                            } else {_                                DEPRECATION_LOGGER.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecated,empty,templates,should,no,longer,be,used,else,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1540583181;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                deprecationLogger.deprecated("empty templates should no longer be used")__                            } else {_                                deprecationLogger.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecation,logger,deprecated,empty,templates,should,no,longer,be,used,else,deprecation,logger,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> public static ScriptMetaData fromXContent(XContentParser parser) throws IOException;1541200074;This will parse XContent into {@link ScriptMetaData}.__The following format will be parsed:__{@code__"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_"<id>" : "<{@link StoredScriptSource#fromXContent(XContentParser, boolean)}>",_...____When loading from a source prior to 6.0, if multiple scripts_using the old namespace id format of [lang#id] are found to have the_same id but different languages an error will occur.;public static ScriptMetaData fromXContent(XContentParser parser) throws IOException {_        Map<String, StoredScriptSource> scripts = new HashMap<>()__        String id = null__        StoredScriptSource source__        StoredScriptSource exists___        Token token = parser.currentToken()___        if (token == null) {_            token = parser.nextToken()__        }__        if (token != Token.START_OBJECT) {_            throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [{]")__        }__        token = parser.nextToken()___        while (token != Token.END_OBJECT) {_            switch (token) {_                case FIELD_NAME:_                    id = parser.currentName()__                    break__                case VALUE_STRING:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    int split = id.indexOf('#')__                    String lang___                    if (split == -1) {_                        throw new IllegalArgumentException("illegal stored script id [" + id + "], does not contain lang")__                    } else {_                        lang = id.substring(0, split)__                        id = id.substring(split + 1)__                        source = new StoredScriptSource(lang, parser.text(), Collections.emptyMap())___                        if (source.getSource().isEmpty()) {_                            if (source.getLang().equals(Script.DEFAULT_TEMPLATE_LANG)) {_                                deprecationLogger.deprecated("empty templates should no longer be used")__                            } else {_                                deprecationLogger.deprecated("empty scripts should no longer be used")__                            }_                        }_                    }__                    exists = scripts.get(id)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(lang) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + lang + "]_ scripts using the old namespace " +_                            "of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                case START_OBJECT:_                    if (id == null) {_                        throw new ParsingException(parser.getTokenLocation(),_                            "unexpected token [" + token + "], expected [<id>, <code>, {]")__                    }__                    exists = scripts.get(id)__                    source = StoredScriptSource.fromXContent(parser, true)___                    if (exists == null) {_                        scripts.put(id, source)__                    } else if (exists.getLang().equals(source.getLang()) == false) {_                        throw new IllegalArgumentException("illegal stored script, id [" + id + "] used for multiple scripts with " +_                            "different languages [" + exists.getLang() + "] and [" + source.getLang() + "]_ scripts using the old " +_                            "namespace of [lang#id] as a stored script id will have to be updated to use only the new namespace of [id]")__                    }__                    id = null___                    break__                default:_                    throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "], expected [<id>, <code>, {]")__            }__            token = parser.nextToken()__        }__        return new ScriptMetaData(scripts)__    };this,will,parse,xcontent,into,link,script,meta,data,the,following,format,will,be,parsed,code,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,id,link,stored,script,source,from,xcontent,xcontent,parser,boolean,when,loading,from,a,source,prior,to,6,0,if,multiple,scripts,using,the,old,namespace,id,format,of,lang,id,are,found,to,have,the,same,id,but,different,languages,an,error,will,occur;public,static,script,meta,data,from,xcontent,xcontent,parser,parser,throws,ioexception,map,string,stored,script,source,scripts,new,hash,map,string,id,null,stored,script,source,source,stored,script,source,exists,token,token,parser,current,token,if,token,null,token,parser,next,token,if,token,token,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,token,parser,next,token,while,token,token,switch,token,case,id,parser,current,name,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,int,split,id,index,of,string,lang,if,split,1,throw,new,illegal,argument,exception,illegal,stored,script,id,id,does,not,contain,lang,else,lang,id,substring,0,split,id,id,substring,split,1,source,new,stored,script,source,lang,parser,text,collections,empty,map,if,source,get,source,is,empty,if,source,get,lang,equals,script,deprecation,logger,deprecated,empty,templates,should,no,longer,be,used,else,deprecation,logger,deprecated,empty,scripts,should,no,longer,be,used,exists,scripts,get,id,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,case,if,id,null,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,exists,scripts,get,id,source,stored,script,source,from,xcontent,parser,true,if,exists,null,scripts,put,id,source,else,if,exists,get,lang,equals,source,get,lang,false,throw,new,illegal,argument,exception,illegal,stored,script,id,id,used,for,multiple,scripts,with,different,languages,exists,get,lang,and,source,get,lang,scripts,using,the,old,namespace,of,lang,id,as,a,stored,script,id,will,have,to,be,updated,to,use,only,the,new,namespace,of,id,id,null,break,default,throw,new,parsing,exception,parser,get,token,location,unexpected,token,token,expected,id,code,token,parser,next,token,return,new,script,meta,data,scripts
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1524684173;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1526374795;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1528103657;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1535139672;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1540486836;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1540583181;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source);1541200074;Convenience method to build and return a new_{@link ScriptMetaData} adding the specified stored script.;static ScriptMetaData putStoredScript(ScriptMetaData previous, String id, StoredScriptSource source) {_        Builder builder = new Builder(previous)__        builder.storeScript(id, source)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,adding,the,specified,stored,script;static,script,meta,data,put,stored,script,script,meta,data,previous,string,id,stored,script,source,source,builder,builder,new,builder,previous,builder,store,script,id,source,return,builder,build
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1524684173;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1526374795;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1528103657;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1535139672;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1540486836;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1540583181;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> StoredScriptSource getStoredScript(String id);1541200074;Retrieves a stored script based on a user-specified id.;StoredScriptSource getStoredScript(String id) {_        return scripts.get(id)__    };retrieves,a,stored,script,based,on,a,user,specified,id;stored,script,source,get,stored,script,string,id,return,scripts,get,id
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1524684173;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1526374795;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1528103657;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1535139672;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1540486836;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1540583181;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> Builder -> public Builder deleteScript(String id);1541200074;Delete a script from the existing stored scripts based on a user-specified id._@param id The user-specified id to use for the look up.;public Builder deleteScript(String id) {_            StoredScriptSource deleted = scripts.remove(id)___            if (deleted == null) {_                throw new ResourceNotFoundException("stored script [" + id + "] does not exist and cannot be deleted")__            }__            return this__        };delete,a,script,from,the,existing,stored,scripts,based,on,a,user,specified,id,param,id,the,user,specified,id,to,use,for,the,look,up;public,builder,delete,script,string,id,stored,script,source,deleted,scripts,remove,id,if,deleted,null,throw,new,resource,not,found,exception,stored,script,id,does,not,exist,and,cannot,be,deleted,return,this
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1524684173;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1526374795;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1528103657;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1535139672;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1540486836;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1540583181;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id);1541200074;Convenience method to build and return a new_{@link ScriptMetaData} deleting the specified stored script.;static ScriptMetaData deleteStoredScript(ScriptMetaData previous, String id) {_        Builder builder = new ScriptMetaData.Builder(previous)__        builder.deleteScript(id)___        return builder.build()__    };convenience,method,to,build,and,return,a,new,link,script,meta,data,deleting,the,specified,stored,script;static,script,meta,data,delete,stored,script,script,meta,data,previous,string,id,builder,builder,new,script,meta,data,builder,previous,builder,delete,script,id,return,builder,build
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1524684173;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1526374795;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1528103657;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1535139672;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1540486836;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1540583181;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> ScriptMetaData(Map<String, StoredScriptSource> scripts);1541200074;Standard constructor to create metadata to store scripts._@param scripts The currently stored scripts.  Must not be {@code null},_use and empty {@link Map} to specify there were no_previously stored scripts.;ScriptMetaData(Map<String, StoredScriptSource> scripts) {_        this.scripts = Collections.unmodifiableMap(scripts)__    };standard,constructor,to,create,metadata,to,store,scripts,param,scripts,the,currently,stored,scripts,must,not,be,code,null,use,and,empty,link,map,to,specify,there,were,no,previously,stored,scripts;script,meta,data,map,string,stored,script,source,scripts,this,scripts,collections,unmodifiable,map,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1524684173;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1526374795;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1528103657;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1535139672;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1540486836;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1540583181;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public ScriptMetaData build();1541200074;@return A {@link ScriptMetaData} with the updated {@link Map} of scripts.;public ScriptMetaData build() {_            return new ScriptMetaData(scripts)__        };return,a,link,script,meta,data,with,the,updated,link,map,of,scripts;public,script,meta,data,build,return,new,script,meta,data,scripts
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1524684173;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1526374795;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1528103657;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1535139672;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1540486836;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1540583181;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> Builder -> public Builder storeScript(String id, StoredScriptSource source);1541200074;Add a new script to the existing stored scripts based on a user-specified id.  If_a script with the same id already exists it will be overwritten._@param id The user-specified id to use for the look up._@param source The user-specified stored script data held in {@link StoredScriptSource}.;public Builder storeScript(String id, StoredScriptSource source) {_            scripts.put(id, source)___            return this__        };add,a,new,script,to,the,existing,stored,scripts,based,on,a,user,specified,id,if,a,script,with,the,same,id,already,exists,it,will,be,overwritten,param,id,the,user,specified,id,to,use,for,the,look,up,param,source,the,user,specified,stored,script,data,held,in,link,stored,script,source;public,builder,store,script,string,id,stored,script,source,source,scripts,put,id,source,return,this
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1524684173;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1526374795;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1528103657;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1535139672;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1540486836;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1540583181;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> @Override     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException;1541200074;This will write XContent from {@link ScriptMetaData}.  The following format will be written:__{@code__"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_"<id>" : "<{@link StoredScriptSource#toXContent(XContentBuilder, Params)}>",_...;@Override_    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {_        for (Map.Entry<String, StoredScriptSource> entry : scripts.entrySet()) {_            builder.field(entry.getKey())__            entry.getValue().toXContent(builder, params)__        }__        return builder__    };this,will,write,xcontent,from,link,script,meta,data,the,following,format,will,be,written,code,id,link,stored,script,source,to,xcontent,xcontent,builder,params,id,link,stored,script,source,to,xcontent,xcontent,builder,params;override,public,xcontent,builder,to,xcontent,xcontent,builder,builder,params,params,throws,ioexception,for,map,entry,string,stored,script,source,entry,scripts,entry,set,builder,field,entry,get,key,entry,get,value,to,xcontent,builder,params,return,builder
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1524684173;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1526374795;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1528103657;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1535139672;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1540486836;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1540583181;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() :new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
ScriptMetaData -> Builder -> public Builder(ScriptMetaData previous);1541200074;@param previous The current {@link ScriptMetaData} or {@code null} if there_is no existing {@link ScriptMetaData}.;public Builder(ScriptMetaData previous) {_            this.scripts = previous == null ? new HashMap<>() : new HashMap<>(previous.scripts)__        };param,previous,the,current,link,script,meta,data,or,code,null,if,there,is,no,existing,link,script,meta,data;public,builder,script,meta,data,previous,this,scripts,previous,null,new,hash,map,new,hash,map,previous,scripts
