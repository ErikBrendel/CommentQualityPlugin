commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;5;;@Override public final void writeTo(StreamOutput out) throws IOException {     out.writeOptionalVInt(this.windowSize).     doWriteTo(out). }
false;protected,abstract;1;1;;protected abstract void doWriteTo(StreamOutput out) throws IOException.
false;public;1;5;;@SuppressWarnings("unchecked") public RB windowSize(int windowSize) {     this.windowSize = windowSize.     return (RB) this. }
false;public;0;3;;public Integer windowSize() {     return windowSize. }
false;public,static;1;28;;public static RescorerBuilder<?> parseFromXContent(XContentParser parser) throws IOException {     String fieldName = null.     RescorerBuilder<?> rescorer = null.     Integer windowSize = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             fieldName = parser.currentName().         } else if (token.isValue()) {             if (WINDOW_SIZE_FIELD.match(fieldName, parser.getDeprecationHandler())) {                 windowSize = parser.intValue().             } else {                 throw new ParsingException(parser.getTokenLocation(), "rescore doesn't support [" + fieldName + "]").             }         } else if (token == XContentParser.Token.START_OBJECT) {             rescorer = parser.namedObject(RescorerBuilder.class, fieldName, null).         } else {             throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "] after [" + fieldName + "]").         }     }     if (rescorer == null) {         throw new ParsingException(parser.getTokenLocation(), "missing rescore type").     }     if (windowSize != null) {         rescorer.windowSize(windowSize.intValue()).     }     return rescorer. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (windowSize != null) {         builder.field("window_size", windowSize).     }     doXContent(builder, params).     builder.endObject().     return builder. }
false;protected,abstract;2;1;;protected abstract void doXContent(XContentBuilder builder, Params params) throws IOException.
true;public,final;1;5;/**  * Build the {@linkplain RescoreContext} that will be used to actually  * execute the rescore against a particular shard.  */ ;/**  * Build the {@linkplain RescoreContext} that will be used to actually  * execute the rescore against a particular shard.  */ public final RescoreContext buildContext(QueryShardContext context) throws IOException {     int finalWindowSize = windowSize == null ? DEFAULT_WINDOW_SIZE : windowSize.     RescoreContext rescoreContext = innerBuildContext(finalWindowSize, context).     return rescoreContext. }
true;protected,abstract;2;1;/**  * Extensions override this to build the context that they need for rescoring.  */ ;/**  * Extensions override this to build the context that they need for rescoring.  */ protected abstract RescoreContext innerBuildContext(int windowSize, QueryShardContext context) throws IOException.
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(windowSize). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     RescorerBuilder<?> other = (RescorerBuilder<?>) obj.     return Objects.equals(windowSize, other.windowSize). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
