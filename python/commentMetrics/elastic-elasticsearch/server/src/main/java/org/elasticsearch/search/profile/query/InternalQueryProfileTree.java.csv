commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected QueryProfileBreakdown createProfileBreakdown() {     return new QueryProfileBreakdown(). }
false;protected;1;9;;@Override protected String getTypeFromElement(Query query) {     // we need to get the super class     if (query.getClass().getSimpleName().isEmpty() == true) {         return query.getClass().getSuperclass().getSimpleName().     }     return query.getClass().getSimpleName(). }
false;protected;1;4;;@Override protected String getDescriptionFromElement(Query query) {     return query.toString(). }
true;public;0;4;/**  * Begin timing a query for a specific Timing context  */ ;/**  * Begin timing a query for a specific Timing context  */ public void startRewriteTime() {     assert rewriteScratch == 0.     rewriteScratch = System.nanoTime(). }
true;public;0;6;/**  * Halt the timing process and add the elapsed rewriting time.  * startRewriteTime() must be called for a particular context prior to calling  * stopAndAddRewriteTime(), otherwise the elapsed time will be negative and  * nonsensical  *  * @return          The elapsed time  */ ;/**  * Halt the timing process and add the elapsed rewriting time.  * startRewriteTime() must be called for a particular context prior to calling  * stopAndAddRewriteTime(), otherwise the elapsed time will be negative and  * nonsensical  *  * @return          The elapsed time  */ public long stopAndAddRewriteTime() {     long time = Math.max(1, System.nanoTime() - rewriteScratch).     rewriteTime += time.     rewriteScratch = 0.     return time. }
false;public;0;3;;public long getRewriteTime() {     return rewriteTime. }
