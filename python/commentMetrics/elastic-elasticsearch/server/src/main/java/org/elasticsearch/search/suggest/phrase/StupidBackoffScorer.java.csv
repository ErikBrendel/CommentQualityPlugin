commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;double discount() {     return this.discount. }
false;protected;2;9;;@Override protected double scoreBigram(Candidate word, Candidate w_1) throws IOException {     join(separator, spare, w_1.term, word.term).     final long count = frequency(spare.get()).     if (count < 1) {         return discount * scoreUnigram(word).     }     return count / (w_1.termStats.totalTermFreq + 0.00000000001d). }
false;protected;3;16;;@Override protected double scoreTrigram(Candidate w, Candidate w_1, Candidate w_2) throws IOException {     // First see if there are bigrams.  If there aren't then skip looking up the trigram.  This saves lookups     // when the bigrams and trigrams are rare and we need both anyway.     join(separator, spare, w_1.term, w.term).     long bigramCount = frequency(spare.get()).     if (bigramCount < 1) {         return discount * scoreUnigram(w).     }     join(separator, spare, w_2.term, w_1.term, w.term).     long trigramCount = frequency(spare.get()).     if (trigramCount < 1) {         return discount * (bigramCount / (w_1.termStats.totalTermFreq + 0.00000000001d)).     }     return trigramCount / (bigramCount + 0.00000000001d). }
