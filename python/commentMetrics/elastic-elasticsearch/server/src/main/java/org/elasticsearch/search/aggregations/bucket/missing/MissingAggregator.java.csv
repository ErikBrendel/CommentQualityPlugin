commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean advanceExact(int doc) throws IOException {     return false. }
false;public;2;6;;@Override public void collect(int doc, long bucket) throws IOException {     if (docsWithValue.advanceExact(doc) == false) {         collectBucket(sub, doc, bucket).     } }
false;public;2;23;;@Override public LeafBucketCollector getLeafCollector(LeafReaderContext ctx, final LeafBucketCollector sub) throws IOException {     final DocValueBits docsWithValue.     if (valuesSource != null) {         docsWithValue = valuesSource.docsWithValue(ctx).     } else {         docsWithValue = new DocValueBits() {              @Override             public boolean advanceExact(int doc) throws IOException {                 return false.             }         }.     }     return new LeafBucketCollectorBase(sub, docsWithValue) {          @Override         public void collect(int doc, long bucket) throws IOException {             if (docsWithValue.advanceExact(doc) == false) {                 collectBucket(sub, doc, bucket).             }         }     }. }
false;public;1;5;;@Override public InternalAggregation buildAggregation(long owningBucketOrdinal) throws IOException {     return new InternalMissing(name, bucketDocCount(owningBucketOrdinal), bucketAggregations(owningBucketOrdinal), pipelineAggregators(), metaData()). }
false;public;0;4;;@Override public InternalAggregation buildEmptyAggregation() {     return new InternalMissing(name, 0, buildEmptySubAggregations(), pipelineAggregators(), metaData()). }
