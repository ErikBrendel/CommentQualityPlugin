commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(name).     boolean isNotNullDefinition = this.definition != null.     out.writeBoolean(isNotNullDefinition).     if (isNotNullDefinition) {         Settings.writeSettingsToStream(definition, out).     } }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (definition == null) {         return builder.value(name).     }     return definition.toXContent(builder, params). }
false;public;0;3;;public String[] text() {     return this.text. }
false;public;1;4;;public AnalyzeRequest text(String... text) {     this.text = text.     return this. }
false;public;1;4;;public AnalyzeRequest analyzer(String analyzer) {     this.analyzer = analyzer.     return this. }
false;public;0;3;;public String analyzer() {     return this.analyzer. }
false;public;1;4;;public AnalyzeRequest tokenizer(String tokenizer) {     this.tokenizer = new NameOrDefinition(tokenizer).     return this. }
false;public;1;4;;public AnalyzeRequest tokenizer(Map<String, ?> tokenizer) {     this.tokenizer = new NameOrDefinition(tokenizer).     return this. }
false;public;0;3;;public NameOrDefinition tokenizer() {     return this.tokenizer. }
false;public;1;4;;public AnalyzeRequest addTokenFilter(String tokenFilter) {     this.tokenFilters.add(new NameOrDefinition(tokenFilter)).     return this. }
false;public;1;4;;public AnalyzeRequest addTokenFilter(Map<String, ?> tokenFilter) {     this.tokenFilters.add(new NameOrDefinition(tokenFilter)).     return this. }
false;public;0;3;;public List<NameOrDefinition> tokenFilters() {     return this.tokenFilters. }
false;public;1;4;;public AnalyzeRequest addCharFilter(Map<String, ?> charFilter) {     this.charFilters.add(new NameOrDefinition(charFilter)).     return this. }
false;public;1;4;;public AnalyzeRequest addCharFilter(String charFilter) {     this.charFilters.add(new NameOrDefinition(charFilter)).     return this. }
false;public;0;3;;public List<NameOrDefinition> charFilters() {     return this.charFilters. }
false;public;1;4;;public AnalyzeRequest field(String field) {     this.field = field.     return this. }
false;public;0;3;;public String field() {     return this.field. }
false;public;1;4;;public AnalyzeRequest explain(boolean explain) {     this.explain = explain.     return this. }
false;public;0;3;;public boolean explain() {     return this.explain. }
false;public;1;7;;public AnalyzeRequest attributes(String... attributes) {     if (attributes == null) {         throw new IllegalArgumentException("attributes must not be null").     }     this.attributes = attributes.     return this. }
false;public;0;3;;public String[] attributes() {     return this.attributes. }
false;public;0;3;;public String normalizer() {     return this.normalizer. }
false;public;1;4;;public AnalyzeRequest normalizer(String normalizer) {     this.normalizer = normalizer.     return this. }
false;public;0;14;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (text == null || text.length == 0) {         validationException = addValidationError("text is missing", validationException).     }     if ((index == null || index.length() == 0) && normalizer != null) {         validationException = addValidationError("index is required if normalizer is specified", validationException).     }     if (normalizer != null && (tokenizer != null || analyzer != null)) {         validationException = addValidationError("tokenizer/analyze should be null if normalizer is specified", validationException).     }     return validationException. }
false;public;1;15;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     text = in.readStringArray().     analyzer = in.readOptionalString().     tokenizer = in.readOptionalWriteable(NameOrDefinition::new).     tokenFilters.addAll(in.readList(NameOrDefinition::new)).     charFilters.addAll(in.readList(NameOrDefinition::new)).     field = in.readOptionalString().     explain = in.readBoolean().     attributes = in.readStringArray().     if (in.getVersion().onOrAfter(Version.V_6_0_0_beta1)) {         normalizer = in.readOptionalString().     } }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArray(text).     out.writeOptionalString(analyzer).     out.writeOptionalWriteable(tokenizer).     out.writeList(tokenFilters).     out.writeList(charFilters).     out.writeOptionalString(field).     out.writeBoolean(explain).     out.writeStringArray(attributes).     if (out.getVersion().onOrAfter(Version.V_6_0_0_beta1)) {         out.writeOptionalString(normalizer).     } }
false;public;2;30;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("text", text).     if (Strings.isNullOrEmpty(analyzer) == false) {         builder.field("analyzer", analyzer).     }     if (tokenizer != null) {         tokenizer.toXContent(builder, params).     }     if (tokenFilters.size() > 0) {         builder.field("filter", tokenFilters).     }     if (charFilters.size() > 0) {         builder.field("char_filter", charFilters).     }     if (Strings.isNullOrEmpty(field) == false) {         builder.field("field", field).     }     if (explain) {         builder.field("explain", true).     }     if (attributes.length > 0) {         builder.field("attributes", attributes).     }     if (Strings.isNullOrEmpty(normalizer) == false) {         builder.field("normalizer", normalizer).     }     return builder.endObject(). }
