commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeInt(threads).     out.writeInt(queue).     out.writeInt(active).     out.writeLong(rejected).     out.writeInt(largest).     out.writeLong(completed). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public int getThreads() {     return this.threads. }
false;public;0;3;;public int getQueue() {     return this.queue. }
false;public;0;3;;public int getActive() {     return this.active. }
false;public;0;3;;public long getRejected() {     return rejected. }
false;public;0;3;;public int getLargest() {     return largest. }
false;public;0;3;;public long getCompleted() {     return this.completed. }
false;public;2;24;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject(name).     if (threads != -1) {         builder.field(Fields.THREADS, threads).     }     if (queue != -1) {         builder.field(Fields.QUEUE, queue).     }     if (active != -1) {         builder.field(Fields.ACTIVE, active).     }     if (rejected != -1) {         builder.field(Fields.REJECTED, rejected).     }     if (largest != -1) {         builder.field(Fields.LARGEST, largest).     }     if (completed != -1) {         builder.field(Fields.COMPLETED, completed).     }     builder.endObject().     return builder. }
false;public;1;16;;@Override public int compareTo(Stats other) {     if ((getName() == null) && (other.getName() == null)) {         return 0.     } else if ((getName() != null) && (other.getName() == null)) {         return 1.     } else if (getName() == null) {         return -1.     } else {         int compare = getName().compareTo(other.getName()).         if (compare == 0) {             compare = Integer.compare(getThreads(), other.getThreads()).         }         return compare.     } }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeList(stats). }
false;public;0;4;;@Override public Iterator<Stats> iterator() {     return stats.iterator(). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject(Fields.THREAD_POOL).     for (Stats stat : stats) {         stat.toXContent(builder, params).     }     builder.endObject().     return builder. }
