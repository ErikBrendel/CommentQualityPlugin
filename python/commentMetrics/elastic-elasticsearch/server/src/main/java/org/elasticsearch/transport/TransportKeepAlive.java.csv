commented;modifiers;parameterAmount;loc;comment;code
false;;2;17;;void registerNodeConnection(List<TcpChannel> nodeChannels, ConnectionProfile connectionProfile) {     TimeValue pingInterval = connectionProfile.getPingInterval().     if (pingInterval.millis() < 0) {         return.     }     final ScheduledPing scheduledPing = pingIntervals.computeIfAbsent(pingInterval, ScheduledPing::new).     scheduledPing.ensureStarted().     for (TcpChannel channel : nodeChannels) {         scheduledPing.addChannel(channel).         channel.addCloseListener(ActionListener.wrap(() -> {             scheduledPing.removeChannel(channel).         })).     } }
true;;1;7;/**  * Called when a keep alive ping is received. If the channel that received the keep alive ping is a  * server channel, a ping is sent back. If the channel that received the keep alive is a client channel,  * this method does nothing as the client initiated the ping in the first place.  *  * @param channel that received the keep alive ping  */ ;/**  * Called when a keep alive ping is received. If the channel that received the keep alive ping is a  * server channel, a ping is sent back. If the channel that received the keep alive is a client channel,  * this method does nothing as the client initiated the ping in the first place.  *  * @param channel that received the keep alive ping  */ void receiveKeepAlive(TcpChannel channel) {     // method is a no-op.     if (channel.isServerChannel()) {         sendPing(channel).     } }
false;;0;3;;long successfulPingCount() {     return successfulPings.count(). }
false;;0;3;;long failedPingCount() {     return failedPings.count(). }
false;public;1;4;;@Override public void onResponse(Void v) {     successfulPings.inc(). }
false;public;1;9;;@Override public void onFailure(Exception e) {     if (channel.isOpen()) {         logger.debug(() -> new ParameterizedMessage("[{}] failed to send transport ping", channel), e).         failedPings.inc().     } else {         logger.trace(() -> new ParameterizedMessage("[{}] failed to send transport ping (channel closed)", channel), e).     } }
false;private;1;19;;private void sendPing(TcpChannel channel) {     pingSender.apply(channel, pingMessage, new ActionListener<Void>() {          @Override         public void onResponse(Void v) {             successfulPings.inc().         }          @Override         public void onFailure(Exception e) {             if (channel.isOpen()) {                 logger.debug(() -> new ParameterizedMessage("[{}] failed to send transport ping", channel), e).                 failedPings.inc().             } else {                 logger.trace(() -> new ParameterizedMessage("[{}] failed to send transport ping (channel closed)", channel), e).             }         }     }). }
false;public;0;5;;@Override public void close() {     lifecycle.moveToStopped().     lifecycle.moveToClosed(). }
false;;0;5;;void ensureStarted() {     if (isStarted.get() == false && isStarted.compareAndSet(false, true)) {         threadPool.schedule(this, pingInterval, ThreadPool.Names.GENERIC).     } }
false;;1;3;;void addChannel(TcpChannel channel) {     channels.add(channel). }
false;;1;3;;void removeChannel(TcpChannel channel) {     channels.remove(channel). }
false;protected;0;12;;@Override protected void doRunInLifecycle() {     for (TcpChannel channel : channels) {         // pre-6.6 nodes that DO NOT respond to pings         if (needsKeepAlivePing(channel)) {             sendPing(channel).         }     }     this.lastPingRelativeMillis = threadPool.relativeTimeInMillis(). }
false;protected;0;4;;@Override protected void onAfterInLifecycle() {     threadPool.scheduleUnlessShuttingDown(pingInterval, ThreadPool.Names.GENERIC, this). }
false;public;1;4;;@Override public void onFailure(Exception e) {     logger.warn("failed to send ping transport message", e). }
false;private;1;5;;private boolean needsKeepAlivePing(TcpChannel channel) {     TcpChannel.ChannelStats stats = channel.getChannelStats().     long accessedDelta = stats.lastAccessedTime() - lastPingRelativeMillis.     return accessedDelta <= 0. }
