commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getType() {     return RangeAggregationBuilder.NAME. }
false;public;0;4;;@Override public List<? extends Range.Bucket> getBuckets() {     return buckets. }
false;protected,static;3;5;;protected static void declareParsedRangeFields(final ObjectParser<? extends ParsedRange, Void> objectParser, final CheckedFunction<XContentParser, ParsedBucket, IOException> bucketParser, final CheckedFunction<XContentParser, ParsedBucket, IOException> keyedBucketParser) {     declareMultiBucketAggregationFields(objectParser, bucketParser::apply, keyedBucketParser::apply). }
false;public,static;2;5;;public static ParsedRange fromXContent(XContentParser parser, String name) throws IOException {     ParsedRange aggregation = PARSER.parse(parser, null).     aggregation.setName(name).     return aggregation. }
false;public;0;4;;@Override public String getKey() {     return getKeyAsString(). }
false;public;0;8;;@Override public String getKeyAsString() {     String keyAsString = super.getKeyAsString().     if (keyAsString != null) {         return keyAsString.     }     return key. }
false;public;0;4;;@Override public Object getFrom() {     return from. }
false;public;0;7;;@Override public String getFromAsString() {     if (fromAsString != null) {         return fromAsString.     }     return doubleAsString(from). }
false;public;0;4;;@Override public Object getTo() {     return to. }
false;public;0;7;;@Override public String getToAsString() {     if (toAsString != null) {         return toAsString.     }     return doubleAsString(to). }
false;public;2;25;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (isKeyed()) {         builder.startObject(key).     } else {         builder.startObject().         builder.field(CommonFields.KEY.getPreferredName(), key).     }     if (Double.isInfinite(from) == false) {         builder.field(CommonFields.FROM.getPreferredName(), from).         if (fromAsString != null) {             builder.field(CommonFields.FROM_AS_STRING.getPreferredName(), fromAsString).         }     }     if (Double.isInfinite(to) == false) {         builder.field(CommonFields.TO.getPreferredName(), to).         if (toAsString != null) {             builder.field(CommonFields.TO_AS_STRING.getPreferredName(), toAsString).         }     }     builder.field(CommonFields.DOC_COUNT.getPreferredName(), getDocCount()).     getAggregations().toXContentInternal(builder, params).     builder.endObject().     return builder. }
false;private,static;1;3;;private static String doubleAsString(double d) {     return Double.isInfinite(d) ? null : Double.toString(d). }
false;protected,static;3;41;;protected static <B extends ParsedBucket> B parseRangeBucketXContent(final XContentParser parser, final Supplier<B> bucketSupplier, final boolean keyed) throws IOException {     final B bucket = bucketSupplier.get().     bucket.setKeyed(keyed).     XContentParser.Token token = parser.currentToken().     String currentFieldName = parser.currentName().     if (keyed) {         ensureExpectedToken(XContentParser.Token.FIELD_NAME, token, parser::getTokenLocation).         bucket.key = currentFieldName.         ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation).     }     List<Aggregation> aggregations = new ArrayList<>().     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             currentFieldName = parser.currentName().         } else if (token.isValue()) {             if (CommonFields.KEY_AS_STRING.getPreferredName().equals(currentFieldName)) {                 bucket.setKeyAsString(parser.text()).             } else if (CommonFields.KEY.getPreferredName().equals(currentFieldName)) {                 bucket.key = parser.text().             } else if (CommonFields.DOC_COUNT.getPreferredName().equals(currentFieldName)) {                 bucket.setDocCount(parser.longValue()).             } else if (CommonFields.FROM.getPreferredName().equals(currentFieldName)) {                 bucket.from = parser.doubleValue().             } else if (CommonFields.FROM_AS_STRING.getPreferredName().equals(currentFieldName)) {                 bucket.fromAsString = parser.text().             } else if (CommonFields.TO.getPreferredName().equals(currentFieldName)) {                 bucket.to = parser.doubleValue().             } else if (CommonFields.TO_AS_STRING.getPreferredName().equals(currentFieldName)) {                 bucket.toAsString = parser.text().             }         } else if (token == XContentParser.Token.START_OBJECT) {             XContentParserUtils.parseTypedKeysObject(parser, Aggregation.TYPED_KEYS_DELIMITER, Aggregation.class, aggregations::add).         }     }     bucket.setAggregations(new Aggregations(aggregations)).     return bucket. }
false;static;2;3;;static ParsedBucket fromXContent(final XContentParser parser, final boolean keyed) throws IOException {     return parseRangeBucketXContent(parser, ParsedBucket::new, keyed). }
