commented;modifiers;parameterAmount;loc;comment;code
true;default;0;3;/**  * The new {@link ScoreFunction}s defined by this plugin.  */ ;/**  * The new {@link ScoreFunction}s defined by this plugin.  */ default List<ScoreFunctionSpec<?>> getScoreFunctions() {     return emptyList(). }
true;default;0;3;/**  * The new {@link SignificanceHeuristic}s defined by this plugin. {@linkplain SignificanceHeuristic}s are used by the  * {@link SignificantTerms} aggregation to pick which terms are significant for a given query.  */ ;/**  * The new {@link SignificanceHeuristic}s defined by this plugin. {@linkplain SignificanceHeuristic}s are used by the  * {@link SignificantTerms} aggregation to pick which terms are significant for a given query.  */ default List<SearchExtensionSpec<SignificanceHeuristic, SignificanceHeuristicParser>> getSignificanceHeuristics() {     return emptyList(). }
true;default;0;3;/**  * The new {@link MovAvgModel}s defined by this plugin. {@linkplain MovAvgModel}s are used by the {@link MovAvgPipelineAggregator} to  * model trends in data.  */ ;/**  * The new {@link MovAvgModel}s defined by this plugin. {@linkplain MovAvgModel}s are used by the {@link MovAvgPipelineAggregator} to  * model trends in data.  */ default List<SearchExtensionSpec<MovAvgModel, MovAvgModel.AbstractModelParser>> getMovingAverageModels() {     return emptyList(). }
true;default;1;3;/**  * The new {@link FetchSubPhase}s defined by this plugin.  */ ;/**  * The new {@link FetchSubPhase}s defined by this plugin.  */ default List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {     return emptyList(). }
true;default;0;3;/**  * The new {@link SearchExtBuilder}s defined by this plugin.  */ ;/**  * The new {@link SearchExtBuilder}s defined by this plugin.  */ default List<SearchExtSpec<?>> getSearchExts() {     return emptyList(). }
true;default;0;3;/**  * Get the {@link Highlighter}s defined by this plugin.  */ ;/**  * Get the {@link Highlighter}s defined by this plugin.  */ default Map<String, Highlighter> getHighlighters() {     return emptyMap(). }
true;default;0;3;/**  * The new {@link Suggester}s defined by this plugin.  */ ;/**  * The new {@link Suggester}s defined by this plugin.  */ default List<SuggesterSpec<?>> getSuggesters() {     return emptyList(). }
true;default;0;3;/**  * The new {@link Query}s defined by this plugin.  */ ;/**  * The new {@link Query}s defined by this plugin.  */ default List<QuerySpec<?>> getQueries() {     return emptyList(). }
true;default;0;3;/**  * The new {@link Aggregation}s added by this plugin.  */ ;/**  * The new {@link Aggregation}s added by this plugin.  */ default List<AggregationSpec> getAggregations() {     return emptyList(). }
true;default;0;3;/**  * The new {@link PipelineAggregator}s added by this plugin.  */ ;/**  * The new {@link PipelineAggregator}s added by this plugin.  */ default List<PipelineAggregationSpec> getPipelineAggregations() {     return emptyList(). }
true;default;0;3;/**  * The new {@link Rescorer}s added by this plugin.  */ ;/**  * The new {@link Rescorer}s added by this plugin.  */ default List<RescorerSpec<?>> getRescorers() {     return emptyList(). }
false;private;1;3;;private void setSuggestionReader(Writeable.Reader<? extends Suggest.Suggestion> reader) {     this.suggestionReader = reader. }
true;public;0;3;/**  * Returns the reader used to read the {@link Suggest.Suggestion} generated by this suggester  */ ;/**  * Returns the reader used to read the {@link Suggest.Suggestion} generated by this suggester  */ public Writeable.Reader<? extends Suggest.Suggestion> getSuggestionReader() {     return this.suggestionReader. }
true;public;1;3;/**  * Add a reader for the shard level results of the aggregation with {@linkplain #getName}'s {@link ParseField#getPreferredName()} as  * the {@link NamedWriteable#getWriteableName()}.  */ ;/**  * Add a reader for the shard level results of the aggregation with {@linkplain #getName}'s {@link ParseField#getPreferredName()} as  * the {@link NamedWriteable#getWriteableName()}.  */ public AggregationSpec addResultReader(Writeable.Reader<? extends InternalAggregation> resultReader) {     return addResultReader(getName().getPreferredName(), resultReader). }
true;public;2;4;/**  * Add a reader for the shard level results of the aggregation.  */ ;/**  * Add a reader for the shard level results of the aggregation.  */ public AggregationSpec addResultReader(String writeableName, Writeable.Reader<? extends InternalAggregation> resultReader) {     resultReaders.put(writeableName, resultReader).     return this. }
true;public;0;3;/**  * Get the readers that must be registered for this aggregation's results.  */ ;/**  * Get the readers that must be registered for this aggregation's results.  */ public Map<String, Writeable.Reader<? extends InternalAggregation>> getResultReaders() {     return resultReaders. }
true;public;1;3;/**  * Add a reader for the shard level results of the aggregation with {@linkplain #getName()}'s {@link ParseField#getPreferredName()}  * as the {@link NamedWriteable#getWriteableName()}.  */ ;/**  * Add a reader for the shard level results of the aggregation with {@linkplain #getName()}'s {@link ParseField#getPreferredName()}  * as the {@link NamedWriteable#getWriteableName()}.  */ public PipelineAggregationSpec addResultReader(Writeable.Reader<? extends InternalAggregation> resultReader) {     return addResultReader(getName().getPreferredName(), resultReader). }
true;public;2;4;/**  * Add a reader for the shard level results of the aggregation.  */ ;/**  * Add a reader for the shard level results of the aggregation.  */ public PipelineAggregationSpec addResultReader(String writeableName, Writeable.Reader<? extends InternalAggregation> resultReader) {     resultReaders.put(writeableName, resultReader).     return this. }
true;public;0;3;/**  * The reader for the {@link PipelineAggregator}.  */ ;/**  * The reader for the {@link PipelineAggregator}.  */ public Writeable.Reader<? extends PipelineAggregator> getAggregatorReader() {     return aggregatorReader. }
true;public;0;3;/**  * Get the readers that must be registered for this aggregation's results.  */ ;/**  * Get the readers that must be registered for this aggregation's results.  */ public Map<String, Writeable.Reader<? extends InternalAggregation>> getResultReaders() {     return resultReaders. }
true;public;0;3;/**  * The name of the thing being specified as a {@link ParseField}. This allows it to have deprecated names.  */ ;/**  * The name of the thing being specified as a {@link ParseField}. This allows it to have deprecated names.  */ public ParseField getName() {     return name. }
true;public;0;3;/**  * The reader responsible for reading the behavior from the internode protocol.  */ ;/**  * The reader responsible for reading the behavior from the internode protocol.  */ public Writeable.Reader<? extends W> getReader() {     return reader. }
true;public;0;3;/**  * The parser responsible for converting {@link XContent} into the behavior.  */ ;/**  * The parser responsible for converting {@link XContent} into the behavior.  */ public P getParser() {     return parser. }
false;public;0;3;;public Map<String, Highlighter> getHighlighters() {     return highlighters. }
