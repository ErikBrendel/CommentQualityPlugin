commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;6;;public static void setRewriteMethod(MultiTermQuery query, @Nullable MultiTermQuery.RewriteMethod rewriteMethod) {     if (rewriteMethod == null) {         return.     }     query.setRewriteMethod(rewriteMethod). }
false;public,static;2;3;;public static MultiTermQuery.RewriteMethod parseRewriteMethod(@Nullable String rewriteMethod, DeprecationHandler deprecationHandler) {     return parseRewriteMethod(rewriteMethod, MultiTermQuery.CONSTANT_SCORE_REWRITE, deprecationHandler). }
false;public,static;3;41;;public static MultiTermQuery.RewriteMethod parseRewriteMethod(@Nullable String rewriteMethod, @Nullable MultiTermQuery.RewriteMethod defaultRewriteMethod, DeprecationHandler deprecationHandler) {     if (rewriteMethod == null) {         return defaultRewriteMethod.     }     if (CONSTANT_SCORE.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.CONSTANT_SCORE_REWRITE.     }     if (SCORING_BOOLEAN.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.SCORING_BOOLEAN_REWRITE.     }     if (CONSTANT_SCORE_BOOLEAN.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE.     }     int firstDigit = -1.     for (int i = 0. i < rewriteMethod.length(). ++i) {         if (Character.isDigit(rewriteMethod.charAt(i))) {             firstDigit = i.             break.         }     }     if (firstDigit >= 0) {         final int size = Integer.parseInt(rewriteMethod.substring(firstDigit)).         String rewriteMethodName = rewriteMethod.substring(0, firstDigit).         if (TOP_TERMS.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size).         }         if (TOP_TERMS_BOOST.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(size).         }         if (TOP_TERMS_BLENDED_FREQS.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(size).         }     }     throw new IllegalArgumentException("Failed to parse rewrite_method [" + rewriteMethod + "]"). }
