# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1524684173;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toFilter(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,filter,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1524780945;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toFilter(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,filter,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1541618615;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toFilter(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,filter,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1543834151;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toQuery(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,query,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1545997405;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toQuery(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,query,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1546630609;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toQuery(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,query,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1548230518;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toQuery(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,query,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public void preProcess(boolean rewrite);1550737421;Should be called before executing the main query and after all other parameters have been set.;@Override_    public void preProcess(boolean rewrite) {_        if (hasOnlySuggest() ) {_            return__        }_        long from = from() == -1 ? 0 : from()__        long size = size() == -1 ? 10 : size()__        long resultWindow = from + size__        int maxResultWindow = indexService.getIndexSettings().getMaxResultWindow()___        if (resultWindow > maxResultWindow) {_            if (scrollContext == null) {_                throw new IllegalArgumentException(_                        "Result window is too large, from + size must be less than or equal to: [" + maxResultWindow + "] but was ["_                                + resultWindow + "]. See the scroll api for a more efficient way to request large data sets. "_                                + "This limit can be set by changing the [" + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey()_                                + "] index level setting.")__            }_            throw new IllegalArgumentException(_                    "Batch size is too large, size must be less than or equal to: [" + maxResultWindow + "] but was [" + resultWindow_                            + "]. Scroll batch sizes cost as much memory as result windows so they are controlled by the ["_                            + IndexSettings.MAX_RESULT_WINDOW_SETTING.getKey() + "] index level setting.")__        }_        if (rescore != null) {_            if (sort != null) {_                throw new IllegalArgumentException("Cannot use [sort] option in conjunction with [rescore].")__            }_            int maxWindow = indexService.getIndexSettings().getMaxRescoreWindow()__            for (RescoreContext rescoreContext: rescore) {_                if (rescoreContext.getWindowSize() > maxWindow) {_                    throw new IllegalArgumentException("Rescore window [" + rescoreContext.getWindowSize() + "] is too large. "_                            + "It must be less than [" + maxWindow + "]. This prevents allocating massive heaps for storing the results "_                            + "to be rescored. This limit can be set by changing the [" + IndexSettings.MAX_RESCORE_WINDOW_SETTING.getKey()_                            + "] index level setting.")__                }_            }_        }__        if (sliceBuilder != null) {_            int sliceLimit = indexService.getIndexSettings().getMaxSlicesPerScroll()__            int numSlices = sliceBuilder.getMax()__            if (numSlices > sliceLimit) {_                throw new IllegalArgumentException("The number of slices [" + numSlices + "] is too large. It must "_                    + "be less than [" + sliceLimit + "]. This limit can be set by changing the [" +_                    IndexSettings.MAX_SLICES_PER_SCROLL.getKey() + "] index level setting.")__            }_        }__        _        try {_            final QueryBuilder queryBuilder = request.getAliasFilter().getQueryBuilder()__            aliasFilter = queryBuilder == null ? null : queryBuilder.toQuery(queryShardContext)__        } catch (IOException e) {_            throw new UncheckedIOException(e)__        }__        if (query() == null) {_            parsedQuery(ParsedQuery.parsedMatchAllQuery())__        }_        if (queryBoost() != AbstractQueryBuilder.DEFAULT_BOOST) {_            parsedQuery(new ParsedQuery(new FunctionScoreQuery(query(), new WeightFactorFunction(queryBoost)), parsedQuery()))__        }_        this.query = buildFilteredQuery(query)__        if (rewrite) {_            try {_                this.query = searcher.rewrite(query)__            } catch (IOException e) {_                throw new QueryPhaseExecutionException(this, "Failed to rewrite main query", e)__            }_        }_    };should,be,called,before,executing,the,main,query,and,after,all,other,parameters,have,been,set;override,public,void,pre,process,boolean,rewrite,if,has,only,suggest,return,long,from,from,1,0,from,long,size,size,1,10,size,long,result,window,from,size,int,max,result,window,index,service,get,index,settings,get,max,result,window,if,result,window,max,result,window,if,scroll,context,null,throw,new,illegal,argument,exception,result,window,is,too,large,from,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,see,the,scroll,api,for,a,more,efficient,way,to,request,large,data,sets,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,throw,new,illegal,argument,exception,batch,size,is,too,large,size,must,be,less,than,or,equal,to,max,result,window,but,was,result,window,scroll,batch,sizes,cost,as,much,memory,as,result,windows,so,they,are,controlled,by,the,index,settings,get,key,index,level,setting,if,rescore,null,if,sort,null,throw,new,illegal,argument,exception,cannot,use,sort,option,in,conjunction,with,rescore,int,max,window,index,service,get,index,settings,get,max,rescore,window,for,rescore,context,rescore,context,rescore,if,rescore,context,get,window,size,max,window,throw,new,illegal,argument,exception,rescore,window,rescore,context,get,window,size,is,too,large,it,must,be,less,than,max,window,this,prevents,allocating,massive,heaps,for,storing,the,results,to,be,rescored,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,if,slice,builder,null,int,slice,limit,index,service,get,index,settings,get,max,slices,per,scroll,int,num,slices,slice,builder,get,max,if,num,slices,slice,limit,throw,new,illegal,argument,exception,the,number,of,slices,num,slices,is,too,large,it,must,be,less,than,slice,limit,this,limit,can,be,set,by,changing,the,index,settings,get,key,index,level,setting,try,final,query,builder,query,builder,request,get,alias,filter,get,query,builder,alias,filter,query,builder,null,null,query,builder,to,query,query,shard,context,catch,ioexception,e,throw,new,unchecked,ioexception,e,if,query,null,parsed,query,parsed,query,parsed,match,all,query,if,query,boost,abstract,query,builder,parsed,query,new,parsed,query,new,function,score,query,query,new,weight,factor,function,query,boost,parsed,query,this,query,build,filtered,query,query,if,rewrite,try,this,query,searcher,rewrite,query,catch,ioexception,e,throw,new,query,phase,execution,exception,this,failed,to,rewrite,main,query,e
DefaultSearchContext -> @Override     public Query query();1524684173;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1524780945;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1541618615;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1543834151;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1545997405;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1546630609;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1548230518;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public Query query();1550737421;The query to execute, in its rewritten form.;@Override_    public Query query() {_        return this.query__    };the,query,to,execute,in,its,rewritten,form;override,public,query,query,return,this,query
DefaultSearchContext -> @Override     public boolean sourceRequested();1524684173;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1524780945;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1541618615;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1543834151;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1545997405;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1546630609;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1548230518;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
DefaultSearchContext -> @Override     public boolean sourceRequested();1550737421;A shortcut function to see whether there is a fetchSourceContext and it says the source is requested.;@Override_    public boolean sourceRequested() {_        return fetchSourceContext != null && fetchSourceContext.fetchSource()__    };a,shortcut,function,to,see,whether,there,is,a,fetch,source,context,and,it,says,the,source,is,requested;override,public,boolean,source,requested,return,fetch,source,context,null,fetch,source,context,fetch,source
