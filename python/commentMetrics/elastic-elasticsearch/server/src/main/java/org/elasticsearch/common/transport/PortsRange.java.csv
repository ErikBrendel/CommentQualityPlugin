commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPortRangeString() {     return portRange. }
false;public;1;5;;@Override public boolean onPortNumber(int portNumber) {     ports.add(portNumber).     return false. }
false;public;0;11;;public int[] ports() throws NumberFormatException {     final IntArrayList ports = new IntArrayList().     iterate(new PortCallback() {          @Override         public boolean onPortNumber(int portNumber) {             ports.add(portNumber).             return false.         }     }).     return ports.toArray(). }
false;public;1;28;;public boolean iterate(PortCallback callback) throws NumberFormatException {     StringTokenizer st = new StringTokenizer(portRange, ",").     boolean success = false.     while (st.hasMoreTokens() && !success) {         String portToken = st.nextToken().trim().         int index = portToken.indexOf('-').         if (index == -1) {             int portNumber = Integer.parseInt(portToken.trim()).             success = callback.onPortNumber(portNumber).             if (success) {                 break.             }         } else {             int startPort = Integer.parseInt(portToken.substring(0, index).trim()).             int endPort = Integer.parseInt(portToken.substring(index + 1).trim()).             if (endPort < startPort) {                 throw new IllegalArgumentException("Start port [" + startPort + "] must be greater than end port [" + endPort + "]").             }             for (int i = startPort. i <= endPort. i++) {                 success = callback.onPortNumber(i).                 if (success) {                     break.                 }             }         }     }     return success. }
false;;1;1;;boolean onPortNumber(int portNumber).
false;public;0;6;;@Override public String toString() {     return "PortsRange{" + "portRange='" + portRange + '\'' + '}'. }
