commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a bucket ordering strategy that sorts buckets by their document counts (ascending or descending).  *  * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.  */ ;/**  * Creates a bucket ordering strategy that sorts buckets by their document counts (ascending or descending).  *  * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.  */ public static BucketOrder count(boolean asc) {     return asc ? InternalOrder.COUNT_ASC : InternalOrder.COUNT_DESC. }
true;public,static;1;3;/**  * Creates a bucket ordering strategy that sorts buckets by their keys (ascending or descending). This may be  * used as a tie-breaker to avoid non-deterministic ordering.  *  * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.  */ ;/**  * Creates a bucket ordering strategy that sorts buckets by their keys (ascending or descending). This may be  * used as a tie-breaker to avoid non-deterministic ordering.  *  * @param asc direction to sort by: {@code true} for ascending, {@code false} for descending.  */ public static BucketOrder key(boolean asc) {     return asc ? InternalOrder.KEY_ASC : InternalOrder.KEY_DESC. }
true;public,static;2;3;/**  * Creates a bucket ordering strategy which sorts buckets based on a single-valued sub-aggregation.  *  * @param path path to the sub-aggregation to sort on.  * @param asc  direction to sort by: {@code true} for ascending, {@code false} for descending.  * @see AggregationPath  */ ;/**  * Creates a bucket ordering strategy which sorts buckets based on a single-valued sub-aggregation.  *  * @param path path to the sub-aggregation to sort on.  * @param asc  direction to sort by: {@code true} for ascending, {@code false} for descending.  * @see AggregationPath  */ public static BucketOrder aggregation(String path, boolean asc) {     return new InternalOrder.Aggregation(path, asc). }
true;public,static;3;3;/**  * Creates a bucket ordering strategy which sorts buckets based on a metric from a multi-valued sub-aggregation.  *  * @param path       path to the sub-aggregation to sort on.  * @param metricName name of the value of the multi-value metric to sort on.  * @param asc        direction to sort by: {@code true} for ascending, {@code false} for descending.  * @see AggregationPath  */ ;/**  * Creates a bucket ordering strategy which sorts buckets based on a metric from a multi-valued sub-aggregation.  *  * @param path       path to the sub-aggregation to sort on.  * @param metricName name of the value of the multi-value metric to sort on.  * @param asc        direction to sort by: {@code true} for ascending, {@code false} for descending.  * @see AggregationPath  */ public static BucketOrder aggregation(String path, String metricName, boolean asc) {     return new InternalOrder.Aggregation(path + "." + metricName, asc). }
true;public,static;1;3;/**  * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to  * avoid non-deterministic ordering.  *  * @param orders a list of {@link BucketOrder} objects to sort on, in order of priority.  */ ;/**  * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to  * avoid non-deterministic ordering.  *  * @param orders a list of {@link BucketOrder} objects to sort on, in order of priority.  */ public static BucketOrder compound(List<BucketOrder> orders) {     return new InternalOrder.CompoundOrder(orders). }
true;public,static;1;3;/**  * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to  * avoid non-deterministic ordering.  *  * @param orders a list of {@link BucketOrder} parameters to sort on, in order of priority.  */ ;/**  * Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to  * avoid non-deterministic ordering.  *  * @param orders a list of {@link BucketOrder} parameters to sort on, in order of priority.  */ public static BucketOrder compound(BucketOrder... orders) {     return compound(Arrays.asList(orders)). }
true;public,abstract;1;1;/**  * @return A comparator for the bucket based on the given aggregator. The comparator is used in two phases:  * <p>  * - aggregation phase, where each shard builds a list of buckets to be sent to the coordinating node.  * In this phase, the passed in aggregator will be the aggregator that aggregates the buckets on the  * shard level.  * <p>  * - reduce phase, where the coordinating node gathers all the buckets from all the shards and reduces them  * to a final bucket list. In this case, the passed in aggregator will be {@code null}.  */ ;/**  * @return A comparator for the bucket based on the given aggregator. The comparator is used in two phases:  * <p>  * - aggregation phase, where each shard builds a list of buckets to be sent to the coordinating node.  * In this phase, the passed in aggregator will be the aggregator that aggregates the buckets on the  * shard level.  * <p>  * - reduce phase, where the coordinating node gathers all the buckets from all the shards and reduces them  * to a final bucket list. In this case, the passed in aggregator will be {@code null}.  */ public abstract Comparator<Bucket> comparator(Aggregator aggregator).
true;abstract;0;1;/**  * @return unique internal ID used for reading/writing this order from/to a stream.  * @see InternalOrder.Streams  */ ;/**  * @return unique internal ID used for reading/writing this order from/to a stream.  * @see InternalOrder.Streams  */ abstract byte id().
false;public,abstract;0;2;;@Override public abstract int hashCode().
false;public,abstract;1;2;;@Override public abstract boolean equals(Object obj).
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     InternalOrder.Streams.writeOrder(this, out). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
