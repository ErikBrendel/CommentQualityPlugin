commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(repository).     out.writeString(snapshot). }
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (repository == null) {         validationException = addValidationError("repository is missing", validationException).     }     if (snapshot == null) {         validationException = addValidationError("snapshot is missing", validationException).     }     return validationException. }
false;public;1;4;;public DeleteSnapshotRequest repository(String repository) {     this.repository = repository.     return this. }
true;public;0;3;/**  * Returns repository name  *  * @return repository name  */ ;/**  * Returns repository name  *  * @return repository name  */ public String repository() {     return this.repository. }
true;public;0;3;/**  * Returns repository name  *  * @return repository name  */ ;/**  * Returns repository name  *  * @return repository name  */ public String snapshot() {     return this.snapshot. }
true;public;1;4;/**  * Sets snapshot name  *  * @return this request  */ ;/**  * Sets snapshot name  *  * @return this request  */ public DeleteSnapshotRequest snapshot(String snapshot) {     this.snapshot = snapshot.     return this. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
