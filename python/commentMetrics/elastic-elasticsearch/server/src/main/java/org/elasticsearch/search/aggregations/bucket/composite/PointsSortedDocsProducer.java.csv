commented;modifiers;parameterAmount;loc;comment;code
false;;4;33;;@Override DocIdSet processLeaf(Query query, CompositeValuesCollectorQueue queue, LeafReaderContext context, boolean fillDocIdSet) throws IOException {     final PointValues values = context.reader().getPointValues(field).     if (values == null) {         // no value for the field         return DocIdSet.EMPTY.     }     long lowerBucket = Long.MIN_VALUE.     Comparable lowerValue = queue.getLowerValueLeadSource().     if (lowerValue != null) {         if (lowerValue.getClass() != Long.class) {             throw new IllegalStateException("expected Long, got " + lowerValue.getClass()).         }         lowerBucket = (Long) lowerValue.     }     long upperBucket = Long.MAX_VALUE.     Comparable upperValue = queue.getUpperValueLeadSource().     if (upperValue != null) {         if (upperValue.getClass() != Long.class) {             throw new IllegalStateException("expected Long, got " + upperValue.getClass()).         }         upperBucket = (Long) upperValue.     }     DocIdSetBuilder builder = fillDocIdSet ? new DocIdSetBuilder(context.reader().maxDoc(), values, field) : null.     Visitor visitor = new Visitor(context, queue, builder, values.getBytesPerDimension(), lowerBucket, upperBucket).     try {         values.intersect(visitor).         visitor.flush().     } catch (CollectionTerminatedException exc) {     }     return fillDocIdSet ? builder.build() : DocIdSet.EMPTY. }
false;public;1;5;;@Override public void grow(int count) {     remaining = count.     adder = bucketDocsBuilder.grow(count). }
false;public;1;4;;@Override public void visit(int docID) throws IOException {     throw new IllegalStateException("should never be called"). }
false;public;2;27;;@Override public void visit(int docID, byte[] packedValue) throws IOException {     if (compare(packedValue, packedValue) != PointValues.Relation.CELL_CROSSES_QUERY) {         remaining--.         return.     }     long bucket = bucketFunction.applyAsLong(packedValue).     if (first == false && bucket != lastBucket) {         final DocIdSet docIdSet = bucketDocsBuilder.build().         if (processBucket(queue, context, docIdSet.iterator(), lastBucket, builder) && // lower bucket is inclusive         lowerBucket != lastBucket) {             // to be greater than this bucket.             throw new CollectionTerminatedException().         }         bucketDocsBuilder = new DocIdSetBuilder(maxDoc).         assert remaining > 0.         adder = bucketDocsBuilder.grow(remaining).     }     lastBucket = bucket.     first = false.     adder.add(docID).     remaining--. }
false;public;2;26;;@Override public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {     if ((upperPointQuery != null && FutureArrays.compareUnsigned(minPackedValue, 0, bytesPerDim, upperPointQuery, 0, bytesPerDim) > 0) || (lowerPointQuery != null && FutureArrays.compareUnsigned(maxPackedValue, 0, bytesPerDim, lowerPointQuery, 0, bytesPerDim) < 0)) {         // does not match the query         return PointValues.Relation.CELL_OUTSIDE_QUERY.     }     // check the current bounds     if (lowerBucket != Long.MIN_VALUE) {         long maxBucket = bucketFunction.applyAsLong(maxPackedValue).         if (maxBucket < lowerBucket) {             return PointValues.Relation.CELL_OUTSIDE_QUERY.         }     }     if (upperBucket != Long.MAX_VALUE) {         long minBucket = bucketFunction.applyAsLong(minPackedValue).         if (minBucket > upperBucket) {             return PointValues.Relation.CELL_OUTSIDE_QUERY.         }     }     return PointValues.Relation.CELL_CROSSES_QUERY. }
false;public;0;7;;public void flush() throws IOException {     if (first == false) {         final DocIdSet docIdSet = bucketDocsBuilder.build().         processBucket(queue, context, docIdSet.iterator(), lastBucket, builder).         bucketDocsBuilder = null.     } }
