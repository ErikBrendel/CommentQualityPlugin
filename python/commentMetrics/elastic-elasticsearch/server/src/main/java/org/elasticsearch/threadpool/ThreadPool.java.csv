# id;timestamp;commentText;codeText;commentWords;codeWords
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1524684173;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1532353780;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1537806831;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1541092382;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1542402632;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1544081506;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1547060152;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1548953505;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1549399704;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1550737421;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds.;long relativeTimeInMillis() {_            return relativeMillis__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds;long,relative,time,in,millis,return,relative,millis
ThreadPool -> CachedTimeThread -> long relativeTimeInMillis();1550746427;Return the current time used for relative calculations. This is_{@link System#nanoTime()} truncated to milliseconds._<p>_If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0_then the cache is disabled and the method calls {@link System#nanoTime()}_whenever called. Typically used for testing.;long relativeTimeInMillis() {_            if (0 < interval) {_                return relativeMillis__            }_            return TimeValue.nsecToMSec(System.nanoTime())__        };return,the,current,time,used,for,relative,calculations,this,is,link,system,nano,time,truncated,to,milliseconds,p,if,link,thread,pool,is,set,to,0,then,the,cache,is,disabled,and,the,method,calls,link,system,nano,time,whenever,called,typically,used,for,testing;long,relative,time,in,millis,if,0,interval,return,relative,millis,return,time,value,nsec,to,msec,system,nano,time
ThreadPool -> public long relativeTimeInMillis();1524684173;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1532353780;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1537806831;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1541092382;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1542402632;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1544081506;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1547060152;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1548953505;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1549399704;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1550737421;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public long relativeTimeInMillis();1550746427;Returns a value of milliseconds that may be used for relative time calculations.__This method should only be used for calculating time deltas. For an epoch based_timestamp, see {@link #absoluteTimeInMillis()}.;public long relativeTimeInMillis() {_        return cachedTimeThread.relativeTimeInMillis()__    };returns,a,value,of,milliseconds,that,may,be,used,for,relative,time,calculations,this,method,should,only,be,used,for,calculating,time,deltas,for,an,epoch,based,timestamp,see,link,absolute,time,in,millis;public,long,relative,time,in,millis,return,cached,time,thread,relative,time,in,millis
ThreadPool -> public ExecutorService generic();1524684173;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1532353780;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1537806831;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1541092382;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1542402632;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1544081506;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1547060152;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1548953505;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1549399704;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1550737421;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> public ExecutorService generic();1550746427;Get the generic {@link ExecutorService}. This executor service_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} will not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.;public ExecutorService generic() {_        return executor(Names.GENERIC)__    };get,the,generic,link,executor,service,this,executor,service,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,will,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it;public,executor,service,generic,return,executor,names,generic
ThreadPool -> static int boundedBy(int value, int min, int max);1524684173;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1532353780;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1537806831;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1541092382;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1542402632;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1544081506;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1547060152;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1548953505;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1549399704;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1550737421;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> static int boundedBy(int value, int min, int max);1550746427;Constrains a value between minimum and maximum values_(inclusive).__@param value the value to constrain_@param min   the minimum acceptable value_@param max   the maximum acceptable value_@return min if value is less than min, max if value is greater_than value, otherwise value;static int boundedBy(int value, int min, int max) {_        return Math.min(max, Math.max(min, value))__    };constrains,a,value,between,minimum,and,maximum,values,inclusive,param,value,the,value,to,constrain,param,min,the,minimum,acceptable,value,param,max,the,maximum,acceptable,value,return,min,if,value,is,less,than,min,max,if,value,is,greater,than,value,otherwise,value;static,int,bounded,by,int,value,int,min,int,max,return,math,min,max,math,max,min,value
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1524684173;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1532353780;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1537806831;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1541092382;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1542402632;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1544081506;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1547060152;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1548953505;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1549399704;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1550737421;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}.;long absoluteTimeInMillis() {_            return absoluteMillis__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis;long,absolute,time,in,millis,return,absolute,millis
ThreadPool -> CachedTimeThread -> long absoluteTimeInMillis();1550746427;Return the current epoch time, used to find absolute time. This is_a cached version of {@link System#currentTimeMillis()}._<p>_If {@link ThreadPool#ESTIMATED_TIME_INTERVAL_SETTING} is set to 0_then the cache is disabled and the method calls {@link System#currentTimeMillis()}_whenever called. Typically used for testing.;long absoluteTimeInMillis() {_            if (0 < interval) {_                return absoluteMillis__            }_            return System.currentTimeMillis()__        };return,the,current,epoch,time,used,to,find,absolute,time,this,is,a,cached,version,of,link,system,current,time,millis,p,if,link,thread,pool,is,set,to,0,then,the,cache,is,disabled,and,the,method,calls,link,system,current,time,millis,whenever,called,typically,used,for,testing;long,absolute,time,in,millis,if,0,interval,return,absolute,millis,return,system,current,time,millis
ThreadPool -> @Override     public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor);1548953505;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes_the meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the_command completes._@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return new ScheduledCancellableAdapter(scheduler.schedule(command, delay.millis(), TimeUnit.MILLISECONDS))__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,new,scheduled,cancellable,adapter,scheduler,schedule,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor);1549399704;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes_the meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the_command completes._@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return new ScheduledCancellableAdapter(scheduler.schedule(command, delay.millis(), TimeUnit.MILLISECONDS))__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,new,scheduled,cancellable,adapter,scheduler,schedule,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor);1550737421;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes_the meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the_command completes._@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return new ScheduledCancellableAdapter(scheduler.schedule(command, delay.millis(), TimeUnit.MILLISECONDS))__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,new,scheduled,cancellable,adapter,scheduler,schedule,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor);1550746427;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param command the command to run_@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes_the meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the_command completes._@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledCancellable schedule(Runnable command, TimeValue delay, String executor) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return new ScheduledCancellableAdapter(scheduler.schedule(command, delay.millis(), TimeUnit.MILLISECONDS))__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,command,the,command,to,run,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,cancellable,schedule,runnable,command,time,value,delay,string,executor,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,new,scheduled,cancellable,adapter,scheduler,schedule,command,delay,millis,time,unit,milliseconds
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1524684173;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1532353780;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1537806831;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1541092382;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1542402632;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1544081506;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1547060152;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1548953505;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1549399704;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1550737421;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit);1550746427;Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {_        if (service != null) {_            service.shutdown()__            if (awaitTermination(service, timeout, timeUnit)) return true__            service.shutdownNow()__            return awaitTermination(service, timeout, timeUnit)__        }_        return false__    };returns,code,true,code,if,the,given,service,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,executor,service,service,long,timeout,time,unit,time,unit,if,service,null,service,shutdown,if,await,termination,service,timeout,time,unit,return,true,service,shutdown,now,return,await,termination,service,timeout,time,unit,return,false
ThreadPool -> public long absoluteTimeInMillis();1524684173;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1532353780;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1537806831;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1541092382;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1542402632;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1544081506;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1547060152;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1548953505;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1549399704;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1550737421;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public long absoluteTimeInMillis();1550746427;Returns the value of milliseconds since UNIX epoch.__This method should only be used for exact date/time formatting. For calculating_time deltas that should not suffer from negative deltas, which are possible with_this method, see {@link #relativeTimeInMillis()}.;public long absoluteTimeInMillis() {_        return cachedTimeThread.absoluteTimeInMillis()__    };returns,the,value,of,milliseconds,since,unix,epoch,this,method,should,only,be,used,for,exact,date,time,formatting,for,calculating,time,deltas,that,should,not,suffer,from,negative,deltas,which,are,possible,with,this,method,see,link,relative,time,in,millis;public,long,absolute,time,in,millis,return,cached,time,thread,absolute,time,in,millis
ThreadPool -> public ExecutorService executor(String name);1524684173;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1532353780;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1537806831;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1541092382;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1542402632;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1544081506;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1547060152;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1548953505;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1549399704;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1550737421;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> public ExecutorService executor(String name);1550746427;Get the {@link ExecutorService} with the given name. This executor service's_{@link Executor#execute(Runnable)} method will run the {@link Runnable} it is given in the_{@link ThreadContext} of the thread that queues it._<p>_Warning: this {@linkplain ExecutorService} might not throw {@link RejectedExecutionException}_if you submit a task while it shutdown. It will instead silently queue it and not run it.__@param name the name of the executor service to obtain_@throws IllegalArgumentException if no executor service with the specified name exists;public ExecutorService executor(String name) {_        final ExecutorHolder holder = executors.get(name)__        if (holder == null) {_            throw new IllegalArgumentException("no executor service found for [" + name + "]")__        }_        return holder.executor()__    };get,the,link,executor,service,with,the,given,name,this,executor,service,s,link,executor,execute,runnable,method,will,run,the,link,runnable,it,is,given,in,the,link,thread,context,of,the,thread,that,queues,it,p,warning,this,linkplain,executor,service,might,not,throw,link,rejected,execution,exception,if,you,submit,a,task,while,it,shutdown,it,will,instead,silently,queue,it,and,not,run,it,param,name,the,name,of,the,executor,service,to,obtain,throws,illegal,argument,exception,if,no,executor,service,with,the,specified,name,exists;public,executor,service,executor,string,name,final,executor,holder,holder,executors,get,name,if,holder,null,throw,new,illegal,argument,exception,no,executor,service,found,for,name,return,holder,executor
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1532353780;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the_meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command_completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1537806831;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the_meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command_completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1541092382;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the_meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command_completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1542402632;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the_meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command_completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1544081506;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes the_meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the command_completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> @Override     public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command);1547060152;Schedules a one-shot command to run after a given delay. The command is not run in the context of the calling thread. To preserve the_context of the calling thread you may call <code>threadPool.getThreadContext().preserveContext</code> on the runnable before passing_it to this method.__@param delay delay before the task executes_@param executor the name of the thread pool on which to execute this task. SAME means "execute on the scheduler thread" which changes_the meaning of the ScheduledFuture returned by this method. In that case the ScheduledFuture will complete only when the_command completes._@param command the command to run_@return a ScheduledFuture who's get will return when the task is has been added to its target thread pool and throw an exception if_the task is canceled before it was added to its target thread pool. Once the task has been added to its target thread pool_the ScheduledFuture will cannot interact with it._@throws org.elasticsearch.common.util.concurrent.EsRejectedExecutionException if the task cannot be scheduled for execution;@Override_    public ScheduledFuture<?> schedule(TimeValue delay, String executor, Runnable command) {_        if (!Names.SAME.equals(executor)) {_            command = new ThreadedRunnable(command, executor(executor))__        }_        return scheduler.schedule(new ThreadPool.LoggingRunnable(command), delay.millis(), TimeUnit.MILLISECONDS)__    };schedules,a,one,shot,command,to,run,after,a,given,delay,the,command,is,not,run,in,the,context,of,the,calling,thread,to,preserve,the,context,of,the,calling,thread,you,may,call,code,thread,pool,get,thread,context,preserve,context,code,on,the,runnable,before,passing,it,to,this,method,param,delay,delay,before,the,task,executes,param,executor,the,name,of,the,thread,pool,on,which,to,execute,this,task,same,means,execute,on,the,scheduler,thread,which,changes,the,meaning,of,the,scheduled,future,returned,by,this,method,in,that,case,the,scheduled,future,will,complete,only,when,the,command,completes,param,command,the,command,to,run,return,a,scheduled,future,who,s,get,will,return,when,the,task,is,has,been,added,to,its,target,thread,pool,and,throw,an,exception,if,the,task,is,canceled,before,it,was,added,to,its,target,thread,pool,once,the,task,has,been,added,to,its,target,thread,pool,the,scheduled,future,will,cannot,interact,with,it,throws,org,elasticsearch,common,util,concurrent,es,rejected,execution,exception,if,the,task,cannot,be,scheduled,for,execution;override,public,scheduled,future,schedule,time,value,delay,string,executor,runnable,command,if,names,same,equals,executor,command,new,threaded,runnable,command,executor,executor,return,scheduler,schedule,new,thread,pool,logging,runnable,command,delay,millis,time,unit,milliseconds
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1524684173;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1532353780;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1537806831;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1541092382;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1542402632;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1544081506;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1547060152;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1548953505;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1549399704;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1550737421;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
ThreadPool -> public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit);1550746427;Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,_the service is <code>null</code> this method will return <code>false</code>.;public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {_        if (pool != null) {_            try {_                pool.shutdown()__                if (awaitTermination(pool, timeout, timeUnit)) {_                    return true__                }_                _                pool.shutdownNow()__                return awaitTermination(pool, timeout, timeUnit)__            } finally {_                IOUtils.closeWhileHandlingException(pool)__            }_        }_        return false__    };returns,code,true,code,if,the,given,pool,was,terminated,successfully,if,the,termination,timed,out,the,service,is,code,null,code,this,method,will,return,code,false,code;public,static,boolean,terminate,thread,pool,pool,long,timeout,time,unit,time,unit,if,pool,null,try,pool,shutdown,if,await,termination,pool,timeout,time,unit,return,true,pool,shutdown,now,return,await,termination,pool,timeout,time,unit,finally,ioutils,close,while,handling,exception,pool,return,false
