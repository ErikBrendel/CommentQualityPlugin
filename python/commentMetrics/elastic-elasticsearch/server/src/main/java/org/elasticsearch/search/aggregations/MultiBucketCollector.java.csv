# id;timestamp;commentText;codeText;commentWords;codeWords
MultiBucketCollector -> public static BucketCollector wrap(BucketCollector... collectors);1535965276;See {@link #wrap(Iterable)}.;public static BucketCollector wrap(BucketCollector... collectors) {_        return wrap(Arrays.asList(collectors))__    };see,link,wrap,iterable;public,static,bucket,collector,wrap,bucket,collector,collectors,return,wrap,arrays,as,list,collectors
MultiBucketCollector -> public static BucketCollector wrap(BucketCollector... collectors);1536314350;See {@link #wrap(Iterable)}.;public static BucketCollector wrap(BucketCollector... collectors) {_        return wrap(Arrays.asList(collectors))__    };see,link,wrap,iterable;public,static,bucket,collector,wrap,bucket,collector,collectors,return,wrap,arrays,as,list,collectors
MultiBucketCollector -> public static BucketCollector wrap(BucketCollector... collectors);1536611444;See {@link #wrap(Iterable)}.;public static BucketCollector wrap(BucketCollector... collectors) {_        return wrap(Arrays.asList(collectors))__    };see,link,wrap,iterable;public,static,bucket,collector,wrap,bucket,collector,collectors,return,wrap,arrays,as,list,collectors
MultiBucketCollector -> public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors);1535965276;Wraps a list of {@link BucketCollector}s with a {@link MultiBucketCollector}. This_method works as follows:_<ul>_<li>Filters out the {@link BucketCollector#NO_OP_COLLECTOR}s collectors, so they are not used_during search time._<li>If the input contains 1 real collector, it is returned._<li>Otherwise the method returns a {@link MultiBucketCollector} which wraps the_non-{@link BucketCollector#NO_OP_COLLECTOR} collectors._</ul>;public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors) {_        _        _        _        int n = 0__        for (BucketCollector c : collectors) {_            if (c != NO_OP_COLLECTOR) {_                n++__            }_        }__        if (n == 0) {_            return NO_OP_COLLECTOR__        } else if (n == 1) {_            _            BucketCollector col = null__            for (BucketCollector c : collectors) {_                if (c != null) {_                    col = c__                    break__                }_            }_            return col__        } else {_            BucketCollector[] colls = new BucketCollector[n]__            n = 0__            for (BucketCollector c : collectors) {_                if (c != null) {_                    colls[n++] = c__                }_            }_            return new MultiBucketCollector(colls)__        }_    };wraps,a,list,of,link,bucket,collector,s,with,a,link,multi,bucket,collector,this,method,works,as,follows,ul,li,filters,out,the,link,bucket,collector,s,collectors,so,they,are,not,used,during,search,time,li,if,the,input,contains,1,real,collector,it,is,returned,li,otherwise,the,method,returns,a,link,multi,bucket,collector,which,wraps,the,non,link,bucket,collector,collectors,ul;public,static,bucket,collector,wrap,iterable,extends,bucket,collector,collectors,int,n,0,for,bucket,collector,c,collectors,if,c,n,if,n,0,return,else,if,n,1,bucket,collector,col,null,for,bucket,collector,c,collectors,if,c,null,col,c,break,return,col,else,bucket,collector,colls,new,bucket,collector,n,n,0,for,bucket,collector,c,collectors,if,c,null,colls,n,c,return,new,multi,bucket,collector,colls
MultiBucketCollector -> public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors);1536314350;Wraps a list of {@link BucketCollector}s with a {@link MultiBucketCollector}. This_method works as follows:_<ul>_<li>Filters out the {@link BucketCollector#NO_OP_COLLECTOR}s collectors, so they are not used_during search time._<li>If the input contains 1 real collector, it is returned._<li>Otherwise the method returns a {@link MultiBucketCollector} which wraps the_non-{@link BucketCollector#NO_OP_COLLECTOR} collectors._</ul>;public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors) {_        _        _        _        int n = 0__        for (BucketCollector c : collectors) {_            if (c != NO_OP_COLLECTOR) {_                n++__            }_        }__        if (n == 0) {_            return NO_OP_COLLECTOR__        } else if (n == 1) {_            _            BucketCollector col = null__            for (BucketCollector c : collectors) {_                if (c != null) {_                    col = c__                    break__                }_            }_            return col__        } else {_            BucketCollector[] colls = new BucketCollector[n]__            n = 0__            for (BucketCollector c : collectors) {_                if (c != null) {_                    colls[n++] = c__                }_            }_            return new MultiBucketCollector(colls)__        }_    };wraps,a,list,of,link,bucket,collector,s,with,a,link,multi,bucket,collector,this,method,works,as,follows,ul,li,filters,out,the,link,bucket,collector,s,collectors,so,they,are,not,used,during,search,time,li,if,the,input,contains,1,real,collector,it,is,returned,li,otherwise,the,method,returns,a,link,multi,bucket,collector,which,wraps,the,non,link,bucket,collector,collectors,ul;public,static,bucket,collector,wrap,iterable,extends,bucket,collector,collectors,int,n,0,for,bucket,collector,c,collectors,if,c,n,if,n,0,return,else,if,n,1,bucket,collector,col,null,for,bucket,collector,c,collectors,if,c,null,col,c,break,return,col,else,bucket,collector,colls,new,bucket,collector,n,n,0,for,bucket,collector,c,collectors,if,c,null,colls,n,c,return,new,multi,bucket,collector,colls
MultiBucketCollector -> public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors);1536611444;Wraps a list of {@link BucketCollector}s with a {@link MultiBucketCollector}. This_method works as follows:_<ul>_<li>Filters out the {@link BucketCollector#NO_OP_COLLECTOR}s collectors, so they are not used_during search time._<li>If the input contains 1 real collector, it is returned._<li>Otherwise the method returns a {@link MultiBucketCollector} which wraps the_non-{@link BucketCollector#NO_OP_COLLECTOR} collectors._</ul>;public static BucketCollector wrap(Iterable<? extends BucketCollector> collectors) {_        _        _        _        int n = 0__        for (BucketCollector c : collectors) {_            if (c != NO_OP_COLLECTOR) {_                n++__            }_        }__        if (n == 0) {_            return NO_OP_COLLECTOR__        } else if (n == 1) {_            _            BucketCollector col = null__            for (BucketCollector c : collectors) {_                if (c != null) {_                    col = c__                    break__                }_            }_            return col__        } else {_            BucketCollector[] colls = new BucketCollector[n]__            n = 0__            for (BucketCollector c : collectors) {_                if (c != null) {_                    colls[n++] = c__                }_            }_            return new MultiBucketCollector(colls)__        }_    };wraps,a,list,of,link,bucket,collector,s,with,a,link,multi,bucket,collector,this,method,works,as,follows,ul,li,filters,out,the,link,bucket,collector,s,collectors,so,they,are,not,used,during,search,time,li,if,the,input,contains,1,real,collector,it,is,returned,li,otherwise,the,method,returns,a,link,multi,bucket,collector,which,wraps,the,non,link,bucket,collector,collectors,ul;public,static,bucket,collector,wrap,iterable,extends,bucket,collector,collectors,int,n,0,for,bucket,collector,c,collectors,if,c,n,if,n,0,return,else,if,n,1,bucket,collector,col,null,for,bucket,collector,c,collectors,if,c,null,col,c,break,return,col,else,bucket,collector,colls,new,bucket,collector,n,n,0,for,bucket,collector,c,collectors,if,c,null,colls,n,c,return,new,multi,bucket,collector,colls
