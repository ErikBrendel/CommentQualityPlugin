# id;timestamp;commentText;codeText;commentWords;codeWords
ThrottlingAllocationDecider -> private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId);1524684173;The shard routing passed to {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)} is not the initializing shard to this_node but:_- the unassigned shard routing in case if we want to assign an unassigned shard to this node._- the initializing shard routing if we want to assign the initializing shard to this node instead_- the started shard routing in case if we want to check if we can relocate to this node._- the relocating shard routing if we want to relocate to this node now instead.__This method returns the corresponding initializing shard that would be allocated to this node.;private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId) {_        final ShardRouting initializingShard__        if (shardRouting.unassigned()) {_            initializingShard = shardRouting.initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.initializing()) {_            UnassignedInfo unassignedInfo = shardRouting.unassignedInfo()__            if (unassignedInfo == null) {_                _                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, "fake")__            }_            initializingShard = shardRouting.moveToUnassigned(unassignedInfo)_                .initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.relocating()) {_            initializingShard = shardRouting.cancelRelocation()_                .relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        } else {_            assert shardRouting.started()__            initializingShard = shardRouting.relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        }_        assert initializingShard.initializing()__        return initializingShard__    };the,shard,routing,passed,to,link,can,allocate,shard,routing,routing,node,routing,allocation,is,not,the,initializing,shard,to,this,node,but,the,unassigned,shard,routing,in,case,if,we,want,to,assign,an,unassigned,shard,to,this,node,the,initializing,shard,routing,if,we,want,to,assign,the,initializing,shard,to,this,node,instead,the,started,shard,routing,in,case,if,we,want,to,check,if,we,can,relocate,to,this,node,the,relocating,shard,routing,if,we,want,to,relocate,to,this,node,now,instead,this,method,returns,the,corresponding,initializing,shard,that,would,be,allocated,to,this,node;private,shard,routing,initializing,shard,shard,routing,shard,routing,string,current,node,id,final,shard,routing,initializing,shard,if,shard,routing,unassigned,initializing,shard,shard,routing,initialize,current,node,id,null,shard,routing,else,if,shard,routing,initializing,unassigned,info,unassigned,info,shard,routing,unassigned,info,if,unassigned,info,null,unassigned,info,new,unassigned,info,unassigned,info,reason,fake,initializing,shard,shard,routing,move,to,unassigned,unassigned,info,initialize,current,node,id,null,shard,routing,else,if,shard,routing,relocating,initializing,shard,shard,routing,cancel,relocation,relocate,current,node,id,shard,routing,get,target,relocating,shard,else,assert,shard,routing,started,initializing,shard,shard,routing,relocate,current,node,id,shard,routing,get,target,relocating,shard,assert,initializing,shard,initializing,return,initializing,shard
ThrottlingAllocationDecider -> private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId);1525334055;The shard routing passed to {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)} is not the initializing shard to this_node but:_- the unassigned shard routing in case if we want to assign an unassigned shard to this node._- the initializing shard routing if we want to assign the initializing shard to this node instead_- the started shard routing in case if we want to check if we can relocate to this node._- the relocating shard routing if we want to relocate to this node now instead.__This method returns the corresponding initializing shard that would be allocated to this node.;private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId) {_        final ShardRouting initializingShard__        if (shardRouting.unassigned()) {_            initializingShard = shardRouting.initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.initializing()) {_            UnassignedInfo unassignedInfo = shardRouting.unassignedInfo()__            if (unassignedInfo == null) {_                _                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, "fake")__            }_            initializingShard = shardRouting.moveToUnassigned(unassignedInfo)_                .initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.relocating()) {_            initializingShard = shardRouting.cancelRelocation()_                .relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        } else {_            assert shardRouting.started()__            initializingShard = shardRouting.relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        }_        assert initializingShard.initializing()__        return initializingShard__    };the,shard,routing,passed,to,link,can,allocate,shard,routing,routing,node,routing,allocation,is,not,the,initializing,shard,to,this,node,but,the,unassigned,shard,routing,in,case,if,we,want,to,assign,an,unassigned,shard,to,this,node,the,initializing,shard,routing,if,we,want,to,assign,the,initializing,shard,to,this,node,instead,the,started,shard,routing,in,case,if,we,want,to,check,if,we,can,relocate,to,this,node,the,relocating,shard,routing,if,we,want,to,relocate,to,this,node,now,instead,this,method,returns,the,corresponding,initializing,shard,that,would,be,allocated,to,this,node;private,shard,routing,initializing,shard,shard,routing,shard,routing,string,current,node,id,final,shard,routing,initializing,shard,if,shard,routing,unassigned,initializing,shard,shard,routing,initialize,current,node,id,null,shard,routing,else,if,shard,routing,initializing,unassigned,info,unassigned,info,shard,routing,unassigned,info,if,unassigned,info,null,unassigned,info,new,unassigned,info,unassigned,info,reason,fake,initializing,shard,shard,routing,move,to,unassigned,unassigned,info,initialize,current,node,id,null,shard,routing,else,if,shard,routing,relocating,initializing,shard,shard,routing,cancel,relocation,relocate,current,node,id,shard,routing,get,target,relocating,shard,else,assert,shard,routing,started,initializing,shard,shard,routing,relocate,current,node,id,shard,routing,get,target,relocating,shard,assert,initializing,shard,initializing,return,initializing,shard
ThrottlingAllocationDecider -> private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId);1541092382;The shard routing passed to {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)} is not the initializing shard to this_node but:_- the unassigned shard routing in case if we want to assign an unassigned shard to this node._- the initializing shard routing if we want to assign the initializing shard to this node instead_- the started shard routing in case if we want to check if we can relocate to this node._- the relocating shard routing if we want to relocate to this node now instead.__This method returns the corresponding initializing shard that would be allocated to this node.;private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId) {_        final ShardRouting initializingShard__        if (shardRouting.unassigned()) {_            initializingShard = shardRouting.initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.initializing()) {_            UnassignedInfo unassignedInfo = shardRouting.unassignedInfo()__            if (unassignedInfo == null) {_                _                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, "fake")__            }_            initializingShard = shardRouting.moveToUnassigned(unassignedInfo)_                .initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.relocating()) {_            initializingShard = shardRouting.cancelRelocation()_                .relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        } else {_            assert shardRouting.started()__            initializingShard = shardRouting.relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        }_        assert initializingShard.initializing()__        return initializingShard__    };the,shard,routing,passed,to,link,can,allocate,shard,routing,routing,node,routing,allocation,is,not,the,initializing,shard,to,this,node,but,the,unassigned,shard,routing,in,case,if,we,want,to,assign,an,unassigned,shard,to,this,node,the,initializing,shard,routing,if,we,want,to,assign,the,initializing,shard,to,this,node,instead,the,started,shard,routing,in,case,if,we,want,to,check,if,we,can,relocate,to,this,node,the,relocating,shard,routing,if,we,want,to,relocate,to,this,node,now,instead,this,method,returns,the,corresponding,initializing,shard,that,would,be,allocated,to,this,node;private,shard,routing,initializing,shard,shard,routing,shard,routing,string,current,node,id,final,shard,routing,initializing,shard,if,shard,routing,unassigned,initializing,shard,shard,routing,initialize,current,node,id,null,shard,routing,else,if,shard,routing,initializing,unassigned,info,unassigned,info,shard,routing,unassigned,info,if,unassigned,info,null,unassigned,info,new,unassigned,info,unassigned,info,reason,fake,initializing,shard,shard,routing,move,to,unassigned,unassigned,info,initialize,current,node,id,null,shard,routing,else,if,shard,routing,relocating,initializing,shard,shard,routing,cancel,relocation,relocate,current,node,id,shard,routing,get,target,relocating,shard,else,assert,shard,routing,started,initializing,shard,shard,routing,relocate,current,node,id,shard,routing,get,target,relocating,shard,assert,initializing,shard,initializing,return,initializing,shard
ThrottlingAllocationDecider -> private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId);1542402632;The shard routing passed to {@link #canAllocate(ShardRouting, RoutingNode, RoutingAllocation)} is not the initializing shard to this_node but:_- the unassigned shard routing in case if we want to assign an unassigned shard to this node._- the initializing shard routing if we want to assign the initializing shard to this node instead_- the started shard routing in case if we want to check if we can relocate to this node._- the relocating shard routing if we want to relocate to this node now instead.__This method returns the corresponding initializing shard that would be allocated to this node.;private ShardRouting initializingShard(ShardRouting shardRouting, String currentNodeId) {_        final ShardRouting initializingShard__        if (shardRouting.unassigned()) {_            initializingShard = shardRouting.initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.initializing()) {_            UnassignedInfo unassignedInfo = shardRouting.unassignedInfo()__            if (unassignedInfo == null) {_                _                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, "fake")__            }_            initializingShard = shardRouting.moveToUnassigned(unassignedInfo)_                .initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)__        } else if (shardRouting.relocating()) {_            initializingShard = shardRouting.cancelRelocation()_                .relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        } else {_            assert shardRouting.started()__            initializingShard = shardRouting.relocate(currentNodeId, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)_                .getTargetRelocatingShard()__        }_        assert initializingShard.initializing()__        return initializingShard__    };the,shard,routing,passed,to,link,can,allocate,shard,routing,routing,node,routing,allocation,is,not,the,initializing,shard,to,this,node,but,the,unassigned,shard,routing,in,case,if,we,want,to,assign,an,unassigned,shard,to,this,node,the,initializing,shard,routing,if,we,want,to,assign,the,initializing,shard,to,this,node,instead,the,started,shard,routing,in,case,if,we,want,to,check,if,we,can,relocate,to,this,node,the,relocating,shard,routing,if,we,want,to,relocate,to,this,node,now,instead,this,method,returns,the,corresponding,initializing,shard,that,would,be,allocated,to,this,node;private,shard,routing,initializing,shard,shard,routing,shard,routing,string,current,node,id,final,shard,routing,initializing,shard,if,shard,routing,unassigned,initializing,shard,shard,routing,initialize,current,node,id,null,shard,routing,else,if,shard,routing,initializing,unassigned,info,unassigned,info,shard,routing,unassigned,info,if,unassigned,info,null,unassigned,info,new,unassigned,info,unassigned,info,reason,fake,initializing,shard,shard,routing,move,to,unassigned,unassigned,info,initialize,current,node,id,null,shard,routing,else,if,shard,routing,relocating,initializing,shard,shard,routing,cancel,relocation,relocate,current,node,id,shard,routing,get,target,relocating,shard,else,assert,shard,routing,started,initializing,shard,shard,routing,relocate,current,node,id,shard,routing,get,target,relocating,shard,assert,initializing,shard,initializing,return,initializing,shard
