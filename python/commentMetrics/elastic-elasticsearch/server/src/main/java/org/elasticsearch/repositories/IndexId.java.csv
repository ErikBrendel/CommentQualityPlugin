commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The name of the index.  */ ;/**  * The name of the index.  */ public String getName() {     return name. }
true;public;0;3;/**  * The unique ID for the index within the repository.  This is *not* the same as the  * index's UUID, but merely a unique file/URL friendly identifier that a repository can  * use to name blobs for the index.  *  * We could not use the index's actual UUID (See {@link Index#getUUID()}) because in the  * case of snapshot/restore, the index UUID in the snapshotted index will be different  * from the index UUID assigned to it when it is restored. Hence, the actual index UUID  * is not useful in the context of snapshot/restore for tying a snapshotted index to the  * index it was snapshot from, and so we are using a separate UUID here.  */ ;/**  * The unique ID for the index within the repository.  This is *not* the same as the  * index's UUID, but merely a unique file/URL friendly identifier that a repository can  * use to name blobs for the index.  *  * We could not use the index's actual UUID (See {@link Index#getUUID()}) because in the  * case of snapshot/restore, the index UUID in the snapshotted index will be different  * from the index UUID assigned to it when it is restored. Hence, the actual index UUID  * is not useful in the context of snapshot/restore for tying a snapshotted index to the  * index it was snapshot from, and so we are using a separate UUID here.  */ public String getId() {     return id. }
false;public;0;4;;@Override public String toString() {     return "[" + name + "/" + id + "]". }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     IndexId that = (IndexId) o.     return Objects.equals(name, that.name) && Objects.equals(id, that.id). }
false;public;0;4;;@Override public int hashCode() {     return hashCode. }
false;private;0;3;;private int computeHashCode() {     return Objects.hash(name, id). }
false;public;1;5;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeString(name).     out.writeString(id). }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(NAME, name).     builder.field(ID, id).     builder.endObject().     return builder. }
