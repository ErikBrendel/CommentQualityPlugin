commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "validate_query_action". }
false;public;2;40;;@Override public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {     ValidateQueryRequest validateQueryRequest = new ValidateQueryRequest(Strings.splitStringByCommaToArray(request.param("index"))).     validateQueryRequest.indicesOptions(IndicesOptions.fromRequest(request, validateQueryRequest.indicesOptions())).     validateQueryRequest.explain(request.paramAsBoolean("explain", false)).     if (request.hasParam("type")) {         deprecationLogger.deprecatedAndMaybeLog("validate_query_with_types", TYPES_DEPRECATION_MESSAGE).         validateQueryRequest.types(Strings.splitStringByCommaToArray(request.param("type"))).     }     validateQueryRequest.rewrite(request.paramAsBoolean("rewrite", false)).     validateQueryRequest.allShards(request.paramAsBoolean("all_shards", false)).     Exception bodyParsingException = null.     try {         request.withContentOrSourceParamParserOrNull(parser -> {             if (parser != null) {                 validateQueryRequest.query(RestActions.getQueryContent(parser)).             } else if (request.hasParam("q")) {                 validateQueryRequest.query(RestActions.urlParamsToQueryBuilder(request)).             }         }).     } catch (Exception e) {         bodyParsingException = e.     }     final Exception finalBodyParsingException = bodyParsingException.     return channel -> {         if (finalBodyParsingException != null) {             if (finalBodyParsingException instanceof ParsingException) {                 handleException(validateQueryRequest, ((ParsingException) finalBodyParsingException).getDetailedMessage(), channel).             } else {                 handleException(validateQueryRequest, finalBodyParsingException.getMessage(), channel).             }         } else {             client.admin().indices().validateQuery(validateQueryRequest, new RestToXContentListener<>(channel)).         }     }. }
false;private;3;3;;private void handleException(final ValidateQueryRequest request, final String message, final RestChannel channel) throws IOException {     channel.sendResponse(buildErrorResponse(channel.newBuilder(), message, request.explain())). }
false;private,static;3;9;;private static BytesRestResponse buildErrorResponse(XContentBuilder builder, String error, boolean explain) throws IOException {     builder.startObject().     builder.field(ValidateQueryResponse.VALID_FIELD, false).     if (explain) {         builder.field(QueryExplanation.ERROR_FIELD, error).     }     builder.endObject().     return new BytesRestResponse(OK, builder). }
