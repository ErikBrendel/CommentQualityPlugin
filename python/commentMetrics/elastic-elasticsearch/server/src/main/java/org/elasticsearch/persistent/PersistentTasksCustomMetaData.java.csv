# id;timestamp;commentText;codeText;commentWords;codeWords
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskStatus(String taskId, Status status);1524684173;Updates the task status;public Builder updateTaskStatus(String taskId, Status status) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, status))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,status;public,builder,update,task,status,string,task,id,status,status,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,status,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskStatus(String taskId, Status status);1527152864;Updates the task status;public Builder updateTaskStatus(String taskId, Status status) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, status))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,status;public,builder,update,task,status,string,task,id,status,status,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,status,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskStatus(String taskId, Status status);1527878678;Updates the task status;public Builder updateTaskStatus(String taskId, Status status) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, status))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,status;public,builder,update,task,status,string,task,id,status,status,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,status,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskStatus(String taskId, Status status);1528103657;Updates the task status;public Builder updateTaskStatus(String taskId, Status status) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, status))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,status;public,builder,update,task,status,string,task,id,status,status,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,status,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskStatus(String taskId, Status status);1528129613;Updates the task status;public Builder updateTaskStatus(String taskId, Status status) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, status))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,status;public,builder,update,task,status,string,task,id,status,status,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,status,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1524684173;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1527152864;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1527878678;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1528103657;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1528129613;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1529076503;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1535139672;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1548161085;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId, long allocationId);1548259585;Checks if the task is currently present in the list and has the right allocation id;public boolean hasTask(String taskId, long allocationId) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                return taskInProgress.getAllocationId() == allocationId__            }_            return false__        };checks,if,the,task,is,currently,present,in,the,list,and,has,the,right,allocation,id;public,boolean,has,task,string,task,id,long,allocation,id,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,return,task,in,progress,get,allocation,id,allocation,id,return,false
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1524684173;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1527152864;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1527878678;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1528103657;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1528129613;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1529076503;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1535139672;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1548161085;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder reassignTask(String taskId, Assignment assignment);1548259585;Reassigns the task to another node;public Builder reassignTask(String taskId, Assignment assignment) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, getNextAllocationId(), assignment))__            } else {_                throw new ResourceNotFoundException("cannot reassign task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };reassigns,the,task,to,another,node;public,builder,reassign,task,string,task,id,assignment,assignment,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,get,next,allocation,id,assignment,else,throw,new,resource,not,found,exception,cannot,reassign,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1524684173;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1527152864;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1527878678;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1528103657;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1528129613;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1529076503;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1535139672;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1548161085;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder removeTask(String taskId);1548259585;Removes the task;public Builder removeTask(String taskId) {_            if (tasks.remove(taskId) != null) {_                changed = true__            } else {_                throw new ResourceNotFoundException("cannot remove task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };removes,the,task;public,builder,remove,task,string,task,id,if,tasks,remove,task,id,null,changed,true,else,throw,new,resource,not,found,exception,cannot,remove,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1524684173;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1527152864;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1527878678;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1528103657;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1528129613;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1529076503;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1535139672;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1548161085;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,                                                                      Assignment assignment);1548259585;Adds a new task to the builder_<p>_After the task is added its id can be found by calling {{@link #getLastAllocationId()}} method.;public <Params extends PersistentTaskParams> Builder addTask(String taskId, String taskName, Params params,_                                                                     Assignment assignment) {_            changed = true__            PersistentTask<?> previousTask = tasks.put(taskId, new PersistentTask<>(taskId, taskName, params,_                    getNextAllocationId(), assignment))__            if (previousTask != null) {_                throw new ResourceAlreadyExistsException("Trying to override task with id {" + taskId + "}")__            }_            return this__        };adds,a,new,task,to,the,builder,p,after,the,task,is,added,its,id,can,be,found,by,calling,link,get,last,allocation,id,method;public,params,extends,persistent,task,params,builder,add,task,string,task,id,string,task,name,params,params,assignment,assignment,changed,true,persistent,task,previous,task,tasks,put,task,id,new,persistent,task,task,id,task,name,params,get,next,allocation,id,assignment,if,previous,task,null,throw,new,resource,already,exists,exception,trying,to,override,task,with,id,task,id,return,this
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1524684173;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1527152864;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1527878678;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1528103657;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1528129613;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1529076503;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1535139672;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1548161085;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public boolean isChanged();1548259585;Returns true if any the task list was changed since the builder was created;public boolean isChanged() {_            return changed__        };returns,true,if,any,the,task,list,was,changed,since,the,builder,was,created;public,boolean,is,changed,return,changed
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskState(final String taskId, final PersistentTaskState taskState);1529076503;Updates the task state;public Builder updateTaskState(final String taskId, final PersistentTaskState taskState) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, taskState))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,state;public,builder,update,task,state,final,string,task,id,final,persistent,task,state,task,state,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,task,state,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskState(final String taskId, final PersistentTaskState taskState);1535139672;Updates the task state;public Builder updateTaskState(final String taskId, final PersistentTaskState taskState) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, taskState))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,state;public,builder,update,task,state,final,string,task,id,final,persistent,task,state,task,state,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,task,state,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskState(final String taskId, final PersistentTaskState taskState);1548161085;Updates the task state;public Builder updateTaskState(final String taskId, final PersistentTaskState taskState) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, taskState))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,state;public,builder,update,task,state,final,string,task,id,final,persistent,task,state,task,state,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,task,state,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public Builder updateTaskState(final String taskId, final PersistentTaskState taskState);1548259585;Updates the task state;public Builder updateTaskState(final String taskId, final PersistentTaskState taskState) {_            PersistentTask<?> taskInProgress = tasks.get(taskId)__            if (taskInProgress != null) {_                changed = true__                tasks.put(taskId, new PersistentTask<>(taskInProgress, taskState))__            } else {_                throw new ResourceNotFoundException("cannot update task with id {" + taskId + "}, the task no longer exists")__            }_            return this__        };updates,the,task,state;public,builder,update,task,state,final,string,task,id,final,persistent,task,state,task,state,persistent,task,task,in,progress,tasks,get,task,id,if,task,in,progress,null,changed,true,tasks,put,task,id,new,persistent,task,task,in,progress,task,state,else,throw,new,resource,not,found,exception,cannot,update,task,with,id,task,id,the,task,no,longer,exists,return,this
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1524684173;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1527152864;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1527878678;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1528103657;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1528129613;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1529076503;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1535139672;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1548161085;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
PersistentTasksCustomMetaData -> Builder -> public boolean hasTask(String taskId);1548259585;Checks if the task is currently present in the list;public boolean hasTask(String taskId) {_            return tasks.containsKey(taskId)__        };checks,if,the,task,is,currently,present,in,the,list;public,boolean,has,task,string,task,id,return,tasks,contains,key,task,id
