commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns whether changes were made  */ ;/**  * Returns whether changes were made  */ public boolean isChanged() {     return changed. }
false;public;2;6;;@Override public void shardInitialized(ShardRouting unassignedShard, ShardRouting initializedShard) {     assert unassignedShard.unassigned() : "expected unassigned shard " + unassignedShard.     assert initializedShard.initializing() : "expected initializing shard " + initializedShard.     setChanged(). }
false;public;2;6;;@Override public void shardStarted(ShardRouting initializingShard, ShardRouting startedShard) {     assert initializingShard.initializing() : "expected initializing shard " + initializingShard.     assert startedShard.started() : "expected started shard " + startedShard.     setChanged(). }
false;public;2;6;;@Override public void relocationStarted(ShardRouting startedShard, ShardRouting targetRelocatingShard) {     assert startedShard.started() : "expected started shard " + startedShard.     assert targetRelocatingShard.isRelocationTarget() : "expected relocation target shard " + targetRelocatingShard.     setChanged(). }
false;public;2;5;;@Override public void unassignedInfoUpdated(ShardRouting unassignedShard, UnassignedInfo newUnassignedInfo) {     assert unassignedShard.unassigned() : "expected unassigned shard " + unassignedShard.     setChanged(). }
false;public;2;5;;@Override public void shardFailed(ShardRouting failedShard, UnassignedInfo unassignedInfo) {     assert failedShard.assignedToNode() : "expected assigned shard " + failedShard.     setChanged(). }
false;public;1;5;;@Override public void relocationCompleted(ShardRouting removedRelocationSource) {     assert removedRelocationSource.relocating() : "expected relocating shard " + removedRelocationSource.     setChanged(). }
false;public;1;6;;@Override public void relocationSourceRemoved(ShardRouting removedReplicaRelocationSource) {     assert removedReplicaRelocationSource.primary() == false && removedReplicaRelocationSource.isRelocationTarget() : "expected replica relocation target shard " + removedReplicaRelocationSource.     setChanged(). }
false;public;1;5;;@Override public void replicaPromoted(ShardRouting replicaShard) {     assert replicaShard.started() && replicaShard.primary() == false : "expected started replica shard " + replicaShard.     setChanged(). }
false;public;2;10;;@Override public void initializedReplicaReinitialized(ShardRouting oldReplica, ShardRouting reinitializedReplica) {     assert oldReplica.initializing() && oldReplica.primary() == false : "expected initializing replica shard " + oldReplica.     assert reinitializedReplica.initializing() && reinitializedReplica.primary() == false : "expected reinitialized replica shard " + reinitializedReplica.     assert oldReplica.allocationId().getId().equals(reinitializedReplica.allocationId().getId()) == false : "expected allocation id to change for reinitialized replica shard (old: " + oldReplica + " new: " + reinitializedReplica + ")".     setChanged(). }
true;private;0;3;/**  * Marks the allocation as changed.  */ ;/**  * Marks the allocation as changed.  */ private void setChanged() {     changed = true. }
