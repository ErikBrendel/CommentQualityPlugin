commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;@Override protected void doStart() { }
false;protected;0;3;;@Override protected void doStop() { }
false;protected;0;3;;@Override protected void doClose() { }
false;public;1;5;;@Override public ClusterState execute(ClusterState currentState) {     rerouting.set(false).     return allocationService.reroute(currentState, reason). }
false;public;1;5;;@Override public void onNoLongerMaster(String source) {     rerouting.set(false). // no biggie }
false;public;2;12;;@Override public void onFailure(String source, Exception e) {     rerouting.set(false).     ClusterState state = clusterService.state().     if (logger.isTraceEnabled()) {         logger.error(() -> new ParameterizedMessage("unexpected failure during [{}], current state:\n{}", source, state), e).     } else {         logger.error(() -> new ParameterizedMessage("unexpected failure during [{}], current state version [{}]", source, state.version()), e).     } }
true;public,final;1;43;/**  * Initiates a reroute.  */ ;/**  * Initiates a reroute.  */ public final void reroute(String reason) {     try {         if (lifecycle.stopped()) {             return.         }         if (rerouting.compareAndSet(false, true) == false) {             logger.trace("already has pending reroute, ignoring {}", reason).             return.         }         logger.trace("rerouting {}", reason).         clusterService.submitStateUpdateTask(CLUSTER_UPDATE_TASK_SOURCE + "(" + reason + ")", new ClusterStateUpdateTask(Priority.HIGH) {              @Override             public ClusterState execute(ClusterState currentState) {                 rerouting.set(false).                 return allocationService.reroute(currentState, reason).             }              @Override             public void onNoLongerMaster(String source) {                 rerouting.set(false).             // no biggie             }              @Override             public void onFailure(String source, Exception e) {                 rerouting.set(false).                 ClusterState state = clusterService.state().                 if (logger.isTraceEnabled()) {                     logger.error(() -> new ParameterizedMessage("unexpected failure during [{}], current state:\n{}", source, state), e).                 } else {                     logger.error(() -> new ParameterizedMessage("unexpected failure during [{}], current state version [{}]", source, state.version()), e).                 }             }         }).     } catch (Exception e) {         rerouting.set(false).         ClusterState state = clusterService.state().         logger.warn(() -> new ParameterizedMessage("failed to reroute routing table, current state:\n{}", state), e).     } }
