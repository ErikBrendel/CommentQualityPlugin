# id;timestamp;commentText;codeText;commentWords;codeWords
ClusterBlocks -> public boolean hasGlobalBlockWithStatus(final RestStatus status);1546850547;Is there a global block with the provided status?;public boolean hasGlobalBlockWithStatus(final RestStatus status) {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.status().equals(status)) {_                return true__            }_        }_        return false__    };is,there,a,global,block,with,the,provided,status;public,boolean,has,global,block,with,status,final,rest,status,status,for,cluster,block,cluster,block,global,if,cluster,block,status,equals,status,return,true,return,false
ClusterBlocks -> public boolean hasGlobalBlockWithStatus(final RestStatus status);1547030937;Is there a global block with the provided status?;public boolean hasGlobalBlockWithStatus(final RestStatus status) {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.status().equals(status)) {_                return true__            }_        }_        return false__    };is,there,a,global,block,with,the,provided,status;public,boolean,has,global,block,with,status,final,rest,status,status,for,cluster,block,cluster,block,global,if,cluster,block,status,equals,status,return,true,return,false
ClusterBlocks -> public boolean hasGlobalBlockWithStatus(final RestStatus status);1550598247;Is there a global block with the provided status?;public boolean hasGlobalBlockWithStatus(final RestStatus status) {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.status().equals(status)) {_                return true__            }_        }_        return false__    };is,there,a,global,block,with,the,provided,status;public,boolean,has,global,block,with,status,final,rest,status,status,for,cluster,block,cluster,block,global,if,cluster,block,status,equals,status,return,true,return,false
ClusterBlocks -> public boolean disableStatePersistence();1524684173;Returns <tt>true</tt> if one of the global blocks as its disable state persistence flag set.;public boolean disableStatePersistence() {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.disableStatePersistence()) {_                return true__            }_        }_        return false__    };returns,tt,true,tt,if,one,of,the,global,blocks,as,its,disable,state,persistence,flag,set;public,boolean,disable,state,persistence,for,cluster,block,cluster,block,global,if,cluster,block,disable,state,persistence,return,true,return,false
ClusterBlocks -> public boolean disableStatePersistence();1525334055;Returns {@code true} if one of the global blocks as its disable state persistence flag set.;public boolean disableStatePersistence() {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.disableStatePersistence()) {_                return true__            }_        }_        return false__    };returns,code,true,if,one,of,the,global,blocks,as,its,disable,state,persistence,flag,set;public,boolean,disable,state,persistence,for,cluster,block,cluster,block,global,if,cluster,block,disable,state,persistence,return,true,return,false
ClusterBlocks -> public boolean disableStatePersistence();1546850547;Returns {@code true} if one of the global blocks as its disable state persistence flag set.;public boolean disableStatePersistence() {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.disableStatePersistence()) {_                return true__            }_        }_        return false__    };returns,code,true,if,one,of,the,global,blocks,as,its,disable,state,persistence,flag,set;public,boolean,disable,state,persistence,for,cluster,block,cluster,block,global,if,cluster,block,disable,state,persistence,return,true,return,false
ClusterBlocks -> public boolean disableStatePersistence();1547030937;Returns {@code true} if one of the global blocks as its disable state persistence flag set.;public boolean disableStatePersistence() {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.disableStatePersistence()) {_                return true__            }_        }_        return false__    };returns,code,true,if,one,of,the,global,blocks,as,its,disable,state,persistence,flag,set;public,boolean,disable,state,persistence,for,cluster,block,cluster,block,global,if,cluster,block,disable,state,persistence,return,true,return,false
ClusterBlocks -> public boolean disableStatePersistence();1550598247;Returns {@code true} if one of the global blocks as its disable state persistence flag set.;public boolean disableStatePersistence() {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.disableStatePersistence()) {_                return true__            }_        }_        return false__    };returns,code,true,if,one,of,the,global,blocks,as,its,disable,state,persistence,flag,set;public,boolean,disable,state,persistence,for,cluster,block,cluster,block,global,if,cluster,block,disable,state,persistence,return,true,return,false
ClusterBlocks -> public ClusterBlockException indicesAllowReleaseResources(String[] indices);1524684173;Returns <code>true</code> iff non of the given have a {@link ClusterBlockLevel#METADATA_WRITE} in place where the_{@link ClusterBlock#isAllowReleaseResources()} returns <code>false</code>. This is used in places where resources will be released_like the deletion of an index to free up resources on nodes._@param indices the indices to check;public ClusterBlockException indicesAllowReleaseResources(String[] indices) {_        final Function<String, Stream<ClusterBlock>> blocksForIndexAtLevel = index ->_            blocksForIndex(ClusterBlockLevel.METADATA_WRITE, index).stream()__        Stream<ClusterBlock> blocks = concat(_            global(ClusterBlockLevel.METADATA_WRITE).stream(),_            Stream.of(indices).flatMap(blocksForIndexAtLevel)).filter(clusterBlock -> clusterBlock.isAllowReleaseResources() == false)__        Set<ClusterBlock> clusterBlocks = unmodifiableSet(blocks.collect(toSet()))__        if (clusterBlocks.isEmpty()) {_            return null__        }_        return new ClusterBlockException(clusterBlocks)__    };returns,code,true,code,iff,non,of,the,given,have,a,link,cluster,block,level,in,place,where,the,link,cluster,block,is,allow,release,resources,returns,code,false,code,this,is,used,in,places,where,resources,will,be,released,like,the,deletion,of,an,index,to,free,up,resources,on,nodes,param,indices,the,indices,to,check;public,cluster,block,exception,indices,allow,release,resources,string,indices,final,function,string,stream,cluster,block,blocks,for,index,at,level,index,blocks,for,index,cluster,block,level,index,stream,stream,cluster,block,blocks,concat,global,cluster,block,level,stream,stream,of,indices,flat,map,blocks,for,index,at,level,filter,cluster,block,cluster,block,is,allow,release,resources,false,set,cluster,block,cluster,blocks,unmodifiable,set,blocks,collect,to,set,if,cluster,blocks,is,empty,return,null,return,new,cluster,block,exception,cluster,blocks
ClusterBlocks -> public ClusterBlockException indicesAllowReleaseResources(String[] indices);1525334055;Returns <code>true</code> iff non of the given have a {@link ClusterBlockLevel#METADATA_WRITE} in place where the_{@link ClusterBlock#isAllowReleaseResources()} returns <code>false</code>. This is used in places where resources will be released_like the deletion of an index to free up resources on nodes._@param indices the indices to check;public ClusterBlockException indicesAllowReleaseResources(String[] indices) {_        final Function<String, Stream<ClusterBlock>> blocksForIndexAtLevel = index ->_            blocksForIndex(ClusterBlockLevel.METADATA_WRITE, index).stream()__        Stream<ClusterBlock> blocks = concat(_            global(ClusterBlockLevel.METADATA_WRITE).stream(),_            Stream.of(indices).flatMap(blocksForIndexAtLevel)).filter(clusterBlock -> clusterBlock.isAllowReleaseResources() == false)__        Set<ClusterBlock> clusterBlocks = unmodifiableSet(blocks.collect(toSet()))__        if (clusterBlocks.isEmpty()) {_            return null__        }_        return new ClusterBlockException(clusterBlocks)__    };returns,code,true,code,iff,non,of,the,given,have,a,link,cluster,block,level,in,place,where,the,link,cluster,block,is,allow,release,resources,returns,code,false,code,this,is,used,in,places,where,resources,will,be,released,like,the,deletion,of,an,index,to,free,up,resources,on,nodes,param,indices,the,indices,to,check;public,cluster,block,exception,indices,allow,release,resources,string,indices,final,function,string,stream,cluster,block,blocks,for,index,at,level,index,blocks,for,index,cluster,block,level,index,stream,stream,cluster,block,blocks,concat,global,cluster,block,level,stream,stream,of,indices,flat,map,blocks,for,index,at,level,filter,cluster,block,cluster,block,is,allow,release,resources,false,set,cluster,block,cluster,blocks,unmodifiable,set,blocks,collect,to,set,if,cluster,blocks,is,empty,return,null,return,new,cluster,block,exception,cluster,blocks
ClusterBlocks -> public ClusterBlockException indicesAllowReleaseResources(String[] indices);1546850547;Returns <code>true</code> iff non of the given have a {@link ClusterBlockLevel#METADATA_WRITE} in place where the_{@link ClusterBlock#isAllowReleaseResources()} returns <code>false</code>. This is used in places where resources will be released_like the deletion of an index to free up resources on nodes._@param indices the indices to check;public ClusterBlockException indicesAllowReleaseResources(String[] indices) {_        final Function<String, Stream<ClusterBlock>> blocksForIndexAtLevel = index ->_            blocksForIndex(ClusterBlockLevel.METADATA_WRITE, index).stream()__        Stream<ClusterBlock> blocks = concat(_            global(ClusterBlockLevel.METADATA_WRITE).stream(),_            Stream.of(indices).flatMap(blocksForIndexAtLevel)).filter(clusterBlock -> clusterBlock.isAllowReleaseResources() == false)__        Set<ClusterBlock> clusterBlocks = unmodifiableSet(blocks.collect(toSet()))__        if (clusterBlocks.isEmpty()) {_            return null__        }_        return new ClusterBlockException(clusterBlocks)__    };returns,code,true,code,iff,non,of,the,given,have,a,link,cluster,block,level,in,place,where,the,link,cluster,block,is,allow,release,resources,returns,code,false,code,this,is,used,in,places,where,resources,will,be,released,like,the,deletion,of,an,index,to,free,up,resources,on,nodes,param,indices,the,indices,to,check;public,cluster,block,exception,indices,allow,release,resources,string,indices,final,function,string,stream,cluster,block,blocks,for,index,at,level,index,blocks,for,index,cluster,block,level,index,stream,stream,cluster,block,blocks,concat,global,cluster,block,level,stream,stream,of,indices,flat,map,blocks,for,index,at,level,filter,cluster,block,cluster,block,is,allow,release,resources,false,set,cluster,block,cluster,blocks,unmodifiable,set,blocks,collect,to,set,if,cluster,blocks,is,empty,return,null,return,new,cluster,block,exception,cluster,blocks
ClusterBlocks -> public ClusterBlockException indicesAllowReleaseResources(String[] indices);1547030937;Returns <code>true</code> iff non of the given have a {@link ClusterBlockLevel#METADATA_WRITE} in place where the_{@link ClusterBlock#isAllowReleaseResources()} returns <code>false</code>. This is used in places where resources will be released_like the deletion of an index to free up resources on nodes._@param indices the indices to check;public ClusterBlockException indicesAllowReleaseResources(String[] indices) {_        final Function<String, Stream<ClusterBlock>> blocksForIndexAtLevel = index ->_            blocksForIndex(ClusterBlockLevel.METADATA_WRITE, index).stream()__        Stream<ClusterBlock> blocks = concat(_            global(ClusterBlockLevel.METADATA_WRITE).stream(),_            Stream.of(indices).flatMap(blocksForIndexAtLevel)).filter(clusterBlock -> clusterBlock.isAllowReleaseResources() == false)__        Set<ClusterBlock> clusterBlocks = unmodifiableSet(blocks.collect(toSet()))__        if (clusterBlocks.isEmpty()) {_            return null__        }_        return new ClusterBlockException(clusterBlocks)__    };returns,code,true,code,iff,non,of,the,given,have,a,link,cluster,block,level,in,place,where,the,link,cluster,block,is,allow,release,resources,returns,code,false,code,this,is,used,in,places,where,resources,will,be,released,like,the,deletion,of,an,index,to,free,up,resources,on,nodes,param,indices,the,indices,to,check;public,cluster,block,exception,indices,allow,release,resources,string,indices,final,function,string,stream,cluster,block,blocks,for,index,at,level,index,blocks,for,index,cluster,block,level,index,stream,stream,cluster,block,blocks,concat,global,cluster,block,level,stream,stream,of,indices,flat,map,blocks,for,index,at,level,filter,cluster,block,cluster,block,is,allow,release,resources,false,set,cluster,block,cluster,blocks,unmodifiable,set,blocks,collect,to,set,if,cluster,blocks,is,empty,return,null,return,new,cluster,block,exception,cluster,blocks
ClusterBlocks -> public ClusterBlockException indicesAllowReleaseResources(String[] indices);1550598247;Returns <code>true</code> iff non of the given have a {@link ClusterBlockLevel#METADATA_WRITE} in place where the_{@link ClusterBlock#isAllowReleaseResources()} returns <code>false</code>. This is used in places where resources will be released_like the deletion of an index to free up resources on nodes._@param indices the indices to check;public ClusterBlockException indicesAllowReleaseResources(String[] indices) {_        final Function<String, Stream<ClusterBlock>> blocksForIndexAtLevel = index ->_            blocksForIndex(ClusterBlockLevel.METADATA_WRITE, index).stream()__        Stream<ClusterBlock> blocks = concat(_            global(ClusterBlockLevel.METADATA_WRITE).stream(),_            Stream.of(indices).flatMap(blocksForIndexAtLevel)).filter(clusterBlock -> clusterBlock.isAllowReleaseResources() == false)__        Set<ClusterBlock> clusterBlocks = unmodifiableSet(blocks.collect(toSet()))__        if (clusterBlocks.isEmpty()) {_            return null__        }_        return new ClusterBlockException(clusterBlocks)__    };returns,code,true,code,iff,non,of,the,given,have,a,link,cluster,block,level,in,place,where,the,link,cluster,block,is,allow,release,resources,returns,code,false,code,this,is,used,in,places,where,resources,will,be,released,like,the,deletion,of,an,index,to,free,up,resources,on,nodes,param,indices,the,indices,to,check;public,cluster,block,exception,indices,allow,release,resources,string,indices,final,function,string,stream,cluster,block,blocks,for,index,at,level,index,blocks,for,index,cluster,block,level,index,stream,stream,cluster,block,blocks,concat,global,cluster,block,level,stream,stream,of,indices,flat,map,blocks,for,index,at,level,filter,cluster,block,cluster,block,is,allow,release,resources,false,set,cluster,block,cluster,blocks,unmodifiable,set,blocks,collect,to,set,if,cluster,blocks,is,empty,return,null,return,new,cluster,block,exception,cluster,blocks
ClusterBlocks -> public boolean hasGlobalBlock(RestStatus status);1524684173;Is there a global block with the provided status?;public boolean hasGlobalBlock(RestStatus status) {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.status().equals(status)) {_                return true__            }_        }_        return false__    };is,there,a,global,block,with,the,provided,status;public,boolean,has,global,block,rest,status,status,for,cluster,block,cluster,block,global,if,cluster,block,status,equals,status,return,true,return,false
ClusterBlocks -> public boolean hasGlobalBlock(RestStatus status);1525334055;Is there a global block with the provided status?;public boolean hasGlobalBlock(RestStatus status) {_        for (ClusterBlock clusterBlock : global) {_            if (clusterBlock.status().equals(status)) {_                return true__            }_        }_        return false__    };is,there,a,global,block,with,the,provided,status;public,boolean,has,global,block,rest,status,status,for,cluster,block,cluster,block,global,if,cluster,block,status,equals,status,return,true,return,false
