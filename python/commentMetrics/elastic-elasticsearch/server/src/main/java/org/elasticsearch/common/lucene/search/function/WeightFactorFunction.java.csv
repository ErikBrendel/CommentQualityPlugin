commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public double score(int docId, float subQueryScore) throws IOException {     return leafFunction.score(docId, subQueryScore) * getWeight(). }
false;public;2;7;;@Override public Explanation explainScore(int docId, Explanation subQueryScore) throws IOException {     Explanation functionExplanation = leafFunction.explainScore(docId, subQueryScore).     return Explanation.match(functionExplanation.getValue().floatValue() * (float) getWeight(), "product of:", functionExplanation, explainWeight()). }
false;public;1;18;;@Override public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {     final LeafScoreFunction leafFunction = scoreFunction.getLeafScoreFunction(ctx).     return new LeafScoreFunction() {          @Override         public double score(int docId, float subQueryScore) throws IOException {             return leafFunction.score(docId, subQueryScore) * getWeight().         }          @Override         public Explanation explainScore(int docId, Explanation subQueryScore) throws IOException {             Explanation functionExplanation = leafFunction.explainScore(docId, subQueryScore).             return Explanation.match(functionExplanation.getValue().floatValue() * (float) getWeight(), "product of:", functionExplanation, explainWeight()).         }     }. }
false;public;0;4;;@Override public boolean needsScores() {     return scoreFunction.needsScores(). }
false;public;0;3;;public Explanation explainWeight() {     return Explanation.match(getWeight(), "weight"). }
false;public;0;4;;@Override public float getWeight() {     return weight. }
false;public;0;3;;public ScoreFunction getScoreFunction() {     return scoreFunction. }
false;protected;1;6;;@Override protected boolean doEquals(ScoreFunction other) {     WeightFactorFunction weightFactorFunction = (WeightFactorFunction) other.     return this.weight == weightFactorFunction.weight && Objects.equals(this.scoreFunction, weightFactorFunction.scoreFunction). }
false;protected;0;4;;@Override protected int doHashCode() {     return Objects.hash(weight, scoreFunction). }
false;public;2;4;;@Override public double score(int docId, float subQueryScore) {     return 1.0. }
false;public;2;4;;@Override public Explanation explainScore(int docId, Explanation subQueryScore) {     return Explanation.match(1.0f, "constant score 1.0 - no function provided"). }
false;public;1;14;;@Override public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) {     return new LeafScoreFunction() {          @Override         public double score(int docId, float subQueryScore) {             return 1.0.         }          @Override         public Explanation explainScore(int docId, Explanation subQueryScore) {             return Explanation.match(1.0f, "constant score 1.0 - no function provided").         }     }. }
false;public;0;4;;@Override public boolean needsScores() {     return false. }
false;protected;1;4;;@Override protected boolean doEquals(ScoreFunction other) {     return true. }
false;protected;0;4;;@Override protected int doHashCode() {     return 0. }
