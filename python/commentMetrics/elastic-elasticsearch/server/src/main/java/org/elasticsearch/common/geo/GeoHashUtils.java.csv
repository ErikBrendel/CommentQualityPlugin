commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * **********************  *  31 bit encoding utils *  * ***********************  */ ;/**  * **********************  *  31 bit encoding utils *  * ***********************  */ public static long encodeLatLon(final double lat, final double lon) {     return MortonEncoder.encode(lat, lon) >>> 2. }
true;public,static,final;3;5;/**  * Encode lon/lat to the geohash based long format (lon/lat interleaved, 4 least significant bits = level)  */ ;/**  * Encode lon/lat to the geohash based long format (lon/lat interleaved, 4 least significant bits = level)  */ public static final long longEncode(final double lon, final double lat, final int level) {     // shift to appropriate level     final short msf = (short) (((12 - level) * 5) + MORTON_OFFSET).     return ((BitUtil.flipFlop(encodeLatLon(lat, lon)) >>> msf) << 4) | level. }
true;private,static;2;14;/**  * Encode from geohash string to the geohash based long format (lon/lat interleaved, 4 least significant bits = level)  */ ;/**  * Encode from geohash string to the geohash based long format (lon/lat interleaved, 4 least significant bits = level)  */ private static long longEncode(final String hash, int length) {     int level = length - 1.     long b.     long l = 0L.     for (char c : hash.toCharArray()) {         b = (long) (BASE_32_STRING.indexOf(c)).         l |= (b << (level-- * 5)).         if (level < 0) {             // We cannot handle more than 12 levels             break.         }     }     return (l << 4) | length. }
true;public,static;2;9;/**  * Encode an existing geohash long to the provided precision  */ ;/**  * Encode an existing geohash long to the provided precision  */ public static long longEncode(long geohash, int level) {     final short precision = (short) (geohash & 15).     if (precision == level) {         return geohash.     } else if (precision > level) {         return ((geohash >>> (((precision - level) * 5) + 4)) << 4) | level.     }     return ((geohash >>> 4) << (((level - precision) * 5) + 4) | level). }
true;public,static;2;5;/**  * Convert from a morton encoded long from a geohash encoded long  */ ;/**  * Convert from a morton encoded long from a geohash encoded long  */ public static long fromMorton(long morton, int level) {     long mFlipped = BitUtil.flipFlop(morton).     mFlipped >>>= (((GeoHashUtils.PRECISION - level) * 5) + MORTON_OFFSET).     return (mFlipped << 4) | level. }
true;public,static,final;1;11;/**  * Encode to a geohash string from the geohash based long format  */ ;/**  * Encode to a geohash string from the geohash based long format  */ public static final String stringEncode(long geoHashLong) {     int level = (int) geoHashLong & 15.     geoHashLong >>>= 4.     char[] chars = new char[level].     do {         chars[--level] = BASE_32[(int) (geoHashLong & 31L)].         geoHashLong >>>= 5.     } while (level > 0).     return new String(chars). }
true;public,static,final;2;3;/**  * Encode to a geohash string from full resolution longitude, latitude)  */ ;/**  * Encode to a geohash string from full resolution longitude, latitude)  */ public static final String stringEncode(final double lon, final double lat) {     return stringEncode(lon, lat, 12). }
true;public,static,final;3;6;/**  * Encode to a level specific geohash string from full resolution longitude, latitude  */ ;/**  * Encode to a level specific geohash string from full resolution longitude, latitude  */ public static final String stringEncode(final double lon, final double lat, final int level) {     // convert to geohashlong     final long ghLong = fromMorton(encodeLatLon(lat, lon), level).     return stringEncode(ghLong). }
true;public,static,final;1;3;/**  * Encode to a full precision geohash string from a given morton encoded long value  */ ;/**  * Encode to a full precision geohash string from a given morton encoded long value  */ public static final String stringEncodeFromMortonLong(final long hashedVal) throws Exception {     return stringEncode(hashedVal, PRECISION). }
true;public,static,final;2;15;/**  * Encode to a geohash string at a given level from a morton long  */ ;/**  * Encode to a geohash string at a given level from a morton long  */ public static final String stringEncodeFromMortonLong(long hashedVal, final int level) {     // bit twiddle to geohash (since geohash is a swapped (lon/lat) encoding)     hashedVal = BitUtil.flipFlop(hashedVal).     StringBuilder geoHash = new StringBuilder().     short precision = 0.     final short msf = (BITS << 1) - 5.     long mask = 31L << msf.     do {         geoHash.append(BASE_32[(int) ((mask & hashedVal) >>> (msf - (precision * 5)))]).         // next 5 bits         mask >>>= 5.     } while (++precision < level).     return geoHash.toString(). }
true;public,static,final;1;20;/**  * Encode to a morton long value from a given geohash string  */ ;/**  * Encode to a morton long value from a given geohash string  */ public static final long mortonEncode(final String hash) {     if (hash.isEmpty()) {         throw new IllegalArgumentException("empty geohash").     }     int level = 11.     long b.     long l = 0L.     for (char c : hash.toCharArray()) {         b = (long) (BASE_32_STRING.indexOf(c)).         if (b < 0) {             throw new IllegalArgumentException("unsupported symbol [" + c + "] in geohash [" + hash + "]").         }         l |= (b << ((level-- * 5) + MORTON_OFFSET)).         if (level < 0) {             // We cannot handle more than 12 levels             break.         }     }     return BitUtil.flipFlop(l). }
true;public,static,final;1;6;/**  * Encode to a morton long value from a given geohash long value  */ ;/**  * Encode to a morton long value from a given geohash long value  */ public static final long mortonEncode(final long geoHashLong) {     final int level = (int) (geoHashLong & 15).     final short odd = (short) (level & 1).     return BitUtil.flipFlop(((geoHashLong >>> 4) << odd) << (((12 - level) * 5) + (MORTON_OFFSET - odd))). }
false;private,static;2;3;;private static char encode(int x, int y) {     return BASE_32[((x & 1) + ((y & 1) * 2) + ((x & 2) * 2) + ((y & 2) * 4) + ((x & 4) * 4)) % 32]. }
true;public,static;1;21;/**  * Computes the bounding box coordinates from a given geohash  *  * @param geohash Geohash of the defined cell  * @return GeoRect rectangle defining the bounding box  */ ;/**  * Computes the bounding box coordinates from a given geohash  *  * @param geohash Geohash of the defined cell  * @return GeoRect rectangle defining the bounding box  */ public static Rectangle bbox(final String geohash) {     // bottom left is the coordinate     GeoPoint bottomLeft = GeoPoint.fromGeohash(geohash).     int len = Math.min(12, geohash.length()).     long ghLong = longEncode(geohash, len).     // shift away the level     ghLong >>>= 4.     // deinterleave     long lon = BitUtil.deinterleave(ghLong >>> 1).     long lat = BitUtil.deinterleave(ghLong).     if (lat < MAX_LAT_BITS) {         // add 1 to lat and lon to get topRight         GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int) (lat + 1), (int) (lon + 1)) << 4 | len).         return new Rectangle(bottomLeft.lat(), topRight.lat(), bottomLeft.lon(), topRight.lon()).     } else {         // We cannot go north of north pole, so just using 90 degrees instead of calculating it using         // add 1 to lon to get lon of topRight, we are going to use 90 for lat         GeoPoint topRight = GeoPoint.fromGeohash(BitUtil.interleave((int) lat, (int) (lon + 1)) << 4 | len).         return new Rectangle(bottomLeft.lat(), MAX_LAT_INCL, bottomLeft.lon(), topRight.lon()).     } }
true;public,static;1;3;/**  * Calculate all neighbors of a given geohash cell.  *  * @param geohash Geohash of the defined cell  * @return geohashes of all neighbor cells  */ ;/**  * Calculate all neighbors of a given geohash cell.  *  * @param geohash Geohash of the defined cell  * @return geohashes of all neighbor cells  */ public static Collection<? extends CharSequence> neighbors(String geohash) {     return addNeighbors(geohash, geohash.length(), new ArrayList<CharSequence>(8)). }
true;public,static,final;4;44;/**  * Calculate the geohash of a neighbor of a geohash  *  * @param geohash the geohash of a cell  * @param level   level of the geohash  * @param dx      delta of the first grid coordinate (must be -1, 0 or +1)  * @param dy      delta of the second grid coordinate (must be -1, 0 or +1)  * @return geohash of the defined cell  */ ;/**  * Calculate the geohash of a neighbor of a geohash  *  * @param geohash the geohash of a cell  * @param level   level of the geohash  * @param dx      delta of the first grid coordinate (must be -1, 0 or +1)  * @param dy      delta of the second grid coordinate (must be -1, 0 or +1)  * @return geohash of the defined cell  */ public static final String neighbor(String geohash, int level, int dx, int dy) {     int cell = BASE_32_STRING.indexOf(geohash.charAt(level - 1)).     // Decoding the Geohash bit pattern to determine grid coordinates     // first bit of x     int x0 = cell & 1.     // first bit of y     int y0 = cell & 2.     // second bit of x     int x1 = cell & 4.     // second bit of y     int y1 = cell & 8.     // third bit of x     int x2 = cell & 16.     // combine the bitpattern to grid coordinates.     // note that the semantics of x and y are swapping     // on each level     int x = x0 + (x1 / 2) + (x2 / 4).     int y = (y0 / 2) + (y1 / 4).     if (level == 1) {         // in north/south direction         if ((dy < 0 && y == 0) || (dy > 0 && y == 3)) {             return null.         } else {             return Character.toString(encode(x + dx, y + dy)).         }     } else {         // define grid coordinates for next level         final int nx = ((level % 2) == 1) ? (x + dx) : (x + dy).         final int ny = ((level % 2) == 1) ? (y + dy) : (y + dx).         // since x and y semantics are swapping on each level.         if (nx >= 0 && nx <= 7 && ny >= 0 && ny <= 3) {             return geohash.substring(0, level - 1) + encode(nx, ny).         } else {             String neighbor = neighbor(geohash, level - 1, dx, dy).             return (neighbor != null) ? neighbor + encode(nx, ny) : neighbor.         }     } }
true;public,static,final;2;3;/**  * Add all geohashes of the cells next to a given geohash to a list.  *  * @param geohash   Geohash of a specified cell  * @param neighbors list to add the neighbors to  * @return the given list  */ ;/**  * Add all geohashes of the cells next to a given geohash to a list.  *  * @param geohash   Geohash of a specified cell  * @param neighbors list to add the neighbors to  * @return the given list  */ public static final <E extends Collection<? super String>> E addNeighbors(String geohash, E neighbors) {     return addNeighbors(geohash, geohash.length(), neighbors). }
true;public,static,final;3;20;/**  * Add all geohashes of the cells next to a given geohash to a list.  *  * @param geohash   Geohash of a specified cell  * @param length    level of the given geohash  * @param neighbors list to add the neighbors to  * @return the given list  */ ;/**  * Add all geohashes of the cells next to a given geohash to a list.  *  * @param geohash   Geohash of a specified cell  * @param length    level of the given geohash  * @param neighbors list to add the neighbors to  * @return the given list  */ public static final <E extends Collection<? super String>> E addNeighbors(String geohash, int length, E neighbors) {     String south = neighbor(geohash, length, 0, -1).     String north = neighbor(geohash, length, 0, +1).     if (north != null) {         neighbors.add(neighbor(north, length, -1, 0)).         neighbors.add(north).         neighbors.add(neighbor(north, length, +1, 0)).     }     neighbors.add(neighbor(geohash, length, -1, 0)).     neighbors.add(neighbor(geohash, length, +1, 0)).     if (south != null) {         neighbors.add(neighbor(south, length, -1, 0)).         neighbors.add(south).         neighbors.add(neighbor(south, length, +1, 0)).     }     return neighbors. }
true;public,static,final;1;3;/**  * decode longitude value from morton encoded geo point  */ ;/**  * decode longitude value from morton encoded geo point  */ public static final double decodeLongitude(final long hash) {     return unscaleLon(BitUtil.deinterleave(hash)). }
true;public,static,final;1;3;/**  * decode latitude value from morton encoded geo point  */ ;/**  * decode latitude value from morton encoded geo point  */ public static final double decodeLatitude(final long hash) {     return unscaleLat(BitUtil.deinterleave(hash >>> 1)). }
false;private,static;1;3;;private static double unscaleLon(final long val) {     return (val / LON_SCALE) - 180. }
false;private,static;1;3;;private static double unscaleLat(final long val) {     return (val / LAT_SCALE) - 90. }
true;public,static,final;1;3;/**  * returns the latitude value from the string based geohash  */ ;/**  * returns the latitude value from the string based geohash  */ public static final double decodeLatitude(final String geohash) {     return decodeLatitude(mortonEncode(geohash)). }
true;public,static,final;1;3;/**  * returns the latitude value from the string based geohash  */ ;/**  * returns the latitude value from the string based geohash  */ public static final double decodeLongitude(final String geohash) {     return decodeLongitude(mortonEncode(geohash)). }
