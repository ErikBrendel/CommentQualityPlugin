commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeMap(this.clientOutgoingConnections, StreamOutput::writeString, StreamOutput::writeLong).     out.writeMap(this.nodeComputedStats, StreamOutput::writeString, (stream, stats) -> stats.writeTo(stream)). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject("adaptive_selection").     Set<String> allNodeIds = Sets.union(clientOutgoingConnections.keySet(), nodeComputedStats.keySet()).     for (String nodeId : allNodeIds) {         builder.startObject(nodeId).         ResponseCollectorService.ComputedNodeStats stats = nodeComputedStats.get(nodeId).         if (stats != null) {             long outgoingSearches = clientOutgoingConnections.getOrDefault(nodeId, 0L).             builder.field("outgoing_searches", outgoingSearches).             builder.field("avg_queue_size", stats.queueSize).             if (builder.humanReadable()) {                 builder.field("avg_service_time", new TimeValue((long) stats.serviceTime, TimeUnit.NANOSECONDS).toString()).             }             builder.field("avg_service_time_ns", (long) stats.serviceTime).             if (builder.humanReadable()) {                 builder.field("avg_response_time", new TimeValue((long) stats.responseTime, TimeUnit.NANOSECONDS).toString()).             }             builder.field("avg_response_time_ns", (long) stats.responseTime).             builder.field("rank", String.format(Locale.ROOT, "%.1f", stats.rank(outgoingSearches))).         }         builder.endObject().     }     builder.endObject().     return builder. }
true;public;0;3;/**  * Returns a map of node id to the outgoing search requests to that node  */ ;/**  * Returns a map of node id to the outgoing search requests to that node  */ public Map<String, Long> getOutgoingConnections() {     return clientOutgoingConnections. }
true;public;0;3;/**  * Returns a map of node id to the computed stats  */ ;/**  * Returns a map of node id to the computed stats  */ public Map<String, ResponseCollectorService.ComputedNodeStats> getComputedStats() {     return nodeComputedStats. }
true;public;0;5;/**  * Returns a map of node id to the ranking of the nodes based on the adaptive replica formula  */ ;/**  * Returns a map of node id to the ranking of the nodes based on the adaptive replica formula  */ public Map<String, Double> getRanks() {     return nodeComputedStats.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().rank(clientOutgoingConnections.getOrDefault(e.getKey(), 0L)))). }
