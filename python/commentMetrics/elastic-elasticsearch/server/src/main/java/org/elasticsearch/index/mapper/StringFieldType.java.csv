commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public Query termsQuery(List<?> values, QueryShardContext context) {     failIfNotIndexed().     BytesRef[] bytesRefs = new BytesRef[values.size()].     for (int i = 0. i < bytesRefs.length. i++) {         bytesRefs[i] = indexedValueForSearch(values.get(i)).     }     return new TermInSetQuery(name(), bytesRefs). }
false;public;5;7;;@Override public Query fuzzyQuery(Object value, Fuzziness fuzziness, int prefixLength, int maxExpansions, boolean transpositions) {     failIfNotIndexed().     return new FuzzyQuery(new Term(name(), indexedValueForSearch(value)), fuzziness.asDistance(BytesRefs.toString(value)), prefixLength, maxExpansions, transpositions). }
false;public;3;9;;@Override public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {     failIfNotIndexed().     PrefixQuery query = new PrefixQuery(new Term(name(), indexedValueForSearch(value))).     if (method != null) {         query.setRewriteMethod(method).     }     return query. }
false;public;3;12;;@Override public Query wildcardQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {     Query termQuery = termQuery(value, context).     if (termQuery instanceof MatchNoDocsQuery || termQuery instanceof MatchAllDocsQuery) {         return termQuery.     }     Term term = MappedFieldType.extractTerm(termQuery).     WildcardQuery query = new WildcardQuery(term).     QueryParsers.setRewriteMethod(query, method).     return query. }
false;public;5;10;;@Override public Query regexpQuery(String value, int flags, int maxDeterminizedStates, MultiTermQuery.RewriteMethod method, QueryShardContext context) {     failIfNotIndexed().     RegexpQuery query = new RegexpQuery(new Term(name(), indexedValueForSearch(value)), flags, maxDeterminizedStates).     if (method != null) {         query.setRewriteMethod(method).     }     return query. }
false;public;5;8;;@Override public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {     failIfNotIndexed().     return new TermRangeQuery(name(), lowerTerm == null ? null : indexedValueForSearch(lowerTerm), upperTerm == null ? null : indexedValueForSearch(upperTerm), includeLower, includeUpper). }
